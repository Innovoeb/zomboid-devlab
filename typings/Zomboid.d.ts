/** @noResolution */
declare module "Zomboid" {
  // File: java.d.ts
  ///////////////////////////////////////////////////////////////////

  export type KahluaTable = any;
  export namespace E {
    // (Unknown)
    export type E = any;
  }
  export namespace K {
    // (Unknown)
    export type K = any;
  }
  export namespace PO {
    // (Unknown)
    export type PO = any;
  }
  export namespace T {
    // (Unknown)
    export type T = any;
  }
  export namespace TypeK {
    // (Unknown)
    export type TypeK = any;
  }
  export namespace TypeV {
    // (Unknown)
    export type TypeV = any;
  }
  export namespace U {
    // (Unknown)
    export type U = any;
  }
  export namespace V {
    // (Unknown)
    export type V = any;
  }
  export namespace fmod.fmod {
    // fmod.fmod.Audio
    export type Audio = any;
    // fmod.fmod.BaseSoundListener
    export type BaseSoundListener = any;
    /** [ENUM] fmod.fmod.EmitterType */
    export class EmitterType {
      /* ENUM VALUES */
      static readonly Extra: EmitterType; 
      static readonly Footstep: EmitterType; 
      static readonly Voice: EmitterType; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): fmod.EmitterType[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): EmitterType;
      valueOf(arg0: string): fmod.EmitterType;
      values(): fmod.EmitterType[];
    }
    // fmod.fmod.FMODAudio extends java.lang.Object
    export class FMODAudio {
      private constructor();
      emitter?: zombie.audio.BaseSoundEmitter;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getName(): string;
      hashCode(): number;
      isPlaying(): boolean;
      notify(): void;
      notifyAll(): void;
      pause(): void;
      setName(arg0: string): void;
      setVolume(arg0: number): void;
      start(): void;
      stop(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // fmod.fmod.FMODFootstep
    export type FMODFootstep = any;
    // fmod.fmod.FMODSoundBank extends zombie.audio.BaseSoundBank
    export class FMODSoundBank {
      private constructor();
      footstepMap?: java.util.HashMap<string, fmod.FMODFootstep>;
      static instance?: zombie.audio.BaseSoundBank;
      voiceMap?: java.util.HashMap<string, fmod.FMODVoice>;
  
      addFootstep(arg0: string, arg1: string, arg2: string, arg3: string, arg4: string): void;
      addVoice(arg0: string, arg1: string, arg2: number): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getFootstep(arg0: string): fmod.FMODFootstep;
      getVoice(arg0: string): fmod.FMODVoice;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // fmod.fmod.FMODSoundEmitter extends zombie.audio.BaseSoundEmitter
    export class FMODSoundEmitter {
      private constructor();
      emitterType?: fmod.EmitterType;
      parameterUpdater?: fmod.IFMODParameterUpdater;
      parent?: zombie.iso.IsoObject;
      x: number;
      y: number;
      z: number;
  
      addParameter(arg0: zombie.audio.FMODParameter): void;
      clearParameters(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hasSoundsToStart(): boolean;
      hasSustainPoints(arg0: number): boolean;
      hashCode(): number;
      isEmpty(): boolean;
      isPlaying(arg0: string): boolean;
      notify(): void;
      notifyAll(): void;
      playAmbientLoopedImpl(arg0: string): number;
      playAmbientSound(arg0: string): number;
      playClip(arg0: zombie.audio.GameSoundClip, arg1: zombie.iso.IsoObject): number;
      playSound(arg0: string, arg1: number, arg2: number, arg3: number): number;
      playSoundImpl(arg0: string, arg1: zombie.iso.IsoObject): number;
      playSoundLooped(arg0: string): number;
      playSoundLoopedImpl(arg0: string): number;
      randomStart(): void;
      restart(arg0: number): boolean;
      set3D(arg0: number, arg1: boolean): void;
      setParameterValue(arg0: number, arg1: fmod.FMOD_STUDIO_PARAMETER_DESCRIPTION, arg2: number): void;
      setPitch(arg0: number, arg1: number): void;
      setPos(arg0: number, arg1: number, arg2: number): void;
      setTimelinePosition(arg0: number, arg1: string): void;
      setVolume(arg0: number, arg1: number): void;
      setVolumeAll(arg0: number): void;
      stopAll(): void;
      stopOrTriggerSound(arg0: number): void;
      stopOrTriggerSoundByName(arg0: string): void;
      stopSound(arg0: number): number;
      stopSoundByName(arg0: string): number;
      tick(): void;
      toString(): string;
      triggerCue(arg0: number): void;
      update(): void;
      wait(arg0: number): void;
    }
    // fmod.fmod.FMODVoice
    export type FMODVoice = any;
    // fmod.fmod.FMOD_STUDIO_EVENT_DESCRIPTION
    export type FMOD_STUDIO_EVENT_DESCRIPTION = any;
    // fmod.fmod.FMOD_STUDIO_PARAMETER_DESCRIPTION
    export type FMOD_STUDIO_PARAMETER_DESCRIPTION = any;
    // fmod.fmod.FMOD_STUDIO_PARAMETER_ID
    export type FMOD_STUDIO_PARAMETER_ID = any;
    // fmod.fmod.IFMODParameterUpdater
    export type IFMODParameterUpdater = any;
  }
  export namespace gnu.trove._function {
    // gnu.trove.function.TIntFunction
    export type TIntFunction = any;
    // gnu.trove.function.TObjectFunction
    export type TObjectFunction<T, R> = any;
  }
  export namespace gnu.trove.iterator {
    // gnu.trove.iterator.TIntIterator
    export type TIntIterator = any;
    // gnu.trove.iterator.TLongObjectIterator
    export type TLongObjectIterator<V> = any;
  }
  export namespace gnu.trove.list {
    // gnu.trove.list.TIntList
    export type TIntList = any;
  }
  export namespace gnu.trove.list.array {
    // gnu.trove.list.array.TFloatArrayList
    export type TFloatArrayList = any;
    // gnu.trove.list.array.TIntArrayList
    export type TIntArrayList = any;
    // gnu.trove.list.array.TShortArrayList
    export type TShortArrayList = any;
  }
  export namespace gnu.trove.map {
    // gnu.trove.map.TLongObjectMap
    export type TLongObjectMap<V> = any;
  }
  export namespace gnu.trove.map.hash {
    // gnu.trove.map.hash.THashMap extends gnu.trove.impl.hash.TObjectHash<K>
    export type THashMap<K, V> = any;
    // gnu.trove.map.hash.TIntObjectHashMap extends gnu.trove.impl.hash.TIntHash
    export type TIntObjectHashMap<V> = any;
  }
  export namespace gnu.trove.procedure {
    // gnu.trove.procedure.TIntProcedure
    export type TIntProcedure = any;
    // gnu.trove.procedure.TLongObjectProcedure
    export type TLongObjectProcedure<T> = any;
    // gnu.trove.procedure.TLongProcedure
    export type TLongProcedure = any;
    // gnu.trove.procedure.TObjectObjectProcedure
    export type TObjectObjectProcedure<K, V> = any;
    // gnu.trove.procedure.TObjectProcedure
    export type TObjectProcedure<T> = any;
  }
  export namespace gnu.trove.set {
    // gnu.trove.set.TLongSet
    export type TLongSet = any;
  }
  export namespace gnu.trove.set.hash {
    // gnu.trove.set.hash.TShortHashSet extends gnu.trove.impl.hash.TShortHash
    export type TShortHashSet = any;
  }
  export namespace java.awt {
    // java.awt.Dimension extends java.awt.geom.Dimension2D
    export type Dimension = any;
    // java.awt.Point extends java.awt.geom.Point2D
    export type Point = any;
    // java.awt.Rectangle extends java.awt.geom.Rectangle2D
    export type Rectangle = any;
  }
  export namespace java.awt.image {
    // java.awt.image.BufferedImage extends java.awt.Image
    export type BufferedImage = any;
  }
  export namespace java.io {
    // java.io.BufferedInputStream extends java.io.FilterInputStream
    export type BufferedInputStream = any;
    // java.io.BufferedReader extends java.io.Reader
    export class BufferedReader {
      private constructor();
      close(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      lines(): java.util.stream.Stream<string>;
      mark(arg0: number): void;
      markSupported(): boolean;
      notify(): void;
      notifyAll(): void;
      nullReader(): java.io.Reader;
      read(arg0: java.nio.CharBuffer): number;
      readLine(): string;
      ready(): boolean;
      reset(): void;
      skip(arg0: number): number;
      toString(): string;
      transferTo(arg0: java.io.Writer): number;
      wait(arg0: number): void;
    }
    // java.io.BufferedWriter extends java.io.Writer
    export class BufferedWriter {
      private constructor();
      append(arg0: java.lang.CharSequence): java.io.Writer;
      close(): void;
      equals(arg0: any): boolean;
      flush(): void;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      newLine(): void;
      notify(): void;
      notifyAll(): void;
      nullWriter(): java.io.Writer;
      toString(): string;
      wait(arg0: number): void;
      write(arg0: string[]): void;
    }
    // java.io.DataInputStream extends java.io.FilterInputStream
    export class DataInputStream {
      private constructor();
      available(): number;
      close(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      mark(arg0: number): void;
      markSupported(): boolean;
      notify(): void;
      notifyAll(): void;
      nullInputStream(): java.io.InputStream;
      read(): number;
      readAllBytes(): number[];
      readBoolean(): boolean;
      readByte(): number;
      readChar(): string;
      readDouble(): number;
      readFloat(): number;
      readFully(arg0: number[]): void;
      readInt(): number;
      readLine(): string;
      readLong(): number;
      readNBytes(arg0: number[], arg1: number, arg2: number): number;
      readShort(): number;
      readUTF(): string;
      readUnsignedByte(): number;
      readUnsignedShort(): number;
      reset(): void;
      skip(arg0: number): number;
      skipBytes(arg0: number): number;
      skipNBytes(arg0: number): void;
      toString(): string;
      transferTo(arg0: java.io.OutputStream): number;
      wait(arg0: number): void;
    }
    // java.io.DataOutputStream extends java.io.FilterOutputStream
    export class DataOutputStream {
      private constructor();
      close(): void;
      equals(arg0: any): boolean;
      flush(): void;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      nullOutputStream(): java.io.OutputStream;
      size(): number;
      toString(): string;
      wait(arg0: number): void;
      write(arg0: number[]): void;
      writeBoolean(arg0: boolean): void;
      writeByte(arg0: number): void;
      writeBytes(arg0: string): void;
      writeChar(arg0: number): void;
      writeChars(arg0: string): void;
      writeDouble(arg0: number): void;
      writeFloat(arg0: number): void;
      writeInt(arg0: number): void;
      writeLong(arg0: number): void;
      writeShort(arg0: number): void;
      writeUTF(arg0: string): void;
    }
    // java.io.File
    export type File = any;
    // java.io.FileDescriptor
    export type FileDescriptor = any;
    // java.io.InputStream
    export type InputStream = any;
    // java.io.ObjectInput
    export type ObjectInput = any;
    // java.io.ObjectOutput
    export type ObjectOutput = any;
    // java.io.ObjectOutputStream extends java.io.OutputStream
    export type ObjectOutputStream = any;
    // java.io.OutputStream
    export type OutputStream = any;
    // java.io.PrintStream extends java.io.FilterOutputStream
    export type PrintStream = any;
    // java.io.RandomAccessFile
    export type RandomAccessFile = any;
    // java.io.Reader
    export type Reader = any;
    // java.io.Writer
    export type Writer = any;
  }
  export namespace java.lang {
    // java.lang.CharSequence
    export type CharSequence = any;
    // java.lang.Class
    export type Class<T> = any;
    // java.lang.Enum
    export type Enum<E> = any;
    // java.lang.Iterable
    export type Iterable<T> = any;
    // java.lang.Math extends java.lang.Object
    export class Math {
      private constructor();
      static readonly E: number;
      static readonly PI: number;
  
      IEEEremainder(arg0: number, arg1: number): number;
      abs(arg0: number): number;
      absExact(arg0: number): number;
      acos(arg0: number): number;
      addExact(arg0: number, arg1: number): number;
      asin(arg0: number): number;
      atan(arg0: number): number;
      atan2(arg0: number, arg1: number): number;
      cbrt(arg0: number): number;
      ceil(arg0: number): number;
      copySign(arg0: number, arg1: number): number;
      cos(arg0: number): number;
      cosh(arg0: number): number;
      decrementExact(arg0: number): number;
      equals(arg0: any): boolean;
      exp(arg0: number): number;
      expm1(arg0: number): number;
      floor(arg0: number): number;
      floorDiv(arg0: number, arg1: number): number;
      floorMod(arg0: number, arg1: number): number;
      fma(arg0: number, arg1: number, arg2: number): number;
      getClass(): java.lang.Class<any>;
      getExponent(arg0: number): number;
      hashCode(): number;
      hypot(arg0: number, arg1: number): number;
      incrementExact(arg0: number): number;
      log(arg0: number): number;
      log10(arg0: number): number;
      log1p(arg0: number): number;
      max(arg0: number, arg1: number): number;
      min(arg0: number, arg1: number): number;
      multiplyExact(arg0: number, arg1: number): number;
      multiplyFull(arg0: number, arg1: number): number;
      multiplyHigh(arg0: number, arg1: number): number;
      negateExact(arg0: number): number;
      nextAfter(arg0: number, arg1: number): number;
      nextDown(arg0: number): number;
      nextUp(arg0: number): number;
      notify(): void;
      notifyAll(): void;
      pow(arg0: number, arg1: number): number;
      random(): number;
      rint(arg0: number): number;
      round(arg0: number): number;
      scalb(arg0: number, arg1: number): number;
      signum(arg0: number): number;
      sin(arg0: number): number;
      sinh(arg0: number): number;
      sqrt(arg0: number): number;
      subtractExact(arg0: number, arg1: number): number;
      tan(arg0: number): number;
      tanh(arg0: number): number;
      toDegrees(arg0: number): number;
      toIntExact(arg0: number): number;
      toRadians(arg0: number): number;
      toString(): string;
      ulp(arg0: number): number;
      wait(arg0: number): void;
    }
    // java.lang.Runnable
    export type Runnable = any;
    // java.lang.StackTraceElement
    export type StackTraceElement = any;
    // java.lang.Thread
    export type Thread = any;
    // java.lang.ThreadLocal
    export type ThreadLocal<T> = any;
    // java.lang.Throwable
    export type Throwable = any;
  }
  export namespace java.lang.reflect {
    // java.lang.reflect.Constructor extends java.lang.reflect.Executable
    export type Constructor<T> = any;
    // java.lang.reflect.Field extends java.lang.reflect.AccessibleObject
    export type Field = any;
    // java.lang.reflect.Method extends java.lang.reflect.Executable
    export type Method = any;
    // java.lang.reflect.Type
    export type Type = any;
  }
  export namespace java.net {
    // java.net.InetSocketAddress extends java.net.SocketAddress
    export type InetSocketAddress = any;
    // java.net.URI
    export type URI = any;
  }
  export namespace java.nio {
    // java.nio.ByteBuffer extends java.nio.Buffer
    export type ByteBuffer = any;
    // java.nio.CharBuffer extends java.nio.Buffer
    export type CharBuffer = any;
    // java.nio.FloatBuffer extends java.nio.Buffer
    export type FloatBuffer = any;
    // java.nio.IntBuffer extends java.nio.Buffer
    export type IntBuffer = any;
    // java.nio.ShortBuffer extends java.nio.Buffer
    export type ShortBuffer = any;
  }
  export namespace java.nio.channels {
    // java.nio.channels.FileChannel extends java.nio.channels.spi.AbstractInterruptibleChannel
    export type FileChannel = any;
  }
  export namespace java.nio.file {
    // java.nio.file.FileSystem
    export type FileSystem = any;
    // java.nio.file.Path
    export type Path = any;
  }
  export namespace java.text {
    // java.text.AttributedCharacterIterator
    export type AttributedCharacterIterator = any;
    // java.text.DateFormat extends java.text.Format
    export type DateFormat = any;
    // java.text.DateFormatSymbols
    export type DateFormatSymbols = any;
    // java.text.NumberFormat extends java.text.Format
    export type NumberFormat = any;
    // java.text.SimpleDateFormat extends java.text.DateFormat
    export class SimpleDateFormat {
      private constructor();
      static readonly AM_PM_FIELD: number;
      static readonly DATE_FIELD: number;
      static readonly DAY_OF_WEEK_FIELD: number;
      static readonly DAY_OF_WEEK_IN_MONTH_FIELD: number;
      static readonly DAY_OF_YEAR_FIELD: number;
      static readonly DEFAULT: number;
      static readonly ERA_FIELD: number;
      static readonly FULL: number;
      static readonly HOUR0_FIELD: number;
      static readonly HOUR1_FIELD: number;
      static readonly HOUR_OF_DAY0_FIELD: number;
      static readonly HOUR_OF_DAY1_FIELD: number;
      static readonly LONG: number;
      static readonly MEDIUM: number;
      static readonly MILLISECOND_FIELD: number;
      static readonly MINUTE_FIELD: number;
      static readonly MONTH_FIELD: number;
      static readonly SECOND_FIELD: number;
      static readonly SHORT: number;
      static readonly TIMEZONE_FIELD: number;
      static readonly WEEK_OF_MONTH_FIELD: number;
      static readonly WEEK_OF_YEAR_FIELD: number;
      static readonly YEAR_FIELD: number;
  
      applyLocalizedPattern(arg0: string): void;
      applyPattern(arg0: string): void;
      clone(): any;
      equals(arg0: any): boolean;
      format(arg0: any): string;
      formatToCharacterIterator(arg0: any): java.text.AttributedCharacterIterator;
      get2DigitYearStart(): java.util.Date;
      getAvailableLocales(): java.util.Locale[];
      getCalendar(): java.util.Calendar;
      getClass(): java.lang.Class<any>;
      getDateFormatSymbols(): java.text.DateFormatSymbols;
      getDateInstance(): java.text.DateFormat;
      getDateTimeInstance(): java.text.DateFormat;
      getInstance(): java.text.DateFormat;
      getNumberFormat(): java.text.NumberFormat;
      getTimeInstance(arg0: number, arg1: java.util.Locale): java.text.DateFormat;
      getTimeZone(): java.util.TimeZone;
      hashCode(): number;
      isLenient(): boolean;
      notify(): void;
      notifyAll(): void;
      parse(arg0: string): java.util.Date;
      parseObject(arg0: string): any;
      set2DigitYearStart(arg0: java.util.Date): void;
      setCalendar(arg0: java.util.Calendar): void;
      setDateFormatSymbols(arg0: java.text.DateFormatSymbols): void;
      setLenient(arg0: boolean): void;
      setNumberFormat(arg0: java.text.NumberFormat): void;
      setTimeZone(arg0: java.util.TimeZone): void;
      toLocalizedPattern(): string;
      toPattern(): string;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace java.time {
    // java.time.LocalDateTime
    export type LocalDateTime = any;
  }
  export namespace java.util {
    // java.util.AbstractList extends java.util.AbstractCollection<E>
    export type AbstractList<E> = any;
    // java.util.ArrayDeque extends java.util.AbstractCollection<E>
    export type ArrayDeque<E> = any;
    // java.util.ArrayList extends java.util.AbstractList<E>
    export class ArrayList<E> {
      private constructor();
      add(arg0: number, arg1: E): void;
      addAll(arg0: number, arg1: java.util.Collection<E>): boolean;
      clear(): void;
      clone(): any;
      contains(arg0: any): boolean;
      containsAll(arg0: java.util.Collection<any>): boolean;
      ensureCapacity(arg0: number): void;
      equals(arg0: any): boolean;
      forEach(arg0: java.util._function.Consumer<E>): void;
      get(arg0: number): E;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      indexOf(arg0: any): number;
      isEmpty(): boolean;
      iterator(): java.util.Iterator<E>;
      lastIndexOf(arg0: any): number;
      listIterator(arg0: number): java.util.ListIterator<E>;
      notify(): void;
      notifyAll(): void;
      parallelStream(): java.util.stream.Stream<any>;
      remove(arg0: number): E;
      removeAll(arg0: java.util.Collection<any>): boolean;
      removeIf(arg0: java.util._function.Predicate<E>): boolean;
      replaceAll(arg0: java.util._function.UnaryOperator<E>): void;
      retainAll(arg0: java.util.Collection<any>): boolean;
      set(arg0: number, arg1: E): E;
      size(): number;
      sort(arg0: java.util.Comparator<E>): void;
      spliterator(): java.util.Spliterator<E>;
      stream(): java.util.stream.Stream<any>;
      subList(arg0: number, arg1: number): java.util.List<E>;
      toArray<T>(arg0: java.util._function.IntFunction<T[]>): T[];
      toString(): string;
      trimToSize(): void;
      wait(arg0: number): void;
    }
    // java.util.BitSet
    export type BitSet = any;
    // java.util.Calendar
    export type Calendar = any;
    // java.util.Collection
    export type Collection<E> = any;
    // java.util.Comparator
    export type Comparator<T> = any;
    // java.util.Date
    export type Date = any;
    // java.util.Deque
    export type Deque<E> = any;
    // java.util.EnumMap extends java.util.AbstractMap<K, V>
    export class EnumMap<K, V> {
      private constructor();
      clear(): void;
      clone(): java.util.EnumMap<K, V>;
      compute(arg0: any, arg1: java.util._function.BiFunction<any, any, any>): any;
      computeIfAbsent(arg0: any, arg1: java.util._function.Function<any, any>): any;
      computeIfPresent(arg0: any, arg1: java.util._function.BiFunction<any, any, any>): any;
      containsKey(arg0: any): boolean;
      containsValue(arg0: any): boolean;
      entrySet(): java.util.Set<java.util.Map$Entry<K, V>>;
      equals(arg0: any): boolean;
      forEach(arg0: java.util._function.BiConsumer<any, any>): void;
      get(arg0: any): V;
      getClass(): java.lang.Class<any>;
      getOrDefault(arg0: any, arg1: any): any;
      hashCode(): number;
      isEmpty(): boolean;
      keySet(): java.util.Set<K>;
      merge(arg0: any, arg1: any, arg2: java.util._function.BiFunction<any, any, any>): any;
      notify(): void;
      notifyAll(): void;
      put(arg0: K, arg1: V): V;
      putAll(arg0: java.util.Map<K, V>): void;
      putIfAbsent(arg0: any, arg1: any): any;
      remove(arg0: any, arg1: any): boolean;
      replace(arg0: any, arg1: any, arg2: any): boolean;
      replaceAll(arg0: java.util._function.BiFunction<any, any, any>): void;
      size(): number;
      toString(): string;
      values(): java.util.Collection<V>;
      wait(arg0: number): void;
    }
    // java.util.Enumeration
    export type Enumeration<E> = any;
    // java.util.GregorianCalendar extends java.util.Calendar
    export type GregorianCalendar = any;
    // java.util.HashMap extends java.util.AbstractMap<K, V>
    export class HashMap<K, V> {
      private constructor();
      clear(): void;
      clone(): any;
      compute(arg0: K, arg1: java.util._function.BiFunction<K, V, V>): V;
      computeIfAbsent(arg0: K, arg1: java.util._function.Function<K, V>): V;
      computeIfPresent(arg0: K, arg1: java.util._function.BiFunction<K, V, V>): V;
      containsKey(arg0: any): boolean;
      containsValue(arg0: any): boolean;
      entrySet(): java.util.Set<java.util.Map$Entry<K, V>>;
      equals(arg0: any): boolean;
      forEach(arg0: java.util._function.BiConsumer<K, V>): void;
      get(arg0: any): V;
      getClass(): java.lang.Class<any>;
      getOrDefault(arg0: any, arg1: V): V;
      hashCode(): number;
      isEmpty(): boolean;
      keySet(): java.util.Set<K>;
      merge(arg0: K, arg1: V, arg2: java.util._function.BiFunction<V, V, V>): V;
      notify(): void;
      notifyAll(): void;
      put(arg0: K, arg1: V): V;
      putAll(arg0: java.util.Map<K, V>): void;
      putIfAbsent(arg0: K, arg1: V): V;
      remove(arg0: any): V;
      replace(arg0: K, arg1: V, arg2: V): boolean;
      replaceAll(arg0: java.util._function.BiFunction<K, V, V>): void;
      size(): number;
      toString(): string;
      values(): java.util.Collection<V>;
      wait(arg0: number): void;
    }
    // java.util.HashSet extends java.util.AbstractSet<E>
    export type HashSet<E> = any;
    // java.util.Iterator
    export class Iterator<E> {
      private constructor();
      forEachRemaining(arg0: java.util._function.Consumer<E>): void;
      hasNext(): boolean;
      next(): E;
      remove(): void;
    }
    // java.util.LinkedHashMap extends java.util.HashMap<K, V>
    export type LinkedHashMap<K, V> = any;
    // java.util.LinkedList extends java.util.AbstractSequentialList<E>
    export class LinkedList<E> {
      private constructor();
      add(arg0: number, arg1: E): void;
      addAll(arg0: java.util.Collection<E>): boolean;
      addFirst(arg0: E): void;
      addLast(arg0: E): void;
      clear(): void;
      clone(): any;
      contains(arg0: any): boolean;
      containsAll(arg0: java.util.Collection<any>): boolean;
      descendingIterator(): java.util.Iterator<E>;
      element(): E;
      equals(arg0: any): boolean;
      forEach(arg0: java.util._function.Consumer<any>): void;
      get(arg0: number): E;
      getClass(): java.lang.Class<any>;
      getFirst(): E;
      getLast(): E;
      hashCode(): number;
      indexOf(arg0: any): number;
      isEmpty(): boolean;
      iterator(): java.util.Iterator<any>;
      lastIndexOf(arg0: any): number;
      listIterator(): java.util.ListIterator<any>;
      notify(): void;
      notifyAll(): void;
      offer(arg0: E): boolean;
      offerFirst(arg0: E): boolean;
      offerLast(arg0: E): boolean;
      parallelStream(): java.util.stream.Stream<any>;
      peek(): E;
      peekFirst(): E;
      peekLast(): E;
      poll(): E;
      pollFirst(): E;
      pollLast(): E;
      pop(): E;
      push(arg0: E): void;
      remove(arg0: number): E;
      removeAll(arg0: java.util.Collection<any>): boolean;
      removeFirst(): E;
      removeFirstOccurrence(arg0: any): boolean;
      removeIf(arg0: java.util._function.Predicate<any>): boolean;
      removeLast(): E;
      removeLastOccurrence(arg0: any): boolean;
      replaceAll(arg0: java.util._function.UnaryOperator<any>): void;
      retainAll(arg0: java.util.Collection<any>): boolean;
      set(arg0: number, arg1: E): E;
      size(): number;
      sort(arg0: java.util.Comparator<any>): void;
      spliterator(): java.util.Spliterator<E>;
      stream(): java.util.stream.Stream<any>;
      subList(arg0: number, arg1: number): java.util.List<any>;
      toArray<T>(arg0: java.util._function.IntFunction<T[]>): T[];
      toString(): string;
      wait(arg0: number): void;
    }
    // java.util.List
    export type List<E> = any;
    // java.util.ListIterator
    export type ListIterator<E> = any;
    // java.util.Locale
    export type Locale = any;
    // java.util.Map
    export type Map<K, V> = any;
    // java.util.Map$Entry
    export type Map$Entry<K, V> = any;
    // java.util.Random
    export type Random = any;
    // java.util.Set
    export type Set<E> = any;
    // java.util.Spliterator
    export type Spliterator<T> = any;
    // java.util.Stack extends java.util.Vector<E>
    export class Stack<E> {
      private constructor();
      add(arg0: number, arg1: any): void;
      addAll(arg0: java.util.Collection<any>): boolean;
      addElement(arg0: any): void;
      capacity(): number;
      clear(): void;
      clone(): any;
      contains(arg0: any): boolean;
      containsAll(arg0: java.util.Collection<any>): boolean;
      copyInto(arg0: any[]): void;
      elementAt(arg0: number): any;
      elements(): java.util.Enumeration<any>;
      empty(): boolean;
      ensureCapacity(arg0: number): void;
      equals(arg0: any): boolean;
      firstElement(): any;
      forEach(arg0: java.util._function.Consumer<any>): void;
      get(arg0: number): any;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      indexOf(arg0: any, arg1: number): number;
      insertElementAt(arg0: any, arg1: number): void;
      isEmpty(): boolean;
      iterator(): java.util.Iterator<any>;
      lastElement(): any;
      lastIndexOf(arg0: any): number;
      listIterator(arg0: number): java.util.ListIterator<any>;
      notify(): void;
      notifyAll(): void;
      parallelStream(): java.util.stream.Stream<any>;
      peek(): E;
      pop(): E;
      push(arg0: E): E;
      remove(arg0: any): boolean;
      removeAll(arg0: java.util.Collection<any>): boolean;
      removeAllElements(): void;
      removeElement(arg0: any): boolean;
      removeElementAt(arg0: number): void;
      removeIf(arg0: java.util._function.Predicate<any>): boolean;
      replaceAll(arg0: java.util._function.UnaryOperator<any>): void;
      retainAll(arg0: java.util.Collection<any>): boolean;
      search(arg0: any): number;
      set(arg0: number, arg1: any): any;
      setElementAt(arg0: any, arg1: number): void;
      setSize(arg0: number): void;
      size(): number;
      sort(arg0: java.util.Comparator<any>): void;
      spliterator(): java.util.Spliterator<any>;
      stream(): java.util.stream.Stream<any>;
      subList(arg0: number, arg1: number): java.util.List<any>;
      toArray<T>(arg0: java.util._function.IntFunction<T[]>): T[];
      toString(): string;
      trimToSize(): void;
      wait(arg0: number): void;
    }
    // java.util.TimeZone
    export type TimeZone = any;
    // java.util.TreeMap extends java.util.AbstractMap<K, V>
    export type TreeMap<K, V> = any;
    // java.util.Vector extends java.util.AbstractList<E>
    export class Vector<E> {
      private constructor();
      add(arg0: number, arg1: E): void;
      addAll(arg0: java.util.Collection<E>): boolean;
      addElement(arg0: E): void;
      capacity(): number;
      clear(): void;
      clone(): any;
      contains(arg0: any): boolean;
      containsAll(arg0: java.util.Collection<any>): boolean;
      copyInto(arg0: any[]): void;
      elementAt(arg0: number): E;
      elements(): java.util.Enumeration<E>;
      ensureCapacity(arg0: number): void;
      equals(arg0: any): boolean;
      firstElement(): E;
      forEach(arg0: java.util._function.Consumer<E>): void;
      get(arg0: number): E;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      indexOf(arg0: any, arg1: number): number;
      insertElementAt(arg0: E, arg1: number): void;
      isEmpty(): boolean;
      iterator(): java.util.Iterator<E>;
      lastElement(): E;
      lastIndexOf(arg0: any): number;
      listIterator(arg0: number): java.util.ListIterator<E>;
      notify(): void;
      notifyAll(): void;
      parallelStream(): java.util.stream.Stream<any>;
      remove(arg0: any): boolean;
      removeAll(arg0: java.util.Collection<any>): boolean;
      removeAllElements(): void;
      removeElement(arg0: any): boolean;
      removeElementAt(arg0: number): void;
      removeIf(arg0: java.util._function.Predicate<E>): boolean;
      replaceAll(arg0: java.util._function.UnaryOperator<E>): void;
      retainAll(arg0: java.util.Collection<any>): boolean;
      set(arg0: number, arg1: E): E;
      setElementAt(arg0: E, arg1: number): void;
      setSize(arg0: number): void;
      size(): number;
      sort(arg0: java.util.Comparator<E>): void;
      spliterator(): java.util.Spliterator<E>;
      stream(): java.util.stream.Stream<any>;
      subList(arg0: number, arg1: number): java.util.List<E>;
      toArray<T>(arg0: java.util._function.IntFunction<T[]>): T[];
      toString(): string;
      trimToSize(): void;
      wait(arg0: number): void;
    }
  }
  export namespace java.util._function {
    // java.util.function.BiConsumer
    export type BiConsumer<T, U> = any;
    // java.util.function.BiFunction
    export type BiFunction<T, U, R> = any;
    // java.util.function.BooleanSupplier
    export type BooleanSupplier = any;
    // java.util.function.Consumer
    export type Consumer<T> = any;
    // java.util.function.Function
    export type Function<T, R> = any;
    // java.util.function.IntFunction
    export type IntFunction<R> = any;
    // java.util.function.Predicate
    export type Predicate<T> = any;
    // java.util.function.Supplier
    export type Supplier<T> = any;
    // java.util.function.ToDoubleFunction
    export type ToDoubleFunction<T> = any;
    // java.util.function.ToIntFunction
    export type ToIntFunction<T> = any;
    // java.util.function.ToLongFunction
    export type ToLongFunction<T> = any;
    // java.util.function.UnaryOperator
    export type UnaryOperator<T> = any;
  }
  export namespace java.util.concurrent {
    // java.util.concurrent.ConcurrentLinkedQueue extends java.util.AbstractQueue<E>
    export type ConcurrentLinkedQueue<E> = any;
  }
  export namespace java.util.concurrent.locks {
    // java.util.concurrent.locks.ReentrantLock
    export type ReentrantLock = any;
  }
  export namespace java.util.stream {
    // java.util.stream.Stream
    export type Stream<T> = any;
  }
  export namespace java.util.zip {
    // java.util.zip.CRC32
    export type CRC32 = any;
  }
  export namespace org.joml {
    // org.joml.Matrix2fc
    export type Matrix2fc = any;
    // org.joml.Matrix3f
    export type Matrix3f = any;
    // org.joml.Matrix3fc
    export type Matrix3fc = any;
    // org.joml.Matrix3x2fc
    export type Matrix3x2fc = any;
    // org.joml.Matrix4f
    export type Matrix4f = any;
    // org.joml.Matrix4fc
    export type Matrix4fc = any;
    // org.joml.Matrix4x3fc
    export type Matrix4x3fc = any;
    // org.joml.Quaternionf
    export type Quaternionf = any;
    // org.joml.Quaternionfc
    export type Quaternionfc = any;
    // org.joml.Vector2f extends java.lang.Object
    export class Vector2f {
      private constructor();
      absolute(arg0: org.joml.Vector2f): org.joml.Vector2f;
      add(arg0: number, arg1: number, arg2: org.joml.Vector2f): org.joml.Vector2f;
      angle(arg0: org.joml.Vector2fc): number;
      ceil(arg0: org.joml.Vector2f): org.joml.Vector2f;
      distance(arg0: number, arg1: number): number;
      distanceSquared(arg0: number, arg1: number): number;
      div(arg0: org.joml.Vector2fc, arg1: org.joml.Vector2f): org.joml.Vector2f;
      dot(arg0: org.joml.Vector2fc): number;
      equals(arg0: org.joml.Vector2fc, arg1: number): boolean;
      floor(): org.joml.Vector2f;
      fma(arg0: org.joml.Vector2fc, arg1: org.joml.Vector2fc, arg2: org.joml.Vector2f): org.joml.Vector2f;
      get(arg0: number, arg1: java.nio.FloatBuffer): java.nio.FloatBuffer;
      getClass(): java.lang.Class<any>;
      getToAddress(arg0: number): org.joml.Vector2fc;
      hashCode(): number;
      isFinite(): boolean;
      length(): number;
      lengthSquared(arg0: number, arg1: number): number;
      lerp(arg0: org.joml.Vector2fc, arg1: number, arg2: org.joml.Vector2f): org.joml.Vector2f;
      max(arg0: org.joml.Vector2fc, arg1: org.joml.Vector2f): org.joml.Vector2f;
      maxComponent(): number;
      min(arg0: org.joml.Vector2fc, arg1: org.joml.Vector2f): org.joml.Vector2f;
      minComponent(): number;
      mul(arg0: org.joml.Vector2fc, arg1: org.joml.Vector2f): org.joml.Vector2f;
      mulDirection(arg0: org.joml.Matrix3x2fc, arg1: org.joml.Vector2f): org.joml.Vector2f;
      mulPosition(arg0: org.joml.Matrix3x2fc): org.joml.Vector2f;
      mulTranspose(arg0: org.joml.Matrix2fc, arg1: org.joml.Vector2f): org.joml.Vector2f;
      negate(arg0: org.joml.Vector2f): org.joml.Vector2f;
      normalize(arg0: number, arg1: org.joml.Vector2f): org.joml.Vector2f;
      notify(): void;
      notifyAll(): void;
      perpendicular(): org.joml.Vector2f;
      readExternal(arg0: java.io.ObjectInput): void;
      round(arg0: org.joml.Vector2f): org.joml.Vector2f;
      set(arg0: number, arg1: java.nio.FloatBuffer): org.joml.Vector2f;
      setComponent(arg0: number, arg1: number): org.joml.Vector2f;
      setFromAddress(arg0: number): org.joml.Vector2f;
      sub(arg0: org.joml.Vector2fc): org.joml.Vector2f;
      toString(arg0: java.text.NumberFormat): string;
      wait(arg0: number): void;
      writeExternal(arg0: java.io.ObjectOutput): void;
      x(): number;
      y(): number;
      zero(): org.joml.Vector2f;
    }
    // org.joml.Vector2fc
    export type Vector2fc = any;
    // org.joml.Vector3d
    export type Vector3d = any;
    // org.joml.Vector3f extends java.lang.Object
    export class Vector3f {
      private constructor();
      absolute(arg0: org.joml.Vector3f): org.joml.Vector3f;
      add(arg0: number, arg1: number, arg2: number, arg3: org.joml.Vector3f): org.joml.Vector3f;
      angle(arg0: org.joml.Vector3fc): number;
      angleCos(arg0: org.joml.Vector3fc): number;
      angleSigned(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): number;
      ceil(): org.joml.Vector3f;
      cross(arg0: org.joml.Vector3fc): org.joml.Vector3f;
      distance(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): number;
      distanceSquared(arg0: org.joml.Vector3fc): number;
      div(arg0: number, arg1: org.joml.Vector3f): org.joml.Vector3f;
      dot(arg0: number, arg1: number, arg2: number): number;
      equals(arg0: number, arg1: number, arg2: number): boolean;
      floor(): org.joml.Vector3f;
      fma(arg0: org.joml.Vector3fc, arg1: org.joml.Vector3fc, arg2: org.joml.Vector3f): org.joml.Vector3f;
      get(arg0: org.joml.Vector3d): org.joml.Vector3d;
      getClass(): java.lang.Class<any>;
      getToAddress(arg0: number): org.joml.Vector3fc;
      half(arg0: org.joml.Vector3fc): org.joml.Vector3f;
      hashCode(): number;
      hermite(arg0: org.joml.Vector3fc, arg1: org.joml.Vector3fc, arg2: org.joml.Vector3fc, arg3: number, arg4: org.joml.Vector3f): org.joml.Vector3f;
      isFinite(): boolean;
      length(): number;
      lengthSquared(arg0: number, arg1: number, arg2: number): number;
      lerp(arg0: org.joml.Vector3fc, arg1: number): org.joml.Vector3f;
      max(arg0: org.joml.Vector3fc): org.joml.Vector3f;
      maxComponent(): number;
      min(arg0: org.joml.Vector3fc): org.joml.Vector3f;
      minComponent(): number;
      mul(arg0: number, arg1: org.joml.Vector3f): org.joml.Vector3f;
      mulAdd(arg0: org.joml.Vector3fc, arg1: org.joml.Vector3fc): org.joml.Vector3f;
      mulDirection(arg0: org.joml.Matrix4x3fc, arg1: org.joml.Vector3f): org.joml.Vector3f;
      mulPosition(arg0: org.joml.Matrix4x3fc, arg1: org.joml.Vector3f): org.joml.Vector3f;
      mulPositionW(arg0: org.joml.Matrix4fc): number;
      mulProject(arg0: org.joml.Matrix4fc, arg1: number, arg2: org.joml.Vector3f): org.joml.Vector3f;
      mulTranspose(arg0: org.joml.Matrix3fc): org.joml.Vector3f;
      mulTransposeDirection(arg0: org.joml.Matrix4fc): org.joml.Vector3f;
      mulTransposePosition(arg0: org.joml.Matrix4fc): org.joml.Vector3f;
      negate(): org.joml.Vector3f;
      normalize(arg0: number, arg1: org.joml.Vector3f): org.joml.Vector3f;
      notify(): void;
      notifyAll(): void;
      orthogonalize(arg0: org.joml.Vector3fc): org.joml.Vector3f;
      orthogonalizeUnit(arg0: org.joml.Vector3fc, arg1: org.joml.Vector3f): org.joml.Vector3f;
      readExternal(arg0: java.io.ObjectInput): void;
      reflect(arg0: org.joml.Vector3fc, arg1: org.joml.Vector3f): org.joml.Vector3f;
      rotate(arg0: org.joml.Quaternionfc, arg1: org.joml.Vector3f): org.joml.Vector3f;
      rotateAxis(arg0: number, arg1: number, arg2: number, arg3: number, arg4: org.joml.Vector3f): org.joml.Vector3f;
      rotateX(arg0: number): org.joml.Vector3f;
      rotateY(arg0: number): org.joml.Vector3f;
      rotateZ(arg0: number, arg1: org.joml.Vector3f): org.joml.Vector3f;
      rotationTo(arg0: number, arg1: number, arg2: number, arg3: org.joml.Quaternionf): org.joml.Quaternionf;
      round(arg0: org.joml.Vector3f): org.joml.Vector3f;
      set(arg0: org.joml.Vector2fc, arg1: number): org.joml.Vector3f;
      setComponent(arg0: number, arg1: number): org.joml.Vector3f;
      setFromAddress(arg0: number): org.joml.Vector3f;
      smoothStep(arg0: org.joml.Vector3fc, arg1: number, arg2: org.joml.Vector3f): org.joml.Vector3f;
      sub(arg0: number, arg1: number, arg2: number): org.joml.Vector3f;
      toString(): string;
      wait(arg0: number): void;
      writeExternal(arg0: java.io.ObjectOutput): void;
      x(): number;
      y(): number;
      z(): number;
      zero(): org.joml.Vector3f;
    }
    // org.joml.Vector3fc
    export type Vector3fc = any;
    // org.joml.Vector4f
    export type Vector4f = any;
  }
  export namespace org.lwjgl.glfw {
    // org.lwjgl.glfw.GLFWImage$Buffer extends org.lwjgl.system.StructBuffer<org.lwjgl.glfw.GLFWImage, org.lwjgl.glfw.GLFWImage$Buffer>
    export type GLFWImage$Buffer = any;
  }
  export namespace org.lwjgl.util {
    // org.lwjgl.util.ReadableColor
    export type ReadableColor = any;
    // org.lwjgl.util.Rectangle
    export type Rectangle = any;
  }
  export namespace org.lwjgl.util.vector {
    // org.lwjgl.util.vector.Matrix4f extends org.lwjgl.util.vector.Matrix
    export type Matrix4f = any;
    // org.lwjgl.util.vector.Quaternion extends org.lwjgl.util.vector.Vector
    export type Quaternion = any;
    // org.lwjgl.util.vector.Vector3f extends org.lwjgl.util.vector.Vector
    export type Vector3f = any;
  }
  export namespace org.lwjglx.input {
    // org.lwjglx.input.Controller
    export type Controller = any;
    // org.lwjglx.input.Cursor
    export type Cursor = any;
    // org.lwjglx.input.KeyEventQueue
    export type KeyEventQueue = any;
    // org.lwjglx.input.Keyboard extends java.lang.Object
    export class Keyboard {
      private constructor();
      static readonly CHAR_NONE: number;
      static readonly KEYBOARD_SIZE: number;
      static readonly KEY_0: number;
      static readonly KEY_1: number;
      static readonly KEY_2: number;
      static readonly KEY_3: number;
      static readonly KEY_4: number;
      static readonly KEY_5: number;
      static readonly KEY_6: number;
      static readonly KEY_7: number;
      static readonly KEY_8: number;
      static readonly KEY_9: number;
      static readonly KEY_A: number;
      static readonly KEY_ADD: number;
      static readonly KEY_APOSTROPHE: number;
      static readonly KEY_APPS: number;
      static readonly KEY_AT: number;
      static readonly KEY_AX: number;
      static readonly KEY_B: number;
      static readonly KEY_BACK: number;
      static readonly KEY_BACKSLASH: number;
      static readonly KEY_C: number;
      static readonly KEY_CAPITAL: number;
      static readonly KEY_CIRCUMFLEX: number;
      static readonly KEY_CLEAR: number;
      static readonly KEY_COLON: number;
      static readonly KEY_COMMA: number;
      static readonly KEY_CONVERT: number;
      static readonly KEY_D: number;
      static readonly KEY_DECIMAL: number;
      static readonly KEY_DELETE: number;
      static readonly KEY_DIVIDE: number;
      static readonly KEY_DOWN: number;
      static readonly KEY_E: number;
      static readonly KEY_END: number;
      static readonly KEY_EQUALS: number;
      static readonly KEY_ESCAPE: number;
      static readonly KEY_F: number;
      static readonly KEY_F1: number;
      static readonly KEY_F10: number;
      static readonly KEY_F11: number;
      static readonly KEY_F12: number;
      static readonly KEY_F13: number;
      static readonly KEY_F14: number;
      static readonly KEY_F15: number;
      static readonly KEY_F16: number;
      static readonly KEY_F17: number;
      static readonly KEY_F18: number;
      static readonly KEY_F19: number;
      static readonly KEY_F2: number;
      static readonly KEY_F3: number;
      static readonly KEY_F4: number;
      static readonly KEY_F5: number;
      static readonly KEY_F6: number;
      static readonly KEY_F7: number;
      static readonly KEY_F8: number;
      static readonly KEY_F9: number;
      static readonly KEY_FUNCTION: number;
      static readonly KEY_G: number;
      static readonly KEY_GRAVE: number;
      static readonly KEY_H: number;
      static readonly KEY_HOME: number;
      static readonly KEY_I: number;
      static readonly KEY_INSERT: number;
      static readonly KEY_J: number;
      static readonly KEY_K: number;
      static readonly KEY_KANA: number;
      static readonly KEY_KANJI: number;
      static readonly KEY_L: number;
      static readonly KEY_LBRACKET: number;
      static readonly KEY_LCONTROL: number;
      static readonly KEY_LEFT: number;
      static readonly KEY_LMENU: number;
      static readonly KEY_LMETA: number;
      static readonly KEY_LSHIFT: number;
      static readonly KEY_LWIN: number;
      static readonly KEY_M: number;
      static readonly KEY_MINUS: number;
      static readonly KEY_MULTIPLY: number;
      static readonly KEY_N: number;
      static readonly KEY_NEXT: number;
      static readonly KEY_NOCONVERT: number;
      static readonly KEY_NONE: number;
      static readonly KEY_NUMLOCK: number;
      static readonly KEY_NUMPAD0: number;
      static readonly KEY_NUMPAD1: number;
      static readonly KEY_NUMPAD2: number;
      static readonly KEY_NUMPAD3: number;
      static readonly KEY_NUMPAD4: number;
      static readonly KEY_NUMPAD5: number;
      static readonly KEY_NUMPAD6: number;
      static readonly KEY_NUMPAD7: number;
      static readonly KEY_NUMPAD8: number;
      static readonly KEY_NUMPAD9: number;
      static readonly KEY_NUMPADCOMMA: number;
      static readonly KEY_NUMPADENTER: number;
      static readonly KEY_NUMPADEQUALS: number;
      static readonly KEY_O: number;
      static readonly KEY_P: number;
      static readonly KEY_PAUSE: number;
      static readonly KEY_PERIOD: number;
      static readonly KEY_POWER: number;
      static readonly KEY_PRIOR: number;
      static readonly KEY_Q: number;
      static readonly KEY_R: number;
      static readonly KEY_RBRACKET: number;
      static readonly KEY_RCONTROL: number;
      static readonly KEY_RETURN: number;
      static readonly KEY_RIGHT: number;
      static readonly KEY_RMENU: number;
      static readonly KEY_RMETA: number;
      static readonly KEY_RSHIFT: number;
      static readonly KEY_RWIN: number;
      static readonly KEY_S: number;
      static readonly KEY_SCROLL: number;
      static readonly KEY_SECTION: number;
      static readonly KEY_SEMICOLON: number;
      static readonly KEY_SLASH: number;
      static readonly KEY_SLEEP: number;
      static readonly KEY_SPACE: number;
      static readonly KEY_STOP: number;
      static readonly KEY_SUBTRACT: number;
      static readonly KEY_SYSRQ: number;
      static readonly KEY_T: number;
      static readonly KEY_TAB: number;
      static readonly KEY_U: number;
      static readonly KEY_UNDERLINE: number;
      static readonly KEY_UNLABELED: number;
      static readonly KEY_UP: number;
      static readonly KEY_V: number;
      static readonly KEY_W: number;
      static readonly KEY_X: number;
      static readonly KEY_Y: number;
      static readonly KEY_YEN: number;
      static readonly KEY_Z: number;
  
      addCharEvent(arg0: string): void;
      addKeyEvent(arg0: number, arg1: number): void;
      areRepeatEventsEnabled(): boolean;
      create(): void;
      destroy(): void;
      enableRepeatEvents(arg0: boolean): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getEventCharacter(): string;
      getEventKey(): number;
      getEventKeyState(): boolean;
      getEventNanoseconds(): number;
      getKeyIndex(arg0: string): number;
      getKeyName(arg0: number): string;
      hashCode(): number;
      initKeyNames(): void;
      isCreated(): boolean;
      isKeyDown(arg0: number): boolean;
      isRepeatEvent(): boolean;
      next(): boolean;
      notify(): void;
      notifyAll(): void;
      poll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace org.w3c.dom {
    // org.w3c.dom.Element
    export type Element = any;
  }
  export namespace se.krka.kahlua.converter {
    // se.krka.kahlua.converter.KahluaConverterManager
    export type KahluaConverterManager = any;
  }
  export namespace se.krka.kahlua.integration {
    // se.krka.kahlua.integration.LuaCaller
    export type LuaCaller = any;
  }
  export namespace se.krka.kahlua.integration.expose {
    // se.krka.kahlua.integration.expose.ClassDebugInformation
    export type ClassDebugInformation = any;
  }
  export namespace se.krka.kahlua.j2se {
    // se.krka.kahlua.j2se.J2SEPlatform
    export type J2SEPlatform = any;
    // se.krka.kahlua.j2se.KahluaTableImpl
    export type KahluaTableImpl = any;
  }
  export namespace se.krka.kahlua.vm {
    // se.krka.kahlua.vm.Coroutine
    export type Coroutine = any;
    // se.krka.kahlua.vm.KahluaTable
    export type KahluaTable = any;
    // se.krka.kahlua.vm.KahluaThread
    export type KahluaThread = any;
    // se.krka.kahlua.vm.KahluaUtil extends java.lang.Object
    export class KahluaUtil {
      private constructor();
      assertArgNotNull(arg0: any, arg1: number, arg2: string, arg3: string): void;
      boolEval(arg0: any): boolean;
      equals(arg0: any): boolean;
      fail(arg0: string): void;
      fromDouble(arg0: any): number;
      getArg(arg0: se.krka.kahlua.vm.LuaCallFrame, arg1: number, arg2: string): any;
      getClass(): java.lang.Class<any>;
      getClassMetatables(arg0: se.krka.kahlua.vm.Platform, arg1: se.krka.kahlua.vm.KahluaTable): se.krka.kahlua.vm.KahluaTable;
      getDoubleArg(arg0: se.krka.kahlua.vm.LuaCallFrame, arg1: number, arg2: string): number;
      getNumberArg(arg0: se.krka.kahlua.vm.LuaCallFrame, arg1: number, arg2: string): number;
      getOptionalArg(arg0: se.krka.kahlua.vm.LuaCallFrame, arg1: number): any;
      getOptionalNumberArg(arg0: se.krka.kahlua.vm.LuaCallFrame, arg1: number): number;
      getOptionalStringArg(arg0: se.krka.kahlua.vm.LuaCallFrame, arg1: number): string;
      getOrCreateTable(arg0: se.krka.kahlua.vm.Platform, arg1: se.krka.kahlua.vm.KahluaTable, arg2: string): se.krka.kahlua.vm.KahluaTable;
      getStringArg(arg0: se.krka.kahlua.vm.LuaCallFrame, arg1: number, arg2: string): string;
      getWorkerThread(arg0: se.krka.kahlua.vm.Platform, arg1: se.krka.kahlua.vm.KahluaTable): se.krka.kahlua.vm.KahluaThread;
      hashCode(): number;
      ipow(arg0: number, arg1: number): number;
      isNegative(arg0: number): boolean;
      len(arg0: se.krka.kahlua.vm.KahluaTable, arg1: number, arg2: number): number;
      loadByteCodeFromResource(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): se.krka.kahlua.vm.LuaClosure;
      luaAssert(arg0: boolean, arg1: string): void;
      notify(): void;
      notifyAll(): void;
      numberToString(arg0: number): string;
      rawTonumber(arg0: any): number;
      rawTostring(arg0: any): string;
      rawTostring2(arg0: any): string;
      round(arg0: number): number;
      setWorkerThread(arg0: se.krka.kahlua.vm.KahluaTable, arg1: se.krka.kahlua.vm.KahluaThread): void;
      setupLibrary(arg0: se.krka.kahlua.vm.KahluaTable, arg1: se.krka.kahlua.vm.KahluaThread, arg2: string): void;
      toBoolean(arg0: boolean): boolean;
      toDouble(arg0: number): number;
      toString(): string;
      tonumber(arg0: string, arg1: number): number;
      tostring(arg0: any, arg1: se.krka.kahlua.vm.KahluaThread): string;
      type(arg0: any): string;
      wait(arg0: number): void;
    }
    // se.krka.kahlua.vm.LuaCallFrame
    export type LuaCallFrame = any;
    // se.krka.kahlua.vm.LuaClosure
    export type LuaClosure = any;
    // se.krka.kahlua.vm.Platform
    export type Platform = any;
    // se.krka.kahlua.vm.Prototype
    export type Prototype = any;
  }
  export namespace zombie {
    // zombie.AmbientStreamManager extends zombie.BaseAmbientStreamManager
    export class AmbientStreamManager {
      private constructor();
      static MaxAmbientCount: number;
      static MaxRange: number;
      static OneInAmbienceChance: number;
      readonly allAmbient?: java.util.ArrayList<zombie.AmbientStreamManager$AmbientLoop>;
      readonly ambient?: java.util.ArrayList<zombie.AmbientStreamManager$Ambient>;
      readonly dayAmbient?: java.util.ArrayList<zombie.AmbientStreamManager$AmbientLoop>;
      readonly freeEmitters?: java.util.ArrayDeque<zombie.AmbientStreamManager$WorldSoundEmitter>;
      readonly indoorAmbient?: java.util.ArrayList<zombie.AmbientStreamManager$AmbientLoop>;
      initialized: boolean;
      static instance?: zombie.BaseAmbientStreamManager;
      readonly nightAmbient?: java.util.ArrayList<zombie.AmbientStreamManager$AmbientLoop>;
      readonly outdoorAmbient?: java.util.ArrayList<zombie.AmbientStreamManager$AmbientLoop>;
      readonly rainAmbient?: java.util.ArrayList<zombie.AmbientStreamManager$AmbientLoop>;
      readonly windAmbient?: java.util.ArrayList<zombie.AmbientStreamManager$AmbientLoop>;
      readonly worldEmitters?: java.util.ArrayList<zombie.AmbientStreamManager$WorldSoundEmitter>;
  
      addAmbient(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addAmbientEmitter(arg0: number, arg1: number, arg2: number, arg3: string): void;
      addBlend(arg0: string, arg1: number, arg2: boolean, arg3: boolean, arg4: boolean, arg5: boolean): void;
      addDaytimeAmbientEmitter(arg0: number, arg1: number, arg2: number, arg3: string): void;
      addRandomAmbient(): void;
      doAlarm(arg0: zombie.iso.RoomDef): void;
      doGunEvent(): void;
      doOneShotAmbients(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getInstance(): zombie.BaseAmbientStreamManager;
      hashCode(): number;
      init(): void;
      notify(): void;
      notifyAll(): void;
      stop(): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.AmbientStreamManager$Ambient extends java.lang.Object
    export class AmbientStreamManager$Ambient {
      private constructor();
      name?: string;
      trackMouse: boolean;
      x: number;
      y: number;
  
      equals(arg0: any): boolean;
      finished(): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      repeatWorldSounds(arg0: number, arg1: number): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.AmbientStreamManager$AmbientLoop extends java.lang.Object
    export class AmbientStreamManager$AmbientLoop {
      private constructor();
      channel: number;
      currVol: number;
      readonly emitter?: fmod.fmod.FMODSoundEmitter;
      name?: string;
      targVol: number;
      static volChangeAmount: number;
      volumedelta: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      stop(): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.AmbientStreamManager$WorldSoundEmitter extends java.lang.Object
    export class AmbientStreamManager$WorldSoundEmitter {
      private constructor();
      channel: number;
      dawn: number;
      daytime?: string;
      dusk: number;
      fmodEmitter?: fmod.fmod.FMODSoundEmitter;
      x: number;
      y: number;
      z: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.BaseAmbientStreamManager extends java.lang.Object
    export class BaseAmbientStreamManager {
      private constructor();
      addAmbient(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addAmbientEmitter(arg0: number, arg1: number, arg2: number, arg3: string): void;
      addBlend(arg0: string, arg1: number, arg2: boolean, arg3: boolean, arg4: boolean, arg5: boolean): void;
      addDaytimeAmbientEmitter(arg0: number, arg1: number, arg2: number, arg3: string): void;
      doAlarm(arg0: zombie.iso.RoomDef): void;
      doGunEvent(): void;
      doOneShotAmbients(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      init(): void;
      notify(): void;
      notifyAll(): void;
      stop(): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.BaseSoundManager extends java.lang.Object
    export class BaseSoundManager {
      private constructor();
      AllowMusic: boolean;
  
      BlendThenStart(arg0: fmod.fmod.Audio, arg1: number, arg2: string): fmod.fmod.Audio;
      BlendVolume(arg0: fmod.fmod.Audio, arg1: number): void;
      CacheSound(arg0: string): void;
      CheckDoMusic(): void;
      DoMusic(arg0: string, arg1: boolean): void;
      FadeOutMusic(arg0: string, arg1: number): void;
      IsMusicPlaying(): boolean;
      PlayAsMusic(arg0: string, arg1: fmod.fmod.Audio, arg2: number, arg3: boolean): void;
      PlayJukeboxSound(arg0: string, arg1: boolean, arg2: number): fmod.fmod.Audio;
      PlayMusic(arg0: string, arg1: string, arg2: boolean, arg3: number): fmod.fmod.Audio;
      PlaySound(arg0: string, arg1: boolean, arg2: number, arg3: number): fmod.fmod.Audio;
      PlaySoundEvenSilent(arg0: string, arg1: boolean, arg2: number): fmod.fmod.Audio;
      PlaySoundWav(arg0: string, arg1: boolean, arg2: number): fmod.fmod.Audio;
      PlayWorldSound(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean): fmod.fmod.Audio;
      PlayWorldSoundImpl(arg0: string, arg1: boolean, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: boolean): fmod.fmod.Audio;
      PlayWorldSoundWav(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: number, arg3: number, arg4: number, arg5: boolean): fmod.fmod.Audio;
      PlayWorldSoundWavImpl(arg0: string, arg1: boolean, arg2: zombie.iso.IsoGridSquare, arg3: number, arg4: number, arg5: number, arg6: boolean): fmod.fmod.Audio;
      PrepareMusic(arg0: string): fmod.fmod.Audio;
      Purge(): void;
      Start(arg0: fmod.fmod.Audio, arg1: number, arg2: string): fmod.fmod.Audio;
      StopMusic(): void;
      StopSound(arg0: fmod.fmod.Audio): void;
      Update(): void;
      debugScriptSounds(): void;
      equals(arg0: any): boolean;
      getAmbientPieces(): java.util.ArrayList<fmod.fmod.Audio>;
      getAmbientVolume(): number;
      getClass(): java.lang.Class<any>;
      getCurrentMusicLibrary(): string;
      getCurrentMusicName(): string;
      getMusicPosition(): number;
      getMusicVolume(): number;
      getSoundVolume(): number;
      getVehicleEngineVolume(): number;
      hashCode(): number;
      isListenerInRange(arg0: number, arg1: number, arg2: number): boolean;
      isPlayingMusic(): boolean;
      isPlayingUISound(arg0: string): boolean;
      isRemastered(): boolean;
      notify(): void;
      notifyAll(): void;
      pauseSoundAndMusic(): void;
      playAmbient(arg0: string): void;
      playMusic(arg0: string): void;
      playMusicNonTriggered(arg0: string, arg1: number): void;
      playNightAmbient(arg0: string): void;
      playUISound(arg0: string): number;
      registerEmitter(arg0: zombie.audio.BaseSoundEmitter): void;
      resumeSoundAndMusic(): void;
      setAmbientVolume(arg0: number): void;
      setMusicState(arg0: string): void;
      setMusicVolume(arg0: number): void;
      setMusicWakeState(arg0: zombie.characters.IsoPlayer, arg1: string): void;
      setSoundVolume(arg0: number): void;
      setVehicleEngineVolume(arg0: number): void;
      stop(): void;
      stopMusic(arg0: string): void;
      stopUISound(arg0: number): void;
      toString(): string;
      unregisterEmitter(arg0: zombie.audio.BaseSoundEmitter): void;
      update1(): void;
      update2(): void;
      update3(): void;
      update3D(): void;
      update4(): void;
      wait(arg0: number): void;
    }
    // zombie.DummySoundManager extends zombie.BaseSoundManager
    export class DummySoundManager {
      private constructor();
      AllowMusic: boolean;
  
      BlendThenStart(arg0: fmod.fmod.Audio, arg1: number, arg2: string): fmod.fmod.Audio;
      BlendVolume(arg0: fmod.fmod.Audio, arg1: number): void;
      CacheSound(arg0: string): void;
      CheckDoMusic(): void;
      DoMusic(arg0: string, arg1: boolean): void;
      FadeOutMusic(arg0: string, arg1: number): void;
      IsMusicPlaying(): boolean;
      PlayAsMusic(arg0: string, arg1: fmod.fmod.Audio, arg2: number, arg3: boolean): void;
      PlayJukeboxSound(arg0: string, arg1: boolean, arg2: number): fmod.fmod.Audio;
      PlayMusic(arg0: string, arg1: string, arg2: boolean, arg3: number): fmod.fmod.Audio;
      PlaySound(arg0: string, arg1: boolean, arg2: number, arg3: number): fmod.fmod.Audio;
      PlaySoundEvenSilent(arg0: string, arg1: boolean, arg2: number): fmod.fmod.Audio;
      PlaySoundWav(arg0: string, arg1: number, arg2: boolean, arg3: number): fmod.fmod.Audio;
      PlayWorldSound(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean): fmod.fmod.Audio;
      PlayWorldSoundImpl(arg0: string, arg1: boolean, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: boolean): fmod.fmod.Audio;
      PlayWorldSoundWav(arg0: string, arg1: boolean, arg2: zombie.iso.IsoGridSquare, arg3: number, arg4: number, arg5: number, arg6: boolean): fmod.fmod.Audio;
      PlayWorldSoundWavImpl(arg0: string, arg1: boolean, arg2: zombie.iso.IsoGridSquare, arg3: number, arg4: number, arg5: number, arg6: boolean): fmod.fmod.Audio;
      PrepareMusic(arg0: string): fmod.fmod.Audio;
      Purge(): void;
      Start(arg0: fmod.fmod.Audio, arg1: number, arg2: string): fmod.fmod.Audio;
      StopMusic(): void;
      StopSound(arg0: fmod.fmod.Audio): void;
      Update(): void;
      debugScriptSounds(): void;
      equals(arg0: any): boolean;
      getAmbientPieces(): java.util.ArrayList<fmod.fmod.Audio>;
      getAmbientVolume(): number;
      getClass(): java.lang.Class<any>;
      getCurrentMusicLibrary(): string;
      getCurrentMusicName(): string;
      getMusicPosition(): number;
      getMusicVolume(): number;
      getSoundVolume(): number;
      getVehicleEngineVolume(): number;
      hashCode(): number;
      isListenerInRange(arg0: number, arg1: number, arg2: number): boolean;
      isPlayingMusic(): boolean;
      isPlayingUISound(arg0: number): boolean;
      isRemastered(): boolean;
      notify(): void;
      notifyAll(): void;
      pauseSoundAndMusic(): void;
      playAmbient(arg0: string): void;
      playMusic(arg0: string): void;
      playMusicNonTriggered(arg0: string, arg1: number): void;
      playNightAmbient(arg0: string): void;
      playUISound(arg0: string): number;
      registerEmitter(arg0: zombie.audio.BaseSoundEmitter): void;
      resumeSoundAndMusic(): void;
      setAmbientVolume(arg0: number): void;
      setMusicState(arg0: string): void;
      setMusicVolume(arg0: number): void;
      setMusicWakeState(arg0: zombie.characters.IsoPlayer, arg1: string): void;
      setSoundVolume(arg0: number): void;
      setVehicleEngineVolume(arg0: number): void;
      stop(): void;
      stopMusic(arg0: string): void;
      stopUISound(arg0: number): void;
      toString(): string;
      unregisterEmitter(arg0: zombie.audio.BaseSoundEmitter): void;
      update1(): void;
      update2(): void;
      update3(): void;
      update3D(): void;
      update4(): void;
      wait(arg0: number): void;
    }
    // zombie.FliesSound extends java.lang.Object
    export class FliesSound {
      private constructor();
      static readonly instance?: zombie.FliesSound;
  
      Reset(): void;
      chunkLoaded(arg0: zombie.iso.IsoChunk): void;
      corpseAdded(arg0: number, arg1: number, arg2: number): void;
      corpseRemoved(arg0: number, arg1: number, arg2: number): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getCorpseCount(arg0: zombie.characters.IsoGameCharacter): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      render(): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.FliesSound$ChunkData extends java.lang.Object
    export class FliesSound$ChunkData {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.GameSounds extends java.lang.Object
    export class GameSounds {
      private constructor();
      static readonly VERSION: number;
      static soundIsPaused: boolean;
  
      ReloadFile(arg0: string): void;
      Reset(): void;
      ScriptsLoaded(): void;
      addSound(arg0: zombie.audio.GameSound): void;
      equals(arg0: any): boolean;
      fix3DListenerPosition(arg0: boolean): void;
      getCategories(): java.util.ArrayList<string>;
      getClass(): java.lang.Class<any>;
      getOrCreateSound(arg0: string): zombie.audio.GameSound;
      getSound(arg0: string): zombie.audio.GameSound;
      getSoundsInCategory(arg0: string): java.util.ArrayList<zombie.audio.GameSound>;
      hashCode(): number;
      isKnownSound(arg0: string): boolean;
      isPreviewPlaying(): boolean;
      loadINI(): void;
      notify(): void;
      notifyAll(): void;
      previewSound(arg0: string): void;
      saveINI(): void;
      stopPreview(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.GameTime extends java.lang.Object
    export class GameTime {
      private constructor();
      Calender?: zombie.util.PZCalendar;
      FPSMultiplier: number;
      LastLastTimeOfDay: number;
      static readonly MULTIPLIER: number;
      Moon: number;
      NightsSurvived: number;
      PerObjectMultiplier: number;
      ServerLastTimeOfDay: number;
      ServerNewDays: number;
      ServerTimeOfDay: number;
      TimeOfDay: number;
      static instance?: zombie.GameTime;
      lightSourceUpdate: number;
      multiplierBias: number;
  
      Lerp(arg0: number, arg1: number, arg2: number): number;
      RemoveZombiesIndiscriminate(arg0: number): void;
      TimeLerp(arg0: number, arg1: number, arg2: number, arg3: number): number;
      daysInMonth(arg0: number, arg1: number): number;
      equals(arg0: any): boolean;
      getAmbient(): number;
      getAmbientMax(): number;
      getAmbientMin(): number;
      getAnimSpeedFix(): number;
      getCalender(): zombie.util.PZCalendar;
      getClass(): java.lang.Class<any>;
      getDawn(): number;
      getDay(): number;
      getDayPlusOne(): number;
      getDaysSurvived(): number;
      getDeathString(arg0: zombie.characters.IsoPlayer): string;
      getDeltaMinutesPerDay(): number;
      getDusk(): number;
      getGameModeText(): string;
      getGameWorldSecondsSinceLastUpdate(): number;
      getHelicopterDay(): number;
      getHelicopterDay1(): number;
      getHelicopterEndHour(): number;
      getHelicopterStartHour(): number;
      getHour(): number;
      getHoursSurvived(): number;
      getInstance(): zombie.GameTime;
      getInvMultiplier(): number;
      getLastTimeOfDay(): number;
      getMaxZombieCount(): number;
      getMaxZombieCountStart(): number;
      getMinZombieCount(): number;
      getMinZombieCountStart(): number;
      getMinutes(): number;
      getMinutesPerDay(): number;
      getMinutesStamp(): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getMonth(): number;
      getMultipliedSecondsSinceLastUpdate(): number;
      getMultiplier(): number;
      getNight(): number;
      getNightMax(): number;
      getNightMin(): number;
      getNightTint(): number;
      getNightsSurvived(): number;
      getRealworldSecondsSinceLastUpdate(): number;
      getServerMultiplier(): number;
      getServerTime(): number;
      getServerTimeMills(): number;
      getServerTimeShiftIsSet(): boolean;
      getStartDay(): number;
      getStartMonth(): number;
      getStartTimeOfDay(): number;
      getStartYear(): number;
      getThunderStorm(): boolean;
      getTimeDelta(): number;
      getTimeOfDay(): number;
      getTimeSurvived(arg0: zombie.characters.IsoPlayer): string;
      getTrueMultiplier(): number;
      getUnmoddedMultiplier(): number;
      getViewDist(): number;
      getViewDistMax(): number;
      getViewDistMin(): number;
      getWorldAgeHours(): number;
      getYear(): number;
      getZombieKilledText(arg0: zombie.characters.IsoPlayer): string;
      hashCode(): number;
      init(): void;
      isGamePaused(): boolean;
      isRainingToday(): boolean;
      isThunderDay(): boolean;
      load(): void;
      notify(): void;
      notifyAll(): void;
      receiveTimeSync(arg0: java.nio.ByteBuffer, arg1: zombie.core.raknet.UdpConnection): void;
      save(arg0: java.nio.ByteBuffer): void;
      saveToPacket(arg0: java.nio.ByteBuffer): void;
      setAmbient(arg0: number): void;
      setAmbientMax(arg0: number): void;
      setAmbientMin(arg0: number): void;
      setCalender(arg0: zombie.util.PZCalendar): void;
      setDawn(arg0: number): void;
      setDay(arg0: number): void;
      setDusk(arg0: number): void;
      setHelicopterDay(arg0: number): void;
      setHelicopterEndHour(arg0: number): void;
      setHelicopterStartHour(arg0: number): void;
      setHoursSurvived(arg0: number): void;
      setInstance(arg0: zombie.GameTime): void;
      setLastTimeOfDay(arg0: number): void;
      setMaxZombieCount(arg0: number): void;
      setMaxZombieCountStart(arg0: number): void;
      setMinZombieCount(arg0: number): void;
      setMinZombieCountStart(arg0: number): void;
      setMinutesPerDay(arg0: number): void;
      setMonth(arg0: number): void;
      setMoon(arg0: number): void;
      setMultiplier(arg0: number): void;
      setNight(arg0: number): void;
      setNightMax(arg0: number): void;
      setNightMin(arg0: number): void;
      setNightTint(arg0: number): void;
      setNightsSurvived(arg0: number): void;
      setServerTimeShift(arg0: number): void;
      setStartDay(arg0: number): void;
      setStartMonth(arg0: number): void;
      setStartTimeOfDay(arg0: number): void;
      setStartYear(arg0: number): void;
      setTargetZombies(arg0: number): void;
      setThunderDay(arg0: boolean): void;
      setTimeOfDay(arg0: number): void;
      setViewDistMax(arg0: number): void;
      setViewDistMin(arg0: number): void;
      setYear(arg0: number): void;
      syncServerTime(arg0: number, arg1: number, arg2: number): void;
      toString(): string;
      update(arg0: boolean): void;
      updateCalendar(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      wait(arg0: number): void;
    }
    // zombie.GameTime$AnimTimer extends java.lang.Object
    export class GameTime$AnimTimer {
      private constructor();
      Duration: number;
      Elapsed: number;
      Finished: boolean;
      Ticks: number;
  
      equals(arg0: any): boolean;
      finished(): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      init(arg0: number): void;
      notify(): void;
      notifyAll(): void;
      ratio(): number;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.GameWindow extends java.lang.Object
    export class GameWindow {
      private constructor();
      static ActivatedJoyPad?: zombie.input.JoypadManager$Joypad;
      static DEBUG_SAVE: boolean;
      static DrawReloadingLua: boolean;
      static readonly GameInput?: zombie.core.input.Input;
      static GameThread?: java.lang.Thread;
      static OkToSaveOnExit: boolean;
      static assetManagers?: zombie.asset.AssetManagers;
      static averageFPS: number;
      static bGameThreadExited: boolean;
      static bLoadedAsClient: boolean;
      static bLuaDebuggerKeyDown: boolean;
      static bServerDisconnected: boolean;
      static closeRequested: boolean;
      static fileSystem?: zombie.fileSystem.FileSystem;
      static kickReason?: string;
      static lastP?: string;
      static states?: zombie.gameStates.GameStateMachine;
      static readonly texturePackTextures?: zombie.fileSystem.FileSystem$TexturePackTextures;
      static readonly texturePacks?: java.util.ArrayList<zombie.GameWindow$TexturePack>;
      static version?: string;
  
      DoLoadingText(arg0: string): void;
      InitDisplay(): void;
      InitGameThread(): void;
      LoadTexturePack(arg0: string, arg1: number, arg2: string): void;
      LoadTexturePackDDS(arg0: string): void;
      ReadString(arg0: java.io.DataInputStream): string;
      ReadStringUTF(arg0: java.nio.ByteBuffer): string;
      WriteString(arg0: java.nio.ByteBuffer, arg1: string): void;
      WriteStringUTF(arg0: java.nio.ByteBuffer, arg1: string): void;
      doRenderEvent(arg0: boolean): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getCoopServerHome(): string;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      readInt(arg0: java.io.DataInputStream): number;
      readLong(arg0: java.io.DataInputStream): number;
      render(): void;
      save(arg0: boolean): void;
      setTexturePackLookup(): void;
      toString(): string;
      uncaughtException(arg0: java.lang.Thread, arg1: java.lang.Throwable): void;
      wait(arg0: number): void;
    }
    // zombie.GameWindow$OSValidator extends java.lang.Object
    export class GameWindow$OSValidator {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      isMac(): boolean;
      isSolaris(): boolean;
      isUnix(): boolean;
      isWindows(): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.GameWindow$TexturePack extends java.lang.Object
    export class GameWindow$TexturePack {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.MapGroups extends java.lang.Object
    export class MapGroups {
      private constructor();
      addMissingVanillaDirectories(arg0: string): string;
      checkMapConflicts(): boolean;
      createGroups(arg0: zombie.modding.ActiveMods, arg1: boolean, arg2: boolean): void;
      equals(arg0: any): boolean;
      getAllMapsInOrder(): java.util.ArrayList<string>;
      getClass(): java.lang.Class<any>;
      getMapConflicts(arg0: string): java.util.ArrayList<string>;
      getMapDirectoriesInGroup(arg0: number): java.util.ArrayList<string>;
      getNumberOfGroups(): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      setWorld(arg0: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // (Unknown)
    export type SandboxOptions = any;
    // zombie.SandboxOptions$BooleanSandboxOption extends zombie.config.BooleanConfigOption
    export class SandboxOptions$BooleanSandboxOption {
      private constructor();
      asConfigOption(): zombie.config.ConfigOption;
      equals(arg0: any): boolean;
      fromTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      getClass(): java.lang.Class<any>;
      getDefaultValue(): boolean;
      getName(): string;
      getPageName(): string;
      getShortName(): string;
      getTableName(): string;
      getTooltip(): string;
      getTranslatedName(): string;
      getType(): string;
      getValue(): boolean;
      getValueAsLuaString(): string;
      getValueAsObject(): any;
      getValueAsString(): string;
      hashCode(): number;
      isCustom(): boolean;
      isValidString(arg0: string): boolean;
      notify(): void;
      notifyAll(): void;
      parse(arg0: string): void;
      resetToDefault(): void;
      setCustom(): void;
      setDefaultToCurrentValue(): void;
      setPageName(arg0: string): zombie.SandboxOptions$SandboxOption;
      setTranslation(arg0: string): zombie.SandboxOptions$SandboxOption;
      setValue(arg0: boolean): void;
      setValueFromObject(arg0: any): void;
      toString(): string;
      toTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      wait(arg0: number): void;
    }
    // zombie.SandboxOptions$DoubleSandboxOption extends zombie.config.DoubleConfigOption
    export class SandboxOptions$DoubleSandboxOption {
      private constructor();
      asConfigOption(): zombie.config.ConfigOption;
      equals(arg0: any): boolean;
      fromTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      getClass(): java.lang.Class<any>;
      getDefaultValue(): number;
      getMax(): number;
      getMin(): number;
      getName(): string;
      getPageName(): string;
      getShortName(): string;
      getTableName(): string;
      getTooltip(): string;
      getTranslatedName(): string;
      getType(): string;
      getValue(): number;
      getValueAsLuaString(): string;
      getValueAsObject(): any;
      getValueAsString(): string;
      hashCode(): number;
      isCustom(): boolean;
      isValidString(arg0: string): boolean;
      notify(): void;
      notifyAll(): void;
      parse(arg0: string): void;
      resetToDefault(): void;
      setCustom(): void;
      setDefaultToCurrentValue(): void;
      setPageName(arg0: string): zombie.SandboxOptions$SandboxOption;
      setTranslation(arg0: string): zombie.SandboxOptions$SandboxOption;
      setValue(arg0: number): void;
      setValueFromObject(arg0: any): void;
      toString(): string;
      toTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      wait(arg0: number): void;
    }
    // zombie.SandboxOptions$EnumSandboxOption extends zombie.config.EnumConfigOption
    export class SandboxOptions$EnumSandboxOption {
      private constructor();
      asConfigOption(): zombie.config.ConfigOption;
      equals(arg0: any): boolean;
      fromTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      getClass(): java.lang.Class<any>;
      getDefaultValue(): number;
      getMax(): number;
      getMin(): number;
      getName(): string;
      getNumValues(): number;
      getPageName(): string;
      getShortName(): string;
      getTableName(): string;
      getTooltip(): string;
      getTranslatedName(): string;
      getType(): string;
      getValue(): number;
      getValueAsLuaString(): string;
      getValueAsObject(): any;
      getValueAsString(): string;
      getValueTranslation(): string;
      getValueTranslationByIndex(arg0: number): string;
      getValueTranslationByIndexOrNull(arg0: number): string;
      hashCode(): number;
      isCustom(): boolean;
      isValidString(arg0: string): boolean;
      notify(): void;
      notifyAll(): void;
      parse(arg0: string): void;
      resetToDefault(): void;
      setCustom(): void;
      setDefaultToCurrentValue(): void;
      setPageName(arg0: string): zombie.SandboxOptions$SandboxOption;
      setTranslation(arg0: string): zombie.SandboxOptions$SandboxOption;
      setValue(arg0: number): void;
      setValueFromObject(arg0: any): void;
      setValueTranslation(arg0: string): zombie.SandboxOptions$EnumSandboxOption;
      toString(): string;
      toTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      wait(arg0: number): void;
    }
    // zombie.SandboxOptions$IntegerSandboxOption extends zombie.config.IntegerConfigOption
    export class SandboxOptions$IntegerSandboxOption {
      private constructor();
      asConfigOption(): zombie.config.ConfigOption;
      equals(arg0: any): boolean;
      fromTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      getClass(): java.lang.Class<any>;
      getDefaultValue(): number;
      getMax(): number;
      getMin(): number;
      getName(): string;
      getPageName(): string;
      getShortName(): string;
      getTableName(): string;
      getTooltip(): string;
      getTranslatedName(): string;
      getType(): string;
      getValue(): number;
      getValueAsLuaString(): string;
      getValueAsObject(): any;
      getValueAsString(): string;
      hashCode(): number;
      isCustom(): boolean;
      isValidString(arg0: string): boolean;
      notify(): void;
      notifyAll(): void;
      parse(arg0: string): void;
      resetToDefault(): void;
      setCustom(): void;
      setDefaultToCurrentValue(): void;
      setPageName(arg0: string): zombie.SandboxOptions$SandboxOption;
      setTranslation(arg0: string): zombie.SandboxOptions$SandboxOption;
      setValue(arg0: number): void;
      setValueFromObject(arg0: any): void;
      toString(): string;
      toTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      wait(arg0: number): void;
    }
    // zombie.SandboxOptions$Map extends java.lang.Object
    export class SandboxOptions$Map {
      private constructor();
      readonly AllowMiniMap?: zombie.SandboxOptions$BooleanSandboxOption;
      readonly AllowWorldMap?: zombie.SandboxOptions$BooleanSandboxOption;
      readonly MapAllKnown?: zombie.SandboxOptions$BooleanSandboxOption;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.SandboxOptions$SandboxOption
    export class SandboxOptions$SandboxOption {
      private constructor();
      asConfigOption(): zombie.config.ConfigOption;
      fromTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      getPageName(): string;
      getShortName(): string;
      getTableName(): string;
      getTooltip(): string;
      getTranslatedName(): string;
      isCustom(): boolean;
      setCustom(): void;
      setPageName(arg0: string): zombie.SandboxOptions$SandboxOption;
      setTranslation(arg0: string): zombie.SandboxOptions$SandboxOption;
      toTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
    }
    // zombie.SandboxOptions$StringSandboxOption extends zombie.config.StringConfigOption
    export class SandboxOptions$StringSandboxOption {
      private constructor();
      asConfigOption(): zombie.config.ConfigOption;
      equals(arg0: any): boolean;
      fromTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      getClass(): java.lang.Class<any>;
      getDefaultValue(): string;
      getName(): string;
      getPageName(): string;
      getShortName(): string;
      getTableName(): string;
      getTooltip(): string;
      getTranslatedName(): string;
      getType(): string;
      getValue(): string;
      getValueAsLuaString(): string;
      getValueAsObject(): any;
      getValueAsString(): string;
      hashCode(): number;
      isCustom(): boolean;
      isValidString(arg0: string): boolean;
      notify(): void;
      notifyAll(): void;
      parse(arg0: string): void;
      resetToDefault(): void;
      setCustom(): void;
      setDefaultToCurrentValue(): void;
      setPageName(arg0: string): zombie.SandboxOptions$SandboxOption;
      setTranslation(arg0: string): zombie.SandboxOptions$SandboxOption;
      setValue(arg0: string): void;
      setValueFromObject(arg0: any): void;
      toString(): string;
      toTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      wait(arg0: number): void;
    }
    // zombie.SandboxOptions$ZombieConfig extends java.lang.Object
    export class SandboxOptions$ZombieConfig {
      private constructor();
      readonly FollowSoundDistance?: zombie.SandboxOptions$IntegerSandboxOption;
      readonly PopulationMultiplier?: zombie.SandboxOptions$DoubleSandboxOption;
      readonly PopulationPeakDay?: zombie.SandboxOptions$IntegerSandboxOption;
      readonly PopulationPeakMultiplier?: zombie.SandboxOptions$DoubleSandboxOption;
      readonly PopulationStartMultiplier?: zombie.SandboxOptions$DoubleSandboxOption;
      readonly RallyGroupRadius?: zombie.SandboxOptions$IntegerSandboxOption;
      readonly RallyGroupSeparation?: zombie.SandboxOptions$IntegerSandboxOption;
      readonly RallyGroupSize?: zombie.SandboxOptions$IntegerSandboxOption;
      readonly RallyTravelDistance?: zombie.SandboxOptions$IntegerSandboxOption;
      readonly RedistributeHours?: zombie.SandboxOptions$DoubleSandboxOption;
      readonly RespawnHours?: zombie.SandboxOptions$DoubleSandboxOption;
      readonly RespawnMultiplier?: zombie.SandboxOptions$DoubleSandboxOption;
      readonly RespawnUnseenHours?: zombie.SandboxOptions$DoubleSandboxOption;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.SandboxOptions$ZombieLore extends java.lang.Object
    export class SandboxOptions$ZombieLore {
      private constructor();
      readonly ActiveOnly?: zombie.SandboxOptions$EnumSandboxOption;
      readonly Cognition?: zombie.SandboxOptions$EnumSandboxOption;
      readonly CrawlUnderVehicle?: zombie.SandboxOptions$EnumSandboxOption;
      readonly Decomp?: zombie.SandboxOptions$EnumSandboxOption;
      readonly Hearing?: zombie.SandboxOptions$EnumSandboxOption;
      readonly Memory?: zombie.SandboxOptions$EnumSandboxOption;
      readonly Mortality?: zombie.SandboxOptions$EnumSandboxOption;
      readonly Reanimate?: zombie.SandboxOptions$EnumSandboxOption;
      readonly Sight?: zombie.SandboxOptions$EnumSandboxOption;
      readonly Speed?: zombie.SandboxOptions$EnumSandboxOption;
      readonly Strength?: zombie.SandboxOptions$EnumSandboxOption;
      readonly ThumpNoChasing?: zombie.SandboxOptions$BooleanSandboxOption;
      readonly ThumpOnConstruction?: zombie.SandboxOptions$BooleanSandboxOption;
      readonly Toughness?: zombie.SandboxOptions$EnumSandboxOption;
      readonly Transmission?: zombie.SandboxOptions$EnumSandboxOption;
      readonly TriggerHouseAlarm?: zombie.SandboxOptions$BooleanSandboxOption;
      readonly ZombiesDragDown?: zombie.SandboxOptions$BooleanSandboxOption;
      readonly ZombiesFenceLunge?: zombie.SandboxOptions$BooleanSandboxOption;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.SharedDescriptors extends java.lang.Object
    export class SharedDescriptors {
      private constructor();
      ApplyReanimatedPlayerOutfit(arg0: number, arg1: string, arg2: zombie.characters.IsoGameCharacter): void;
      createPlayerZombieDescriptor(arg0: zombie.characters.IsoZombie): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getPlayerZombieDescriptors(): zombie.SharedDescriptors$Descriptor[];
      hashCode(): number;
      initSharedDescriptors(): void;
      notify(): void;
      notifyAll(): void;
      registerPlayerZombieDescriptor(arg0: zombie.SharedDescriptors$Descriptor): void;
      releasePlayerZombieDescriptor(arg0: zombie.characters.IsoZombie): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.SharedDescriptors$Descriptor extends java.lang.Object
    export class SharedDescriptors$Descriptor {
      private constructor();
      ID: number;
      bFemale: boolean;
      bZombie: boolean;
      readonly humanVisual?: zombie.core.skinnedmodel.visual.HumanVisual;
      readonly itemVisuals?: zombie.core.skinnedmodel.visual.ItemVisuals;
      outfitName?: string;
      persistentOutfitID: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getHumanVisual(): zombie.core.skinnedmodel.visual.HumanVisual;
      getID(): number;
      getItemVisuals(arg0: zombie.core.skinnedmodel.visual.ItemVisuals): void;
      getPersistentOutfitID(): number;
      hashCode(): number;
      isFemale(): boolean;
      isSkeleton(): boolean;
      isZombie(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      notify(): void;
      notifyAll(): void;
      save(arg0: java.nio.ByteBuffer): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.SoundManager extends zombie.BaseSoundManager
    export class SoundManager {
      private constructor();
      AllowMusic: boolean;
      AmbientVolume: number;
      MusicVolume: number;
      SoundVolume: number;
      VehicleEngineVolume: number;
      ambientPieces?: java.util.ArrayList<fmod.fmod.Audio>;
      static instance?: zombie.BaseSoundManager;
  
      BlendThenStart(arg0: fmod.fmod.Audio, arg1: number, arg2: string): fmod.fmod.Audio;
      BlendVolume(arg0: fmod.fmod.Audio, arg1: number): void;
      CacheSound(arg0: string): void;
      CheckDoMusic(): void;
      DoMusic(arg0: string, arg1: boolean): void;
      FadeOutMusic(arg0: string, arg1: number): void;
      IsMusicPlaying(): boolean;
      PlayAsMusic(arg0: string, arg1: fmod.fmod.Audio, arg2: boolean, arg3: number): void;
      PlayJukeboxSound(arg0: string, arg1: boolean, arg2: number): fmod.fmod.Audio;
      PlayMusic(arg0: string, arg1: string, arg2: boolean, arg3: number): fmod.fmod.Audio;
      PlaySound(arg0: string, arg1: boolean, arg2: number, arg3: number): fmod.fmod.Audio;
      PlaySoundEvenSilent(arg0: string, arg1: boolean, arg2: number): fmod.fmod.Audio;
      PlaySoundWav(arg0: string, arg1: boolean, arg2: number, arg3: number): fmod.fmod.Audio;
      PlayWorldSound(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: number, arg3: number, arg4: number, arg5: boolean): fmod.fmod.Audio;
      PlayWorldSoundImpl(arg0: string, arg1: boolean, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: boolean): fmod.fmod.Audio;
      PlayWorldSoundWav(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: number, arg3: number, arg4: number, arg5: boolean): fmod.fmod.Audio;
      PlayWorldSoundWavImpl(arg0: string, arg1: boolean, arg2: zombie.iso.IsoGridSquare, arg3: number, arg4: number, arg5: number, arg6: boolean): fmod.fmod.Audio;
      PrepareMusic(arg0: string): fmod.fmod.Audio;
      Purge(): void;
      Start(arg0: fmod.fmod.Audio, arg1: number, arg2: string): fmod.fmod.Audio;
      StopMusic(): void;
      StopSound(arg0: fmod.fmod.Audio): void;
      Update(): void;
      debugScriptSounds(): void;
      equals(arg0: any): boolean;
      getAmbientPieces(): java.util.ArrayList<fmod.fmod.Audio>;
      getAmbientVolume(): number;
      getClass(): java.lang.Class<any>;
      getCurrentMusicLibrary(): string;
      getCurrentMusicName(): string;
      getFMODParameters(): zombie.audio.FMODParameterList;
      getMusicPosition(): number;
      getMusicVolume(): number;
      getSoundVolume(): number;
      getVehicleEngineVolume(): number;
      hashCode(): number;
      isListenerInRange(arg0: number, arg1: number, arg2: number): boolean;
      isPlayingMusic(): boolean;
      isPlayingUISound(arg0: number): boolean;
      isRemastered(): boolean;
      notify(): void;
      notifyAll(): void;
      pauseSoundAndMusic(): void;
      playAmbient(arg0: string): void;
      playMusic(arg0: string): void;
      playMusicNonTriggered(arg0: string, arg1: number): void;
      playNightAmbient(arg0: string): void;
      playUISound(arg0: string): number;
      registerEmitter(arg0: zombie.audio.BaseSoundEmitter): void;
      resumeSoundAndMusic(): void;
      setAmbientVolume(arg0: number): void;
      setMusicState(arg0: string): void;
      setMusicVolume(arg0: number): void;
      setMusicWakeState(arg0: zombie.characters.IsoPlayer, arg1: string): void;
      setSoundVolume(arg0: number): void;
      setVehicleEngineVolume(arg0: number): void;
      startEvent(arg0: number, arg1: zombie.audio.GameSoundClip, arg2: java.util.BitSet): void;
      stop(): void;
      stopEvent(arg0: number, arg1: zombie.audio.GameSoundClip, arg2: java.util.BitSet): void;
      stopMusic(arg0: string): void;
      stopUISound(arg0: number): void;
      toString(): string;
      unregisterEmitter(arg0: zombie.audio.BaseSoundEmitter): void;
      update1(): void;
      update2(): void;
      update3(): void;
      update3D(): void;
      update4(): void;
      updateEvent(arg0: number, arg1: zombie.audio.GameSoundClip): void;
      wait(arg0: number): void;
    }
    // zombie.SoundManager$AmbientSoundEffect extends java.lang.Object
    export class SoundManager$AmbientSoundEffect {
      private constructor();
      clip?: zombie.audio.GameSoundClip;
      effectiveVolume: number;
      eventInstance: number;
      gain: number;
      name?: string;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getName(): string;
      hashCode(): number;
      isPlaying(): boolean;
      notify(): void;
      notifyAll(): void;
      pause(): void;
      setName(arg0: string): void;
      setVolume(arg0: number): void;
      start(): void;
      stop(): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.SystemDisabler extends java.lang.Object
    export class SystemDisabler {
      private constructor();
      static doCharacterStats: boolean;
      static doEnableDetectOpenGLErrorsInTexture: boolean;
      static doObjectStateSyncEnable: boolean;
      static doOverridePOVCharacters: boolean;
      static doPlayerCreation: boolean;
      static doSurvivorCreation: boolean;
      static doVehiclesEverywhere: boolean;
      static doVehiclesWithoutTextures: boolean;
      static doWorldSyncEnable: boolean;
      static doZombieCreation: boolean;
      static useNetworkCharacter: boolean;
      static zombiesDontAttack: boolean;
      static zombiesSwitchOwnershipEachUpdate: boolean;
  
      Reset(): void;
      equals(arg0: any): boolean;
      getAllowDebugConnections(): boolean;
      getClass(): java.lang.Class<any>;
      getDoMainLoopDealWithNetData(): boolean;
      getEnableAdvancedSoundOptions(): boolean;
      getOverrideServerConnectDebugCheck(): boolean;
      getdoHighFriction(): boolean;
      getdoVehicleLowRider(): boolean;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      setDoCharacterStats(arg0: boolean): void;
      setDoPlayerCreation(arg0: boolean): void;
      setDoSurvivorCreation(arg0: boolean): void;
      setDoZombieCreation(arg0: boolean): void;
      setEnableAdvancedSoundOptions(arg0: boolean): void;
      setObjectStateSyncEnable(arg0: boolean): void;
      setOverridePOVCharacters(arg0: boolean): void;
      setVehiclesEverywhere(arg0: boolean): void;
      setWorldSyncEnable(arg0: boolean): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.VirtualZombieManager extends java.lang.Object
    export class VirtualZombieManager {
      private constructor();
      MaxRealZombies: number;
      readonly choices?: java.util.ArrayList<zombie.iso.IsoGridSquare>;
      static instance?: zombie.VirtualZombieManager;
  
      AddBloodToMap(arg0: number, arg1: zombie.iso.IsoChunk): void;
      RemoveZombie(arg0: zombie.characters.IsoZombie): void;
      Reset(): void;
      addDeadZombiesToMap(arg0: number, arg1: zombie.iso.RoomDef): void;
      addIndoorZombiesToChunk(arg0: zombie.iso.IsoChunk, arg1: zombie.iso.areas.IsoRoom): void;
      addToReusable(arg0: zombie.characters.IsoZombie): void;
      addZombiesToMap(arg0: number, arg1: zombie.iso.RoomDef, arg2: boolean): java.util.ArrayList<zombie.characters.IsoZombie>;
      canSpawnAt(arg0: number, arg1: number, arg2: number): boolean;
      createEatingZombies(arg0: zombie.iso.objects.IsoDeadBody, arg1: number): void;
      createHordeFromTo(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      createRealZombie(arg0: number, arg1: number, arg2: number): zombie.characters.IsoZombie;
      createRealZombieAlways(arg0: number, arg1: number, arg2: boolean): zombie.characters.IsoZombie;
      createRealZombieNow(arg0: number, arg1: number, arg2: number): zombie.characters.IsoZombie;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      init(): void;
      isReused(arg0: zombie.characters.IsoZombie): boolean;
      notify(): void;
      notifyAll(): void;
      removeZombieFromWorld(arg0: zombie.characters.IsoZombie): boolean;
      reusableZombiesSize(): number;
      roomSpotted(arg0: zombie.iso.areas.IsoRoom): void;
      toString(): string;
      tryAddIndoorZombies(arg0: zombie.iso.RoomDef, arg1: boolean): void;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.WorldSoundManager extends java.lang.Object
    export class WorldSoundManager {
      private constructor();
      readonly SoundList?: java.util.ArrayList<zombie.WorldSoundManager$WorldSound>;
      static readonly instance?: zombie.WorldSoundManager;
  
      KillCell(): void;
      addSound(arg0: any, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): zombie.WorldSoundManager$WorldSound;
      addSoundRepeating(arg0: any, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean): zombie.WorldSoundManager$WorldSound;
      equals(arg0: any): boolean;
      getBiggestSoundZomb(arg0: number, arg1: number, arg2: number, arg3: boolean, arg4: zombie.characters.IsoZombie): zombie.WorldSoundManager$ResultBiggestSound;
      getClass(): java.lang.Class<any>;
      getNew(): zombie.WorldSoundManager$WorldSound;
      getSoundAttract(arg0: zombie.WorldSoundManager$WorldSound, arg1: zombie.characters.IsoZombie): number;
      getSoundZomb(arg0: zombie.characters.IsoZombie): zombie.WorldSoundManager$WorldSound;
      getStressFromSounds(arg0: number, arg1: number, arg2: number): number;
      hashCode(): number;
      init(arg0: zombie.iso.IsoCell): void;
      initFrame(): void;
      notify(): void;
      notifyAll(): void;
      render(): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.WorldSoundManager$ResultBiggestSound extends java.lang.Object
    export class WorldSoundManager$ResultBiggestSound {
      private constructor();
      attract: number;
      sound?: zombie.WorldSoundManager$WorldSound;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      init(arg0: zombie.WorldSoundManager$WorldSound, arg1: number): zombie.WorldSoundManager$ResultBiggestSound;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.WorldSoundManager$WorldSound extends java.lang.Object
    export class WorldSoundManager$WorldSound {
      private constructor();
      bRepeating: boolean;
      life: number;
      radius: number;
      source?: any;
      sourceIsZombie: boolean;
      stressMod: number;
      stresshumans: boolean;
      volume: number;
      x: number;
      y: number;
      z: number;
      zombieIgnoreDist: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      init(arg0: any, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): zombie.WorldSoundManager$WorldSound;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ZomboidBitFlag extends java.lang.Object
    export class ZomboidBitFlag {
      private constructor();
      Or(arg0: zombie.ZomboidBitFlag): void;
      clear(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getFromLong(arg0: number): void;
      hashCode(): number;
      isSet(arg0: zombie.iso.SpriteDetails.IsoFlagType): boolean;
      load(arg0: java.io.DataInputStream): void;
      notify(): void;
      notifyAll(): void;
      save(arg0: java.io.DataOutputStream): void;
      set(arg0: number, arg1: boolean): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.Lua {
    // zombie.Lua.Event extends java.lang.Object
    export class Event {
      private constructor();
      static readonly ADD: number;
      static readonly NUM_FUNCTIONS: number;
      readonly callbacks?: java.util.ArrayList<se.krka.kahlua.vm.LuaClosure>;
      name?: string;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      register(arg0: se.krka.kahlua.vm.Platform, arg1: se.krka.kahlua.vm.KahluaTable): void;
      toString(): string;
      trigger(arg0: se.krka.kahlua.vm.KahluaTable, arg1: se.krka.kahlua.integration.LuaCaller, arg2: any[]): boolean;
      wait(arg0: number): void;
    }
    // zombie.Lua.Event$Add extends java.lang.Object
    export class Event$Add {
      private constructor();
      call(arg0: se.krka.kahlua.vm.LuaCallFrame, arg1: number): number;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.Lua.Event$Remove extends java.lang.Object
    export class Event$Remove {
      private constructor();
      call(arg0: se.krka.kahlua.vm.LuaCallFrame, arg1: number): number;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.Lua.LuaEventManager extends java.lang.Object
    export class LuaEventManager {
      private constructor();
      static readonly OnTickCallbacks?: java.util.ArrayList<se.krka.kahlua.vm.LuaClosure>;
  
      AddEvent(arg0: string): zombie.Lua.Event;
      Reset(): void;
      ResetCallbacks(): void;
      call(arg0: se.krka.kahlua.vm.LuaCallFrame, arg1: number): number;
      clear(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      register(arg0: se.krka.kahlua.vm.Platform, arg1: se.krka.kahlua.vm.KahluaTable): void;
      reroute(arg0: se.krka.kahlua.vm.Prototype, arg1: se.krka.kahlua.vm.LuaClosure): void;
      toString(): string;
      triggerEvent(arg0: string): void;
      triggerEventGarbage(arg0: string, arg1: any, arg2: any): void;
      triggerEventUnique(arg0: string, arg1: any): void;
      wait(arg0: number): void;
    }
    // zombie.Lua.LuaManager extends java.lang.Object
    export class LuaManager {
      private constructor();
      static caller?: se.krka.kahlua.integration.LuaCaller;
      static checksumDone: boolean;
      static converterManager?: se.krka.kahlua.converter.KahluaConverterManager;
      static debugcaller?: se.krka.kahlua.integration.LuaCaller;
      static debugthread?: se.krka.kahlua.vm.KahluaThread;
      static env?: se.krka.kahlua.vm.KahluaTable;
      static exposer?: zombie.Lua.LuaManager$Exposer;
      static loadList?: java.util.ArrayList<string>;
      static loaded?: java.util.ArrayList<string>;
      static loadedReturn?: java.util.HashMap<string, any>;
      static platform?: se.krka.kahlua.j2se.J2SEPlatform;
      static thread?: se.krka.kahlua.vm.KahluaThread;
  
      AdjacentFreeTileFinder(arg0: zombie.iso.IsoGridSquare, arg1: zombie.characters.IsoPlayer): zombie.iso.IsoGridSquare;
      LoadDir(arg0: string): void;
      LoadDirBase(arg0: string, arg1: boolean): void;
      RunLua(arg0: string, arg1: boolean): any;
      Test(): void;
      call(arg0: string, arg1: any): void;
      copyTable(arg0: se.krka.kahlua.vm.KahluaTable): se.krka.kahlua.vm.KahluaTable;
      dropItem(arg0: zombie.inventory.InventoryItem): void;
      equals(arg0: any): boolean;
      fillContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.characters.IsoPlayer): void;
      finishChecksum(): void;
      get(arg0: any): any;
      getClass(): java.lang.Class<any>;
      getDotDelimitedClosure(arg0: string): se.krka.kahlua.vm.LuaClosure;
      getFunctionObject(arg0: string): any;
      getHourMinuteJava(): string;
      getLuaCacheDir(): string;
      getSandboxCacheDir(): string;
      hashCode(): number;
      init(): void;
      initChecksum(): void;
      notify(): void;
      notifyAll(): void;
      outputTable(arg0: se.krka.kahlua.vm.KahluaTable, arg1: number): void;
      searchFolders(arg0: java.net.URI, arg1: java.io.File): void;
      toString(): string;
      transferItem(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.InventoryItem, arg2: zombie.inventory.ItemContainer, arg3: zombie.inventory.ItemContainer): void;
      updateOverlaySprite(arg0: zombie.iso.IsoObject): void;
      wait(arg0: number): void;
    }
    // zombie.Lua.LuaManager$Exposer extends se.krka.kahlua.integration.expose.LuaJavaClassExposer
    export class LuaManager$Exposer {
      private constructor();
      readonly TypeMap?: java.util.HashMap<string, java.lang.Class<any>>;
  
      destroy(): void;
      equals(arg0: any): boolean;
      exposeAll(): void;
      exposeGlobalClassFunction(arg0: se.krka.kahlua.vm.KahluaTable, arg1: java.lang.Class<any>, arg2: java.lang.reflect.Constructor<any>, arg3: string): void;
      exposeGlobalFunctions(arg0: any): void;
      exposeGlobalObjectFunction(arg0: se.krka.kahlua.vm.KahluaTable, arg1: any, arg2: java.lang.reflect.Method): void;
      exposeLikeJava(arg0: java.lang.Class<any>, arg1: se.krka.kahlua.vm.KahluaTable): void;
      exposeLikeJavaRecursively(arg0: java.lang.reflect.Type, arg1: se.krka.kahlua.vm.KahluaTable): void;
      exposeMethod(arg0: java.lang.Class<any>, arg1: java.lang.reflect.Method, arg2: string, arg3: se.krka.kahlua.vm.KahluaTable): void;
      getClass(): java.lang.Class<any>;
      getClassDebugInformation(): java.util.Map<java.lang.Class<any>, se.krka.kahlua.integration.expose.ClassDebugInformation>;
      getDefinition(arg0: any): string;
      hashCode(): number;
      isExposed(arg0: java.lang.Class<any>): boolean;
      notify(): void;
      notifyAll(): void;
      setExposed(arg0: java.lang.Class<any>): void;
      shouldExpose(arg0: java.lang.Class<any>): boolean;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.Lua.LuaManager$GlobalObject extends java.lang.Object
    export class LuaManager$GlobalObject {
      private constructor();
      AddNoiseToken(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      AddWorldSound(arg0: zombie.characters.IsoPlayer, arg1: number, arg2: number): void;
      InvMngGetItem(arg0: number, arg1: string, arg2: zombie.characters.IsoPlayer): void;
      InvMngRemoveItem(arg0: number, arg1: zombie.characters.IsoPlayer): void;
      ProceedFactionMessage(arg0: string): void;
      ProcessAdminChatMessage(arg0: string): void;
      ProcessSafehouseMessage(arg0: string): void;
      Render3DItem(arg0: zombie.inventory.InventoryItem, arg1: zombie.iso.IsoGridSquare, arg2: number, arg3: number, arg4: number, arg5: number): void;
      SendCommandToServer(arg0: string): void;
      SyncXp(arg0: zombie.characters.IsoPlayer): void;
      ZombRand(arg0: number): number;
      ZombRandBetween(arg0: number, arg1: number): number;
      ZombRandFloat(arg0: number, arg1: number): number;
      acceptFactionInvite(arg0: zombie.characters.Faction, arg1: string): void;
      acceptSafehouseInvite(arg0: zombie.iso.areas.SafeHouse, arg1: string): void;
      acceptTrading(arg0: zombie.characters.IsoPlayer, arg1: zombie.characters.IsoPlayer, arg2: boolean): void;
      activateJoypadOnSteamDeck(): void;
      activateSteamOverlayToWebPage(arg0: string): void;
      activateSteamOverlayToWorkshop(): void;
      activateSteamOverlayToWorkshopItem(arg0: string): void;
      activateSteamOverlayToWorkshopUser(): void;
      addAllBurntVehicles(): void;
      addAllSmashedVehicles(): void;
      addAllVehicles(arg0: java.util._function.Predicate<zombie.scripting.objects.VehicleScript>): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addCarCrash(): void;
      addPhysicsObject(): zombie.vehicles.BaseVehicle;
      addSound(arg0: zombie.iso.IsoObject, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
      addTicket(arg0: string, arg1: string, arg2: number): void;
      addUserlog(arg0: string, arg1: string, arg2: string): void;
      addVehicle(arg0: string): zombie.vehicles.BaseVehicle;
      addVehicleDebug(arg0: string, arg1: zombie.iso.IsoDirections, arg2: number, arg3: zombie.iso.IsoGridSquare): zombie.vehicles.BaseVehicle;
      addVirtualZombie(arg0: number, arg1: number): void;
      addWarningPoint(arg0: string, arg1: string, arg2: number): void;
      addZombieSitting(arg0: number, arg1: number, arg2: number): void;
      addZombiesEating(arg0: number, arg1: number, arg2: number, arg3: number, arg4: boolean): void;
      addZombiesInBuilding(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: zombie.iso.RoomDef, arg4: number): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesInOutfit(arg0: number, arg1: number, arg2: number, arg3: number, arg4: string, arg5: number, arg6: boolean, arg7: boolean, arg8: boolean, arg9: boolean, arg10: number): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesInOutfitArea(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: string, arg7: number): java.util.ArrayList<zombie.characters.IsoZombie>;
      assaultPlayer(): void;
      attachTrailerToPlayerVehicle(arg0: number): void;
      backToSinglePlayer(): void;
      breakpoint(): void;
      canConnect(): boolean;
      canInviteFriends(): boolean;
      canModifyPlayerScoreboard(): boolean;
      canModifyPlayerStats(): boolean;
      canSeePlayerStats(): boolean;
      checkPlayerCanUseChat(arg0: string): boolean;
      checkSaveFileExists(arg0: string): boolean;
      checkSaveFolderExists(arg0: string): boolean;
      checkSavePlayerExists(): boolean;
      checkServerName(arg0: string): string;
      cloneItemType(arg0: string, arg1: string): zombie.scripting.objects.Item;
      configureLighting(arg0: number): void;
      connectToServerStateCallback(arg0: string): void;
      copyTable(arg0: se.krka.kahlua.vm.KahluaTable, arg1: se.krka.kahlua.vm.KahluaTable): se.krka.kahlua.vm.KahluaTable;
      createHordeFromTo(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      createHordeInAreaTo(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      createItemTransaction(arg0: zombie.inventory.InventoryItem, arg1: zombie.inventory.ItemContainer, arg2: zombie.inventory.ItemContainer): void;
      createNewScriptItem(arg0: string, arg1: string, arg2: string, arg3: string, arg4: string): zombie.scripting.objects.Item;
      createRandomDeadBody(arg0: zombie.iso.IsoGridSquare, arg1: number): zombie.iso.objects.IsoDeadBody;
      createRegionFile(): se.krka.kahlua.vm.KahluaTable;
      createStory(arg0: string): void;
      createTile(arg0: string, arg1: zombie.iso.IsoGridSquare): void;
      createWorld(arg0: string): void;
      createZombie(arg0: number, arg1: number, arg2: number, arg3: zombie.characters.SurvivorDesc, arg4: number, arg5: zombie.iso.IsoDirections): zombie.characters.IsoZombie;
      debugFullyStreamedIn(arg0: number, arg1: number): void;
      debugLuaTable(arg0: any, arg1: number): void;
      deleteAllGameModeSaves(arg0: string): void;
      deletePlayerSave(arg0: string): void;
      deleteSandboxPreset(arg0: string): void;
      deleteSave(arg0: string): void;
      disconnect(): void;
      doChallenge(arg0: se.krka.kahlua.vm.KahluaTable): void;
      doKeyPress(arg0: boolean): void;
      doTutorial(arg0: se.krka.kahlua.vm.KahluaTable): void;
      drawOverheadMap(arg0: zombie.ui.UIElement, arg1: number, arg2: number, arg3: number): void;
      endFileInput(): void;
      endFileOutput(): void;
      endHelicopter(): void;
      endTextFileInput(): void;
      equals(arg0: any): boolean;
      executeQuery(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      fileExists(arg0: string): boolean;
      focusOnTab(arg0: number): void;
      forceChangeState(arg0: zombie.gameStates.GameState): void;
      forceDisconnect(): void;
      forceSnowCheck(): void;
      getAbsoluteSaveFolderName(arg0: string): string;
      getAccessLevel(): string;
      getActivatedMods(): java.util.ArrayList<string>;
      getAllBeardStyles(): java.util.ArrayList<string>;
      getAllDecalNamesForItem(arg0: zombie.inventory.InventoryItem): java.util.ArrayList<string>;
      getAllHairStyles(arg0: boolean): java.util.ArrayList<string>;
      getAllItems(): java.util.ArrayList<zombie.scripting.objects.Item>;
      getAllItemsForBodyLocation(arg0: string): se.krka.kahlua.vm.KahluaTable;
      getAllOutfits(arg0: boolean): java.util.ArrayList<string>;
      getAllRecipes(): java.util.ArrayList<zombie.scripting.objects.Recipe>;
      getAllSavedPlayers(): java.util.List<java.io.BufferedReader>;
      getAllVehicles(): java.util.ArrayList<string>;
      getAmbientStreamManager(): zombie.BaseAmbientStreamManager;
      getAnimationViewerState(): zombie.gameStates.AnimationViewerState;
      getAttachmentEditorState(): zombie.gameStates.AttachmentEditorState;
      getAverageFSP(): number;
      getBeardStylesInstance(): zombie.core.skinnedmodel.population.BeardStyles;
      getBehaviourDebugPlayer(): zombie.characters.IsoGameCharacter;
      getButtonCount(arg0: number): number;
      getCallframeTop(arg0: se.krka.kahlua.vm.Coroutine): number;
      getCameraOffX(): number;
      getCameraOffY(): number;
      getCell(): zombie.iso.IsoCell;
      getClass(): java.lang.Class<any>;
      getClassField(arg0: any, arg1: number): java.lang.reflect.Field;
      getClassFieldVal(arg0: any, arg1: java.lang.reflect.Field): any;
      getClassFunction(arg0: any, arg1: number): java.lang.reflect.Method;
      getClientUsername(): string;
      getClimateManager(): zombie.iso.weather.ClimateManager;
      getClimateMoon(): zombie.iso.weather.ClimateMoon;
      getConnectedPlayers(): java.util.ArrayList<zombie.characters.IsoPlayer>;
      getContainerOverlays(): zombie.iso.ContainerOverlays;
      getControllerAxisCount(arg0: number): number;
      getControllerAxisValue(arg0: number, arg1: number): number;
      getControllerButtonCount(arg0: number): number;
      getControllerCount(): number;
      getControllerDeadZone(arg0: number, arg1: number): number;
      getControllerGUID(arg0: number): string;
      getControllerName(arg0: number): string;
      getControllerPovX(arg0: number): number;
      getControllerPovY(arg0: number): number;
      getCore(): zombie.core.Core;
      getCoroutineCallframeStack(arg0: se.krka.kahlua.vm.Coroutine, arg1: number): se.krka.kahlua.vm.LuaCallFrame;
      getCoroutineObjStack(arg0: se.krka.kahlua.vm.Coroutine, arg1: number): any;
      getCoroutineObjStackWithBase(arg0: se.krka.kahlua.vm.Coroutine, arg1: number): any;
      getCoroutineTop(arg0: se.krka.kahlua.vm.Coroutine): number;
      getCurrentCoroutine(): se.krka.kahlua.vm.Coroutine;
      getCurrentUserProfileName(): string;
      getCurrentUserSteamID(): string;
      getDBSchema(): void;
      getDebug(): boolean;
      getDebugOptions(): zombie.debug.DebugOptions;
      getDirectionTo(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoObject): zombie.iso.IsoDirections;
      getEditVehicleState(): zombie.vehicles.EditVehicleState;
      getErosion(): zombie.erosion.ErosionMain;
      getEvolvedRecipes(): java.util.Stack<zombie.scripting.objects.EvolvedRecipe>;
      getFMODSoundBank(): zombie.audio.BaseSoundBank;
      getFileInput(arg0: string): java.io.DataInputStream;
      getFileOutput(arg0: string): java.io.DataOutputStream;
      getFileReader(arg0: string, arg1: boolean): java.io.BufferedReader;
      getFileSeparator(): string;
      getFileWriter(arg0: string, arg1: boolean, arg2: boolean): zombie.Lua.LuaManager$GlobalObject$LuaFileWriter;
      getFilenameOfCallframe(arg0: se.krka.kahlua.vm.LuaCallFrame): string;
      getFilenameOfClosure(arg0: se.krka.kahlua.vm.LuaClosure): string;
      getFirstLineOfClosure(arg0: se.krka.kahlua.vm.LuaClosure): number;
      getFriendsList(): se.krka.kahlua.vm.KahluaTable;
      getFullSaveDirectoryTable(): se.krka.kahlua.vm.KahluaTable;
      getGameClient(): zombie.network.GameClient;
      getGameFilesInput(arg0: string): java.io.DataInputStream;
      getGameFilesTextInput(arg0: string): java.io.BufferedReader;
      getGameSpeed(): number;
      getGameTime(): zombie.GameTime;
      getGametimeTimestamp(): number;
      getHairStylesInstance(): zombie.core.skinnedmodel.population.HairStyles;
      getHourMinute(): string;
      getIsoMarkers(): zombie.iso.IsoMarkers;
      getItemNameFromFullType(arg0: string): string;
      getItemText(arg0: string): string;
      getJoypadAButton(arg0: number): number;
      getJoypadAimingAxisX(arg0: number): number;
      getJoypadAimingAxisY(arg0: number): number;
      getJoypadBButton(arg0: number): number;
      getJoypadBackButton(arg0: number): number;
      getJoypadLBumper(arg0: number): number;
      getJoypadLeftStickButton(arg0: number): number;
      getJoypadMovementAxisX(arg0: number): number;
      getJoypadMovementAxisY(arg0: number): number;
      getJoypadRBumper(arg0: number): number;
      getJoypadRightStickButton(arg0: number): number;
      getJoypadStartButton(arg0: number): number;
      getJoypadXButton(arg0: number): number;
      getJoypadYButton(arg0: number): number;
      getKeyCode(arg0: string): number;
      getKeyName(arg0: number): string;
      getLastPlayedDate(arg0: string): string;
      getLastStandPlayerFileNames(): java.util.List<string>;
      getLastStandPlayersDirectory(): string;
      getLatestSave(): se.krka.kahlua.vm.KahluaTable;
      getLineNumber(arg0: se.krka.kahlua.vm.LuaCallFrame): number;
      getLoadedLua(arg0: number): string;
      getLoadedLuaCount(): number;
      getLocalVarCount(arg0: se.krka.kahlua.vm.Coroutine): number;
      getLocalVarName(arg0: se.krka.kahlua.vm.Coroutine, arg1: number): string;
      getLocalVarStack(arg0: se.krka.kahlua.vm.Coroutine, arg1: number): number;
      getLotDirectories(): java.util.ArrayList<string>;
      getLuaDebuggerErrorCount(): number;
      getLuaDebuggerErrors(): java.util.ArrayList<string>;
      getMapDirectoryTable(): se.krka.kahlua.vm.KahluaTable;
      getMapFoldersForMod(arg0: string): java.util.ArrayList<string>;
      getMapInfo(arg0: string): se.krka.kahlua.vm.KahluaTable;
      getMaxActivePlayers(): number;
      getMaxPlayers(): number;
      getMethodParameter(arg0: java.lang.reflect.Method, arg1: number): string;
      getMethodParameterCount(arg0: java.lang.reflect.Method): number;
      getModDirectoryTable(): se.krka.kahlua.vm.KahluaTable;
      getModFileReader(arg0: string, arg1: string, arg2: boolean): java.io.BufferedReader;
      getModFileWriter(arg0: string, arg1: string, arg2: boolean, arg3: boolean): zombie.Lua.LuaManager$GlobalObject$LuaFileWriter;
      getModInfo(arg0: string): zombie.gameStates.ChooseGameInfo$Mod;
      getModInfoByID(arg0: string): zombie.gameStates.ChooseGameInfo$Mod;
      getMods(): java.util.List<string>;
      getMouseX(): number;
      getMouseXScaled(): number;
      getMouseY(): number;
      getMouseYScaled(): number;
      getMyDocumentFolder(): string;
      getNumActivePlayers(): number;
      getNumClassFields(arg0: any): number;
      getNumClassFunctions(arg0: any): number;
      getOnlinePlayers(): java.util.ArrayList<zombie.characters.IsoPlayer>;
      getOnlineUsername(): string;
      getPacketCounts(arg0: number): se.krka.kahlua.vm.KahluaTable;
      getPerformance(): zombie.core.PerformanceSettings;
      getPlayer(): zombie.characters.IsoPlayer;
      getPlayerByOnlineID(arg0: number): zombie.characters.IsoPlayer;
      getPlayerFromUsername(arg0: string): zombie.characters.IsoPlayer;
      getPlayerInfo(arg0: zombie.characters.IsoPlayer): se.krka.kahlua.vm.KahluaTable;
      getPlayerScreenHeight(arg0: number): number;
      getPlayerScreenLeft(arg0: number): number;
      getPlayerScreenTop(arg0: number): number;
      getPlayerScreenWidth(arg0: number): number;
      getPublicServersList(): se.krka.kahlua.vm.KahluaTable;
      getPuddlesManager(): zombie.iso.IsoPuddles;
      getRadioAPI(): zombie.radio.RadioAPI;
      getRadioText(arg0: string): string;
      getRadioTranslators(arg0: zombie.core.Language): java.util.ArrayList<string>;
      getRandomUUID(): string;
      getRecipeDisplayName(arg0: string): string;
      getReconnectCountdownTimer(): string;
      getRenderer(): zombie.core.SpriteRenderer;
      getSLSoundManager(): zombie.radio.StorySounds.SLSoundManager;
      getSandboxFileWriter(arg0: string, arg1: boolean, arg2: boolean): zombie.Lua.LuaManager$GlobalObject$LuaFileWriter;
      getSandboxOptions(): zombie.SandboxOptions;
      getSandboxPresets(): java.util.List<string>;
      getSaveDirectory(arg0: string): java.util.ArrayList<java.io.File>;
      getSaveDirectoryTable(): se.krka.kahlua.vm.KahluaTable;
      getSaveInfo(arg0: string): se.krka.kahlua.vm.KahluaTable;
      getSaveName(arg0: java.io.File): string;
      getScriptManager(): zombie.scripting.ScriptManager;
      getSearchMode(): zombie.iso.SearchMode;
      getServerAddressFromArgs(): string;
      getServerList(): se.krka.kahlua.vm.KahluaTable;
      getServerListFile(): string;
      getServerModData(): void;
      getServerName(): string;
      getServerOptions(): zombie.network.ServerOptions;
      getServerPasswordFromArgs(): string;
      getServerSavedWorldVersion(arg0: string): number;
      getServerSettingsManager(): zombie.network.ServerSettingsManager;
      getServerSpawnRegions(): se.krka.kahlua.vm.KahluaTable;
      getServerStatistic(): se.krka.kahlua.vm.KahluaTable;
      getServerStatisticEnable(): boolean;
      getShortenedFilename(arg0: string): string;
      getSleepingEvent(): zombie.ai.sadisticAIDirector.SleepingEvent;
      getSoundManager(): zombie.BaseSoundManager;
      getSpecificPlayer(arg0: number): zombie.characters.IsoPlayer;
      getSprite(arg0: string): zombie.iso.sprite.IsoSprite;
      getSpriteManager(arg0: string): zombie.iso.sprite.IsoSpriteManager;
      getSquare(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getStatistics(): se.krka.kahlua.vm.KahluaTable;
      getSteamAvatarFromSteamID(arg0: string): zombie.core.textures.Texture;
      getSteamAvatarFromUsername(arg0: string): zombie.core.textures.Texture;
      getSteamIDFromUsername(arg0: string): string;
      getSteamModeActive(): boolean;
      getSteamProfileNameFromSteamID(arg0: string): string;
      getSteamProfileNameFromUsername(arg0: string): string;
      getSteamScoreboard(): boolean;
      getSteamWorkshopItemIDs(): java.util.ArrayList<string>;
      getSteamWorkshopItemMods(arg0: string): java.util.ArrayList<zombie.gameStates.ChooseGameInfo$Mod>;
      getSteamWorkshopStagedItems(): java.util.ArrayList<zombie.core.znet.SteamWorkshopItem>;
      getTableResult(arg0: string, arg1: number): void;
      getText(arg0: string, arg1: any, arg2: any, arg3: any): string;
      getTextManager(): zombie.ui.TextManager;
      getTextMediaEN(arg0: string): string;
      getTextOrNull(arg0: string, arg1: any): string;
      getTexture(arg0: string): zombie.core.textures.Texture;
      getTextureFromSaveDir(arg0: string, arg1: string): zombie.core.textures.Texture;
      getTickets(arg0: string): void;
      getTileOverlays(): zombie.iso.TileOverlays;
      getTime(): se.krka.kahlua.vm.KahluaTable;
      getTimeInMillis(): number;
      getTimestamp(): number;
      getTimestampMs(): number;
      getTranslatorCredits(arg0: zombie.core.Language): java.util.ArrayList<string>;
      getUrlInputStream(arg0: string): java.io.DataInputStream;
      getVehicleById(arg0: number): zombie.vehicles.BaseVehicle;
      getVehicleInfo(arg0: zombie.vehicles.BaseVehicle): se.krka.kahlua.vm.KahluaTable;
      getVehicleZoneAt(arg0: number, arg1: number, arg2: number): zombie.iso.IsoMetaGrid$VehicleZone;
      getWorld(): zombie.iso.IsoWorld;
      getWorldMarkers(): zombie.iso.WorldMarkers;
      getWorldSoundManager(): zombie.WorldSoundManager;
      getZombieInfo(arg0: zombie.characters.IsoZombie): se.krka.kahlua.vm.KahluaTable;
      getZomboidRadio(): zombie.radio.ZomboidRadio;
      getZone(arg0: number, arg1: number, arg2: number): zombie.iso.IsoMetaGrid$Zone;
      getZones(arg0: number, arg1: number, arg2: number): java.util.ArrayList<zombie.iso.IsoMetaGrid$Zone>;
      hasBreakpoint(arg0: string, arg1: number): boolean;
      hasDataBreakpoint(arg0: se.krka.kahlua.vm.KahluaTable, arg1: any): boolean;
      hasDataReadBreakpoint(arg0: se.krka.kahlua.vm.KahluaTable, arg1: any): boolean;
      hashCode(): number;
      initUISystem(): void;
      instanceItem(arg0: string): zombie.inventory.InventoryItem;
      instof(arg0: any, arg1: string): boolean;
      inviteFriend(arg0: string): void;
      is64bit(): boolean;
      isAccessLevel(arg0: string): boolean;
      isAdmin(): boolean;
      isAltKeyDown(): boolean;
      isClient(): boolean;
      isControllerConnected(arg0: number): boolean;
      isCoopHost(): boolean;
      isCtrlKeyDown(): boolean;
      isCurrentExecutionPoint(arg0: string, arg1: number): boolean;
      isDebugEnabled(): boolean;
      isDemo(): boolean;
      isDesktopOpenSupported(): boolean;
      isFloatingGamepadTextInputVisible(): boolean;
      isGamePaused(): boolean;
      isIngameState(): boolean;
      isItemTransactionConsistent(arg0: zombie.inventory.InventoryItem, arg1: zombie.inventory.ItemContainer, arg2: zombie.inventory.ItemContainer): boolean;
      isJoypadConnected(arg0: number): boolean;
      isJoypadDown(arg0: number): boolean;
      isJoypadLBPressed(arg0: number): boolean;
      isJoypadLTPressed(arg0: number): boolean;
      isJoypadLeft(arg0: number): boolean;
      isJoypadLeftStickButtonPressed(arg0: number): boolean;
      isJoypadPressed(arg0: number, arg1: number): boolean;
      isJoypadRBPressed(arg0: number): boolean;
      isJoypadRTPressed(arg0: number): boolean;
      isJoypadRight(arg0: number): boolean;
      isJoypadRightStickButtonPressed(arg0: number): boolean;
      isJoypadUp(arg0: number): boolean;
      isKeyDown(arg0: number): boolean;
      isKeyPressed(arg0: number): boolean;
      isModActive(arg0: zombie.gameStates.ChooseGameInfo$Mod): boolean;
      isMouseButtonDown(arg0: number): boolean;
      isPublicServerListAllowed(): boolean;
      isServer(): boolean;
      isServerSoftReset(): boolean;
      isShiftKeyDown(): boolean;
      isSoundPlaying(arg0: any): boolean;
      isSteamOverlayEnabled(): boolean;
      isSteamRunningOnSteamDeck(): boolean;
      isSystemLinux(): boolean;
      isSystemMacOS(): boolean;
      isSystemWindows(): boolean;
      isType(arg0: any, arg1: string): boolean;
      isValidSteamID(arg0: string): boolean;
      isValidUserName(arg0: string): boolean;
      isXBOXController(): boolean;
      isoRegionsRenderer(): zombie.iso.areas.isoregion.IsoRegionsRenderer;
      isoToScreenX(arg0: number, arg1: number, arg2: number, arg3: number): number;
      isoToScreenY(arg0: number, arg1: number, arg2: number, arg3: number): number;
      loadSkinnedZomboidModel(arg0: string, arg1: string, arg2: string): zombie.core.skinnedmodel.model.Model;
      loadStaticZomboidModel(arg0: string, arg1: string, arg2: string): zombie.core.skinnedmodel.model.Model;
      loadVehicleModel(arg0: string, arg1: string, arg2: string): zombie.core.skinnedmodel.model.Model;
      loadZomboidModel(arg0: string, arg1: string, arg2: string, arg3: string, arg4: boolean): zombie.core.skinnedmodel.model.Model;
      localVarName(arg0: se.krka.kahlua.vm.Coroutine, arg1: number): string;
      luaDebug(): void;
      manipulateSavefile(arg0: string, arg1: string): void;
      moduleDotType(arg0: string, arg1: string): string;
      notify(): void;
      notifyAll(): void;
      openURl(arg0: string): void;
      pauseSoundAndMusic(): void;
      ping(arg0: string, arg1: string, arg2: string, arg3: string): void;
      playServerSound(arg0: string, arg1: zombie.iso.IsoGridSquare): void;
      proceedPM(arg0: string): string;
      processGeneralMessage(arg0: string): void;
      processSayMessage(arg0: string): void;
      processShoutMessage(arg0: string): void;
      querySteamWorkshopItemDetails(arg0: java.util.ArrayList<string>, arg1: se.krka.kahlua.vm.LuaClosure, arg2: any): void;
      queueCharEvent(arg0: string): void;
      queueKeyEvent(arg0: number): void;
      rainConfig(arg0: string, arg1: number): void;
      reactivateJoypadAfterResetLua(): boolean;
      refreshAnimSets(arg0: boolean): void;
      reloadActionGroups(): void;
      reloadControllerConfigFiles(): void;
      reloadEngineRPM(): void;
      reloadLuaFile(arg0: string): void;
      reloadModelsMatching(arg0: string): void;
      reloadServerLuaFile(arg0: string): void;
      reloadSoundFiles(): void;
      reloadVehicleTextures(arg0: string): void;
      reloadVehicles(): void;
      removeItemTransaction(arg0: zombie.inventory.InventoryItem, arg1: zombie.inventory.ItemContainer, arg2: zombie.inventory.ItemContainer): void;
      removeTicket(arg0: number): void;
      removeUserlog(arg0: string, arg1: string, arg2: string): void;
      renderIsoCircle(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      replaceWith(arg0: string, arg1: string, arg2: string): string;
      requestPacketCounts(): void;
      requestTrading(arg0: zombie.characters.IsoPlayer, arg1: zombie.characters.IsoPlayer): void;
      requestUserlog(arg0: string): void;
      require(arg0: string): any;
      resetRegionFile(): void;
      resumeSoundAndMusic(): void;
      revertToKeyboardAndMouse(): void;
      sanitizeWorldName(arg0: string): string;
      save(arg0: boolean): void;
      saveControllerSettings(arg0: number): void;
      saveGame(): void;
      saveModsFile(): void;
      scoreboardUpdate(): void;
      screenToIsoX(arg0: number, arg1: number, arg2: number, arg3: number): number;
      screenToIsoY(arg0: number, arg1: number, arg2: number, arg3: number): number;
      screenZoomIn(): void;
      screenZoomOut(): void;
      sendAddXp(arg0: zombie.characters.IsoPlayer, arg1: zombie.characters.skills.PerkFactory$Perk, arg2: number): void;
      sendBandage(arg0: number, arg1: number, arg2: boolean, arg3: number, arg4: boolean, arg5: string): void;
      sendCataplasm(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      sendCleanBurn(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.IsoGameCharacter, arg2: zombie.characters.BodyDamage.BodyPart, arg3: zombie.inventory.InventoryItem): void;
      sendClientCommand(arg0: zombie.characters.IsoPlayer, arg1: string, arg2: string, arg3: se.krka.kahlua.vm.KahluaTable): void;
      sendClothing(arg0: zombie.characters.IsoPlayer): void;
      sendDisinfect(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.IsoGameCharacter, arg2: zombie.characters.BodyDamage.BodyPart, arg3: zombie.inventory.InventoryItem): void;
      sendFactionInvite(arg0: zombie.characters.Faction, arg1: zombie.characters.IsoPlayer, arg2: string): void;
      sendItemListNet(arg0: zombie.characters.IsoPlayer, arg1: java.util.ArrayList<zombie.inventory.InventoryItem>, arg2: zombie.characters.IsoPlayer, arg3: string, arg4: string): boolean;
      sendItemsInContainer(arg0: zombie.iso.IsoObject, arg1: zombie.inventory.ItemContainer): void;
      sendPersonalColor(arg0: zombie.characters.IsoPlayer): void;
      sendPing(): void;
      sendPlayerExtraInfo(arg0: zombie.characters.IsoPlayer): void;
      sendPlayerStatsChange(arg0: zombie.characters.IsoPlayer): void;
      sendRemoveBullet(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.IsoGameCharacter, arg2: zombie.characters.BodyDamage.BodyPart): void;
      sendRemoveGlass(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.IsoGameCharacter, arg2: zombie.characters.BodyDamage.BodyPart, arg3: boolean): void;
      sendRequestInventory(arg0: zombie.characters.IsoPlayer): void;
      sendSafehouseInvite(arg0: zombie.iso.areas.SafeHouse, arg1: zombie.characters.IsoPlayer, arg2: string): void;
      sendServerCommand(arg0: zombie.characters.IsoPlayer, arg1: string, arg2: string, arg3: se.krka.kahlua.vm.KahluaTable): void;
      sendSplint(arg0: number, arg1: number, arg2: boolean, arg3: number, arg4: string): void;
      sendStitch(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.IsoGameCharacter, arg2: zombie.characters.BodyDamage.BodyPart, arg3: zombie.inventory.InventoryItem, arg4: boolean): void;
      sendVisual(arg0: zombie.characters.IsoPlayer): void;
      serverConnect(arg0: string, arg1: string, arg2: string, arg3: string, arg4: string, arg5: string): void;
      serverConnectCoop(arg0: string): void;
      serverFileExists(arg0: string): boolean;
      setActivePlayer(arg0: number): void;
      setAdmin(): void;
      setAggroTarget(arg0: number, arg1: number, arg2: number): void;
      setBehaviorStep(arg0: boolean): void;
      setControllerDeadZone(arg0: number, arg1: number, arg2: number): void;
      setDebugToggleControllerPluggedIn(arg0: number): void;
      setGameSpeed(arg0: number): void;
      setModelMetaData(arg0: string, arg1: string, arg2: string, arg3: string, arg4: boolean): void;
      setMouseXY(arg0: number, arg1: number): void;
      setPlayerJoypad(arg0: number, arg1: number, arg2: zombie.characters.IsoPlayer, arg3: string): void;
      setPlayerMouse(arg0: zombie.characters.IsoPlayer): void;
      setPlayerMovementActive(arg0: number, arg1: boolean): void;
      setProgressBarValue(arg0: zombie.characters.IsoPlayer, arg1: number): void;
      setPuddles(arg0: number): void;
      setSavefilePlayer1(arg0: string, arg1: string, arg2: number): void;
      setServerStatisticEnable(arg0: boolean): void;
      setShowPausedMessage(arg0: boolean): void;
      showAnimationViewer(): void;
      showAttachmentEditor(): void;
      showChunkDebugger(): void;
      showFolderInDesktop(arg0: string): void;
      showGlobalObjectDebugger(): void;
      showSteamFloatingGamepadTextInput(arg0: boolean, arg1: number, arg2: number, arg3: number, arg4: number): boolean;
      showSteamGamepadTextInput(arg0: boolean, arg1: boolean, arg2: string, arg3: number, arg4: string): boolean;
      showVehicleEditor(arg0: string): void;
      showWorldMapEditor(arg0: string): void;
      showWrongChatTabMessage(arg0: number, arg1: number, arg2: string): void;
      sledgeDestroy(arg0: zombie.iso.IsoObject): void;
      spawnHorde(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
      spawnpointsExistsForMod(arg0: string, arg1: string): boolean;
      steamGetInternetServerDetails(arg0: number): zombie.network.Server;
      steamReleaseInternetServersRequest(): void;
      steamRequestInternetServersCount(): number;
      steamRequestInternetServersList(): void;
      steamRequestServerDetails(arg0: string, arg1: number): boolean;
      steamRequestServerRules(arg0: string, arg1: number): boolean;
      stopPing(): void;
      stopSound(arg0: number): void;
      tabToX(arg0: string, arg1: number): string;
      takeScreenshot(arg0: string): void;
      testHelicopter(): void;
      testSound(): void;
      timSort(arg0: se.krka.kahlua.vm.KahluaTable, arg1: any): void;
      toInt(arg0: number): number;
      toString(): string;
      toggleBreakOnChange(arg0: se.krka.kahlua.vm.KahluaTable, arg1: any): void;
      toggleBreakOnRead(arg0: se.krka.kahlua.vm.KahluaTable, arg1: any): void;
      toggleBreakpoint(arg0: string, arg1: number): void;
      toggleModActive(arg0: zombie.gameStates.ChooseGameInfo$Mod, arg1: boolean): void;
      toggleSafetyServer(arg0: zombie.characters.IsoPlayer): void;
      toggleVehicleRenderToTexture(): void;
      tradingUISendAddItem(arg0: zombie.characters.IsoPlayer, arg1: zombie.characters.IsoPlayer, arg2: zombie.inventory.InventoryItem): void;
      tradingUISendRemoveItem(arg0: zombie.characters.IsoPlayer, arg1: zombie.characters.IsoPlayer, arg2: number): void;
      tradingUISendUpdateState(arg0: zombie.characters.IsoPlayer, arg1: zombie.characters.IsoPlayer, arg2: number): void;
      transformIntoKahluaTable(arg0: java.util.HashMap<any, any>): se.krka.kahlua.vm.KahluaTable;
      translatePointXInOverheadMapToWindow(arg0: number, arg1: zombie.ui.UIElement, arg2: number, arg3: number): number;
      translatePointXInOverheadMapToWorld(arg0: number, arg1: zombie.ui.UIElement, arg2: number, arg3: number): number;
      translatePointYInOverheadMapToWindow(arg0: number, arg1: zombie.ui.UIElement, arg2: number, arg3: number): number;
      translatePointYInOverheadMapToWorld(arg0: number, arg1: zombie.ui.UIElement, arg2: number, arg3: number): number;
      triggerEvent(arg0: string, arg1: any): void;
      updateChatSettings(arg0: string, arg1: boolean, arg2: boolean): void;
      updateFire(): void;
      useStaticErosionRand(arg0: boolean): void;
      useTextureFiltering(arg0: boolean): void;
      wait(arg0: number): void;
      wasKeyDown(arg0: number): boolean;
      wasMouseActiveMoreRecentlyThanJoypad(): boolean;
      writeLog(arg0: string, arg1: string): void;
      zpopClearZombies(arg0: number, arg1: number): void;
      zpopNewRenderer(): zombie.popman.ZombiePopulationRenderer;
      zpopSpawnNow(arg0: number, arg1: number): void;
      zpopSpawnTimeToZero(arg0: number, arg1: number): void;
    }
    // zombie.Lua.LuaManager$GlobalObject$LuaFileWriter extends java.lang.Object
    export class LuaManager$GlobalObject$LuaFileWriter {
      private constructor();
      close(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
      write(arg0: string): void;
      writeln(arg0: string): void;
    }
    // zombie.Lua.MapObjects extends java.lang.Object
    export class MapObjects {
      private constructor();
      OnLoadWithSprite(arg0: string, arg1: se.krka.kahlua.vm.LuaClosure, arg2: number): void;
      OnNewWithSprite(arg0: se.krka.kahlua.vm.KahluaTable, arg1: se.krka.kahlua.vm.LuaClosure, arg2: number): void;
      Reset(): void;
      debugLoadChunk(arg0: number, arg1: number): void;
      debugLoadSquare(arg0: number, arg1: number, arg2: number): void;
      debugNewSquare(arg0: number, arg1: number, arg2: number): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      loadGridSquare(arg0: zombie.iso.IsoGridSquare): void;
      newGridSquare(arg0: zombie.iso.IsoGridSquare): void;
      notify(): void;
      notifyAll(): void;
      reroute(arg0: se.krka.kahlua.vm.Prototype, arg1: se.krka.kahlua.vm.LuaClosure): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.ai {
    // zombie.ai.AIBrainPlayerControlVars extends java.lang.Object
    export class AIBrainPlayerControlVars {
      private constructor();
      JustMoved: boolean;
      bAiming: boolean;
      bBannedAttacking: boolean;
      bMelee: boolean;
      bRunning: boolean;
      initiateAttack: boolean;
      strafeX: number;
      strafeY: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.GameCharacterAIBrain extends java.lang.Object
    export class GameCharacterAIBrain {
      private constructor();
      readonly AIFocusPoint?: zombie.iso.Vector2;
      readonly BlockedMemories?: java.util.HashMap<zombie.iso.Vector3, java.util.ArrayList<zombie.iso.Vector3>>;
      readonly HumanControlVars?: zombie.ai.AIBrainPlayerControlVars;
      NextPathNodeInvalidated: boolean;
      StepBehaviors: boolean;
      aiTarget?: zombie.iso.IsoMovingObject;
      allowLongTermTick: boolean;
      chasingZombies?: java.util.ArrayList<zombie.characters.IsoZombie>;
      controlledByAdvancedPathfinder: boolean;
      isAI: boolean;
      isInMeta: boolean;
      readonly nextPathTarget?: zombie.iso.Vector3;
      readonly spottedCharacters?: java.util.ArrayList<zombie.characters.IsoGameCharacter>;
      stance?: zombie.characters.Stance;
      teammateChasingZombies?: java.util.ArrayList<zombie.characters.IsoZombie>;
  
      AddBlockedMemory(arg0: number, arg1: number, arg2: number): void;
      HasBlockedMemory(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): boolean;
      equals(arg0: any): boolean;
      getCharacter(): zombie.characters.IsoGameCharacter;
      getClass(): java.lang.Class<any>;
      getCloseZombieCount(): number;
      getClosestChasingZombie(): zombie.characters.IsoZombie;
      getClosestChasingZombies(arg0: number): java.util.ArrayList<zombie.characters.IsoZombie>;
      getGroup(): zombie.characters.SurvivorGroup;
      getOrder(): string;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      postUpdateHuman(arg0: zombie.characters.IsoPlayer): void;
      renderlast(): void;
      setOrder(arg0: string): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.ai.KnownBlockedEdges extends java.lang.Object
    export class KnownBlockedEdges {
      private constructor();
      n: boolean;
      w: boolean;
      x: number;
      y: number;
      z: number;
  
      alloc(): zombie.ai.KnownBlockedEdges;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      init(arg0: number, arg1: number, arg2: number): zombie.ai.KnownBlockedEdges;
      isBlocked(arg0: number, arg1: number): boolean;
      notify(): void;
      notifyAll(): void;
      release(): void;
      releaseAll(arg0: java.util.ArrayList<zombie.ai.KnownBlockedEdges>): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.MapKnowledge extends java.lang.Object
    export class MapKnowledge {
      private constructor();
      equals(arg0: any): boolean;
      forget(): void;
      getClass(): java.lang.Class<any>;
      getKnownBlockedEdges(): java.util.ArrayList<zombie.ai.KnownBlockedEdges>;
      getOrCreateKnownBlockedEdges(arg0: number, arg1: number, arg2: number): zombie.ai.KnownBlockedEdges;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      setKnownBlockedDoor(arg0: zombie.iso.objects.IsoDoor, arg1: boolean): void;
      setKnownBlockedEdgeN(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      setKnownBlockedEdgeW(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      setKnownBlockedWindow(arg0: zombie.iso.objects.IsoWindow, arg1: boolean): void;
      setKnownBlockedWindowFrame(arg0: zombie.iso.IsoObject, arg1: boolean): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.State extends java.lang.Object
    export class State {
      private constructor();
      animEvent(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      enter(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      execute(arg0: zombie.characters.IsoGameCharacter): void;
      exit(arg0: zombie.characters.IsoGameCharacter): void;
      getClass(): java.lang.Class<any>;
      getDeltaModifiers(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.MoveDeltaModifiers): void;
      getName(): string;
      getStatePermissions(): zombie.ai.permission.IStatePermissions;
      hashCode(): number;
      isAttacking(arg0: zombie.characters.IsoGameCharacter): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isIgnoreCollide(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
      isMoving(arg0: zombie.characters.IsoGameCharacter): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.StateMachine extends java.lang.Object
    export class StateMachine {
      private constructor();
      activeStateChanged: number;
  
      changeState(arg0: zombie.ai.State, arg1: java.lang.Iterable<zombie.ai.State>): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getCurrent(): zombie.ai.State;
      getPrevious(): zombie.ai.State;
      getSubStateAt(arg0: number): zombie.ai.State;
      getSubStateCount(): number;
      hashCode(): number;
      isLocked(): boolean;
      isSubstate(arg0: zombie.ai.State): boolean;
      notify(): void;
      notifyAll(): void;
      revertToPreviousState(arg0: zombie.ai.State): void;
      setLocked(arg0: boolean): void;
      stateAnimEvent(arg0: number, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.ai.StateMachine$SubstateSlot extends java.lang.Object
    export class StateMachine$SubstateSlot {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getState(): zombie.ai.State;
      hashCode(): number;
      isEmpty(): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.WalkingOnTheSpot extends java.lang.Object
    export class WalkingOnTheSpot {
      private constructor();
      check(arg0: number, arg1: number): boolean;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      reset(arg0: number, arg1: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.ai.astar {
    /** [ENUM] zombie.ai.astar.AStarPathFinder$PathFindProgress */
    export class AStarPathFinder$PathFindProgress {
      /* ENUM VALUES */
      static readonly failed: AStarPathFinder$PathFindProgress; 
      static readonly found: AStarPathFinder$PathFindProgress; 
      static readonly notrunning: AStarPathFinder$PathFindProgress; 
      static readonly notyetfound: AStarPathFinder$PathFindProgress; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.ai.astar.AStarPathFinder$PathFindProgress[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): AStarPathFinder$PathFindProgress;
      valueOf(arg0: string): zombie.ai.astar.AStarPathFinder$PathFindProgress;
      values(): zombie.ai.astar.AStarPathFinder$PathFindProgress[];
    }
    // zombie.ai.astar.AStarPathFinderResult extends java.lang.Object
    export class AStarPathFinderResult {
      private constructor();
      maxSearchDistance: number;
      progress?: zombie.ai.astar.AStarPathFinder$PathFindProgress;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.astar.IPathfinder
    export class IPathfinder {
      private constructor();
      Failed(arg0: zombie.ai.astar.Mover): void;
      Succeeded(arg0: zombie.ai.astar.Path, arg1: zombie.ai.astar.Mover): void;
      getName(): string;
    }
    // zombie.ai.astar.Mover
    export class Mover {
      private constructor();
      getID(): number;
      getPathFindIndex(): number;
    }
    // zombie.ai.astar.Path extends java.lang.Object
    export class Path {
      private constructor();
      cost: number;
      static stepstore?: java.util.Stack<zombie.ai.astar.Path$Step>;
  
      appendStep(arg0: number, arg1: number, arg2: number): void;
      contains(arg0: number, arg1: number, arg2: number): boolean;
      costPerStep(): number;
      createStep(): zombie.ai.astar.Path$Step;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getLength(): number;
      getStep(arg0: number): zombie.ai.astar.Path$Step;
      getX(arg0: number): number;
      getY(arg0: number): number;
      getZ(arg0: number): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      prependStep(arg0: number, arg1: number, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.astar.Path$Step extends java.lang.Object
    export class Path$Step {
      private constructor();
      x: number;
      y: number;
      z: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getX(): number;
      getY(): number;
      getZ(): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.ai.permission {
    // zombie.ai.permission.IStatePermissions
    export class IStatePermissions {
      private constructor();
      isDeferredMovementAllowed(arg0: zombie.characters.IsoGameCharacter): boolean;
      isPlayerInputAllowed(arg0: zombie.characters.IsoGameCharacter): boolean;
    }
  }
  export namespace zombie.ai.sadisticAIDirector {
    // zombie.ai.sadisticAIDirector.SleepingEvent extends java.lang.Object
    export class SleepingEvent {
      private constructor();
      static readonly instance?: zombie.ai.sadisticAIDirector.SleepingEvent;
      static zombiesInvasion: boolean;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      setPlayerFallAsleep(arg0: zombie.characters.IsoPlayer, arg1: number): void;
      toString(): string;
      update(arg0: zombie.characters.IsoPlayer): void;
      wait(arg0: number): void;
      wakeUp(arg0: zombie.characters.IsoGameCharacter): void;
    }
    // zombie.ai.sadisticAIDirector.SleepingEventData extends java.lang.Object
    export class SleepingEventData {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getHoursSinceRainStarted(): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      reset(): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.ai.states {
    // zombie.ai.states.AttackState extends zombie.ai.State
    export class AttackState {
      private constructor();
      animEvent(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      enter(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      execute(arg0: zombie.characters.IsoGameCharacter): void;
      exit(arg0: zombie.characters.IsoGameCharacter): void;
      getClass(): java.lang.Class<any>;
      getDeltaModifiers(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.MoveDeltaModifiers): void;
      getName(): string;
      getStatePermissions(): zombie.ai.permission.IStatePermissions;
      hashCode(): number;
      instance(): zombie.ai.states.AttackState;
      isAttacking(arg0: zombie.characters.IsoGameCharacter): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isIgnoreCollide(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
      isMoving(arg0: zombie.characters.IsoGameCharacter): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.states.BurntToDeath extends zombie.ai.State
    export class BurntToDeath {
      private constructor();
      animEvent(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      enter(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      execute(arg0: zombie.characters.IsoGameCharacter): void;
      exit(arg0: zombie.characters.IsoGameCharacter): void;
      getClass(): java.lang.Class<any>;
      getDeltaModifiers(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.MoveDeltaModifiers): void;
      getName(): string;
      getStatePermissions(): zombie.ai.permission.IStatePermissions;
      hashCode(): number;
      instance(): zombie.ai.states.BurntToDeath;
      isAttacking(arg0: zombie.characters.IsoGameCharacter): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isIgnoreCollide(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
      isMoving(arg0: zombie.characters.IsoGameCharacter): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.states.ClimbDownSheetRopeState extends zombie.ai.State
    export class ClimbDownSheetRopeState {
      private constructor();
      static readonly CLIMB_DOWN_SPEED: number;
  
      animEvent(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      enter(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      execute(arg0: zombie.characters.IsoGameCharacter): void;
      exit(arg0: zombie.characters.IsoGameCharacter): void;
      getClass(): java.lang.Class<any>;
      getClimbDownSheetRopeSpeed(arg0: zombie.characters.IsoGameCharacter): number;
      getDeltaModifiers(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.MoveDeltaModifiers): void;
      getName(): string;
      getStatePermissions(): zombie.ai.permission.IStatePermissions;
      hashCode(): number;
      instance(): zombie.ai.states.ClimbDownSheetRopeState;
      isAttacking(arg0: zombie.characters.IsoGameCharacter): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isIgnoreCollide(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
      isMoving(arg0: zombie.characters.IsoGameCharacter): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.states.ClimbOverFenceState extends zombie.ai.State
    export class ClimbOverFenceState {
      private constructor();
      static readonly COLLIDE_WITH_WALL: number;
      static readonly TRIP_TREE: number;
      static readonly TRIP_ZOMBIE: number;
  
      animEvent(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      enter(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      execute(arg0: zombie.characters.IsoGameCharacter): void;
      exit(arg0: zombie.characters.IsoGameCharacter): void;
      getClass(): java.lang.Class<any>;
      getDeltaModifiers(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.MoveDeltaModifiers): void;
      getName(): string;
      getStatePermissions(): zombie.ai.permission.IStatePermissions;
      hashCode(): number;
      instance(): zombie.ai.states.ClimbOverFenceState;
      isAttacking(arg0: zombie.characters.IsoGameCharacter): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isIgnoreCollide(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
      isMoving(arg0: zombie.characters.IsoGameCharacter): boolean;
      notify(): void;
      notifyAll(): void;
      setParams(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoDirections): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.states.ClimbOverWallState extends zombie.ai.State
    export class ClimbOverWallState {
      private constructor();
      animEvent(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      enter(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      execute(arg0: zombie.characters.IsoGameCharacter): void;
      exit(arg0: zombie.characters.IsoGameCharacter): void;
      getClass(): java.lang.Class<any>;
      getDeltaModifiers(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.MoveDeltaModifiers): void;
      getName(): string;
      getStatePermissions(): zombie.ai.permission.IStatePermissions;
      hashCode(): number;
      instance(): zombie.ai.states.ClimbOverWallState;
      isAttacking(arg0: zombie.characters.IsoGameCharacter): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isIgnoreCollide(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
      isMoving(arg0: zombie.characters.IsoGameCharacter): boolean;
      notify(): void;
      notifyAll(): void;
      setParams(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoDirections): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.states.ClimbSheetRopeState extends zombie.ai.State
    export class ClimbSheetRopeState {
      private constructor();
      static readonly CLIMB_SPEED: number;
  
      animEvent(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      enter(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      execute(arg0: zombie.characters.IsoGameCharacter): void;
      exit(arg0: zombie.characters.IsoGameCharacter): void;
      getClass(): java.lang.Class<any>;
      getClimbSheetRopeSpeed(arg0: zombie.characters.IsoGameCharacter): number;
      getDeltaModifiers(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.MoveDeltaModifiers): void;
      getName(): string;
      getStatePermissions(): zombie.ai.permission.IStatePermissions;
      hashCode(): number;
      instance(): zombie.ai.states.ClimbSheetRopeState;
      isAttacking(arg0: zombie.characters.IsoGameCharacter): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isIgnoreCollide(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
      isMoving(arg0: zombie.characters.IsoGameCharacter): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.states.ClimbThroughWindowState extends zombie.ai.State
    export class ClimbThroughWindowState {
      private constructor();
      animEvent(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      enter(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      execute(arg0: zombie.characters.IsoGameCharacter): void;
      exit(arg0: zombie.characters.IsoGameCharacter): void;
      getClass(): java.lang.Class<any>;
      getDeltaModifiers(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.MoveDeltaModifiers): void;
      getName(): string;
      getStatePermissions(): zombie.ai.permission.IStatePermissions;
      getWindow(arg0: zombie.characters.IsoGameCharacter): zombie.iso.IsoObject;
      hashCode(): number;
      instance(): zombie.ai.states.ClimbThroughWindowState;
      isAttacking(arg0: zombie.characters.IsoGameCharacter): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isIgnoreCollide(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
      isMoving(arg0: zombie.characters.IsoGameCharacter): boolean;
      isPastInnerEdgeOfSquare(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections): boolean;
      isPastOuterEdgeOfSquare(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections): boolean;
      isWindowClosing(arg0: zombie.characters.IsoGameCharacter): boolean;
      notify(): void;
      notifyAll(): void;
      setParams(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoObject): void;
      slideX(arg0: zombie.characters.IsoGameCharacter, arg1: number): void;
      slideY(arg0: zombie.characters.IsoGameCharacter, arg1: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.states.CloseWindowState extends zombie.ai.State
    export class CloseWindowState {
      private constructor();
      animEvent(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      enter(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      execute(arg0: zombie.characters.IsoGameCharacter): void;
      exit(arg0: zombie.characters.IsoGameCharacter): void;
      getClass(): java.lang.Class<any>;
      getDeltaModifiers(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.MoveDeltaModifiers): void;
      getName(): string;
      getStatePermissions(): zombie.ai.permission.IStatePermissions;
      getWindow(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      instance(): zombie.ai.states.CloseWindowState;
      isAttacking(arg0: zombie.characters.IsoGameCharacter): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isIgnoreCollide(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
      isMoving(arg0: zombie.characters.IsoGameCharacter): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.states.CrawlingZombieTurnState extends zombie.ai.State
    export class CrawlingZombieTurnState {
      private constructor();
      animEvent(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      calculateDir(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoDirections): boolean;
      enter(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      execute(arg0: zombie.characters.IsoGameCharacter): void;
      exit(arg0: zombie.characters.IsoGameCharacter): void;
      getClass(): java.lang.Class<any>;
      getDeltaModifiers(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.MoveDeltaModifiers): void;
      getName(): string;
      getStatePermissions(): zombie.ai.permission.IStatePermissions;
      hashCode(): number;
      instance(): zombie.ai.states.CrawlingZombieTurnState;
      isAttacking(arg0: zombie.characters.IsoGameCharacter): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isIgnoreCollide(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
      isMoving(arg0: zombie.characters.IsoGameCharacter): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.states.FakeDeadAttackState extends zombie.ai.State
    export class FakeDeadAttackState {
      private constructor();
      animEvent(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      enter(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      execute(arg0: zombie.characters.IsoGameCharacter): void;
      exit(arg0: zombie.characters.IsoGameCharacter): void;
      getClass(): java.lang.Class<any>;
      getDeltaModifiers(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.MoveDeltaModifiers): void;
      getName(): string;
      getStatePermissions(): zombie.ai.permission.IStatePermissions;
      hashCode(): number;
      instance(): zombie.ai.states.FakeDeadAttackState;
      isAttacking(arg0: zombie.characters.IsoGameCharacter): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isIgnoreCollide(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
      isMoving(arg0: zombie.characters.IsoGameCharacter): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.states.FakeDeadZombieState extends zombie.ai.State
    export class FakeDeadZombieState {
      private constructor();
      animEvent(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      enter(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      execute(arg0: zombie.characters.IsoGameCharacter): void;
      exit(arg0: zombie.characters.IsoGameCharacter): void;
      getClass(): java.lang.Class<any>;
      getDeltaModifiers(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.MoveDeltaModifiers): void;
      getName(): string;
      getStatePermissions(): zombie.ai.permission.IStatePermissions;
      hashCode(): number;
      instance(): zombie.ai.states.FakeDeadZombieState;
      isAttacking(arg0: zombie.characters.IsoGameCharacter): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isIgnoreCollide(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
      isMoving(arg0: zombie.characters.IsoGameCharacter): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.states.FishingState extends zombie.ai.State
    export class FishingState {
      private constructor();
      animEvent(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      enter(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      execute(arg0: zombie.characters.IsoGameCharacter): void;
      exit(arg0: zombie.characters.IsoGameCharacter): void;
      getClass(): java.lang.Class<any>;
      getDeltaModifiers(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.MoveDeltaModifiers): void;
      getName(): string;
      getStatePermissions(): zombie.ai.permission.IStatePermissions;
      hashCode(): number;
      instance(): zombie.ai.states.FishingState;
      isAttacking(arg0: zombie.characters.IsoGameCharacter): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isIgnoreCollide(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
      isMoving(arg0: zombie.characters.IsoGameCharacter): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.states.FitnessState extends zombie.ai.State
    export class FitnessState {
      private constructor();
      animEvent(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      enter(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      execute(arg0: zombie.characters.IsoGameCharacter): void;
      exit(arg0: zombie.characters.IsoGameCharacter): void;
      getClass(): java.lang.Class<any>;
      getDeltaModifiers(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.MoveDeltaModifiers): void;
      getName(): string;
      getStatePermissions(): zombie.ai.permission.IStatePermissions;
      hashCode(): number;
      instance(): zombie.ai.states.FitnessState;
      isAttacking(arg0: zombie.characters.IsoGameCharacter): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isIgnoreCollide(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
      isMoving(arg0: zombie.characters.IsoGameCharacter): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.states.IdleState extends zombie.ai.State
    export class IdleState {
      private constructor();
      animEvent(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      enter(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      execute(arg0: zombie.characters.IsoGameCharacter): void;
      exit(arg0: zombie.characters.IsoGameCharacter): void;
      getClass(): java.lang.Class<any>;
      getDeltaModifiers(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.MoveDeltaModifiers): void;
      getName(): string;
      getStatePermissions(): zombie.ai.permission.IStatePermissions;
      hashCode(): number;
      instance(): zombie.ai.states.IdleState;
      isAttacking(arg0: zombie.characters.IsoGameCharacter): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isIgnoreCollide(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
      isMoving(arg0: zombie.characters.IsoGameCharacter): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.states.LungeState extends zombie.ai.State
    export class LungeState {
      private constructor();
      animEvent(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      enter(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      execute(arg0: zombie.characters.IsoGameCharacter): void;
      exit(arg0: zombie.characters.IsoGameCharacter): void;
      getClass(): java.lang.Class<any>;
      getDeltaModifiers(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.MoveDeltaModifiers): void;
      getName(): string;
      getStatePermissions(): zombie.ai.permission.IStatePermissions;
      hashCode(): number;
      instance(): zombie.ai.states.LungeState;
      isAttacking(arg0: zombie.characters.IsoGameCharacter): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isIgnoreCollide(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
      isMoving(arg0: zombie.characters.IsoGameCharacter): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.states.OpenWindowState extends zombie.ai.State
    export class OpenWindowState {
      private constructor();
      animEvent(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      enter(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      execute(arg0: zombie.characters.IsoGameCharacter): void;
      exit(arg0: zombie.characters.IsoGameCharacter): void;
      getClass(): java.lang.Class<any>;
      getDeltaModifiers(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.MoveDeltaModifiers): void;
      getName(): string;
      getStatePermissions(): zombie.ai.permission.IStatePermissions;
      hashCode(): number;
      instance(): zombie.ai.states.OpenWindowState;
      isAttacking(arg0: zombie.characters.IsoGameCharacter): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isIgnoreCollide(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
      isMoving(arg0: zombie.characters.IsoGameCharacter): boolean;
      notify(): void;
      notifyAll(): void;
      setParams(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.objects.IsoWindow): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.states.PathFindState extends zombie.ai.State
    export class PathFindState {
      private constructor();
      animEvent(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      enter(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      execute(arg0: zombie.characters.IsoGameCharacter): void;
      exit(arg0: zombie.characters.IsoGameCharacter): void;
      getClass(): java.lang.Class<any>;
      getDeltaModifiers(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.MoveDeltaModifiers): void;
      getName(): string;
      getStatePermissions(): zombie.ai.permission.IStatePermissions;
      hashCode(): number;
      instance(): zombie.vehicles.PathFindState2;
      isAttacking(arg0: zombie.characters.IsoGameCharacter): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isIgnoreCollide(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
      isMoving(arg0: zombie.characters.IsoGameCharacter): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.states.PlayerActionsState extends zombie.ai.State
    export class PlayerActionsState {
      private constructor();
      animEvent(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      enter(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      execute(arg0: zombie.characters.IsoGameCharacter): void;
      exit(arg0: zombie.characters.IsoGameCharacter): void;
      getClass(): java.lang.Class<any>;
      getDeltaModifiers(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.MoveDeltaModifiers): void;
      getName(): string;
      getStatePermissions(): zombie.ai.permission.IStatePermissions;
      hashCode(): number;
      instance(): zombie.ai.states.PlayerActionsState;
      isAttacking(arg0: zombie.characters.IsoGameCharacter): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isIgnoreCollide(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
      isMoving(arg0: zombie.characters.IsoGameCharacter): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.states.PlayerAimState extends zombie.ai.State
    export class PlayerAimState {
      private constructor();
      animEvent(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      enter(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      execute(arg0: zombie.characters.IsoGameCharacter): void;
      exit(arg0: zombie.characters.IsoGameCharacter): void;
      getClass(): java.lang.Class<any>;
      getDeltaModifiers(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.MoveDeltaModifiers): void;
      getName(): string;
      getStatePermissions(): zombie.ai.permission.IStatePermissions;
      hashCode(): number;
      instance(): zombie.ai.states.PlayerAimState;
      isAttacking(arg0: zombie.characters.IsoGameCharacter): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isIgnoreCollide(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
      isMoving(arg0: zombie.characters.IsoGameCharacter): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.states.PlayerEmoteState extends zombie.ai.State
    export class PlayerEmoteState {
      private constructor();
      animEvent(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      enter(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      execute(arg0: zombie.characters.IsoGameCharacter): void;
      exit(arg0: zombie.characters.IsoGameCharacter): void;
      getClass(): java.lang.Class<any>;
      getDeltaModifiers(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.MoveDeltaModifiers): void;
      getName(): string;
      getStatePermissions(): zombie.ai.permission.IStatePermissions;
      hashCode(): number;
      instance(): zombie.ai.states.PlayerEmoteState;
      isAttacking(arg0: zombie.characters.IsoGameCharacter): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isIgnoreCollide(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
      isMoving(arg0: zombie.characters.IsoGameCharacter): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.states.PlayerExtState extends zombie.ai.State
    export class PlayerExtState {
      private constructor();
      animEvent(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      enter(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      execute(arg0: zombie.characters.IsoGameCharacter): void;
      exit(arg0: zombie.characters.IsoGameCharacter): void;
      getClass(): java.lang.Class<any>;
      getDeltaModifiers(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.MoveDeltaModifiers): void;
      getName(): string;
      getStatePermissions(): zombie.ai.permission.IStatePermissions;
      hashCode(): number;
      instance(): zombie.ai.states.PlayerExtState;
      isAttacking(arg0: zombie.characters.IsoGameCharacter): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isIgnoreCollide(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
      isMoving(arg0: zombie.characters.IsoGameCharacter): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.states.PlayerFallDownState extends zombie.ai.State
    export class PlayerFallDownState {
      private constructor();
      animEvent(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      enter(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      execute(arg0: zombie.characters.IsoGameCharacter): void;
      exit(arg0: zombie.characters.IsoGameCharacter): void;
      getClass(): java.lang.Class<any>;
      getDeltaModifiers(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.MoveDeltaModifiers): void;
      getName(): string;
      getStatePermissions(): zombie.ai.permission.IStatePermissions;
      hashCode(): number;
      instance(): zombie.ai.states.PlayerFallDownState;
      isAttacking(arg0: zombie.characters.IsoGameCharacter): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isIgnoreCollide(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
      isMoving(arg0: zombie.characters.IsoGameCharacter): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.states.PlayerFallingState extends zombie.ai.State
    export class PlayerFallingState {
      private constructor();
      animEvent(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      enter(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      execute(arg0: zombie.characters.IsoGameCharacter): void;
      exit(arg0: zombie.characters.IsoGameCharacter): void;
      getClass(): java.lang.Class<any>;
      getDeltaModifiers(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.MoveDeltaModifiers): void;
      getName(): string;
      getStatePermissions(): zombie.ai.permission.IStatePermissions;
      hashCode(): number;
      instance(): zombie.ai.states.PlayerFallingState;
      isAttacking(arg0: zombie.characters.IsoGameCharacter): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isIgnoreCollide(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
      isMoving(arg0: zombie.characters.IsoGameCharacter): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.states.PlayerGetUpState extends zombie.ai.State
    export class PlayerGetUpState {
      private constructor();
      animEvent(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      enter(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      execute(arg0: zombie.characters.IsoGameCharacter): void;
      exit(arg0: zombie.characters.IsoGameCharacter): void;
      getClass(): java.lang.Class<any>;
      getDeltaModifiers(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.MoveDeltaModifiers): void;
      getName(): string;
      getStatePermissions(): zombie.ai.permission.IStatePermissions;
      hashCode(): number;
      instance(): zombie.ai.states.PlayerGetUpState;
      isAttacking(arg0: zombie.characters.IsoGameCharacter): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isIgnoreCollide(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
      isMoving(arg0: zombie.characters.IsoGameCharacter): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.states.PlayerHitReactionPVPState extends zombie.ai.State
    export class PlayerHitReactionPVPState {
      private constructor();
      animEvent(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      enter(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      execute(arg0: zombie.characters.IsoGameCharacter): void;
      exit(arg0: zombie.characters.IsoGameCharacter): void;
      getClass(): java.lang.Class<any>;
      getDeltaModifiers(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.MoveDeltaModifiers): void;
      getName(): string;
      getStatePermissions(): zombie.ai.permission.IStatePermissions;
      hashCode(): number;
      instance(): zombie.ai.states.PlayerHitReactionPVPState;
      isAttacking(arg0: zombie.characters.IsoGameCharacter): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isIgnoreCollide(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
      isMoving(arg0: zombie.characters.IsoGameCharacter): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.states.PlayerHitReactionState extends zombie.ai.State
    export class PlayerHitReactionState {
      private constructor();
      animEvent(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      enter(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      execute(arg0: zombie.characters.IsoGameCharacter): void;
      exit(arg0: zombie.characters.IsoGameCharacter): void;
      getClass(): java.lang.Class<any>;
      getDeltaModifiers(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.MoveDeltaModifiers): void;
      getName(): string;
      getStatePermissions(): zombie.ai.permission.IStatePermissions;
      hashCode(): number;
      instance(): zombie.ai.states.PlayerHitReactionState;
      isAttacking(arg0: zombie.characters.IsoGameCharacter): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isIgnoreCollide(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
      isMoving(arg0: zombie.characters.IsoGameCharacter): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.states.PlayerKnockedDown extends zombie.ai.State
    export class PlayerKnockedDown {
      private constructor();
      animEvent(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      enter(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      execute(arg0: zombie.characters.IsoGameCharacter): void;
      exit(arg0: zombie.characters.IsoGameCharacter): void;
      getClass(): java.lang.Class<any>;
      getDeltaModifiers(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.MoveDeltaModifiers): void;
      getName(): string;
      getStatePermissions(): zombie.ai.permission.IStatePermissions;
      hashCode(): number;
      instance(): zombie.ai.states.PlayerKnockedDown;
      isAttacking(arg0: zombie.characters.IsoGameCharacter): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isIgnoreCollide(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
      isMoving(arg0: zombie.characters.IsoGameCharacter): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.states.PlayerOnGroundState extends zombie.ai.State
    export class PlayerOnGroundState {
      private constructor();
      animEvent(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      enter(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      execute(arg0: zombie.characters.IsoGameCharacter): void;
      exit(arg0: zombie.characters.IsoGameCharacter): void;
      getClass(): java.lang.Class<any>;
      getDeltaModifiers(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.MoveDeltaModifiers): void;
      getName(): string;
      getStatePermissions(): zombie.ai.permission.IStatePermissions;
      hashCode(): number;
      instance(): zombie.ai.states.PlayerOnGroundState;
      isAttacking(arg0: zombie.characters.IsoGameCharacter): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isIgnoreCollide(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
      isMoving(arg0: zombie.characters.IsoGameCharacter): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.states.PlayerSitOnGroundState extends zombie.ai.State
    export class PlayerSitOnGroundState {
      private constructor();
      animEvent(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      enter(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      execute(arg0: zombie.characters.IsoGameCharacter): void;
      exit(arg0: zombie.characters.IsoGameCharacter): void;
      getClass(): java.lang.Class<any>;
      getDeltaModifiers(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.MoveDeltaModifiers): void;
      getName(): string;
      getStatePermissions(): zombie.ai.permission.IStatePermissions;
      hashCode(): number;
      instance(): zombie.ai.states.PlayerSitOnGroundState;
      isAttacking(arg0: zombie.characters.IsoGameCharacter): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isIgnoreCollide(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
      isMoving(arg0: zombie.characters.IsoGameCharacter): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.states.PlayerStrafeState extends zombie.ai.State
    export class PlayerStrafeState {
      private constructor();
      animEvent(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      enter(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      execute(arg0: zombie.characters.IsoGameCharacter): void;
      exit(arg0: zombie.characters.IsoGameCharacter): void;
      getClass(): java.lang.Class<any>;
      getDeltaModifiers(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.MoveDeltaModifiers): void;
      getName(): string;
      getStatePermissions(): zombie.ai.permission.IStatePermissions;
      hashCode(): number;
      instance(): zombie.ai.states.PlayerStrafeState;
      isAttacking(arg0: zombie.characters.IsoGameCharacter): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isIgnoreCollide(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
      isMoving(arg0: zombie.characters.IsoGameCharacter): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.states.SmashWindowState extends zombie.ai.State
    export class SmashWindowState {
      private constructor();
      animEvent(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      enter(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      execute(arg0: zombie.characters.IsoGameCharacter): void;
      exit(arg0: zombie.characters.IsoGameCharacter): void;
      getClass(): java.lang.Class<any>;
      getDeltaModifiers(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.MoveDeltaModifiers): void;
      getName(): string;
      getStatePermissions(): zombie.ai.permission.IStatePermissions;
      hashCode(): number;
      instance(): zombie.ai.states.SmashWindowState;
      isAttacking(arg0: zombie.characters.IsoGameCharacter): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isIgnoreCollide(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
      isMoving(arg0: zombie.characters.IsoGameCharacter): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.states.StaggerBackState extends zombie.ai.State
    export class StaggerBackState {
      private constructor();
      animEvent(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      enter(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      execute(arg0: zombie.characters.IsoGameCharacter): void;
      exit(arg0: zombie.characters.IsoGameCharacter): void;
      getClass(): java.lang.Class<any>;
      getDeltaModifiers(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.MoveDeltaModifiers): void;
      getName(): string;
      getStatePermissions(): zombie.ai.permission.IStatePermissions;
      hashCode(): number;
      instance(): zombie.ai.states.StaggerBackState;
      isAttacking(arg0: zombie.characters.IsoGameCharacter): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isIgnoreCollide(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
      isMoving(arg0: zombie.characters.IsoGameCharacter): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.states.SwipeStatePlayer extends zombie.ai.State
    export class SwipeStatePlayer {
      private constructor();
      readonly hitInfoPool?: zombie.popman.ObjectPool<zombie.network.packets.hit.HitInfo>;
  
      CalcAttackVars(arg0: zombie.characters.IsoLivingCharacter, arg1: zombie.network.packets.hit.AttackVars): void;
      CalcHitChance(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon, arg2: zombie.network.packets.hit.HitInfo): number;
      CalcHitList(arg0: zombie.characters.IsoGameCharacter, arg1: boolean, arg2: zombie.network.packets.hit.AttackVars, arg3: java.util.ArrayList<zombie.network.packets.hit.HitInfo>): void;
      ConnectSwing(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      WeaponLowerCondition(arg0: zombie.inventory.types.HandWeapon, arg1: zombie.characters.IsoGameCharacter): void;
      animEvent(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      calcValidTargets(arg0: zombie.characters.IsoLivingCharacter, arg1: zombie.inventory.types.HandWeapon, arg2: boolean, arg3: java.util.ArrayList<zombie.network.packets.hit.HitInfo>, arg4: java.util.ArrayList<zombie.network.packets.hit.HitInfo>): void;
      changeWeapon(arg0: zombie.inventory.types.HandWeapon, arg1: zombie.characters.IsoGameCharacter): void;
      checkPVP(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoMovingObject): boolean;
      enter(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      execute(arg0: zombie.characters.IsoGameCharacter): void;
      exit(arg0: zombie.characters.IsoGameCharacter): void;
      getBoneWorldPos(arg0: zombie.iso.IsoMovingObject, arg1: string, arg2: zombie.iso.Vector3): zombie.iso.Vector3;
      getClass(): java.lang.Class<any>;
      getDeltaModifiers(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.MoveDeltaModifiers): void;
      getName(): string;
      getStatePermissions(): zombie.ai.permission.IStatePermissions;
      hashCode(): number;
      instance(): zombie.ai.states.SwipeStatePlayer;
      isAttacking(arg0: zombie.characters.IsoGameCharacter): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isIgnoreCollide(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
      isMoving(arg0: zombie.characters.IsoGameCharacter): boolean;
      isProne(arg0: zombie.iso.IsoMovingObject): boolean;
      isProneTargetBetter(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.network.packets.hit.HitInfo, arg2: zombie.network.packets.hit.HitInfo): boolean;
      isStanding(arg0: zombie.iso.IsoMovingObject): boolean;
      notify(): void;
      notifyAll(): void;
      splash(arg0: zombie.iso.IsoMovingObject, arg1: zombie.inventory.types.HandWeapon, arg2: zombie.characters.IsoGameCharacter): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.states.SwipeStatePlayer$CustomComparator extends java.lang.Object
    export class SwipeStatePlayer$CustomComparator {
      private constructor();
      compare(arg0: any, arg1: any): number;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      reversed(): java.util.Comparator<any>;
      thenComparing<U>(arg0: java.util._function.Function<any, U>): java.util.Comparator<any>;
      thenComparingDouble(arg0: java.util._function.ToDoubleFunction<any>): java.util.Comparator<any>;
      thenComparingInt(arg0: java.util._function.ToIntFunction<any>): java.util.Comparator<any>;
      thenComparingLong(arg0: java.util._function.ToLongFunction<any>): java.util.Comparator<any>;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.states.ThumpState extends zombie.ai.State
    export class ThumpState {
      private constructor();
      animEvent(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      enter(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      execute(arg0: zombie.characters.IsoGameCharacter): void;
      exit(arg0: zombie.characters.IsoGameCharacter): void;
      getClass(): java.lang.Class<any>;
      getDeltaModifiers(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.MoveDeltaModifiers): void;
      getFastForwardDamageMultiplier(): number;
      getName(): string;
      getStatePermissions(): zombie.ai.permission.IStatePermissions;
      hashCode(): number;
      instance(): zombie.ai.states.ThumpState;
      isAttacking(arg0: zombie.characters.IsoGameCharacter): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isIgnoreCollide(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
      isMoving(arg0: zombie.characters.IsoGameCharacter): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.states.WalkTowardState extends zombie.ai.State
    export class WalkTowardState {
      private constructor();
      animEvent(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      calculateTargetLocation(arg0: zombie.characters.IsoZombie, arg1: zombie.iso.Vector2): boolean;
      enter(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      execute(arg0: zombie.characters.IsoGameCharacter): void;
      exit(arg0: zombie.characters.IsoGameCharacter): void;
      getClass(): java.lang.Class<any>;
      getDeltaModifiers(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.MoveDeltaModifiers): void;
      getName(): string;
      getStatePermissions(): zombie.ai.permission.IStatePermissions;
      hashCode(): number;
      instance(): zombie.ai.states.WalkTowardState;
      isAttacking(arg0: zombie.characters.IsoGameCharacter): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isIgnoreCollide(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
      isMoving(arg0: zombie.characters.IsoGameCharacter): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.states.ZombieFallDownState extends zombie.ai.State
    export class ZombieFallDownState {
      private constructor();
      animEvent(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      enter(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      execute(arg0: zombie.characters.IsoGameCharacter): void;
      exit(arg0: zombie.characters.IsoGameCharacter): void;
      getClass(): java.lang.Class<any>;
      getDeltaModifiers(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.MoveDeltaModifiers): void;
      getName(): string;
      getStatePermissions(): zombie.ai.permission.IStatePermissions;
      hashCode(): number;
      instance(): zombie.ai.states.ZombieFallDownState;
      isAttacking(arg0: zombie.characters.IsoGameCharacter): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isIgnoreCollide(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
      isMoving(arg0: zombie.characters.IsoGameCharacter): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.states.ZombieGetDownState extends zombie.ai.State
    export class ZombieGetDownState {
      private constructor();
      animEvent(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      enter(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      execute(arg0: zombie.characters.IsoGameCharacter): void;
      exit(arg0: zombie.characters.IsoGameCharacter): void;
      getClass(): java.lang.Class<any>;
      getDeltaModifiers(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.MoveDeltaModifiers): void;
      getName(): string;
      getStatePermissions(): zombie.ai.permission.IStatePermissions;
      hashCode(): number;
      instance(): zombie.ai.states.ZombieGetDownState;
      isAttacking(arg0: zombie.characters.IsoGameCharacter): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isIgnoreCollide(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
      isMoving(arg0: zombie.characters.IsoGameCharacter): boolean;
      isNearStartXY(arg0: zombie.characters.IsoGameCharacter): boolean;
      notify(): void;
      notifyAll(): void;
      setParams(arg0: zombie.characters.IsoGameCharacter): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.states.ZombieGetUpState extends zombie.ai.State
    export class ZombieGetUpState {
      private constructor();
      animEvent(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      enter(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      execute(arg0: zombie.characters.IsoGameCharacter): void;
      exit(arg0: zombie.characters.IsoGameCharacter): void;
      getClass(): java.lang.Class<any>;
      getDeltaModifiers(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.MoveDeltaModifiers): void;
      getName(): string;
      getStatePermissions(): zombie.ai.permission.IStatePermissions;
      hashCode(): number;
      instance(): zombie.ai.states.ZombieGetUpState;
      isAttacking(arg0: zombie.characters.IsoGameCharacter): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isIgnoreCollide(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
      isMoving(arg0: zombie.characters.IsoGameCharacter): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.states.ZombieIdleState extends zombie.ai.State
    export class ZombieIdleState {
      private constructor();
      animEvent(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      enter(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      execute(arg0: zombie.characters.IsoGameCharacter): void;
      exit(arg0: zombie.characters.IsoGameCharacter): void;
      getClass(): java.lang.Class<any>;
      getDeltaModifiers(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.MoveDeltaModifiers): void;
      getName(): string;
      getStatePermissions(): zombie.ai.permission.IStatePermissions;
      hashCode(): number;
      instance(): zombie.ai.states.ZombieIdleState;
      isAttacking(arg0: zombie.characters.IsoGameCharacter): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isIgnoreCollide(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
      isMoving(arg0: zombie.characters.IsoGameCharacter): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.states.ZombieOnGroundState extends zombie.ai.State
    export class ZombieOnGroundState {
      private constructor();
      animEvent(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      enter(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      execute(arg0: zombie.characters.IsoGameCharacter): void;
      exit(arg0: zombie.characters.IsoGameCharacter): void;
      getClass(): java.lang.Class<any>;
      getDeltaModifiers(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.MoveDeltaModifiers): void;
      getName(): string;
      getStatePermissions(): zombie.ai.permission.IStatePermissions;
      hashCode(): number;
      instance(): zombie.ai.states.ZombieOnGroundState;
      isAttacking(arg0: zombie.characters.IsoGameCharacter): boolean;
      isCharacterStandingOnOther(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.IsoGameCharacter): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isIgnoreCollide(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
      isMoving(arg0: zombie.characters.IsoGameCharacter): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.states.ZombieReanimateState extends zombie.ai.State
    export class ZombieReanimateState {
      private constructor();
      animEvent(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      enter(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      execute(arg0: zombie.characters.IsoGameCharacter): void;
      exit(arg0: zombie.characters.IsoGameCharacter): void;
      getClass(): java.lang.Class<any>;
      getDeltaModifiers(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.MoveDeltaModifiers): void;
      getName(): string;
      getStatePermissions(): zombie.ai.permission.IStatePermissions;
      hashCode(): number;
      instance(): zombie.ai.states.ZombieReanimateState;
      isAttacking(arg0: zombie.characters.IsoGameCharacter): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isIgnoreCollide(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
      isMoving(arg0: zombie.characters.IsoGameCharacter): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ai.states.ZombieSittingState extends zombie.ai.State
    export class ZombieSittingState {
      private constructor();
      animEvent(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      enter(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      execute(arg0: zombie.characters.IsoGameCharacter): void;
      exit(arg0: zombie.characters.IsoGameCharacter): void;
      getClass(): java.lang.Class<any>;
      getDeltaModifiers(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.MoveDeltaModifiers): void;
      getName(): string;
      getStatePermissions(): zombie.ai.permission.IStatePermissions;
      hashCode(): number;
      instance(): zombie.ai.states.ZombieSittingState;
      isAttacking(arg0: zombie.characters.IsoGameCharacter): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isIgnoreCollide(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
      isMoving(arg0: zombie.characters.IsoGameCharacter): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.asset {
    // zombie.asset.Asset extends java.lang.Object
    export class Asset {
      private constructor();
      addDependency(arg0: zombie.asset.Asset): void;
      equals(arg0: any): boolean;
      getAssetManager(): zombie.asset.AssetManager;
      getClass(): java.lang.Class<any>;
      getObserverCb(): zombie.asset.Asset$ObserverCallback;
      getPath(): zombie.asset.AssetPath;
      getRefCount(): number;
      getState(): zombie.asset.Asset$State;
      getType(): zombie.asset.AssetType;
      hashCode(): number;
      isEmpty(): boolean;
      isFailure(): boolean;
      isReady(): boolean;
      notify(): void;
      notifyAll(): void;
      onCreated(arg0: zombie.asset.Asset$State): void;
      removeDependency(arg0: zombie.asset.Asset): void;
      setAssetParams(arg0: zombie.asset.AssetManager$AssetParams): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.asset.Asset$ObserverCallback extends java.util.ArrayList<zombie.asset.AssetStateObserver>
    export class Asset$ObserverCallback {
      private constructor();
      add(arg0: number, arg1: zombie.asset.AssetStateObserver): void;
      addAll(arg0: number, arg1: java.util.Collection<zombie.asset.AssetStateObserver>): boolean;
      clear(): void;
      clone(): any;
      contains(arg0: any): boolean;
      containsAll(arg0: java.util.Collection<any>): boolean;
      ensureCapacity(arg0: number): void;
      equals(arg0: any): boolean;
      forEach(arg0: java.util._function.Consumer<zombie.asset.AssetStateObserver>): void;
      get(arg0: number): zombie.asset.AssetStateObserver;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      indexOf(arg0: any): number;
      invoke(arg0: zombie.asset.Asset$State, arg1: zombie.asset.Asset$State, arg2: zombie.asset.Asset): void;
      isEmpty(): boolean;
      iterator(): java.util.Iterator<zombie.asset.AssetStateObserver>;
      lastIndexOf(arg0: any): number;
      listIterator(arg0: number): java.util.ListIterator<zombie.asset.AssetStateObserver>;
      notify(): void;
      notifyAll(): void;
      parallelStream(): java.util.stream.Stream<zombie.asset.AssetStateObserver>;
      remove(arg0: number): zombie.asset.AssetStateObserver;
      removeAll(arg0: java.util.Collection<any>): boolean;
      removeIf(arg0: java.util._function.Predicate<zombie.asset.AssetStateObserver>): boolean;
      replaceAll(arg0: java.util._function.UnaryOperator<zombie.asset.AssetStateObserver>): void;
      retainAll(arg0: java.util.Collection<any>): boolean;
      set(arg0: number, arg1: zombie.asset.AssetStateObserver): zombie.asset.AssetStateObserver;
      size(): number;
      sort(arg0: java.util.Comparator<zombie.asset.AssetStateObserver>): void;
      spliterator(): java.util.Spliterator<zombie.asset.AssetStateObserver>;
      stream(): java.util.stream.Stream<zombie.asset.AssetStateObserver>;
      subList(arg0: number, arg1: number): java.util.List<zombie.asset.AssetStateObserver>;
      toArray<T>(arg0: java.util._function.IntFunction<T[]>): T[];
      toString(): string;
      trimToSize(): void;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.asset.Asset$State */
    export class Asset$State {
      /* ENUM VALUES */
      static readonly EMPTY: Asset$State; 
      static readonly FAILURE: Asset$State; 
      static readonly READY: Asset$State; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.asset.Asset$State[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): Asset$State;
      valueOf(arg0: string): zombie.asset.Asset$State;
      values(): zombie.asset.Asset$State[];
    }
    // zombie.asset.AssetManager extends java.lang.Object
    export class AssetManager {
      private constructor();
      create(arg0: zombie.asset.AssetType, arg1: zombie.asset.AssetManagers): void;
      destroy(): void;
      enableUnload(arg0: boolean): void;
      equals(arg0: any): boolean;
      getAssetTable(): zombie.asset.AssetManager$AssetTable;
      getClass(): java.lang.Class<any>;
      getOwner(): zombie.asset.AssetManagers;
      hashCode(): number;
      load(arg0: zombie.asset.AssetPath, arg1: zombie.asset.AssetManager$AssetParams): zombie.asset.Asset;
      notify(): void;
      notifyAll(): void;
      onStateChanged(arg0: zombie.asset.Asset$State, arg1: zombie.asset.Asset$State, arg2: zombie.asset.Asset): void;
      reload(arg0: zombie.asset.AssetPath): void;
      removeUnreferenced(): void;
      toString(): string;
      unload(arg0: zombie.asset.AssetPath): void;
      wait(arg0: number): void;
    }
    // zombie.asset.AssetManager$AssetParams extends java.lang.Object
    export class AssetManager$AssetParams {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.asset.AssetManager$AssetTable extends gnu.trove.map.hash.THashMap<java.lang.String, zombie.asset.Asset>
    export class AssetManager$AssetTable {
      private constructor();
      static readonly FREE?: any;
      static readonly REMOVED?: any;
      _set?: any[];
  
      capacity(): number;
      clear(): void;
      compact(): void;
      compute(arg0: string, arg1: java.util._function.BiFunction<string, zombie.asset.Asset, zombie.asset.Asset>): zombie.asset.Asset;
      computeIfAbsent(arg0: string, arg1: java.util._function.Function<string, zombie.asset.Asset>): zombie.asset.Asset;
      computeIfPresent(arg0: string, arg1: java.util._function.BiFunction<string, zombie.asset.Asset, zombie.asset.Asset>): zombie.asset.Asset;
      contains(arg0: any): boolean;
      containsKey(arg0: any): boolean;
      containsValue(arg0: any): boolean;
      ensureCapacity(arg0: number): void;
      entrySet(): java.util.Set<java.util.Map$Entry<string, zombie.asset.Asset>>;
      equals(arg0: any): boolean;
      forEach(arg0: java.util._function.BiConsumer<string, zombie.asset.Asset>): void;
      forEachEntry(arg0: gnu.trove.procedure.TObjectObjectProcedure<string, zombie.asset.Asset>): boolean;
      forEachKey(arg0: gnu.trove.procedure.TObjectProcedure<string>): boolean;
      forEachValue(arg0: gnu.trove.procedure.TObjectProcedure<zombie.asset.Asset>): boolean;
      get(arg0: any): zombie.asset.Asset;
      getAutoCompactionFactor(): number;
      getClass(): java.lang.Class<any>;
      getOrDefault(arg0: any, arg1: zombie.asset.Asset): zombie.asset.Asset;
      hashCode(): number;
      isEmpty(): boolean;
      keySet(): java.util.Set<string>;
      merge(arg0: string, arg1: zombie.asset.Asset, arg2: java.util._function.BiFunction<zombie.asset.Asset, zombie.asset.Asset, zombie.asset.Asset>): zombie.asset.Asset;
      notify(): void;
      notifyAll(): void;
      put(arg0: string, arg1: zombie.asset.Asset): zombie.asset.Asset;
      putAll(arg0: java.util.Map<string, zombie.asset.Asset>): void;
      putIfAbsent(arg0: string, arg1: zombie.asset.Asset): zombie.asset.Asset;
      readExternal(arg0: java.io.ObjectInput): void;
      reenableAutoCompaction(arg0: boolean): void;
      remove(arg0: any, arg1: any): boolean;
      removeAt(arg0: number): void;
      replace(arg0: string, arg1: zombie.asset.Asset, arg2: zombie.asset.Asset): boolean;
      replaceAll(arg0: java.util._function.BiFunction<string, zombie.asset.Asset, zombie.asset.Asset>): void;
      retainEntries(arg0: gnu.trove.procedure.TObjectObjectProcedure<string, zombie.asset.Asset>): boolean;
      setAutoCompactionFactor(arg0: number): void;
      setUp(arg0: number): number;
      size(): number;
      tempDisableAutoCompaction(): void;
      toString(): string;
      transformValues(arg0: gnu.trove._function.TObjectFunction<zombie.asset.Asset, zombie.asset.Asset>): void;
      trimToSize(): void;
      values(): java.util.Collection<zombie.asset.Asset>;
      wait(arg0: number): void;
      writeExternal(arg0: java.io.ObjectOutput): void;
    }
    // zombie.asset.AssetManagers extends java.lang.Object
    export class AssetManagers {
      private constructor();
      add(arg0: zombie.asset.AssetType, arg1: zombie.asset.AssetManager): void;
      equals(arg0: any): boolean;
      get(arg0: zombie.asset.AssetType): zombie.asset.AssetManager;
      getClass(): java.lang.Class<any>;
      getFileSystem(): zombie.fileSystem.FileSystem;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.asset.AssetManagers$AssetManagerTable extends gnu.trove.map.hash.TLongObjectHashMap<zombie.asset.AssetManager>
    export class AssetManagers$AssetManagerTable {
      private constructor();
      static readonly FREE: number;
      static readonly FULL: number;
      static readonly REMOVED: number;
      _set?: number[];
      _states?: number[];
  
      capacity(): number;
      clear(): void;
      compact(): void;
      contains(arg0: number): boolean;
      containsKey(arg0: number): boolean;
      containsValue(arg0: any): boolean;
      ensureCapacity(arg0: number): void;
      equals(arg0: any): boolean;
      forEach(arg0: gnu.trove.procedure.TLongProcedure): boolean;
      forEachEntry(arg0: gnu.trove.procedure.TLongObjectProcedure<zombie.asset.AssetManager>): boolean;
      forEachKey(arg0: gnu.trove.procedure.TLongProcedure): boolean;
      forEachValue(arg0: gnu.trove.procedure.TObjectProcedure<zombie.asset.AssetManager>): boolean;
      get(arg0: number): zombie.asset.AssetManager;
      getAutoCompactionFactor(): number;
      getClass(): java.lang.Class<any>;
      getNoEntryKey(): number;
      getNoEntryValue(): number;
      hashCode(): number;
      isEmpty(): boolean;
      iterator(): gnu.trove.iterator.TLongObjectIterator<zombie.asset.AssetManager>;
      keySet(): gnu.trove.set.TLongSet;
      keys(): number[];
      notify(): void;
      notifyAll(): void;
      put(arg0: number, arg1: zombie.asset.AssetManager): zombie.asset.AssetManager;
      putAll(arg0: gnu.trove.map.TLongObjectMap<zombie.asset.AssetManager>): void;
      putIfAbsent(arg0: number, arg1: zombie.asset.AssetManager): zombie.asset.AssetManager;
      readExternal(arg0: java.io.ObjectInput): void;
      reenableAutoCompaction(arg0: boolean): void;
      remove(arg0: number): zombie.asset.AssetManager;
      retainEntries(arg0: gnu.trove.procedure.TLongObjectProcedure<zombie.asset.AssetManager>): boolean;
      setAutoCompactionFactor(arg0: number): void;
      size(): number;
      tempDisableAutoCompaction(): void;
      toString(): string;
      transformValues(arg0: gnu.trove._function.TObjectFunction<zombie.asset.AssetManager, zombie.asset.AssetManager>): void;
      trimToSize(): void;
      valueCollection(): java.util.Collection<zombie.asset.AssetManager>;
      values(arg0: zombie.asset.AssetManager[]): zombie.asset.AssetManager[];
      wait(arg0: number): void;
      writeExternal(arg0: java.io.ObjectOutput): void;
    }
    // zombie.asset.AssetPath extends java.lang.Object
    export class AssetPath {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getHash(): number;
      getPath(): string;
      hashCode(): number;
      isValid(): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.asset.AssetStateObserver
    export class AssetStateObserver {
      private constructor();
      onStateChanged(arg0: zombie.asset.Asset$State, arg1: zombie.asset.Asset$State, arg2: zombie.asset.Asset): void;
    }
    // zombie.asset.AssetType extends java.lang.Object
    export class AssetType {
      private constructor();
      static readonly INVALID_ASSET_TYPE?: zombie.asset.AssetType;
      type: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.audio {
    // zombie.audio.BaseSoundBank extends java.lang.Object
    export class BaseSoundBank {
      private constructor();
      static instance?: zombie.audio.BaseSoundBank;
  
      addFootstep(arg0: string, arg1: string, arg2: string, arg3: string, arg4: string): void;
      addVoice(arg0: string, arg1: string, arg2: number): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getFootstep(arg0: string): fmod.fmod.FMODFootstep;
      getVoice(arg0: string): fmod.fmod.FMODVoice;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.audio.BaseSoundEmitter extends java.lang.Object
    export class BaseSoundEmitter {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hasSoundsToStart(): boolean;
      hasSustainPoints(arg0: number): boolean;
      hashCode(): number;
      isEmpty(): boolean;
      isPlaying(arg0: number): boolean;
      notify(): void;
      notifyAll(): void;
      playAmbientLoopedImpl(arg0: string): number;
      playAmbientSound(arg0: string): number;
      playClip(arg0: zombie.audio.GameSoundClip, arg1: zombie.iso.IsoObject): number;
      playSound(arg0: string): number;
      playSoundImpl(arg0: string, arg1: zombie.iso.IsoObject): number;
      playSoundLooped(arg0: string): number;
      playSoundLoopedImpl(arg0: string): number;
      randomStart(): void;
      restart(arg0: number): boolean;
      set3D(arg0: number, arg1: boolean): void;
      setParameterValue(arg0: number, arg1: fmod.fmod.FMOD_STUDIO_PARAMETER_DESCRIPTION, arg2: number): void;
      setPitch(arg0: number, arg1: number): void;
      setPos(arg0: number, arg1: number, arg2: number): void;
      setTimelinePosition(arg0: number, arg1: string): void;
      setVolume(arg0: number, arg1: number): void;
      setVolumeAll(arg0: number): void;
      stopAll(): void;
      stopOrTriggerSound(arg0: number): void;
      stopOrTriggerSoundByName(arg0: string): void;
      stopSound(arg0: number): number;
      stopSoundByName(arg0: string): number;
      tick(): void;
      toString(): string;
      triggerCue(arg0: number): void;
      wait(arg0: number): void;
    }
    // zombie.audio.DummySoundBank extends zombie.audio.BaseSoundBank
    export class DummySoundBank {
      private constructor();
      static instance?: zombie.audio.BaseSoundBank;
  
      addFootstep(arg0: string, arg1: string, arg2: string, arg3: string, arg4: string): void;
      addVoice(arg0: string, arg1: string, arg2: number): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getFootstep(arg0: string): fmod.fmod.FMODFootstep;
      getVoice(arg0: string): fmod.fmod.FMODVoice;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.audio.DummySoundEmitter extends zombie.audio.BaseSoundEmitter
    export class DummySoundEmitter {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hasSoundsToStart(): boolean;
      hasSustainPoints(arg0: number): boolean;
      hashCode(): number;
      isEmpty(): boolean;
      isPlaying(arg0: number): boolean;
      notify(): void;
      notifyAll(): void;
      playAmbientLoopedImpl(arg0: string): number;
      playAmbientSound(arg0: string): number;
      playClip(arg0: zombie.audio.GameSoundClip, arg1: zombie.iso.IsoObject): number;
      playSound(arg0: string, arg1: boolean): number;
      playSoundImpl(arg0: string, arg1: zombie.iso.IsoObject): number;
      playSoundLooped(arg0: string): number;
      playSoundLoopedImpl(arg0: string): number;
      randomStart(): void;
      restart(arg0: number): boolean;
      set3D(arg0: number, arg1: boolean): void;
      setParameterValue(arg0: number, arg1: fmod.fmod.FMOD_STUDIO_PARAMETER_DESCRIPTION, arg2: number): void;
      setPitch(arg0: number, arg1: number): void;
      setPos(arg0: number, arg1: number, arg2: number): void;
      setTimelinePosition(arg0: number, arg1: string): void;
      setVolume(arg0: number, arg1: number): void;
      setVolumeAll(arg0: number): void;
      stopAll(): void;
      stopOrTriggerSound(arg0: number): void;
      stopOrTriggerSoundByName(arg0: string): void;
      stopSound(arg0: number): number;
      stopSoundByName(arg0: string): number;
      tick(): void;
      toString(): string;
      triggerCue(arg0: number): void;
      wait(arg0: number): void;
    }
    // zombie.audio.FMODParameter extends java.lang.Object
    export class FMODParameter {
      private constructor();
      calculateCurrentValue(): number;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getCurrentValue(): number;
      getName(): string;
      getParameterDescription(): fmod.fmod.FMOD_STUDIO_PARAMETER_DESCRIPTION;
      getParameterID(): fmod.fmod.FMOD_STUDIO_PARAMETER_ID;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      resetToDefault(): void;
      setCurrentValue(arg0: number): void;
      startEventInstance(arg0: number): void;
      stopEventInstance(arg0: number): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.audio.FMODParameterList extends java.lang.Object
    export class FMODParameterList {
      private constructor();
      readonly parameterArray?: zombie.audio.FMODParameter[];
      readonly parameterList?: java.util.ArrayList<zombie.audio.FMODParameter>;
  
      add(arg0: zombie.audio.FMODParameter): void;
      equals(arg0: any): boolean;
      get(arg0: fmod.fmod.FMOD_STUDIO_PARAMETER_DESCRIPTION): zombie.audio.FMODParameter;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.audio.GameSound extends java.lang.Object
    export class GameSound {
      private constructor();
      category?: string;
      readonly clips?: java.util.ArrayList<zombie.audio.GameSoundClip>;
      is3D: boolean;
      loop: boolean;
      master?: zombie.audio.GameSound$MasterVolume;
      name?: string;
      reloadEpoch: number;
  
      equals(arg0: any): boolean;
      getCategory(): string;
      getClass(): java.lang.Class<any>;
      getMasterName(): string;
      getName(): string;
      getRandomClip(): zombie.audio.GameSoundClip;
      getUserVolume(): number;
      hashCode(): number;
      isLooped(): boolean;
      notify(): void;
      notifyAll(): void;
      reset(): void;
      setUserVolume(arg0: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.audio.GameSound$MasterVolume */
    export class GameSound$MasterVolume {
      /* ENUM VALUES */
      static readonly Ambient: GameSound$MasterVolume; 
      static readonly Music: GameSound$MasterVolume; 
      static readonly Primary: GameSound$MasterVolume; 
      static readonly VehicleEngine: GameSound$MasterVolume; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.audio.GameSound$MasterVolume[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): GameSound$MasterVolume;
      valueOf(arg0: string): zombie.audio.GameSound$MasterVolume;
      values(): zombie.audio.GameSound$MasterVolume[];
    }
    // zombie.audio.GameSoundClip extends java.lang.Object
    export class GameSoundClip {
      private constructor();
      static INIT_FLAG_DISTANCE_MAX: number;
      static INIT_FLAG_DISTANCE_MIN: number;
      distanceMax: number;
      distanceMin: number;
      event?: string;
      eventDescription?: fmod.fmod.FMOD_STUDIO_EVENT_DESCRIPTION;
      file?: string;
      readonly gameSound?: zombie.audio.GameSound;
      initFlags: number;
      pitch: number;
      priority: number;
      reloadEpoch: number;
      reverbFactor: number;
      reverbMaxRange: number;
      volume: number;
  
      checkReloaded(): zombie.audio.GameSoundClip;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getEffectiveVolume(): number;
      getEffectiveVolumeInMenu(): number;
      getEvent(): string;
      getFile(): string;
      getMaxDistance(): number;
      getMinDistance(): number;
      getPitch(): number;
      getVolume(): number;
      hasMaxDistance(): boolean;
      hasMinDistance(): boolean;
      hasSustainPoints(): boolean;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.audio.parameters {
    // zombie.audio.parameters.ParameterCharacterMovementSpeed extends zombie.audio.FMODLocalParameter
    export class ParameterCharacterMovementSpeed {
      private constructor();
      calculateCurrentValue(): number;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getCurrentValue(): number;
      getName(): string;
      getParameterDescription(): fmod.fmod.FMOD_STUDIO_PARAMETER_DESCRIPTION;
      getParameterID(): fmod.fmod.FMOD_STUDIO_PARAMETER_ID;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      resetToDefault(): void;
      setCurrentValue(arg0: number): void;
      setMovementType(arg0: zombie.audio.parameters.ParameterCharacterMovementSpeed$MovementType): void;
      startEventInstance(arg0: number): void;
      stopEventInstance(arg0: number): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.audio.parameters.ParameterCharacterMovementSpeed$MovementType */
    export class ParameterCharacterMovementSpeed$MovementType {
      /* ENUM VALUES */
      static readonly Run: ParameterCharacterMovementSpeed$MovementType; 
      static readonly SneakRun: ParameterCharacterMovementSpeed$MovementType; 
      static readonly SneakWalk: ParameterCharacterMovementSpeed$MovementType; 
      static readonly Sprint: ParameterCharacterMovementSpeed$MovementType; 
      static readonly Strafe: ParameterCharacterMovementSpeed$MovementType; 
      static readonly Walk: ParameterCharacterMovementSpeed$MovementType; 
  
      /* FIELDS */
      readonly label: number;
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.audio.parameters.ParameterCharacterMovementSpeed$MovementType[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): ParameterCharacterMovementSpeed$MovementType;
      valueOf(arg0: string): zombie.audio.parameters.ParameterCharacterMovementSpeed$MovementType;
      values(): zombie.audio.parameters.ParameterCharacterMovementSpeed$MovementType[];
    }
    // zombie.audio.parameters.ParameterZombieState extends zombie.audio.FMODLocalParameter
    export class ParameterZombieState {
      private constructor();
      calculateCurrentValue(): number;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getCurrentValue(): number;
      getName(): string;
      getParameterDescription(): fmod.fmod.FMOD_STUDIO_PARAMETER_DESCRIPTION;
      getParameterID(): fmod.fmod.FMOD_STUDIO_PARAMETER_ID;
      hashCode(): number;
      isState(arg0: zombie.audio.parameters.ParameterZombieState$State): boolean;
      notify(): void;
      notifyAll(): void;
      resetToDefault(): void;
      setCurrentValue(arg0: number): void;
      setState(arg0: zombie.audio.parameters.ParameterZombieState$State): void;
      startEventInstance(arg0: number): void;
      stopEventInstance(arg0: number): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.audio.parameters.ParameterZombieState$State */
    export class ParameterZombieState$State {
      /* ENUM VALUES */
      static readonly Attack: ParameterZombieState$State; 
      static readonly AttackBite: ParameterZombieState$State; 
      static readonly AttackLacerate: ParameterZombieState$State; 
      static readonly AttackScratch: ParameterZombieState$State; 
      static readonly Death: ParameterZombieState$State; 
      static readonly Eating: ParameterZombieState$State; 
      static readonly GettingUp: ParameterZombieState$State; 
      static readonly Hit: ParameterZombieState$State; 
      static readonly Idle: ParameterZombieState$State; 
      static readonly LockTarget: ParameterZombieState$State; 
      static readonly Pushed: ParameterZombieState$State; 
      static readonly Reanimate: ParameterZombieState$State; 
      static readonly RunOver: ParameterZombieState$State; 
      static readonly SearchTarget: ParameterZombieState$State; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.audio.parameters.ParameterZombieState$State[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): ParameterZombieState$State;
      valueOf(arg0: string): zombie.audio.parameters.ParameterZombieState$State;
      values(): zombie.audio.parameters.ParameterZombieState$State[];
    }
  }
  export namespace zombie.characterTextures {
    /** [ENUM] zombie.characterTextures.BloodBodyPartType */
    export class BloodBodyPartType {
      /* ENUM VALUES */
      static readonly Back: BloodBodyPartType; 
      static readonly Foot_L: BloodBodyPartType; 
      static readonly Foot_R: BloodBodyPartType; 
      static readonly ForeArm_L: BloodBodyPartType; 
      static readonly ForeArm_R: BloodBodyPartType; 
      static readonly Groin: BloodBodyPartType; 
      static readonly Hand_L: BloodBodyPartType; 
      static readonly Hand_R: BloodBodyPartType; 
      static readonly Head: BloodBodyPartType; 
      static readonly LowerLeg_L: BloodBodyPartType; 
      static readonly LowerLeg_R: BloodBodyPartType; 
      static readonly MAX: BloodBodyPartType; 
      static readonly Neck: BloodBodyPartType; 
      static readonly Torso_Lower: BloodBodyPartType; 
      static readonly Torso_Upper: BloodBodyPartType; 
      static readonly UpperArm_L: BloodBodyPartType; 
      static readonly UpperArm_R: BloodBodyPartType; 
      static readonly UpperLeg_L: BloodBodyPartType; 
      static readonly UpperLeg_R: BloodBodyPartType; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.characterTextures.BloodBodyPartType[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): BloodBodyPartType;
      FromIndex(arg0: number): zombie.characterTextures.BloodBodyPartType;
      FromString(arg0: string): zombie.characterTextures.BloodBodyPartType;
      ToIndex(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getCharacterMaskParts(): zombie.core.skinnedmodel.model.CharacterMask$Part[];
      getDisplayName(): string;
      index(): number;
      valueOf(arg0: string): zombie.characterTextures.BloodBodyPartType;
      values(): zombie.characterTextures.BloodBodyPartType[];
    }
    /** [ENUM] zombie.characterTextures.BloodClothingType */
    export class BloodClothingType {
      /* ENUM VALUES */
      static readonly Apron: BloodClothingType; 
      static readonly Bag: BloodClothingType; 
      static readonly FullHelmet: BloodClothingType; 
      static readonly Groin: BloodClothingType; 
      static readonly Hands: BloodClothingType; 
      static readonly Head: BloodClothingType; 
      static readonly Jacket: BloodClothingType; 
      static readonly Jumper: BloodClothingType; 
      static readonly JumperNoSleeves: BloodClothingType; 
      static readonly LongJacket: BloodClothingType; 
      static readonly LowerArms: BloodClothingType; 
      static readonly LowerBody: BloodClothingType; 
      static readonly LowerLegs: BloodClothingType; 
      static readonly Neck: BloodClothingType; 
      static readonly Shirt: BloodClothingType; 
      static readonly ShirtLongSleeves: BloodClothingType; 
      static readonly ShirtNoSleeves: BloodClothingType; 
      static readonly Shoes: BloodClothingType; 
      static readonly ShortsShort: BloodClothingType; 
      static readonly Trousers: BloodClothingType; 
      static readonly UpperArms: BloodClothingType; 
      static readonly UpperBody: BloodClothingType; 
      static readonly UpperLegs: BloodClothingType; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.characterTextures.BloodClothingType[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): BloodClothingType;
      addBasicPatch(arg0: zombie.characterTextures.BloodBodyPartType, arg1: zombie.core.skinnedmodel.visual.HumanVisual, arg2: java.util.ArrayList<zombie.core.skinnedmodel.visual.ItemVisual>): void;
      addBlood(arg0: zombie.characterTextures.BloodBodyPartType, arg1: number, arg2: zombie.core.skinnedmodel.visual.HumanVisual, arg3: java.util.ArrayList<zombie.core.skinnedmodel.visual.ItemVisual>, arg4: boolean): void;
      addDirt(arg0: zombie.characterTextures.BloodBodyPartType, arg1: zombie.core.skinnedmodel.visual.HumanVisual, arg2: java.util.ArrayList<zombie.core.skinnedmodel.visual.ItemVisual>, arg3: boolean): void;
      addHole(arg0: zombie.characterTextures.BloodBodyPartType, arg1: zombie.core.skinnedmodel.visual.HumanVisual, arg2: java.util.ArrayList<zombie.core.skinnedmodel.visual.ItemVisual>, arg3: boolean): boolean;
      calcTotalBloodLevel(arg0: zombie.inventory.types.Clothing): void;
      calcTotalDirtLevel(arg0: zombie.inventory.types.Clothing): void;
      fromString(arg0: string): zombie.characterTextures.BloodClothingType;
      getCoveredPartCount(arg0: java.util.ArrayList<zombie.characterTextures.BloodClothingType>): number;
      getCoveredParts(arg0: java.util.ArrayList<zombie.characterTextures.BloodClothingType>, arg1: java.util.ArrayList<zombie.characterTextures.BloodBodyPartType>): java.util.ArrayList<zombie.characterTextures.BloodBodyPartType>;
      valueOf(arg0: string): zombie.characterTextures.BloodClothingType;
      values(): zombie.characterTextures.BloodClothingType[];
    }
  }
  export namespace zombie.characters {
    // zombie.characters.BaseCharacterSoundEmitter extends java.lang.Object
    export class BaseCharacterSoundEmitter {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hasSoundsToStart(): boolean;
      hashCode(): number;
      isClear(): boolean;
      isPlaying(arg0: string): boolean;
      notify(): void;
      notifyAll(): void;
      playFootsteps(arg0: string, arg1: number): void;
      playSound(arg0: string, arg1: zombie.iso.IsoObject): number;
      playSoundImpl(arg0: string, arg1: zombie.iso.IsoObject): number;
      playVocals(arg0: string): number;
      register(): void;
      set(arg0: number, arg1: number, arg2: number): void;
      setParameterValue(arg0: number, arg1: fmod.fmod.FMOD_STUDIO_PARAMETER_DESCRIPTION, arg2: number): void;
      setPitch(arg0: number, arg1: number): void;
      setVolume(arg0: number, arg1: number): void;
      stopAll(): void;
      stopOrTriggerSound(arg0: number): void;
      stopOrTriggerSoundByName(arg0: string): void;
      stopSound(arg0: number): number;
      stopSoundByName(arg0: string): number;
      tick(): void;
      toString(): string;
      unregister(): void;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.characters.CharacterActionAnims */
    export class CharacterActionAnims {
      /* ENUM VALUES */
      static readonly Bandage: CharacterActionAnims; 
      static readonly Build: CharacterActionAnims; 
      static readonly BuildLow: CharacterActionAnims; 
      static readonly Chop_tree: CharacterActionAnims; 
      static readonly Craft: CharacterActionAnims; 
      static readonly Destroy: CharacterActionAnims; 
      static readonly Dig: CharacterActionAnims; 
      static readonly DigHoe: CharacterActionAnims; 
      static readonly DigPickAxe: CharacterActionAnims; 
      static readonly DigShovel: CharacterActionAnims; 
      static readonly DigTrowel: CharacterActionAnims; 
      static readonly Disassemble: CharacterActionAnims; 
      static readonly Drink: CharacterActionAnims; 
      static readonly Eat: CharacterActionAnims; 
      static readonly InsertBullets: CharacterActionAnims; 
      static readonly None: CharacterActionAnims; 
      static readonly Paint: CharacterActionAnims; 
      static readonly Pour: CharacterActionAnims; 
      static readonly Read: CharacterActionAnims; 
      static readonly Reload: CharacterActionAnims; 
      static readonly RemoveBullets: CharacterActionAnims; 
      static readonly Shave: CharacterActionAnims; 
      static readonly TakePills: CharacterActionAnims; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.characters.CharacterActionAnims[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): CharacterActionAnims;
      valueOf(arg0: string): zombie.characters.CharacterActionAnims;
      values(): zombie.characters.CharacterActionAnims[];
    }
    // zombie.characters.CharacterSoundEmitter extends zombie.characters.BaseCharacterSoundEmitter
    export class CharacterSoundEmitter {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hasSoundsToStart(): boolean;
      hasSustainPoints(arg0: number): boolean;
      hashCode(): number;
      isClear(): boolean;
      isEmpty(): boolean;
      isPlaying(arg0: string): boolean;
      notify(): void;
      notifyAll(): void;
      playFootsteps(arg0: string, arg1: number): void;
      playSound(arg0: string, arg1: zombie.iso.IsoObject): number;
      playSoundImpl(arg0: string, arg1: zombie.iso.IsoObject): number;
      playVocals(arg0: string): number;
      register(): void;
      set(arg0: number, arg1: number, arg2: number): void;
      setParameterValue(arg0: number, arg1: fmod.fmod.FMOD_STUDIO_PARAMETER_DESCRIPTION, arg2: number): void;
      setPitch(arg0: number, arg1: number): void;
      setPos(arg0: number, arg1: number, arg2: number): void;
      setVolume(arg0: number, arg1: number): void;
      stopAll(): void;
      stopOrTriggerSound(arg0: number): void;
      stopOrTriggerSoundByName(arg0: string): void;
      stopSound(arg0: number): number;
      stopSoundByName(arg0: string): number;
      tick(): void;
      toString(): string;
      triggerCue(arg0: number): void;
      unregister(): void;
      wait(arg0: number): void;
    }
    // zombie.characters.ClothingWetness extends java.lang.Object
    export class ClothingWetness {
      private constructor();
      changed: boolean;
      readonly character?: zombie.characters.IsoGameCharacter;
      readonly clothing?: zombie.characters.ClothingWetness$ItemList[];
      readonly perspiringParts?: number[];
  
      calculateExposedItems(): void;
      decreaseWetness(arg0: number): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      increaseWetness(arg0: number): void;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      updateWetness(arg0: number, arg1: number): void;
      wait(arg0: number): void;
    }
    // zombie.characters.ClothingWetness$ItemList extends java.util.ArrayList<zombie.inventory.InventoryItem>
    export class ClothingWetness$ItemList {
      private constructor();
      add(arg0: number, arg1: zombie.inventory.InventoryItem): void;
      addAll(arg0: number, arg1: java.util.Collection<zombie.inventory.InventoryItem>): boolean;
      clear(): void;
      clone(): any;
      contains(arg0: any): boolean;
      containsAll(arg0: java.util.Collection<any>): boolean;
      ensureCapacity(arg0: number): void;
      equals(arg0: any): boolean;
      forEach(arg0: java.util._function.Consumer<zombie.inventory.InventoryItem>): void;
      get(arg0: number): zombie.inventory.InventoryItem;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      indexOf(arg0: any): number;
      isEmpty(): boolean;
      iterator(): java.util.Iterator<zombie.inventory.InventoryItem>;
      lastIndexOf(arg0: any): number;
      listIterator(arg0: number): java.util.ListIterator<zombie.inventory.InventoryItem>;
      notify(): void;
      notifyAll(): void;
      parallelStream(): java.util.stream.Stream<zombie.inventory.InventoryItem>;
      remove(arg0: number): zombie.inventory.InventoryItem;
      removeAll(arg0: java.util.Collection<any>): boolean;
      removeIf(arg0: java.util._function.Predicate<zombie.inventory.InventoryItem>): boolean;
      replaceAll(arg0: java.util._function.UnaryOperator<zombie.inventory.InventoryItem>): void;
      retainAll(arg0: java.util.Collection<any>): boolean;
      set(arg0: number, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      size(): number;
      sort(arg0: java.util.Comparator<zombie.inventory.InventoryItem>): void;
      spliterator(): java.util.Spliterator<zombie.inventory.InventoryItem>;
      stream(): java.util.stream.Stream<zombie.inventory.InventoryItem>;
      subList(arg0: number, arg1: number): java.util.List<zombie.inventory.InventoryItem>;
      toArray<T>(arg0: java.util._function.IntFunction<T[]>): T[];
      toString(): string;
      trimToSize(): void;
      wait(arg0: number): void;
    }
    // zombie.characters.DummyCharacterSoundEmitter extends zombie.characters.BaseCharacterSoundEmitter
    export class DummyCharacterSoundEmitter {
      private constructor();
      x: number;
      y: number;
      z: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hasSoundsToStart(): boolean;
      hasSustainPoints(arg0: number): boolean;
      hashCode(): number;
      isClear(): boolean;
      isPlaying(arg0: string): boolean;
      notify(): void;
      notifyAll(): void;
      playFootsteps(arg0: string, arg1: number): void;
      playSound(arg0: string, arg1: zombie.iso.IsoObject): number;
      playSoundImpl(arg0: string, arg1: zombie.iso.IsoObject): number;
      playVocals(arg0: string): number;
      register(): void;
      set(arg0: number, arg1: number, arg2: number): void;
      setParameterValue(arg0: number, arg1: fmod.fmod.FMOD_STUDIO_PARAMETER_DESCRIPTION, arg2: number): void;
      setPitch(arg0: number, arg1: number): void;
      setVolume(arg0: number, arg1: number): void;
      stopAll(): void;
      stopOrTriggerSound(arg0: number): void;
      stopOrTriggerSoundByName(arg0: string): void;
      stopSound(arg0: number): number;
      stopSoundByName(arg0: string): number;
      tick(): void;
      toString(): string;
      unregister(): void;
      wait(arg0: number): void;
    }
    // zombie.characters.Faction extends java.lang.Object
    export class Faction {
      private constructor();
      static factions?: java.util.ArrayList<zombie.characters.Faction>;
  
      addPlayer(arg0: string): void;
      canCreateFaction(arg0: zombie.characters.IsoPlayer): boolean;
      canCreateTag(): boolean;
      createFaction(arg0: string, arg1: string): zombie.characters.Faction;
      equals(arg0: any): boolean;
      factionExist(arg0: string): boolean;
      getClass(): java.lang.Class<any>;
      getFaction(arg0: string): zombie.characters.Faction;
      getFactions(): java.util.ArrayList<zombie.characters.Faction>;
      getName(): string;
      getOwner(): string;
      getPlayerFaction(arg0: string): zombie.characters.Faction;
      getPlayers(): java.util.ArrayList<string>;
      getTag(): string;
      getTagColor(): zombie.core.textures.ColorInfo;
      hashCode(): number;
      isAlreadyInFaction(arg0: zombie.characters.IsoPlayer): boolean;
      isMember(arg0: string): boolean;
      isOwner(arg0: string): boolean;
      isPlayerMember(arg0: zombie.characters.IsoPlayer): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      notify(): void;
      notifyAll(): void;
      removeFaction(): void;
      removePlayer(arg0: string): void;
      save(arg0: java.nio.ByteBuffer): void;
      setName(arg0: string): void;
      setOwner(arg0: string): void;
      setTag(arg0: string): void;
      setTagColor(arg0: zombie.core.textures.ColorInfo): void;
      syncFaction(): void;
      tagExist(arg0: string): boolean;
      toString(): string;
      wait(arg0: number): void;
      writeToBuffer(arg0: zombie.core.network.ByteBufferWriter, arg1: boolean): void;
    }
    // zombie.characters.HaloTextHelper extends java.lang.Object
    export class HaloTextHelper {
      private constructor();
      static readonly COLOR_GREEN?: zombie.characters.HaloTextHelper$ColorRGB;
      static readonly COLOR_RED?: zombie.characters.HaloTextHelper$ColorRGB;
      static readonly COLOR_WHITE?: zombie.characters.HaloTextHelper$ColorRGB;
  
      addText(arg0: zombie.characters.IsoPlayer, arg1: string): void;
      addTextWithArrow(arg0: zombie.characters.IsoPlayer, arg1: string, arg2: boolean, arg3: zombie.characters.HaloTextHelper$ColorRGB): void;
      equals(arg0: any): boolean;
      forceNextAddText(): void;
      getClass(): java.lang.Class<any>;
      getColorGreen(): zombie.characters.HaloTextHelper$ColorRGB;
      getColorRed(): zombie.characters.HaloTextHelper$ColorRGB;
      getColorWhite(): zombie.characters.HaloTextHelper$ColorRGB;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.characters.HaloTextHelper$ColorRGB extends java.lang.Object
    export class HaloTextHelper$ColorRGB {
      private constructor();
      a: number;
      b: number;
      g: number;
      r: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.characters.HitReactionNetworkAI extends java.lang.Object
    export class HitReactionNetworkAI {
      private constructor();
      readonly finalDirection?: zombie.iso.Vector2;
      readonly finalPosition?: zombie.iso.Vector2;
      finalPositionZ: number;
      readonly startDirection?: zombie.iso.Vector2;
      readonly startPosition?: zombie.iso.Vector2;
  
      CalcHitReactionVehicle(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.vehicles.BaseVehicle): void;
      CalcHitReactionWeapon(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.IsoGameCharacter, arg2: zombie.inventory.types.HandWeapon): void;
      equals(arg0: any): boolean;
      finish(): void;
      getClass(): java.lang.Class<any>;
      getDescription(): string;
      hashCode(): number;
      isDoSkipMovement(): boolean;
      isSetup(): boolean;
      isStarted(): boolean;
      move(): void;
      moveFinal(): void;
      notify(): void;
      notifyAll(): void;
      process(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setup(arg0: number, arg1: number, arg2: number, arg3: number): void;
      start(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.characters.IsoDummyCameraCharacter extends zombie.characters.IsoGameCharacter
    export class IsoDummyCameraCharacter {
      private constructor();
      Asleep: boolean;
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      readonly IsVisibleToPlayer?: boolean[];
      static LowLightingQualityHack: boolean;
      static readonly MAX_WALL_SPLATS: number;
      static readonly MAX_ZOMBIES_EATING: number;
      NoPicking: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OutlineOnMouseover: boolean;
      static readonly RENDER_OFFSET_X: number;
      static readonly RENDER_OFFSET_Y: number;
      ReanimatedCorpse?: zombie.characters.IsoGameCharacter;
      ReanimatedCorpseID: number;
      readonly StateMachineParams?: java.util.HashMap<zombie.ai.State, java.util.HashMap<any, any>>;
      readonly Traits?: zombie.characters.IsoGameCharacter$CharacterTraits;
      readonly actionContext?: zombie.characters.action.ActionContext;
      readonly advancedAnimator?: zombie.core.skinnedmodel.advancedanimation.AdvancedAnimator;
      readonly amputations?: java.util.ArrayList<string>;
      readonly attackVars?: zombie.network.packets.hit.AttackVars;
      bAlphaForced: boolean;
      bNeverDoneAlpha: boolean;
      readonly bOutline?: boolean[];
      bUpdateEquippedTextures: boolean;
      bagsWorn?: java.util.ArrayList<zombie.inventory.types.InventoryContainer>;
      beard?: zombie.core.skinnedmodel.model.ModelInstance;
      blockTurning: boolean;
      static bmod: number;
      bumpNbr: number;
      callOut: boolean;
      clientIgnoreCollision: number;
      container?: zombie.inventory.ItemContainer;
      def?: zombie.iso.sprite.IsoSpriteInstance;
      dir?: zombie.iso.IsoDirections;
      doDirtBloodEtc: boolean;
      doNotSync: boolean;
      doRenderShadow: boolean;
      emitter?: zombie.audio.BaseSoundEmitter;
      forceNullOverride: boolean;
      static gmod: number;
      hair?: zombie.core.skinnedmodel.model.ModelInstance;
      highlightFlags: number;
      readonly hitList?: java.util.ArrayList<zombie.network.packets.hit.HitInfo>;
      invRadioFreq?: java.util.ArrayList<number>;
      keyId: number;
      knockbackAttackMod: number;
      last?: zombie.iso.IsoGridSquare;
      lastAutomaticShoot: number;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      legsSprite?: zombie.iso.sprite.IsoSprite;
      lx: number;
      ly: number;
      lz: number;
      name?: string;
      readonly networkCharacter?: zombie.characters.NetworkCharacter;
      noDamage: boolean;
      nx: number;
      ny: number;
      offsetX: number;
      offsetY: number;
      readonly outlineColor?: zombie.core.textures.ColorInfo[];
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      overridePrimaryHandModel?: string;
      overrideSecondaryHandModel?: string;
      partialThumpDmg: number;
      primaryHandModel?: zombie.core.skinnedmodel.model.ModelInstance;
      realState?: zombie.network.NetworkVariables$ZombieState;
      realdir?: zombie.iso.IsoDirections;
      realx: number;
      realy: number;
      realz: number;
      removedFromWorldMS: number;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      static readonly s_maxPossibleTwist: number;
      savedVehicleRunning: boolean;
      savedVehicleSeat: number;
      savedVehicleX: number;
      savedVehicleY: number;
      secondaryHandModel?: zombie.core.skinnedmodel.model.ModelInstance;
      sheetRope: boolean;
      sheetRopeHealth: number;
      shootInARow: number;
      speedMod: number;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      square?: zombie.iso.IsoGridSquare;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      tintb: number;
      tintg: number;
      tintr: number;
      static treeSoundMgr?: zombie.iso.IsoMovingObject$TreeSoundManager;
      upKillCount: boolean;
      vocalEvent: number;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
      x: number;
      y: number;
      z: number;
  
      Anger(arg0: number): void;
      ApplyInBedOffset(arg0: boolean): void;
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      BetaAntiDepress(arg0: number): void;
      BetaBlockers(arg0: number): void;
      CacheEquipped(): void;
      Callout(): void;
      CanAttack(): boolean;
      CanSee(arg0: zombie.iso.IsoMovingObject): boolean;
      ClearEquippedCache(): void;
      ClearVariable(arg0: string): void;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number): void;
      Despawn(): void;
      DirectionFromVector(arg0: zombie.iso.Vector2): void;
      DirtySlice(): void;
      DistTo(arg0: number, arg1: number): number;
      DistToProper(arg0: zombie.iso.IsoObject): number;
      DistToSquared(arg0: zombie.iso.IsoMovingObject): number;
      DoCollideNorS(): void;
      DoCollideWorE(): void;
      DoDeath(arg0: zombie.inventory.types.HandWeapon, arg1: zombie.characters.IsoGameCharacter): void;
      DoFloorSplat(arg0: zombie.iso.IsoGridSquare, arg1: string, arg2: boolean, arg3: number, arg4: number): void;
      DoFootstepSound(arg0: number): void;
      DoSneezeText(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoSwingCollisionBoneCheck(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number): boolean;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      DrawSneezeText(): void;
      Dressup(arg0: zombie.characters.SurvivorDesc): void;
      Eat(arg0: zombie.inventory.InventoryItem, arg1: number): boolean;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      FireCheck(): void;
      GetAnimSetName(): string;
      GetPrimaryEquippedCache(): zombie.inventory.InventoryItem;
      GetSecondaryEquippedCache(): zombie.inventory.InventoryItem;
      GetVariable(arg0: string): string;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasItem(arg0: string): boolean;
      HasTooltip(): boolean;
      HasTrait(arg0: string): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      HitSilence(arg0: zombie.inventory.types.HandWeapon, arg1: zombie.characters.IsoGameCharacter, arg2: boolean, arg3: number): void;
      InitSpriteParts(arg0: zombie.characters.SurvivorDesc): void;
      IsAttackRange(arg0: number, arg1: number, arg2: number): boolean;
      IsSpeaking(): boolean;
      Kill(arg0: zombie.characters.IsoGameCharacter): void;
      LevelPerk(arg0: zombie.characters.skills.PerkFactory$Perk, arg1: boolean): void;
      LoseLevel(arg0: zombie.characters.skills.PerkFactory$Perk): void;
      Move(arg0: zombie.iso.Vector2): void;
      MoveForward(arg0: number, arg1: number, arg2: number, arg3: number): void;
      MoveUnmodded(arg0: zombie.iso.Vector2): void;
      NPCGetAiming(): boolean;
      NPCGetRunning(): boolean;
      NPCSetAiming(arg0: boolean): void;
      NPCSetAttack(arg0: boolean): void;
      NPCSetJustMoved(arg0: boolean): void;
      NPCSetMelee(arg0: boolean): void;
      NPCSetRunning(arg0: boolean): void;
      OnAnimEvent(arg0: zombie.core.skinnedmodel.advancedanimation.AnimLayer, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      OnDeath(): void;
      PainMeds(arg0: number): void;
      PlayAnim(arg0: string): void;
      PlayAnimUnlooped(arg0: string): void;
      PlayAnimWithSpeed(arg0: string, arg1: number): void;
      QueueAction(arg0: zombie.characters.CharacterTimedActions.BaseAction): void;
      ReadLiterature(arg0: zombie.inventory.types.Literature): void;
      ReduceHealthWhenBurning(): void;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      Say(arg0: string): void;
      SayDebug(arg0: number, arg1: string): void;
      SayRadio(arg0: string, arg1: number, arg2: number, arg3: number, arg4: zombie.ui.UIFont, arg5: number, arg6: number, arg7: string): void;
      SayShout(arg0: string): void;
      SayWhisper(arg0: string): void;
      Seen(arg0: java.util.Stack<zombie.iso.IsoMovingObject>): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      SetOnFire(): void;
      SetVariable(arg0: string, arg1: string): void;
      SleepingTablet(arg0: number): void;
      SpreadFire(): void;
      SpreadFireMP(): void;
      StartAction(arg0: zombie.characters.CharacterTimedActions.BaseAction): void;
      StartTimedActionAnim(arg0: string, arg1: string): void;
      StopAllActionQueue(): void;
      StopAllActionQueueAiming(): void;
      StopAllActionQueueRunning(): void;
      StopAllActionQueueWalking(): void;
      StopBurning(): void;
      StopTimedActionAnim(): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      Throw(arg0: zombie.inventory.types.HandWeapon): void;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      actionStateChanged(arg0: zombie.characters.action.ActionContext): void;
      addBasicPatch(arg0: zombie.characterTextures.BloodBodyPartType): void;
      addBlood(arg0: zombie.characterTextures.BloodBodyPartType, arg1: boolean, arg2: boolean, arg3: boolean): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addDirt(arg0: zombie.characterTextures.BloodBodyPartType, arg1: number, arg2: boolean): void;
      addHole(arg0: zombie.characterTextures.BloodBodyPartType): boolean;
      addHoleFromZombieAttacks(arg0: zombie.characterTextures.BloodBodyPartType, arg1: boolean): boolean;
      addLineChatElement(arg0: string): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      addToWorld(): void;
      addVisualDamage(arg0: string): void;
      addWorldSoundUnlessInvisible(arg0: number, arg1: number, arg2: boolean): void;
      applyTraits(arg0: java.util.ArrayList<string>): void;
      attackFromWindowsLunge(arg0: zombie.characters.IsoZombie): void;
      autoDrink(): void;
      avoidDamage(): boolean;
      becomeCorpse(): void;
      calcHitDir(arg0: zombie.iso.Vector2): void;
      calculateBaseSpeed(): number;
      canAddSheetRope(): boolean;
      canClimbDownSheetRope(arg0: zombie.iso.IsoGridSquare): boolean;
      canClimbDownSheetRopeInCurrentSquare(): boolean;
      canClimbSheetRope(arg0: zombie.iso.IsoGridSquare): boolean;
      canHaveMultipleHits(): number;
      canSprint(): boolean;
      changeState(arg0: zombie.ai.State): void;
      checkHaveElectricity(): void;
      checkIsNearWall(): number;
      cleanWallBlood(): void;
      clearAttachedAnimSprite(): void;
      clearAttachedItems(): void;
      clearVariable(arg0: string): void;
      clearVariables(): void;
      clearWornItems(): void;
      climbDownSheetRope(): void;
      climbOverFence(arg0: zombie.iso.IsoDirections): void;
      climbSheetRope(): void;
      climbThroughWindow(arg0: zombie.iso.objects.IsoThumpable, arg1: number): void;
      climbThroughWindowFrame(arg0: zombie.iso.IsoObject): void;
      closeWindow(arg0: zombie.iso.objects.IsoWindow): void;
      clothingItemChanged(arg0: string): void;
      collideWith(arg0: zombie.iso.IsoObject): void;
      compareMovePriority(arg0: zombie.characters.IsoGameCharacter): number;
      compareToY(arg0: zombie.iso.IsoMovingObject): number;
      containsVariable(arg0: string): boolean;
      countAddSheetRope(): number;
      createContainersFromSpriteProperties(): void;
      createKeyRing(): void;
      customHashCode(): number;
      dbgGetAnimTrack(arg0: number, arg1: number): zombie.core.skinnedmodel.animation.AnimationTrack;
      dbgGetAnimTrackName(arg0: number, arg1: number): string;
      dbgGetAnimTrackTime(arg0: number, arg1: number): number;
      dbgGetAnimTrackWeight(arg0: number, arg1: number): number;
      debugPrintout(): void;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      distToNearestCamCharacter(): number;
      doFindExternalWaterSource(): void;
      doHitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.vehicles.BaseVehicle$HitVars): void;
      doStairs(): void;
      drawDirectionLine(arg0: zombie.iso.Vector2, arg1: number, arg2: number, arg3: number, arg4: number): void;
      dressInClothingItem(arg0: string): void;
      dressInNamedOutfit(arg0: string): void;
      dressInPersistentOutfit(arg0: string): void;
      dressInPersistentOutfitID(arg0: number): void;
      dressInRandomOutfit(): void;
      dropHandItems(): void;
      dropHeavyItems(): void;
      endPlaybackGameVariables(arg0: zombie.core.skinnedmodel.advancedanimation.AnimationVariableSource): void;
      ensureOnTile(): void;
      enterVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number, arg2: org.joml.Vector3f): void;
      equals(arg0: any): boolean;
      exert(arg0: number): void;
      faceLocation(arg0: number, arg1: number): void;
      faceLocationF(arg0: number, arg1: number): void;
      facePosition(arg0: number, arg1: number): void;
      faceThisObject(arg0: zombie.iso.IsoObject): void;
      faceThisObjectAlt(arg0: zombie.iso.IsoObject): void;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      fallenOnKnees(): void;
      forceAwake(): void;
      getAbsoluteExcessTwist(): number;
      getActionContext(): zombie.characters.action.ActionContext;
      getActionStateName(): string;
      getActiveLightItems(arg0: java.util.ArrayList<zombie.inventory.InventoryItem>): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getAdvancedAnimator(): zombie.core.skinnedmodel.advancedanimation.AdvancedAnimator;
      getAge(): number;
      getAlpha(arg0: number): number;
      getAlreadyReadPages(arg0: string): number;
      getAnimAngle(): number;
      getAnimAngleRadians(): number;
      getAnimAngleStepDelta(): number;
      getAnimAngleTwistDelta(): number;
      getAnimVector(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getAnimationDebug(): string;
      getAnimationPlayer(): zombie.core.skinnedmodel.animation.AnimationPlayer;
      getAnimationPlayerRecorder(): zombie.core.skinnedmodel.animation.debug.AnimationPlayerRecorder;
      getAnimationStateName(): string;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getAttachedItem(arg0: string): zombie.inventory.InventoryItem;
      getAttachedItems(): zombie.characters.AttachedItems.AttachedItems;
      getAttachedLocationGroup(): zombie.characters.AttachedItems.AttachedLocationGroup;
      getAttackTargetSquare(): zombie.iso.IsoGridSquare;
      getAttackedBy(): zombie.characters.IsoGameCharacter;
      getAutoWalkDirection(): zombie.iso.Vector2;
      getBarricadeStrengthMod(): number;
      getBarricadeTimeMod(): number;
      getBed(): zombie.iso.IsoObject;
      getBedType(): string;
      getBeenMovingFor(): number;
      getBeenSprintingFor(): number;
      getBetaDelta(): number;
      getBetaEffect(): number;
      getBloodImpactX(): number;
      getBloodImpactY(): number;
      getBloodImpactZ(): number;
      getBloodSplat(): zombie.iso.sprite.IsoSprite;
      getBodyDamage(): zombie.characters.BodyDamage.BodyDamage;
      getBodyDamageRemote(): zombie.characters.BodyDamage.BodyDamage;
      getBodyLocationGroup(): zombie.characters.WornItems.BodyLocationGroup;
      getBodyPartClothingDefense(arg0: number, arg1: boolean, arg2: boolean): number;
      getBrain(): zombie.ai.GameCharacterAIBrain;
      getBuilding(): zombie.iso.areas.IsoBuilding;
      getBumpFallType(): string;
      getBumpType(): string;
      getBumpedChr(): zombie.characters.IsoGameCharacter;
      getBumpedType(arg0: zombie.characters.IsoGameCharacter): string;
      getCell(): zombie.iso.IsoCell;
      getCharacterActions(): java.util.Stack<zombie.characters.CharacterTimedActions.BaseAction>;
      getCharacterTraits(): zombie.characters.IsoGameCharacter$CharacterTraits;
      getChatElement(): zombie.chat.ChatElement;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getChopTreeSpeed(): number;
      getClass(): java.lang.Class<any>;
      getClickSound(): string;
      getClothingItem_Back(): zombie.inventory.InventoryItem;
      getClothingItem_Feet(): zombie.inventory.InventoryItem;
      getClothingItem_Hands(): zombie.inventory.InventoryItem;
      getClothingItem_Head(): zombie.inventory.InventoryItem;
      getClothingItem_Legs(): zombie.inventory.InventoryItem;
      getClothingItem_Torso(): zombie.inventory.InventoryItem;
      getClothingWetness(): zombie.characters.ClothingWetness;
      getCollideType(): string;
      getCollidedObject(): zombie.iso.IsoObject;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getCurrentActionContextStateName(): string;
      getCurrentBuilding(): zombie.iso.areas.IsoBuilding;
      getCurrentBuildingDef(): zombie.iso.BuildingDef;
      getCurrentRoomDef(): zombie.iso.RoomDef;
      getCurrentSquare(): zombie.iso.IsoGridSquare;
      getCurrentState(): zombie.ai.State;
      getCurrentStateName(): string;
      getCurrentZone(): zombie.iso.IsoMetaGrid$Zone;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getDamage(): number;
      getDangerLevels(): number;
      getDebugMonitor(): zombie.core.skinnedmodel.advancedanimation.debug.AnimatorDebugMonitor;
      getDefaultState(): zombie.ai.State;
      getDeferredAngleDelta(): number;
      getDeferredMovement(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getDeferredRotationWeight(): number;
      getDepressDelta(): number;
      getDepressEffect(): number;
      getDescriptor(): zombie.characters.SurvivorDesc;
      getDieCount(): number;
      getDir(): zombie.iso.IsoDirections;
      getDirectionAngle(): number;
      getDistanceSq(arg0: zombie.iso.IsoMovingObject): number;
      getDotWithForwardDirection(arg0: number, arg1: number): number;
      getEatingZombies(): java.util.ArrayList<zombie.characters.IsoZombie>;
      getEmitter(): zombie.characters.BaseCharacterSoundEmitter;
      getEnemyList(): java.util.Stack<zombie.characters.IsoGameCharacter>;
      getEquipedRadio(): zombie.inventory.types.Radio;
      getExcessTwist(): number;
      getFMODParameters(): zombie.audio.FMODParameterList;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getFallTime(): number;
      getFamiliarBuildings(): java.util.Stack<zombie.iso.areas.IsoBuilding>;
      getFatigueMod(): number;
      getFatiqueMultiplier(): number;
      getFeelerTile(arg0: number): zombie.iso.IsoGridSquare;
      getFeelersize(): number;
      getFinder(): zombie.ai.astar.AStarPathFinderResult;
      getFireKillRate(): number;
      getFireSpreadProbability(): number;
      getFollowingTarget(): zombie.characters.IsoGameCharacter;
      getForceWakeUpTime(): number;
      getForwardDirection(): zombie.iso.Vector2;
      getFullName(): string;
      getFuturWalkedSquare(): zombie.iso.IsoGridSquare;
      getGameCharacterAIBrain(): zombie.ai.GameCharacterAIBrain;
      getGameVariables(): java.lang.Iterable<zombie.core.skinnedmodel.advancedanimation.IAnimationVariableSlot>;
      getGlobalMovementMod(): number;
      getHaloTimerCount(): number;
      getHammerSoundMod(): number;
      getHealth(): number;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getHitChancesMod(): number;
      getHitDir(): zombie.iso.Vector2;
      getHitForce(): number;
      getHitFromAngle(): number;
      getHitReaction(): string;
      getHitReactionNetworkAI(): zombie.characters.HitReactionNetworkAI;
      getHittingMod(): number;
      getHoursSurvived(): number;
      getHungerMultiplier(): number;
      getHurtSound(): string;
      getHyperthermiaMod(): number;
      getID(): number;
      getIDCount(): number;
      getIgnoreMovement(): boolean;
      getImpulsex(): number;
      getImpulsey(): number;
      getInf(): zombie.core.textures.ColorInfo;
      getInventory(): zombie.inventory.ItemContainer;
      getInventoryWeight(): number;
      getIsNPC(): boolean;
      getIsSurfaceNormalOffset(): boolean;
      getItemContainer(): zombie.inventory.ItemContainer;
      getItemVisuals(): zombie.core.skinnedmodel.visual.ItemVisuals;
      getKeyId(): number;
      getKnownRecipes(): java.util.List<string>;
      getLastBump(): number;
      getLastChatMessage(): zombie.chat.ChatMessage;
      getLastCollideTime(): number;
      getLastFallSpeed(): number;
      getLastHeardSound(): zombie.characters.IsoGameCharacter$Location;
      getLastHitCount(): number;
      getLastHourSleeped(): number;
      getLastKnownLocation(): java.util.HashMap<string, zombie.characters.IsoGameCharacter$Location>;
      getLastKnownLocationOf(arg0: string): zombie.characters.IsoGameCharacter$Location;
      getLastLocalEnemies(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getLastSpokenLine(): string;
      getLastSquare(): zombie.iso.IsoGridSquare;
      getLastTargettedBy(): zombie.characters.IsoZombie;
      getLastZombieKills(): number;
      getLeaveBodyTimedown(): number;
      getLegsSprite(): zombie.iso.sprite.IsoSprite;
      getLevelMaxForXp(): number;
      getLevelUpLevels(): number[];
      getLevelUpMultiplier(): number;
      getLightInfo2(): zombie.characters.IsoGameCharacter$LightInfo;
      getLightfootMod(): number;
      getLimpulsex(): number;
      getLimpulsey(): number;
      getLlx(): number;
      getLly(): number;
      getLlz(): number;
      getLocalEnemyList(): java.util.Stack<zombie.characters.IsoGameCharacter>;
      getLocalGroupList(): java.util.ArrayList<zombie.iso.IsoMovingObject>;
      getLocalList(): java.util.ArrayList<zombie.iso.IsoMovingObject>;
      getLocalNeutralList(): java.util.ArrayList<zombie.iso.IsoMovingObject>;
      getLocalRelevantEnemyList(): java.util.ArrayList<zombie.iso.IsoMovingObject>;
      getLookAngleRadians(): number;
      getLookVector(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getLowDangerInVicinity(arg0: number, arg1: number): zombie.iso.IsoGridSquare;
      getLrx(): number;
      getLry(): number;
      getLx(): number;
      getLy(): number;
      getLz(): number;
      getMaintenanceMod(): number;
      getMapKnowledge(): zombie.ai.MapKnowledge;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getMasterRegion(): zombie.iso.areas.isoregion.regions.IWorldRegion;
      getMaxChatLines(): number;
      getMaxTwist(): number;
      getMaxWeight(): number;
      getMaxWeightBase(): number;
      getMeleeCombatMod(): number;
      getMeleeDelay(): number;
      getMetalBarricadeStrengthMod(): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getModel(): zombie.core.skinnedmodel.model.ModelInstance;
      getModelInstance(): zombie.core.skinnedmodel.model.ModelInstance;
      getMomentumScalar(): number;
      getMoodles(): zombie.characters.Moodles.Moodles;
      getMoveDelta(): number;
      getMoveForwardVec(): zombie.iso.Vector2;
      getMoveSpeed(): number;
      getMovementLastFrame(): zombie.iso.Vector2;
      getMovingObjectIndex(): number;
      getName(): string;
      getNearVehicle(): zombie.vehicles.BaseVehicle;
      getNetworkCharacterAI(): zombie.characters.NetworkCharacterAI;
      getNew(): zombie.iso.IsoObject;
      getNextWander(): number;
      getNimbleMod(): number;
      getNoDamage(): boolean;
      getNumSurvivorsInVicinity(): number;
      getNx(): number;
      getNy(): number;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffsetX(): number;
      getOffsetY(): number;
      getOnlineID(): number;
      getOrCreateSleepingEventData(): zombie.ai.sadisticAIDirector.SleepingEventData;
      getOrCreateVariable(arg0: string): zombie.core.skinnedmodel.advancedanimation.IAnimationVariableSlot;
      getOutfitName(): string;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPacingMod(): number;
      getPainDelta(): number;
      getPainEffect(): number;
      getPath2(): zombie.vehicles.PolygonalMap2$Path;
      getPathFindBehavior2(): zombie.vehicles.PathFindBehavior2;
      getPathFindIndex(): number;
      getPathIndex(): number;
      getPathTargetX(): number;
      getPathTargetY(): number;
      getPathTargetZ(): number;
      getPatience(): number;
      getPatienceMax(): number;
      getPatienceMin(): number;
      getPerkInfo(arg0: zombie.characters.skills.PerkFactory$Perk): zombie.characters.IsoGameCharacter$PerkInfo;
      getPerkLevel(arg0: zombie.characters.skills.PerkFactory$Perk): number;
      getPerkList(): java.util.ArrayList<zombie.characters.IsoGameCharacter$PerkInfo>;
      getPersistentOutfitID(): number;
      getPipedFuelAmount(): number;
      getPosition(arg0: zombie.iso.Vector3): zombie.iso.Vector3;
      getPreviousActionContextStateName(): string;
      getPreviousStateName(): string;
      getPrimaryHandItem(): zombie.inventory.InventoryItem;
      getPrimaryHandType(): string;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRandomDefaultOutfit(): zombie.core.skinnedmodel.population.Outfit;
      getReadyModelData(): java.util.ArrayList<zombie.core.skinnedmodel.model.ModelInstance>;
      getReanimAnimDelay(): number;
      getReanimAnimFrame(): number;
      getReanimateTimer(): number;
      getRecoilDelay(): number;
      getRecoveryMod(): number;
      getReduceInfectionPower(): number;
      getRemoteID(): number;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getRunSpeedModifier(): number;
      getSafetyCooldown(): number;
      getSayLine(): string;
      getScreenX(): number;
      getScreenY(): number;
      getScriptModule(): string;
      getScriptName(): string;
      getScriptnx(): number;
      getScriptny(): number;
      getSecondaryHandItem(): zombie.inventory.InventoryItem;
      getSecondaryHandType(): string;
      getShoulderTwist(): number;
      getShovingMod(): number;
      getSleepingTabletDelta(): number;
      getSleepingTabletEffect(): number;
      getSlowFactor(): number;
      getSlowTimer(): number;
      getSneakSpotMod(): number;
      getSpeakColour(): zombie.core.Color;
      getSpeakTime(): number;
      getSpecialObjectIndex(): number;
      getSpeedMod(): number;
      getSprintMod(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteDef(): zombie.iso.sprite.IsoSpriteInstance;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSquare(): zombie.iso.IsoGridSquare;
      getStaggerTimeMod(): number;
      getStateEventDelayTimer(): number;
      getStateMachine(): zombie.ai.StateMachine;
      getStateMachineParams(arg0: zombie.ai.State): java.util.HashMap<any, any>;
      getStaticMovingObjectIndex(): number;
      getStats(): zombie.characters.Stats;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getSurroundingAttackingZombies(): number;
      getSurvivorKills(): number;
      getSurvivorMap(): java.util.HashMap<number, zombie.characters.SurvivorDesc>;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTalkerType(): string;
      getTargetAlpha(arg0: number): number;
      getTargetTwist(): number;
      getTeleport(): zombie.characters.NetworkTeleport;
      getTemperature(): number;
      getTempo(): zombie.iso.Vector2;
      getTextureCreator(): zombie.core.skinnedmodel.model.ModelInstanceTextureCreator;
      getTextureName(): string;
      getThirstMultiplier(): number;
      getThreatLevel(): number;
      getThumpCondition(): number;
      getThumpTarget(): zombie.iso.objects.interfaces.Thumpable;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTile(): string;
      getTimeSinceLastSmoke(): number;
      getTimeSinceZombieAttack(): number;
      getTimeThumping(): number;
      getTimedActionTimeModifier(): number;
      getTorchStrength(): number;
      getTotalBlood(): number;
      getTraits(): zombie.characters.traits.TraitCollection;
      getTurnDelta(): number;
      getTwist(): number;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUID(): string;
      getUseHandWeapon(): zombie.inventory.types.HandWeapon;
      getUsedItemsOn(): java.util.Stack<string>;
      getUserNameHeight(): number;
      getUsesExternalWaterSource(): boolean;
      getVariable(arg0: zombie.core.skinnedmodel.advancedanimation.AnimationVariableHandle): zombie.core.skinnedmodel.advancedanimation.IAnimationVariableSlot;
      getVariableBoolean(arg0: string, arg1: boolean): boolean;
      getVariableFloat(arg0: string, arg1: number): number;
      getVariableString(arg0: string): string;
      getVectorFromDirection(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getVehicle(): zombie.vehicles.BaseVehicle;
      getVeryCloseEnemyList(): java.util.ArrayList<zombie.iso.IsoMovingObject>;
      getVisual(): zombie.core.skinnedmodel.visual.BaseVisual;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWaterSource(arg0: java.util.ArrayList<zombie.inventory.InventoryItem>): zombie.inventory.InventoryItem;
      getWeaponLevel(): number;
      getWeight(): number;
      getWeightMod(): number;
      getWeldingSoundMod(): number;
      getWidth(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWorldObjectIndex(): number;
      getWornItem(arg0: string): zombie.inventory.InventoryItem;
      getWornItems(): zombie.characters.WornItems.WornItems;
      getX(): number;
      getXp(): zombie.characters.IsoGameCharacter$XP;
      getXpForLevel(arg0: number): number;
      getY(): number;
      getZ(): number;
      getZombieKills(): number;
      hasActiveModel(): boolean;
      hasAnimationPlayer(): boolean;
      hasEquipped(arg0: string): boolean;
      hasEquippedTag(arg0: string): boolean;
      hasExternalWaterSource(): boolean;
      hasFootInjury(): boolean;
      hasHitReaction(): boolean;
      hasItems(arg0: string, arg1: number): boolean;
      hasModData(): boolean;
      hasPath(): boolean;
      hasTimedActions(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      helmetFall(arg0: boolean, arg1: string): boolean;
      hitConsequences(arg0: zombie.inventory.types.HandWeapon, arg1: zombie.characters.IsoGameCharacter, arg2: boolean, arg3: number, arg4: boolean): void;
      initAttachedItems(arg0: string): void;
      initLightInfo2(): zombie.characters.IsoGameCharacter$LightInfo;
      initSpritePartsEmpty(): void;
      initWornItems(arg0: string): void;
      isAboveTopOfStairs(): boolean;
      isAimAtFloor(): boolean;
      isAiming(): boolean;
      isAlive(): boolean;
      isAllowConversation(): boolean;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isAnimForecasted(): boolean;
      isAnimationRecorderActive(): boolean;
      isAsleep(): boolean;
      isAttachedItem(arg0: zombie.inventory.InventoryItem): boolean;
      isAttackAnim(): boolean;
      isAttackWasSuperAttack(): boolean;
      isAttacking(): boolean;
      isAutoWalk(): boolean;
      isBehaviourMoving(): boolean;
      isBehind(arg0: zombie.characters.IsoGameCharacter): boolean;
      isBeingSteppedOn(): boolean;
      isBlink(): boolean;
      isBuildCheat(): boolean;
      isBumpDone(): boolean;
      isBumpFall(): boolean;
      isBumpStaggered(): boolean;
      isBumped(): boolean;
      isCanShout(): boolean;
      isCharacter(): boolean;
      isClimbing(): boolean;
      isClimbingThroughWindow(arg0: zombie.iso.objects.IsoWindow): boolean;
      isCloseKilled(): boolean;
      isClosingWindow(arg0: zombie.iso.objects.IsoWindow): boolean;
      isCollidable(): boolean;
      isCollided(): boolean;
      isCollidedE(): boolean;
      isCollidedN(): boolean;
      isCollidedS(): boolean;
      isCollidedThisFrame(): boolean;
      isCollidedW(): boolean;
      isCollidedWithDoor(): boolean;
      isCollidedWithVehicle(): boolean;
      isCriticalHit(): boolean;
      isCurrentState(arg0: zombie.ai.State): boolean;
      isDead(): boolean;
      isDeathDragDown(): boolean;
      isDestroyed(): boolean;
      isDoDeathSound(): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isDriving(): boolean;
      isEatingOther(arg0: zombie.iso.IsoMovingObject): boolean;
      isEquipped(arg0: zombie.inventory.InventoryItem): boolean;
      isEquippedClothing(arg0: zombie.inventory.InventoryItem): boolean;
      isExistInTheWorld(): boolean;
      isFacingLocation(arg0: number, arg1: number, arg2: number): boolean;
      isFacingObject(arg0: zombie.iso.IsoObject, arg1: number): boolean;
      isFallOnFront(): boolean;
      isFarmingCheat(): boolean;
      isFemale(): boolean;
      isFirstUpdate(): boolean;
      isFloor(): boolean;
      isForceShove(): boolean;
      isGodMod(): boolean;
      isHandItem(arg0: zombie.inventory.InventoryItem): boolean;
      isHealthCheat(): boolean;
      isHeavyItem(arg0: zombie.inventory.InventoryItem): boolean;
      isHideWeaponModel(): boolean;
      isHighlighted(): boolean;
      isHitFromBehind(): boolean;
      isHoppable(): boolean;
      isIgnoreMovementForDirection(): boolean;
      isIgnoreStaggerBack(): boolean;
      isInARoom(): boolean;
      isInTrees(): boolean;
      isInTrees2(arg0: boolean): boolean;
      isInTreesNoBush(): boolean;
      isInvincible(): boolean;
      isInvisible(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isItemInBothHands(arg0: zombie.inventory.InventoryItem): boolean;
      isKnockedDown(): boolean;
      isKnownPoison(arg0: zombie.inventory.InventoryItem): boolean;
      isLastCollidedN(): boolean;
      isLastCollidedW(): boolean;
      isLocal(): boolean;
      isMaskClicked(arg0: number, arg1: number): boolean;
      isMechanicsCheat(): boolean;
      isMovablesCheat(): boolean;
      isMovedThumpable(): boolean;
      isMoving(): boolean;
      isMuzzleFlash(): boolean;
      isNPC(): boolean;
      isNoPicking(): boolean;
      isNorthHoppable(): boolean;
      isOnDeathDone(): boolean;
      isOnFire(): boolean;
      isOnFloor(): boolean;
      isOnKillDone(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isOutside(): boolean;
      isPathing(): boolean;
      isPersistentOutfitInit(): boolean;
      isPlayerMoving(): boolean;
      isPlayingDeathSound(): boolean;
      isPrimaryEquipped(arg0: string): boolean;
      isPrimaryHandItem(arg0: zombie.inventory.InventoryItem): boolean;
      isProne(): boolean;
      isPushableForSeparate(): boolean;
      isPushedByForSeparate(arg0: zombie.iso.IsoMovingObject): boolean;
      isRangedWeaponEmpty(): boolean;
      isReading(): boolean;
      isReanim(): boolean;
      isRecipeKnown(arg0: string): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isRunning(): boolean;
      isSafety(): boolean;
      isSceneCulled(): boolean;
      isSeatedInVehicle(): boolean;
      isSecondaryHandItem(arg0: zombie.inventory.InventoryItem): boolean;
      isShootable(): boolean;
      isShowAdminTag(): boolean;
      isSitOnGround(): boolean;
      isSkipResolveCollision(): boolean;
      isSneaking(): boolean;
      isSolid(): boolean;
      isSolidForSeparate(): boolean;
      isSpeaking(): boolean;
      isSprinting(): boolean;
      isSpriteInvisible(): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isStrafing(): boolean;
      isSuperAttack(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isTeleporting(): boolean;
      isTimedActionInstant(): boolean;
      isTimedActionInstantCheat(): boolean;
      isUnderVehicle(): boolean;
      isUnlimitedCarry(): boolean;
      isUnlimitedEndurance(): boolean;
      isUsingWornItems(): boolean;
      isVariable(arg0: string, arg1: string): boolean;
      isVehicleCollisionActive(arg0: zombie.vehicles.BaseVehicle): boolean;
      isVisibleToNPCs(): boolean;
      isZombie(): boolean;
      isZombieAttacking(): boolean;
      isZombiesDontAttack(): boolean;
      isbAltCollide(): boolean;
      isbDoDefer(): boolean;
      isbFalling(): boolean;
      isbOnBed(): boolean;
      isbUseParts(): boolean;
      learnRecipe(arg0: string): boolean;
      level0(arg0: zombie.characters.skills.PerkFactory$Perk): void;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      onCullStateChanged(arg0: zombie.core.skinnedmodel.ModelManager, arg1: boolean): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      onWornItemsChanged(): void;
      openWindow(arg0: zombie.iso.objects.IsoWindow): void;
      pathToCharacter(arg0: zombie.characters.IsoGameCharacter): void;
      pathToLocation(arg0: number, arg1: number, arg2: number): void;
      pathToLocationF(arg0: number, arg1: number, arg2: number): void;
      pathToSound(arg0: number, arg1: number, arg2: number): void;
      playBloodSplatterSound(): void;
      playDeadSound(): void;
      playEmote(arg0: string): void;
      playHurtSound(): void;
      playSound(arg0: string): number;
      playSoundLocal(arg0: string): number;
      playbackRecordCurrentStateSnapshot(): zombie.characters.action.ActionStateSnapshot;
      playbackSetCurrentStateSnapshot(arg0: zombie.characters.action.ActionStateSnapshot): void;
      postUpdateEquippedTextures(): void;
      postUpdateModelTextures(): void;
      postupdate(): void;
      preupdate(): void;
      processHitDamage(arg0: zombie.inventory.types.HandWeapon, arg1: zombie.characters.IsoGameCharacter, arg2: number, arg3: boolean, arg4: number): number;
      readInventory(arg0: java.nio.ByteBuffer): string;
      releaseAnimationPlayer(): void;
      reloadOutfit(): void;
      removeAllContainers(): void;
      removeAttachedItem(arg0: zombie.inventory.InventoryItem): void;
      removeFromHands(arg0: zombie.inventory.InventoryItem): boolean;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      removeWornItem(arg0: zombie.inventory.InventoryItem): void;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderServerGUI(): void;
      renderShadow(arg0: number, arg1: number, arg2: number): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reportEvent(arg0: string): void;
      reset(): void;
      resetBeardGrowingTime(): void;
      resetBodyDamageRemote(): void;
      resetEquippedHandsModels(): void;
      resetHairGrowingTime(): void;
      resetModel(): void;
      resetModelNextFrame(): void;
      reuseGridSquare(): void;
      save(arg0: java.nio.ByteBuffer): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      sendStopBurning(): void;
      separate(): void;
      serverRemoveItemFromZombie(arg0: string): void;
      setAge(arg0: number): void;
      setAimAtFloor(arg0: boolean): void;
      setAllowConversation(arg0: boolean): void;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAlreadyReadPages(arg0: string, arg1: number): void;
      setAnimForecasted(arg0: number): void;
      setAnimated(arg0: boolean): void;
      setAsleep(arg0: boolean): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setAttachedItem(arg0: string, arg1: zombie.inventory.InventoryItem): void;
      setAttachedItems(arg0: zombie.characters.AttachedItems.AttachedItems): void;
      setAttackAnim(arg0: boolean): void;
      setAttackTargetSquare(arg0: zombie.iso.IsoGridSquare): void;
      setAttackWasSuperAttack(arg0: boolean): void;
      setAttackedBy(arg0: zombie.characters.IsoGameCharacter): void;
      setAutoWalk(arg0: boolean): void;
      setAutoWalkDirection(arg0: zombie.iso.Vector2): void;
      setAvoidDamage(arg0: boolean): void;
      setBed(arg0: zombie.iso.IsoObject): void;
      setBedType(arg0: string): void;
      setBeenMovingFor(arg0: number): void;
      setBeenSprintingFor(arg0: number): void;
      setBetaDelta(arg0: number): void;
      setBetaEffect(arg0: number): void;
      setBlink(arg0: boolean): void;
      setBloodImpactX(arg0: number): void;
      setBloodImpactY(arg0: number): void;
      setBloodImpactZ(arg0: number): void;
      setBloodSplat(arg0: zombie.iso.sprite.IsoSprite): void;
      setBuildCheat(arg0: boolean): void;
      setBumpDone(arg0: boolean): void;
      setBumpFall(arg0: boolean): void;
      setBumpFallType(arg0: string): void;
      setBumpStaggered(arg0: boolean): void;
      setBumpType(arg0: string): void;
      setBumpedChr(arg0: zombie.characters.IsoGameCharacter): void;
      setCanShout(arg0: boolean): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setClickSound(arg0: string): void;
      setCloseKilled(arg0: boolean): void;
      setClothingItem_Back(arg0: zombie.inventory.InventoryItem): void;
      setClothingItem_Feet(arg0: zombie.inventory.InventoryItem): void;
      setClothingItem_Hands(arg0: zombie.inventory.InventoryItem): void;
      setClothingItem_Head(arg0: zombie.inventory.InventoryItem): void;
      setClothingItem_Legs(arg0: zombie.inventory.InventoryItem): void;
      setClothingItem_Torso(arg0: zombie.inventory.InventoryItem): void;
      setCollidable(arg0: boolean): void;
      setCollideType(arg0: string): void;
      setCollidedE(arg0: boolean): void;
      setCollidedN(arg0: boolean): void;
      setCollidedObject(arg0: zombie.iso.IsoObject): void;
      setCollidedS(arg0: boolean): void;
      setCollidedThisFrame(arg0: boolean): void;
      setCollidedW(arg0: boolean): void;
      setCollidedWithDoor(arg0: boolean): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCriticalHit(arg0: boolean): void;
      setCurrent(arg0: zombie.iso.IsoGridSquare): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setDamage(arg0: number): void;
      setDangerLevels(arg0: number): void;
      setDeathDragDown(arg0: boolean): void;
      setDebugMonitor(arg0: zombie.core.skinnedmodel.advancedanimation.debug.AnimatorDebugMonitor): void;
      setDefaultCondition(arg0: number): void;
      setDefaultState(arg0: zombie.ai.State): void;
      setDelayToSleep(arg0: number): void;
      setDepressDelta(arg0: number): void;
      setDepressEffect(arg0: number): void;
      setDescriptor(arg0: zombie.characters.SurvivorDesc): void;
      setDestroyed(arg0: boolean): void;
      setDieCount(arg0: number): void;
      setDir(arg0: number): void;
      setDirectionAngle(arg0: number): void;
      setDoDeathSound(arg0: boolean): void;
      setEatingZombies(arg0: java.util.ArrayList<zombie.characters.IsoZombie>): void;
      setFallOnFront(arg0: boolean): void;
      setFallTime(arg0: number): void;
      setFarmingCheat(arg0: boolean): void;
      setFeelersize(arg0: number): void;
      setFemale(arg0: boolean): void;
      setFireKillRate(arg0: number): void;
      setFireSpreadProbability(arg0: number): void;
      setFirstUpdate(arg0: boolean): void;
      setFollowingTarget(arg0: zombie.characters.IsoGameCharacter): void;
      setForceShove(arg0: boolean): void;
      setForceWakeUpTime(arg0: number): void;
      setForwardDirection(arg0: zombie.iso.Vector2): void;
      setGodMod(arg0: boolean): void;
      setHaloNote(arg0: string, arg1: number): void;
      setHealth(arg0: number): void;
      setHealthCheat(arg0: boolean): void;
      setHideWeaponModel(arg0: boolean): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setHitDir(arg0: zombie.iso.Vector2): void;
      setHitForce(arg0: number): void;
      setHitFromAngle(arg0: number): void;
      setHitFromBehind(arg0: boolean): void;
      setHitReaction(arg0: string): void;
      setHurtSound(arg0: string): void;
      setID(arg0: number): void;
      setIDCount(arg0: number): void;
      setIgnoreAimingInput(arg0: boolean): void;
      setIgnoreMovement(arg0: boolean): void;
      setIgnoreStaggerBack(arg0: boolean): void;
      setImpulsex(arg0: number): void;
      setImpulsey(arg0: number): void;
      setInventory(arg0: zombie.inventory.ItemContainer): void;
      setInvincible(arg0: boolean): void;
      setInvisible(arg0: boolean): void;
      setIsAiming(arg0: boolean): void;
      setIsNPC(arg0: boolean): void;
      setKeyId(arg0: number): void;
      setKnockedDown(arg0: boolean): void;
      setLast(arg0: zombie.iso.IsoGridSquare): void;
      setLastBump(arg0: number): void;
      setLastChatMessage(arg0: zombie.chat.ChatMessage): void;
      setLastCollideTime(arg0: number): void;
      setLastCollidedN(arg0: boolean): void;
      setLastCollidedW(arg0: boolean): void;
      setLastFallSpeed(arg0: number): void;
      setLastHeardSound(arg0: number, arg1: number, arg2: number): void;
      setLastHitCount(arg0: number): void;
      setLastHourSleeped(arg0: number): void;
      setLastLocalEnemies(arg0: number): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setLastSpokenLine(arg0: string): void;
      setLastTargettedBy(arg0: zombie.characters.IsoZombie): void;
      setLastZombieKills(arg0: number): void;
      setLeaveBodyTimedown(arg0: number): void;
      setLegsSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setLevelUpMultiplier(arg0: number): void;
      setLimpulsex(arg0: number): void;
      setLimpulsey(arg0: number): void;
      setLlx(arg0: number): void;
      setLly(arg0: number): void;
      setLlz(arg0: number): void;
      setLrx(arg0: number): void;
      setLry(arg0: number): void;
      setLx(arg0: number): void;
      setLy(arg0: number): void;
      setLz(arg0: number): void;
      setMaxTwist(arg0: number): void;
      setMaxWeight(arg0: number): void;
      setMaxWeightBase(arg0: number): void;
      setMechanicsCheat(arg0: boolean): void;
      setMeleeDelay(arg0: number): void;
      setMetabolicTarget(arg0: zombie.characters.BodyDamage.Metabolics): void;
      setMomentumScalar(arg0: number): void;
      setMovablesCheat(arg0: boolean): void;
      setMoveDelta(arg0: number): void;
      setMoveForwardVec(arg0: zombie.iso.Vector2): void;
      setMovedThumpable(arg0: boolean): void;
      setMovementLastFrame(arg0: zombie.iso.Vector2): void;
      setMoving(arg0: boolean): void;
      setMovingSquareNow(): void;
      setNPC(arg0: boolean): void;
      setName(arg0: string): void;
      setNextWander(arg0: number): void;
      setNoDamage(arg0: boolean): void;
      setNoPicking(arg0: boolean): void;
      setNumSurvivorsInVicinity(arg0: number): void;
      setNx(arg0: number): void;
      setNy(arg0: number): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOnDeathDone(arg0: boolean): void;
      setOnFire(arg0: boolean): void;
      setOnFloor(arg0: boolean): void;
      setOnKillDone(arg0: boolean): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPainDelta(arg0: number): void;
      setPainEffect(arg0: number): void;
      setPath2(arg0: zombie.vehicles.PolygonalMap2$Path): void;
      setPathFindIndex(arg0: number): void;
      setPathIndex(arg0: number): void;
      setPathing(arg0: boolean): void;
      setPatience(arg0: number): void;
      setPatienceMax(arg0: number): void;
      setPatienceMin(arg0: number): void;
      setPerkLevelDebug(arg0: zombie.characters.skills.PerkFactory$Perk, arg1: number): void;
      setPersistentOutfitID(arg0: number, arg1: boolean): void;
      setPipedFuelAmount(arg0: number): void;
      setPlayingDeathSound(arg0: boolean): void;
      setPrimaryHandItem(arg0: zombie.inventory.InventoryItem): void;
      setRangedWeaponEmpty(arg0: boolean): void;
      setReading(arg0: boolean): void;
      setReanim(arg0: boolean): void;
      setReanimAnimDelay(arg0: number): void;
      setReanimAnimFrame(arg0: number): void;
      setReanimateTimer(arg0: number): void;
      setRecoilDelay(arg0: number): void;
      setReduceInfectionPower(arg0: number): void;
      setRemoteID(arg0: number): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setRunning(arg0: boolean): void;
      setSafety(arg0: boolean): void;
      setSafetyCooldown(arg0: number): void;
      setSayLine(arg0: string): void;
      setSceneCulled(arg0: boolean): void;
      setScriptModule(arg0: string): void;
      setScriptnx(arg0: number): void;
      setScriptny(arg0: number): void;
      setSecondaryHandItem(arg0: zombie.inventory.InventoryItem): void;
      setShootable(arg0: boolean): void;
      setShowAdminTag(arg0: boolean): void;
      setSitOnGround(arg0: boolean): void;
      setSleepingTabletDelta(arg0: number): void;
      setSleepingTabletEffect(arg0: number): void;
      setSlowFactor(arg0: number): void;
      setSlowTimer(arg0: number): void;
      setSneaking(arg0: boolean): void;
      setSolid(arg0: boolean): void;
      setSpeakColour(arg0: zombie.core.Color): void;
      setSpeakColourInfo(arg0: zombie.core.textures.ColorInfo): void;
      setSpeakTime(arg0: number): void;
      setSpeaking(arg0: boolean): void;
      setSpecialTooltip(arg0: boolean): void;
      setSpeedMod(arg0: number): void;
      setSprinting(arg0: boolean): void;
      setSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setStaggerTimeMod(arg0: number): void;
      setStateEventDelayTimer(arg0: number): void;
      setStateMachineLocked(arg0: boolean): void;
      setSuperAttack(arg0: boolean): void;
      setSurvivorKills(arg0: number): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTaintedWater(arg0: boolean): void;
      setTargetAlpha(arg0: number): void;
      setTeleport(arg0: zombie.characters.NetworkTeleport): void;
      setTemperature(arg0: number): void;
      setTextureCreator(arg0: zombie.core.skinnedmodel.model.ModelInstanceTextureCreator): void;
      setThumpTarget(arg0: zombie.iso.objects.interfaces.Thumpable): void;
      setTimeOfSleep(arg0: number): void;
      setTimeSinceLastSmoke(arg0: number): void;
      setTimeSinceZombieAttack(arg0: number): void;
      setTimeThumping(arg0: number): void;
      setTimedActionInstantCheat(arg0: boolean): void;
      setTurnDelta(arg0: number): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUnlimitedCarry(arg0: boolean): void;
      setUnlimitedEndurance(arg0: boolean): void;
      setUseHandWeapon(arg0: zombie.inventory.types.HandWeapon): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setVariable(arg0: string, arg1: boolean): void;
      setVehicle(arg0: zombie.vehicles.BaseVehicle): void;
      setVisibleToNPCs(arg0: boolean): void;
      setWaterAmount(arg0: number): void;
      setWeight(arg0: number): void;
      setWidth(arg0: number): void;
      setWornItem(arg0: string, arg1: zombie.inventory.InventoryItem): void;
      setWornItems(arg0: zombie.characters.WornItems.WornItems): void;
      setX(arg0: number): void;
      setXp(arg0: zombie.characters.IsoGameCharacter$XP): void;
      setY(arg0: number): void;
      setZ(arg0: number): void;
      setZombieKills(arg0: number): void;
      setZombiesDontAttack(arg0: boolean): void;
      setbAltCollide(arg0: boolean): void;
      setbClimbing(arg0: boolean): void;
      setbDoDefer(arg0: boolean): void;
      setbFalling(arg0: boolean): void;
      setbOnBed(arg0: boolean): void;
      setbUseParts(arg0: boolean): void;
      shouldBeTurning(): boolean;
      shouldBeTurning90(): boolean;
      shouldBeTurningAround(): boolean;
      shouldBecomeCorpse(): boolean;
      shouldBecomeZombieAfterDeath(): boolean;
      shouldDoInventory(): boolean;
      shouldWaitToStartTimedAction(): boolean;
      smashCarWindow(arg0: zombie.vehicles.VehiclePart): void;
      smashWindow(arg0: zombie.iso.objects.IsoWindow): void;
      softReset(): void;
      splatBlood(arg0: number, arg1: number): void;
      splatBloodFloor(): void;
      splatBloodFloorBig(): void;
      spotted(arg0: zombie.iso.IsoMovingObject, arg1: boolean): void;
      startEvent(arg0: number, arg1: zombie.audio.GameSoundClip, arg2: java.util.BitSet): void;
      startMuzzleFlash(): void;
      startPlaybackGameVariables(): zombie.core.skinnedmodel.advancedanimation.AnimationVariableSource;
      stopEvent(arg0: number, arg1: zombie.audio.GameSoundClip, arg2: java.util.BitSet): void;
      stopOrTriggerSound(arg0: number): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection, arg3: java.nio.ByteBuffer): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      testDefense(arg0: zombie.characters.IsoZombie): boolean;
      testDotSide(arg0: zombie.iso.IsoMovingObject): string;
      toString(): string;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitModData(): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      unsetOutlineHighlight(): void;
      update(): void;
      updateEmitter(): void;
      updateEquippedRadioFreq(): void;
      updateEvent(arg0: number, arg1: zombie.audio.GameSoundClip): void;
      updateLightInfo(): void;
      updateRecoilVar(): void;
      updateSpeedModifiers(): void;
      updateTextObjects(): void;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      writeInventory(arg0: java.nio.ByteBuffer): void;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
      zeroForwardDirectionX(): void;
      zeroForwardDirectionY(): void;
    }
    // zombie.characters.IsoGameCharacter extends zombie.iso.IsoMovingObject
    export class IsoGameCharacter {
      private constructor();
      Asleep: boolean;
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      readonly IsVisibleToPlayer?: boolean[];
      static LowLightingQualityHack: boolean;
      static readonly MAX_WALL_SPLATS: number;
      static readonly MAX_ZOMBIES_EATING: number;
      NoPicking: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OutlineOnMouseover: boolean;
      static readonly RENDER_OFFSET_X: number;
      static readonly RENDER_OFFSET_Y: number;
      ReanimatedCorpse?: zombie.characters.IsoGameCharacter;
      ReanimatedCorpseID: number;
      readonly StateMachineParams?: java.util.HashMap<zombie.ai.State, java.util.HashMap<any, any>>;
      readonly Traits?: zombie.characters.IsoGameCharacter$CharacterTraits;
      readonly actionContext?: zombie.characters.action.ActionContext;
      readonly advancedAnimator?: zombie.core.skinnedmodel.advancedanimation.AdvancedAnimator;
      readonly amputations?: java.util.ArrayList<string>;
      readonly attackVars?: zombie.network.packets.hit.AttackVars;
      bAlphaForced: boolean;
      bNeverDoneAlpha: boolean;
      readonly bOutline?: boolean[];
      bUpdateEquippedTextures: boolean;
      bagsWorn?: java.util.ArrayList<zombie.inventory.types.InventoryContainer>;
      beard?: zombie.core.skinnedmodel.model.ModelInstance;
      blockTurning: boolean;
      static bmod: number;
      bumpNbr: number;
      callOut: boolean;
      clientIgnoreCollision: number;
      container?: zombie.inventory.ItemContainer;
      def?: zombie.iso.sprite.IsoSpriteInstance;
      dir?: zombie.iso.IsoDirections;
      doDirtBloodEtc: boolean;
      doNotSync: boolean;
      doRenderShadow: boolean;
      emitter?: zombie.audio.BaseSoundEmitter;
      forceNullOverride: boolean;
      static gmod: number;
      hair?: zombie.core.skinnedmodel.model.ModelInstance;
      highlightFlags: number;
      readonly hitList?: java.util.ArrayList<zombie.network.packets.hit.HitInfo>;
      invRadioFreq?: java.util.ArrayList<number>;
      keyId: number;
      knockbackAttackMod: number;
      last?: zombie.iso.IsoGridSquare;
      lastAutomaticShoot: number;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      legsSprite?: zombie.iso.sprite.IsoSprite;
      lx: number;
      ly: number;
      lz: number;
      name?: string;
      readonly networkCharacter?: zombie.characters.NetworkCharacter;
      noDamage: boolean;
      nx: number;
      ny: number;
      offsetX: number;
      offsetY: number;
      readonly outlineColor?: zombie.core.textures.ColorInfo[];
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      overridePrimaryHandModel?: string;
      overrideSecondaryHandModel?: string;
      partialThumpDmg: number;
      primaryHandModel?: zombie.core.skinnedmodel.model.ModelInstance;
      realState?: zombie.network.NetworkVariables$ZombieState;
      realdir?: zombie.iso.IsoDirections;
      realx: number;
      realy: number;
      realz: number;
      removedFromWorldMS: number;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      static readonly s_maxPossibleTwist: number;
      savedVehicleRunning: boolean;
      savedVehicleSeat: number;
      savedVehicleX: number;
      savedVehicleY: number;
      secondaryHandModel?: zombie.core.skinnedmodel.model.ModelInstance;
      sheetRope: boolean;
      sheetRopeHealth: number;
      shootInARow: number;
      speedMod: number;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      square?: zombie.iso.IsoGridSquare;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      tintb: number;
      tintg: number;
      tintr: number;
      static treeSoundMgr?: zombie.iso.IsoMovingObject$TreeSoundManager;
      upKillCount: boolean;
      vocalEvent: number;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
      x: number;
      y: number;
      z: number;
  
      Anger(arg0: number): void;
      ApplyInBedOffset(arg0: boolean): void;
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      BetaAntiDepress(arg0: number): void;
      BetaBlockers(arg0: number): void;
      CacheEquipped(): void;
      Callout(): void;
      CanAttack(): boolean;
      CanSee(arg0: zombie.iso.IsoMovingObject): boolean;
      ClearEquippedCache(): void;
      ClearVariable(arg0: string): void;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number): void;
      Despawn(): void;
      DirectionFromVector(arg0: zombie.iso.Vector2): void;
      DirtySlice(): void;
      DistTo(arg0: number, arg1: number): number;
      DistToProper(arg0: zombie.iso.IsoObject): number;
      DistToSquared(arg0: zombie.iso.IsoMovingObject): number;
      DoCollideNorS(): void;
      DoCollideWorE(): void;
      DoDeath(arg0: zombie.inventory.types.HandWeapon, arg1: zombie.characters.IsoGameCharacter): void;
      DoFloorSplat(arg0: zombie.iso.IsoGridSquare, arg1: string, arg2: boolean, arg3: number, arg4: number): void;
      DoFootstepSound(arg0: number): void;
      DoSneezeText(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoSwingCollisionBoneCheck(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number): boolean;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      DrawSneezeText(): void;
      Dressup(arg0: zombie.characters.SurvivorDesc): void;
      Eat(arg0: zombie.inventory.InventoryItem, arg1: number): boolean;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      FireCheck(): void;
      GetAnimSetName(): string;
      GetPrimaryEquippedCache(): zombie.inventory.InventoryItem;
      GetSecondaryEquippedCache(): zombie.inventory.InventoryItem;
      GetVariable(arg0: string): string;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasItem(arg0: string): boolean;
      HasTooltip(): boolean;
      HasTrait(arg0: string): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      HitSilence(arg0: zombie.inventory.types.HandWeapon, arg1: zombie.characters.IsoGameCharacter, arg2: boolean, arg3: number): void;
      InitSpriteParts(arg0: zombie.characters.SurvivorDesc): void;
      IsAttackRange(arg0: number, arg1: number, arg2: number): boolean;
      IsSpeaking(): boolean;
      Kill(arg0: zombie.characters.IsoGameCharacter): void;
      LevelPerk(arg0: zombie.characters.skills.PerkFactory$Perk, arg1: boolean): void;
      LoseLevel(arg0: zombie.characters.skills.PerkFactory$Perk): void;
      Move(arg0: zombie.iso.Vector2): void;
      MoveForward(arg0: number, arg1: number, arg2: number, arg3: number): void;
      MoveUnmodded(arg0: zombie.iso.Vector2): void;
      NPCGetAiming(): boolean;
      NPCGetRunning(): boolean;
      NPCSetAiming(arg0: boolean): void;
      NPCSetAttack(arg0: boolean): void;
      NPCSetJustMoved(arg0: boolean): void;
      NPCSetMelee(arg0: boolean): void;
      NPCSetRunning(arg0: boolean): void;
      OnAnimEvent(arg0: zombie.core.skinnedmodel.advancedanimation.AnimLayer, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      OnDeath(): void;
      PainMeds(arg0: number): void;
      PlayAnim(arg0: string): void;
      PlayAnimUnlooped(arg0: string): void;
      PlayAnimWithSpeed(arg0: string, arg1: number): void;
      QueueAction(arg0: zombie.characters.CharacterTimedActions.BaseAction): void;
      ReadLiterature(arg0: zombie.inventory.types.Literature): void;
      ReduceHealthWhenBurning(): void;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      Say(arg0: string): void;
      SayDebug(arg0: number, arg1: string): void;
      SayRadio(arg0: string, arg1: number, arg2: number, arg3: number, arg4: zombie.ui.UIFont, arg5: number, arg6: number, arg7: string): void;
      SayShout(arg0: string): void;
      SayWhisper(arg0: string): void;
      Seen(arg0: java.util.Stack<zombie.iso.IsoMovingObject>): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      SetOnFire(): void;
      SetVariable(arg0: string, arg1: string): void;
      SleepingTablet(arg0: number): void;
      SpreadFire(): void;
      SpreadFireMP(): void;
      StartAction(arg0: zombie.characters.CharacterTimedActions.BaseAction): void;
      StartTimedActionAnim(arg0: string, arg1: string): void;
      StopAllActionQueue(): void;
      StopAllActionQueueAiming(): void;
      StopAllActionQueueRunning(): void;
      StopAllActionQueueWalking(): void;
      StopBurning(): void;
      StopTimedActionAnim(): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      Throw(arg0: zombie.inventory.types.HandWeapon): void;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      actionStateChanged(arg0: zombie.characters.action.ActionContext): void;
      addBasicPatch(arg0: zombie.characterTextures.BloodBodyPartType): void;
      addBlood(arg0: zombie.characterTextures.BloodBodyPartType, arg1: boolean, arg2: boolean, arg3: boolean): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addDirt(arg0: zombie.characterTextures.BloodBodyPartType, arg1: number, arg2: boolean): void;
      addHole(arg0: zombie.characterTextures.BloodBodyPartType): boolean;
      addHoleFromZombieAttacks(arg0: zombie.characterTextures.BloodBodyPartType, arg1: boolean): boolean;
      addLineChatElement(arg0: string): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      addToWorld(): void;
      addVisualDamage(arg0: string): void;
      addWorldSoundUnlessInvisible(arg0: number, arg1: number, arg2: boolean): void;
      applyTraits(arg0: java.util.ArrayList<string>): void;
      attackFromWindowsLunge(arg0: zombie.characters.IsoZombie): void;
      autoDrink(): void;
      avoidDamage(): boolean;
      becomeCorpse(): void;
      calcHitDir(arg0: zombie.iso.Vector2): void;
      calculateBaseSpeed(): number;
      canAddSheetRope(): boolean;
      canClimbDownSheetRope(arg0: zombie.iso.IsoGridSquare): boolean;
      canClimbDownSheetRopeInCurrentSquare(): boolean;
      canClimbSheetRope(arg0: zombie.iso.IsoGridSquare): boolean;
      canHaveMultipleHits(): number;
      canSprint(): boolean;
      changeState(arg0: zombie.ai.State): void;
      checkHaveElectricity(): void;
      checkIsNearWall(): number;
      cleanWallBlood(): void;
      clearAttachedAnimSprite(): void;
      clearAttachedItems(): void;
      clearVariable(arg0: string): void;
      clearVariables(): void;
      clearWornItems(): void;
      climbDownSheetRope(): void;
      climbOverFence(arg0: zombie.iso.IsoDirections): void;
      climbSheetRope(): void;
      climbThroughWindow(arg0: zombie.iso.objects.IsoThumpable, arg1: number): void;
      climbThroughWindowFrame(arg0: zombie.iso.IsoObject): void;
      closeWindow(arg0: zombie.iso.objects.IsoWindow): void;
      clothingItemChanged(arg0: string): void;
      collideWith(arg0: zombie.iso.IsoObject): void;
      compareMovePriority(arg0: zombie.characters.IsoGameCharacter): number;
      compareToY(arg0: zombie.iso.IsoMovingObject): number;
      containsVariable(arg0: string): boolean;
      countAddSheetRope(): number;
      createContainersFromSpriteProperties(): void;
      createKeyRing(): void;
      customHashCode(): number;
      dbgGetAnimTrack(arg0: number, arg1: number): zombie.core.skinnedmodel.animation.AnimationTrack;
      dbgGetAnimTrackName(arg0: number, arg1: number): string;
      dbgGetAnimTrackTime(arg0: number, arg1: number): number;
      dbgGetAnimTrackWeight(arg0: number, arg1: number): number;
      debugPrintout(): void;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      distToNearestCamCharacter(): number;
      doFindExternalWaterSource(): void;
      doHitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.vehicles.BaseVehicle$HitVars): void;
      doStairs(): void;
      drawDirectionLine(arg0: zombie.iso.Vector2, arg1: number, arg2: number, arg3: number, arg4: number): void;
      dressInClothingItem(arg0: string): void;
      dressInNamedOutfit(arg0: string): void;
      dressInPersistentOutfit(arg0: string): void;
      dressInPersistentOutfitID(arg0: number): void;
      dressInRandomOutfit(): void;
      dropHandItems(): void;
      dropHeavyItems(): void;
      endPlaybackGameVariables(arg0: zombie.core.skinnedmodel.advancedanimation.AnimationVariableSource): void;
      ensureOnTile(): void;
      enterVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number, arg2: org.joml.Vector3f): void;
      equals(arg0: any): boolean;
      exert(arg0: number): void;
      faceLocation(arg0: number, arg1: number): void;
      faceLocationF(arg0: number, arg1: number): void;
      facePosition(arg0: number, arg1: number): void;
      faceThisObject(arg0: zombie.iso.IsoObject): void;
      faceThisObjectAlt(arg0: zombie.iso.IsoObject): void;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      fallenOnKnees(): void;
      forceAwake(): void;
      getAbsoluteExcessTwist(): number;
      getActionContext(): zombie.characters.action.ActionContext;
      getActionStateName(): string;
      getActiveLightItems(arg0: java.util.ArrayList<zombie.inventory.InventoryItem>): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getAdvancedAnimator(): zombie.core.skinnedmodel.advancedanimation.AdvancedAnimator;
      getAge(): number;
      getAlpha(arg0: number): number;
      getAlreadyReadPages(arg0: string): number;
      getAnimAngle(): number;
      getAnimAngleRadians(): number;
      getAnimAngleStepDelta(): number;
      getAnimAngleTwistDelta(): number;
      getAnimVector(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getAnimationDebug(): string;
      getAnimationPlayer(): zombie.core.skinnedmodel.animation.AnimationPlayer;
      getAnimationPlayerRecorder(): zombie.core.skinnedmodel.animation.debug.AnimationPlayerRecorder;
      getAnimationStateName(): string;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getAttachedItem(arg0: string): zombie.inventory.InventoryItem;
      getAttachedItems(): zombie.characters.AttachedItems.AttachedItems;
      getAttachedLocationGroup(): zombie.characters.AttachedItems.AttachedLocationGroup;
      getAttackTargetSquare(): zombie.iso.IsoGridSquare;
      getAttackedBy(): zombie.characters.IsoGameCharacter;
      getAutoWalkDirection(): zombie.iso.Vector2;
      getBarricadeStrengthMod(): number;
      getBarricadeTimeMod(): number;
      getBed(): zombie.iso.IsoObject;
      getBedType(): string;
      getBeenMovingFor(): number;
      getBeenSprintingFor(): number;
      getBetaDelta(): number;
      getBetaEffect(): number;
      getBloodImpactX(): number;
      getBloodImpactY(): number;
      getBloodImpactZ(): number;
      getBloodSplat(): zombie.iso.sprite.IsoSprite;
      getBodyDamage(): zombie.characters.BodyDamage.BodyDamage;
      getBodyDamageRemote(): zombie.characters.BodyDamage.BodyDamage;
      getBodyLocationGroup(): zombie.characters.WornItems.BodyLocationGroup;
      getBodyPartClothingDefense(arg0: number, arg1: boolean, arg2: boolean): number;
      getBrain(): zombie.ai.GameCharacterAIBrain;
      getBuilding(): zombie.iso.areas.IsoBuilding;
      getBumpFallType(): string;
      getBumpType(): string;
      getBumpedChr(): zombie.characters.IsoGameCharacter;
      getBumpedType(arg0: zombie.characters.IsoGameCharacter): string;
      getCell(): zombie.iso.IsoCell;
      getCharacterActions(): java.util.Stack<zombie.characters.CharacterTimedActions.BaseAction>;
      getCharacterTraits(): zombie.characters.IsoGameCharacter$CharacterTraits;
      getChatElement(): zombie.chat.ChatElement;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getChopTreeSpeed(): number;
      getClass(): java.lang.Class<any>;
      getClickSound(): string;
      getClothingItem_Back(): zombie.inventory.InventoryItem;
      getClothingItem_Feet(): zombie.inventory.InventoryItem;
      getClothingItem_Hands(): zombie.inventory.InventoryItem;
      getClothingItem_Head(): zombie.inventory.InventoryItem;
      getClothingItem_Legs(): zombie.inventory.InventoryItem;
      getClothingItem_Torso(): zombie.inventory.InventoryItem;
      getClothingWetness(): zombie.characters.ClothingWetness;
      getCollideType(): string;
      getCollidedObject(): zombie.iso.IsoObject;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getCurrentActionContextStateName(): string;
      getCurrentBuilding(): zombie.iso.areas.IsoBuilding;
      getCurrentBuildingDef(): zombie.iso.BuildingDef;
      getCurrentRoomDef(): zombie.iso.RoomDef;
      getCurrentSquare(): zombie.iso.IsoGridSquare;
      getCurrentState(): zombie.ai.State;
      getCurrentStateName(): string;
      getCurrentZone(): zombie.iso.IsoMetaGrid$Zone;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getDamage(): number;
      getDangerLevels(): number;
      getDebugMonitor(): zombie.core.skinnedmodel.advancedanimation.debug.AnimatorDebugMonitor;
      getDefaultState(): zombie.ai.State;
      getDeferredAngleDelta(): number;
      getDeferredMovement(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getDeferredRotationWeight(): number;
      getDepressDelta(): number;
      getDepressEffect(): number;
      getDescriptor(): zombie.characters.SurvivorDesc;
      getDieCount(): number;
      getDir(): zombie.iso.IsoDirections;
      getDirectionAngle(): number;
      getDistanceSq(arg0: zombie.iso.IsoMovingObject): number;
      getDotWithForwardDirection(arg0: number, arg1: number): number;
      getEatingZombies(): java.util.ArrayList<zombie.characters.IsoZombie>;
      getEmitter(): zombie.characters.BaseCharacterSoundEmitter;
      getEnemyList(): java.util.Stack<zombie.characters.IsoGameCharacter>;
      getEquipedRadio(): zombie.inventory.types.Radio;
      getExcessTwist(): number;
      getFMODParameters(): zombie.audio.FMODParameterList;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getFallTime(): number;
      getFamiliarBuildings(): java.util.Stack<zombie.iso.areas.IsoBuilding>;
      getFatigueMod(): number;
      getFatiqueMultiplier(): number;
      getFeelerTile(arg0: number): zombie.iso.IsoGridSquare;
      getFeelersize(): number;
      getFinder(): zombie.ai.astar.AStarPathFinderResult;
      getFireKillRate(): number;
      getFireSpreadProbability(): number;
      getFollowingTarget(): zombie.characters.IsoGameCharacter;
      getForceWakeUpTime(): number;
      getForwardDirection(): zombie.iso.Vector2;
      getFullName(): string;
      getFuturWalkedSquare(): zombie.iso.IsoGridSquare;
      getGameCharacterAIBrain(): zombie.ai.GameCharacterAIBrain;
      getGameVariables(): java.lang.Iterable<zombie.core.skinnedmodel.advancedanimation.IAnimationVariableSlot>;
      getGlobalMovementMod(): number;
      getHaloTimerCount(): number;
      getHammerSoundMod(): number;
      getHealth(): number;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getHitChancesMod(): number;
      getHitDir(): zombie.iso.Vector2;
      getHitForce(): number;
      getHitFromAngle(): number;
      getHitReaction(): string;
      getHitReactionNetworkAI(): zombie.characters.HitReactionNetworkAI;
      getHittingMod(): number;
      getHoursSurvived(): number;
      getHungerMultiplier(): number;
      getHurtSound(): string;
      getHyperthermiaMod(): number;
      getID(): number;
      getIDCount(): number;
      getIgnoreMovement(): boolean;
      getImpulsex(): number;
      getImpulsey(): number;
      getInf(): zombie.core.textures.ColorInfo;
      getInventory(): zombie.inventory.ItemContainer;
      getInventoryWeight(): number;
      getIsNPC(): boolean;
      getIsSurfaceNormalOffset(): boolean;
      getItemContainer(): zombie.inventory.ItemContainer;
      getItemVisuals(): zombie.core.skinnedmodel.visual.ItemVisuals;
      getKeyId(): number;
      getKnownRecipes(): java.util.List<string>;
      getLastBump(): number;
      getLastChatMessage(): zombie.chat.ChatMessage;
      getLastCollideTime(): number;
      getLastFallSpeed(): number;
      getLastHeardSound(): zombie.characters.IsoGameCharacter$Location;
      getLastHitCount(): number;
      getLastHourSleeped(): number;
      getLastKnownLocation(): java.util.HashMap<string, zombie.characters.IsoGameCharacter$Location>;
      getLastKnownLocationOf(arg0: string): zombie.characters.IsoGameCharacter$Location;
      getLastLocalEnemies(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getLastSpokenLine(): string;
      getLastSquare(): zombie.iso.IsoGridSquare;
      getLastTargettedBy(): zombie.characters.IsoZombie;
      getLastZombieKills(): number;
      getLeaveBodyTimedown(): number;
      getLegsSprite(): zombie.iso.sprite.IsoSprite;
      getLevelMaxForXp(): number;
      getLevelUpLevels(): number[];
      getLevelUpMultiplier(): number;
      getLightInfo2(): zombie.characters.IsoGameCharacter$LightInfo;
      getLightfootMod(): number;
      getLimpulsex(): number;
      getLimpulsey(): number;
      getLlx(): number;
      getLly(): number;
      getLlz(): number;
      getLocalEnemyList(): java.util.Stack<zombie.characters.IsoGameCharacter>;
      getLocalGroupList(): java.util.ArrayList<zombie.iso.IsoMovingObject>;
      getLocalList(): java.util.ArrayList<zombie.iso.IsoMovingObject>;
      getLocalNeutralList(): java.util.ArrayList<zombie.iso.IsoMovingObject>;
      getLocalRelevantEnemyList(): java.util.ArrayList<zombie.iso.IsoMovingObject>;
      getLookAngleRadians(): number;
      getLookVector(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getLowDangerInVicinity(arg0: number, arg1: number): zombie.iso.IsoGridSquare;
      getLrx(): number;
      getLry(): number;
      getLx(): number;
      getLy(): number;
      getLz(): number;
      getMaintenanceMod(): number;
      getMapKnowledge(): zombie.ai.MapKnowledge;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getMasterRegion(): zombie.iso.areas.isoregion.regions.IWorldRegion;
      getMaxChatLines(): number;
      getMaxTwist(): number;
      getMaxWeight(): number;
      getMaxWeightBase(): number;
      getMeleeCombatMod(): number;
      getMeleeDelay(): number;
      getMetalBarricadeStrengthMod(): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getModel(): zombie.core.skinnedmodel.model.ModelInstance;
      getModelInstance(): zombie.core.skinnedmodel.model.ModelInstance;
      getMomentumScalar(): number;
      getMoodles(): zombie.characters.Moodles.Moodles;
      getMoveDelta(): number;
      getMoveForwardVec(): zombie.iso.Vector2;
      getMoveSpeed(): number;
      getMovementLastFrame(): zombie.iso.Vector2;
      getMovingObjectIndex(): number;
      getName(): string;
      getNearVehicle(): zombie.vehicles.BaseVehicle;
      getNetworkCharacterAI(): zombie.characters.NetworkCharacterAI;
      getNew(): zombie.iso.IsoObject;
      getNextWander(): number;
      getNimbleMod(): number;
      getNoDamage(): boolean;
      getNumSurvivorsInVicinity(): number;
      getNx(): number;
      getNy(): number;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffsetX(): number;
      getOffsetY(): number;
      getOnlineID(): number;
      getOrCreateSleepingEventData(): zombie.ai.sadisticAIDirector.SleepingEventData;
      getOrCreateVariable(arg0: string): zombie.core.skinnedmodel.advancedanimation.IAnimationVariableSlot;
      getOutfitName(): string;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPacingMod(): number;
      getPainDelta(): number;
      getPainEffect(): number;
      getPath2(): zombie.vehicles.PolygonalMap2$Path;
      getPathFindBehavior2(): zombie.vehicles.PathFindBehavior2;
      getPathFindIndex(): number;
      getPathIndex(): number;
      getPathTargetX(): number;
      getPathTargetY(): number;
      getPathTargetZ(): number;
      getPatience(): number;
      getPatienceMax(): number;
      getPatienceMin(): number;
      getPerkInfo(arg0: zombie.characters.skills.PerkFactory$Perk): zombie.characters.IsoGameCharacter$PerkInfo;
      getPerkLevel(arg0: zombie.characters.skills.PerkFactory$Perk): number;
      getPerkList(): java.util.ArrayList<zombie.characters.IsoGameCharacter$PerkInfo>;
      getPersistentOutfitID(): number;
      getPipedFuelAmount(): number;
      getPosition(arg0: zombie.iso.Vector3): zombie.iso.Vector3;
      getPreviousActionContextStateName(): string;
      getPreviousStateName(): string;
      getPrimaryHandItem(): zombie.inventory.InventoryItem;
      getPrimaryHandType(): string;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRandomDefaultOutfit(): zombie.core.skinnedmodel.population.Outfit;
      getReadyModelData(): java.util.ArrayList<zombie.core.skinnedmodel.model.ModelInstance>;
      getReanimAnimDelay(): number;
      getReanimAnimFrame(): number;
      getReanimateTimer(): number;
      getRecoilDelay(): number;
      getRecoveryMod(): number;
      getReduceInfectionPower(): number;
      getRemoteID(): number;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getRunSpeedModifier(): number;
      getSafetyCooldown(): number;
      getSayLine(): string;
      getScreenX(): number;
      getScreenY(): number;
      getScriptModule(): string;
      getScriptName(): string;
      getScriptnx(): number;
      getScriptny(): number;
      getSecondaryHandItem(): zombie.inventory.InventoryItem;
      getSecondaryHandType(): string;
      getShoulderTwist(): number;
      getShovingMod(): number;
      getSleepingTabletDelta(): number;
      getSleepingTabletEffect(): number;
      getSlowFactor(): number;
      getSlowTimer(): number;
      getSneakSpotMod(): number;
      getSpeakColour(): zombie.core.Color;
      getSpeakTime(): number;
      getSpecialObjectIndex(): number;
      getSpeedMod(): number;
      getSprintMod(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteDef(): zombie.iso.sprite.IsoSpriteInstance;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSquare(): zombie.iso.IsoGridSquare;
      getStaggerTimeMod(): number;
      getStateEventDelayTimer(): number;
      getStateMachine(): zombie.ai.StateMachine;
      getStateMachineParams(arg0: zombie.ai.State): java.util.HashMap<any, any>;
      getStaticMovingObjectIndex(): number;
      getStats(): zombie.characters.Stats;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getSurroundingAttackingZombies(): number;
      getSurvivorKills(): number;
      getSurvivorMap(): java.util.HashMap<number, zombie.characters.SurvivorDesc>;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTalkerType(): string;
      getTargetAlpha(arg0: number): number;
      getTargetTwist(): number;
      getTeleport(): zombie.characters.NetworkTeleport;
      getTemperature(): number;
      getTempo(): zombie.iso.Vector2;
      getTextureCreator(): zombie.core.skinnedmodel.model.ModelInstanceTextureCreator;
      getTextureName(): string;
      getThirstMultiplier(): number;
      getThreatLevel(): number;
      getThumpCondition(): number;
      getThumpTarget(): zombie.iso.objects.interfaces.Thumpable;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTile(): string;
      getTimeSinceLastSmoke(): number;
      getTimeSinceZombieAttack(): number;
      getTimeThumping(): number;
      getTimedActionTimeModifier(): number;
      getTorchStrength(): number;
      getTotalBlood(): number;
      getTraits(): zombie.characters.traits.TraitCollection;
      getTurnDelta(): number;
      getTwist(): number;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUID(): string;
      getUseHandWeapon(): zombie.inventory.types.HandWeapon;
      getUsedItemsOn(): java.util.Stack<string>;
      getUserNameHeight(): number;
      getUsesExternalWaterSource(): boolean;
      getVariable(arg0: zombie.core.skinnedmodel.advancedanimation.AnimationVariableHandle): zombie.core.skinnedmodel.advancedanimation.IAnimationVariableSlot;
      getVariableBoolean(arg0: string, arg1: boolean): boolean;
      getVariableFloat(arg0: string, arg1: number): number;
      getVariableString(arg0: string): string;
      getVectorFromDirection(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getVehicle(): zombie.vehicles.BaseVehicle;
      getVeryCloseEnemyList(): java.util.ArrayList<zombie.iso.IsoMovingObject>;
      getVisual(): zombie.core.skinnedmodel.visual.BaseVisual;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWaterSource(arg0: java.util.ArrayList<zombie.inventory.InventoryItem>): zombie.inventory.InventoryItem;
      getWeaponLevel(): number;
      getWeight(): number;
      getWeightMod(): number;
      getWeldingSoundMod(): number;
      getWidth(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWorldObjectIndex(): number;
      getWornItem(arg0: string): zombie.inventory.InventoryItem;
      getWornItems(): zombie.characters.WornItems.WornItems;
      getX(): number;
      getXp(): zombie.characters.IsoGameCharacter$XP;
      getXpForLevel(arg0: number): number;
      getY(): number;
      getZ(): number;
      getZombieKills(): number;
      hasActiveModel(): boolean;
      hasAnimationPlayer(): boolean;
      hasEquipped(arg0: string): boolean;
      hasEquippedTag(arg0: string): boolean;
      hasExternalWaterSource(): boolean;
      hasFootInjury(): boolean;
      hasHitReaction(): boolean;
      hasItems(arg0: string, arg1: number): boolean;
      hasModData(): boolean;
      hasPath(): boolean;
      hasTimedActions(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      helmetFall(arg0: boolean, arg1: string): boolean;
      hitConsequences(arg0: zombie.inventory.types.HandWeapon, arg1: zombie.characters.IsoGameCharacter, arg2: boolean, arg3: number, arg4: boolean): void;
      initAttachedItems(arg0: string): void;
      initLightInfo2(): zombie.characters.IsoGameCharacter$LightInfo;
      initSpritePartsEmpty(): void;
      initWornItems(arg0: string): void;
      isAboveTopOfStairs(): boolean;
      isAimAtFloor(): boolean;
      isAiming(): boolean;
      isAlive(): boolean;
      isAllowConversation(): boolean;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isAnimForecasted(): boolean;
      isAnimationRecorderActive(): boolean;
      isAsleep(): boolean;
      isAttachedItem(arg0: zombie.inventory.InventoryItem): boolean;
      isAttackAnim(): boolean;
      isAttackWasSuperAttack(): boolean;
      isAttacking(): boolean;
      isAutoWalk(): boolean;
      isBehaviourMoving(): boolean;
      isBehind(arg0: zombie.characters.IsoGameCharacter): boolean;
      isBeingSteppedOn(): boolean;
      isBlink(): boolean;
      isBuildCheat(): boolean;
      isBumpDone(): boolean;
      isBumpFall(): boolean;
      isBumpStaggered(): boolean;
      isBumped(): boolean;
      isCanShout(): boolean;
      isCharacter(): boolean;
      isClimbing(): boolean;
      isClimbingThroughWindow(arg0: zombie.iso.objects.IsoWindow): boolean;
      isCloseKilled(): boolean;
      isClosingWindow(arg0: zombie.iso.objects.IsoWindow): boolean;
      isCollidable(): boolean;
      isCollided(): boolean;
      isCollidedE(): boolean;
      isCollidedN(): boolean;
      isCollidedS(): boolean;
      isCollidedThisFrame(): boolean;
      isCollidedW(): boolean;
      isCollidedWithDoor(): boolean;
      isCollidedWithVehicle(): boolean;
      isCriticalHit(): boolean;
      isCurrentState(arg0: zombie.ai.State): boolean;
      isDead(): boolean;
      isDeathDragDown(): boolean;
      isDestroyed(): boolean;
      isDoDeathSound(): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isDriving(): boolean;
      isEatingOther(arg0: zombie.iso.IsoMovingObject): boolean;
      isEquipped(arg0: zombie.inventory.InventoryItem): boolean;
      isEquippedClothing(arg0: zombie.inventory.InventoryItem): boolean;
      isExistInTheWorld(): boolean;
      isFacingLocation(arg0: number, arg1: number, arg2: number): boolean;
      isFacingObject(arg0: zombie.iso.IsoObject, arg1: number): boolean;
      isFallOnFront(): boolean;
      isFarmingCheat(): boolean;
      isFemale(): boolean;
      isFirstUpdate(): boolean;
      isFloor(): boolean;
      isForceShove(): boolean;
      isGodMod(): boolean;
      isHandItem(arg0: zombie.inventory.InventoryItem): boolean;
      isHealthCheat(): boolean;
      isHeavyItem(arg0: zombie.inventory.InventoryItem): boolean;
      isHideWeaponModel(): boolean;
      isHighlighted(): boolean;
      isHitFromBehind(): boolean;
      isHoppable(): boolean;
      isIgnoreMovementForDirection(): boolean;
      isIgnoreStaggerBack(): boolean;
      isInARoom(): boolean;
      isInTrees(): boolean;
      isInTrees2(arg0: boolean): boolean;
      isInTreesNoBush(): boolean;
      isInvincible(): boolean;
      isInvisible(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isItemInBothHands(arg0: zombie.inventory.InventoryItem): boolean;
      isKnockedDown(): boolean;
      isKnownPoison(arg0: zombie.inventory.InventoryItem): boolean;
      isLastCollidedN(): boolean;
      isLastCollidedW(): boolean;
      isLocal(): boolean;
      isMaskClicked(arg0: number, arg1: number): boolean;
      isMechanicsCheat(): boolean;
      isMovablesCheat(): boolean;
      isMovedThumpable(): boolean;
      isMoving(): boolean;
      isMuzzleFlash(): boolean;
      isNPC(): boolean;
      isNoPicking(): boolean;
      isNorthHoppable(): boolean;
      isOnDeathDone(): boolean;
      isOnFire(): boolean;
      isOnFloor(): boolean;
      isOnKillDone(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isOutside(): boolean;
      isPathing(): boolean;
      isPersistentOutfitInit(): boolean;
      isPlayerMoving(): boolean;
      isPlayingDeathSound(): boolean;
      isPrimaryEquipped(arg0: string): boolean;
      isPrimaryHandItem(arg0: zombie.inventory.InventoryItem): boolean;
      isProne(): boolean;
      isPushableForSeparate(): boolean;
      isPushedByForSeparate(arg0: zombie.iso.IsoMovingObject): boolean;
      isRangedWeaponEmpty(): boolean;
      isReading(): boolean;
      isReanim(): boolean;
      isRecipeKnown(arg0: string): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isRunning(): boolean;
      isSafety(): boolean;
      isSceneCulled(): boolean;
      isSeatedInVehicle(): boolean;
      isSecondaryHandItem(arg0: zombie.inventory.InventoryItem): boolean;
      isShootable(): boolean;
      isShowAdminTag(): boolean;
      isSitOnGround(): boolean;
      isSkipResolveCollision(): boolean;
      isSneaking(): boolean;
      isSolid(): boolean;
      isSolidForSeparate(): boolean;
      isSpeaking(): boolean;
      isSprinting(): boolean;
      isSpriteInvisible(): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isStrafing(): boolean;
      isSuperAttack(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isTeleporting(): boolean;
      isTimedActionInstant(): boolean;
      isTimedActionInstantCheat(): boolean;
      isUnderVehicle(): boolean;
      isUnlimitedCarry(): boolean;
      isUnlimitedEndurance(): boolean;
      isUsingWornItems(): boolean;
      isVariable(arg0: string, arg1: string): boolean;
      isVehicleCollisionActive(arg0: zombie.vehicles.BaseVehicle): boolean;
      isVisibleToNPCs(): boolean;
      isZombie(): boolean;
      isZombieAttacking(): boolean;
      isZombiesDontAttack(): boolean;
      isbAltCollide(): boolean;
      isbDoDefer(): boolean;
      isbFalling(): boolean;
      isbOnBed(): boolean;
      isbUseParts(): boolean;
      learnRecipe(arg0: string): boolean;
      level0(arg0: zombie.characters.skills.PerkFactory$Perk): void;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      onCullStateChanged(arg0: zombie.core.skinnedmodel.ModelManager, arg1: boolean): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      onWornItemsChanged(): void;
      openWindow(arg0: zombie.iso.objects.IsoWindow): void;
      pathToCharacter(arg0: zombie.characters.IsoGameCharacter): void;
      pathToLocation(arg0: number, arg1: number, arg2: number): void;
      pathToLocationF(arg0: number, arg1: number, arg2: number): void;
      pathToSound(arg0: number, arg1: number, arg2: number): void;
      playBloodSplatterSound(): void;
      playDeadSound(): void;
      playEmote(arg0: string): void;
      playHurtSound(): void;
      playSound(arg0: string): number;
      playSoundLocal(arg0: string): number;
      playbackRecordCurrentStateSnapshot(): zombie.characters.action.ActionStateSnapshot;
      playbackSetCurrentStateSnapshot(arg0: zombie.characters.action.ActionStateSnapshot): void;
      postUpdateEquippedTextures(): void;
      postUpdateModelTextures(): void;
      postupdate(): void;
      preupdate(): void;
      processHitDamage(arg0: zombie.inventory.types.HandWeapon, arg1: zombie.characters.IsoGameCharacter, arg2: number, arg3: boolean, arg4: number): number;
      readInventory(arg0: java.nio.ByteBuffer): string;
      releaseAnimationPlayer(): void;
      reloadOutfit(): void;
      removeAllContainers(): void;
      removeAttachedItem(arg0: zombie.inventory.InventoryItem): void;
      removeFromHands(arg0: zombie.inventory.InventoryItem): boolean;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      removeWornItem(arg0: zombie.inventory.InventoryItem): void;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderServerGUI(): void;
      renderShadow(arg0: number, arg1: number, arg2: number): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reportEvent(arg0: string): void;
      reset(): void;
      resetBeardGrowingTime(): void;
      resetBodyDamageRemote(): void;
      resetEquippedHandsModels(): void;
      resetHairGrowingTime(): void;
      resetModel(): void;
      resetModelNextFrame(): void;
      reuseGridSquare(): void;
      save(arg0: java.nio.ByteBuffer): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      sendStopBurning(): void;
      separate(): void;
      serverRemoveItemFromZombie(arg0: string): void;
      setAge(arg0: number): void;
      setAimAtFloor(arg0: boolean): void;
      setAllowConversation(arg0: boolean): void;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAlreadyReadPages(arg0: string, arg1: number): void;
      setAnimForecasted(arg0: number): void;
      setAnimated(arg0: boolean): void;
      setAsleep(arg0: boolean): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setAttachedItem(arg0: string, arg1: zombie.inventory.InventoryItem): void;
      setAttachedItems(arg0: zombie.characters.AttachedItems.AttachedItems): void;
      setAttackAnim(arg0: boolean): void;
      setAttackTargetSquare(arg0: zombie.iso.IsoGridSquare): void;
      setAttackWasSuperAttack(arg0: boolean): void;
      setAttackedBy(arg0: zombie.characters.IsoGameCharacter): void;
      setAutoWalk(arg0: boolean): void;
      setAutoWalkDirection(arg0: zombie.iso.Vector2): void;
      setAvoidDamage(arg0: boolean): void;
      setBed(arg0: zombie.iso.IsoObject): void;
      setBedType(arg0: string): void;
      setBeenMovingFor(arg0: number): void;
      setBeenSprintingFor(arg0: number): void;
      setBetaDelta(arg0: number): void;
      setBetaEffect(arg0: number): void;
      setBlink(arg0: boolean): void;
      setBloodImpactX(arg0: number): void;
      setBloodImpactY(arg0: number): void;
      setBloodImpactZ(arg0: number): void;
      setBloodSplat(arg0: zombie.iso.sprite.IsoSprite): void;
      setBuildCheat(arg0: boolean): void;
      setBumpDone(arg0: boolean): void;
      setBumpFall(arg0: boolean): void;
      setBumpFallType(arg0: string): void;
      setBumpStaggered(arg0: boolean): void;
      setBumpType(arg0: string): void;
      setBumpedChr(arg0: zombie.characters.IsoGameCharacter): void;
      setCanShout(arg0: boolean): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setClickSound(arg0: string): void;
      setCloseKilled(arg0: boolean): void;
      setClothingItem_Back(arg0: zombie.inventory.InventoryItem): void;
      setClothingItem_Feet(arg0: zombie.inventory.InventoryItem): void;
      setClothingItem_Hands(arg0: zombie.inventory.InventoryItem): void;
      setClothingItem_Head(arg0: zombie.inventory.InventoryItem): void;
      setClothingItem_Legs(arg0: zombie.inventory.InventoryItem): void;
      setClothingItem_Torso(arg0: zombie.inventory.InventoryItem): void;
      setCollidable(arg0: boolean): void;
      setCollideType(arg0: string): void;
      setCollidedE(arg0: boolean): void;
      setCollidedN(arg0: boolean): void;
      setCollidedObject(arg0: zombie.iso.IsoObject): void;
      setCollidedS(arg0: boolean): void;
      setCollidedThisFrame(arg0: boolean): void;
      setCollidedW(arg0: boolean): void;
      setCollidedWithDoor(arg0: boolean): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCriticalHit(arg0: boolean): void;
      setCurrent(arg0: zombie.iso.IsoGridSquare): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setDamage(arg0: number): void;
      setDangerLevels(arg0: number): void;
      setDeathDragDown(arg0: boolean): void;
      setDebugMonitor(arg0: zombie.core.skinnedmodel.advancedanimation.debug.AnimatorDebugMonitor): void;
      setDefaultCondition(arg0: number): void;
      setDefaultState(arg0: zombie.ai.State): void;
      setDelayToSleep(arg0: number): void;
      setDepressDelta(arg0: number): void;
      setDepressEffect(arg0: number): void;
      setDescriptor(arg0: zombie.characters.SurvivorDesc): void;
      setDestroyed(arg0: boolean): void;
      setDieCount(arg0: number): void;
      setDir(arg0: number): void;
      setDirectionAngle(arg0: number): void;
      setDoDeathSound(arg0: boolean): void;
      setEatingZombies(arg0: java.util.ArrayList<zombie.characters.IsoZombie>): void;
      setFallOnFront(arg0: boolean): void;
      setFallTime(arg0: number): void;
      setFarmingCheat(arg0: boolean): void;
      setFeelersize(arg0: number): void;
      setFemale(arg0: boolean): void;
      setFireKillRate(arg0: number): void;
      setFireSpreadProbability(arg0: number): void;
      setFirstUpdate(arg0: boolean): void;
      setFollowingTarget(arg0: zombie.characters.IsoGameCharacter): void;
      setForceShove(arg0: boolean): void;
      setForceWakeUpTime(arg0: number): void;
      setForwardDirection(arg0: zombie.iso.Vector2): void;
      setGodMod(arg0: boolean): void;
      setHaloNote(arg0: string, arg1: number): void;
      setHealth(arg0: number): void;
      setHealthCheat(arg0: boolean): void;
      setHideWeaponModel(arg0: boolean): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setHitDir(arg0: zombie.iso.Vector2): void;
      setHitForce(arg0: number): void;
      setHitFromAngle(arg0: number): void;
      setHitFromBehind(arg0: boolean): void;
      setHitReaction(arg0: string): void;
      setHurtSound(arg0: string): void;
      setID(arg0: number): void;
      setIDCount(arg0: number): void;
      setIgnoreAimingInput(arg0: boolean): void;
      setIgnoreMovement(arg0: boolean): void;
      setIgnoreStaggerBack(arg0: boolean): void;
      setImpulsex(arg0: number): void;
      setImpulsey(arg0: number): void;
      setInventory(arg0: zombie.inventory.ItemContainer): void;
      setInvincible(arg0: boolean): void;
      setInvisible(arg0: boolean): void;
      setIsAiming(arg0: boolean): void;
      setIsNPC(arg0: boolean): void;
      setKeyId(arg0: number): void;
      setKnockedDown(arg0: boolean): void;
      setLast(arg0: zombie.iso.IsoGridSquare): void;
      setLastBump(arg0: number): void;
      setLastChatMessage(arg0: zombie.chat.ChatMessage): void;
      setLastCollideTime(arg0: number): void;
      setLastCollidedN(arg0: boolean): void;
      setLastCollidedW(arg0: boolean): void;
      setLastFallSpeed(arg0: number): void;
      setLastHeardSound(arg0: number, arg1: number, arg2: number): void;
      setLastHitCount(arg0: number): void;
      setLastHourSleeped(arg0: number): void;
      setLastLocalEnemies(arg0: number): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setLastSpokenLine(arg0: string): void;
      setLastTargettedBy(arg0: zombie.characters.IsoZombie): void;
      setLastZombieKills(arg0: number): void;
      setLeaveBodyTimedown(arg0: number): void;
      setLegsSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setLevelUpMultiplier(arg0: number): void;
      setLimpulsex(arg0: number): void;
      setLimpulsey(arg0: number): void;
      setLlx(arg0: number): void;
      setLly(arg0: number): void;
      setLlz(arg0: number): void;
      setLrx(arg0: number): void;
      setLry(arg0: number): void;
      setLx(arg0: number): void;
      setLy(arg0: number): void;
      setLz(arg0: number): void;
      setMaxTwist(arg0: number): void;
      setMaxWeight(arg0: number): void;
      setMaxWeightBase(arg0: number): void;
      setMechanicsCheat(arg0: boolean): void;
      setMeleeDelay(arg0: number): void;
      setMetabolicTarget(arg0: zombie.characters.BodyDamage.Metabolics): void;
      setMomentumScalar(arg0: number): void;
      setMovablesCheat(arg0: boolean): void;
      setMoveDelta(arg0: number): void;
      setMoveForwardVec(arg0: zombie.iso.Vector2): void;
      setMovedThumpable(arg0: boolean): void;
      setMovementLastFrame(arg0: zombie.iso.Vector2): void;
      setMoving(arg0: boolean): void;
      setMovingSquareNow(): void;
      setNPC(arg0: boolean): void;
      setName(arg0: string): void;
      setNextWander(arg0: number): void;
      setNoDamage(arg0: boolean): void;
      setNoPicking(arg0: boolean): void;
      setNumSurvivorsInVicinity(arg0: number): void;
      setNx(arg0: number): void;
      setNy(arg0: number): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOnDeathDone(arg0: boolean): void;
      setOnFire(arg0: boolean): void;
      setOnFloor(arg0: boolean): void;
      setOnKillDone(arg0: boolean): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPainDelta(arg0: number): void;
      setPainEffect(arg0: number): void;
      setPath2(arg0: zombie.vehicles.PolygonalMap2$Path): void;
      setPathFindIndex(arg0: number): void;
      setPathIndex(arg0: number): void;
      setPathing(arg0: boolean): void;
      setPatience(arg0: number): void;
      setPatienceMax(arg0: number): void;
      setPatienceMin(arg0: number): void;
      setPerkLevelDebug(arg0: zombie.characters.skills.PerkFactory$Perk, arg1: number): void;
      setPersistentOutfitID(arg0: number, arg1: boolean): void;
      setPipedFuelAmount(arg0: number): void;
      setPlayingDeathSound(arg0: boolean): void;
      setPrimaryHandItem(arg0: zombie.inventory.InventoryItem): void;
      setRangedWeaponEmpty(arg0: boolean): void;
      setReading(arg0: boolean): void;
      setReanim(arg0: boolean): void;
      setReanimAnimDelay(arg0: number): void;
      setReanimAnimFrame(arg0: number): void;
      setReanimateTimer(arg0: number): void;
      setRecoilDelay(arg0: number): void;
      setReduceInfectionPower(arg0: number): void;
      setRemoteID(arg0: number): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setRunning(arg0: boolean): void;
      setSafety(arg0: boolean): void;
      setSafetyCooldown(arg0: number): void;
      setSayLine(arg0: string): void;
      setSceneCulled(arg0: boolean): void;
      setScriptModule(arg0: string): void;
      setScriptnx(arg0: number): void;
      setScriptny(arg0: number): void;
      setSecondaryHandItem(arg0: zombie.inventory.InventoryItem): void;
      setShootable(arg0: boolean): void;
      setShowAdminTag(arg0: boolean): void;
      setSitOnGround(arg0: boolean): void;
      setSleepingTabletDelta(arg0: number): void;
      setSleepingTabletEffect(arg0: number): void;
      setSlowFactor(arg0: number): void;
      setSlowTimer(arg0: number): void;
      setSneaking(arg0: boolean): void;
      setSolid(arg0: boolean): void;
      setSpeakColour(arg0: zombie.core.Color): void;
      setSpeakColourInfo(arg0: zombie.core.textures.ColorInfo): void;
      setSpeakTime(arg0: number): void;
      setSpeaking(arg0: boolean): void;
      setSpecialTooltip(arg0: boolean): void;
      setSpeedMod(arg0: number): void;
      setSprinting(arg0: boolean): void;
      setSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setStaggerTimeMod(arg0: number): void;
      setStateEventDelayTimer(arg0: number): void;
      setStateMachineLocked(arg0: boolean): void;
      setSuperAttack(arg0: boolean): void;
      setSurvivorKills(arg0: number): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTaintedWater(arg0: boolean): void;
      setTargetAlpha(arg0: number): void;
      setTeleport(arg0: zombie.characters.NetworkTeleport): void;
      setTemperature(arg0: number): void;
      setTextureCreator(arg0: zombie.core.skinnedmodel.model.ModelInstanceTextureCreator): void;
      setThumpTarget(arg0: zombie.iso.objects.interfaces.Thumpable): void;
      setTimeOfSleep(arg0: number): void;
      setTimeSinceLastSmoke(arg0: number): void;
      setTimeSinceZombieAttack(arg0: number): void;
      setTimeThumping(arg0: number): void;
      setTimedActionInstantCheat(arg0: boolean): void;
      setTurnDelta(arg0: number): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUnlimitedCarry(arg0: boolean): void;
      setUnlimitedEndurance(arg0: boolean): void;
      setUseHandWeapon(arg0: zombie.inventory.types.HandWeapon): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setVariable(arg0: string, arg1: boolean): void;
      setVehicle(arg0: zombie.vehicles.BaseVehicle): void;
      setVisibleToNPCs(arg0: boolean): void;
      setWaterAmount(arg0: number): void;
      setWeight(arg0: number): void;
      setWidth(arg0: number): void;
      setWornItem(arg0: string, arg1: zombie.inventory.InventoryItem): void;
      setWornItems(arg0: zombie.characters.WornItems.WornItems): void;
      setX(arg0: number): void;
      setXp(arg0: zombie.characters.IsoGameCharacter$XP): void;
      setY(arg0: number): void;
      setZ(arg0: number): void;
      setZombieKills(arg0: number): void;
      setZombiesDontAttack(arg0: boolean): void;
      setbAltCollide(arg0: boolean): void;
      setbClimbing(arg0: boolean): void;
      setbDoDefer(arg0: boolean): void;
      setbFalling(arg0: boolean): void;
      setbOnBed(arg0: boolean): void;
      setbUseParts(arg0: boolean): void;
      shouldBeTurning(): boolean;
      shouldBeTurning90(): boolean;
      shouldBeTurningAround(): boolean;
      shouldBecomeCorpse(): boolean;
      shouldBecomeZombieAfterDeath(): boolean;
      shouldDoInventory(): boolean;
      shouldWaitToStartTimedAction(): boolean;
      smashCarWindow(arg0: zombie.vehicles.VehiclePart): void;
      smashWindow(arg0: zombie.iso.objects.IsoWindow): void;
      softReset(): void;
      splatBlood(arg0: number, arg1: number): void;
      splatBloodFloor(): void;
      splatBloodFloorBig(): void;
      spotted(arg0: zombie.iso.IsoMovingObject, arg1: boolean): void;
      startEvent(arg0: number, arg1: zombie.audio.GameSoundClip, arg2: java.util.BitSet): void;
      startMuzzleFlash(): void;
      startPlaybackGameVariables(): zombie.core.skinnedmodel.advancedanimation.AnimationVariableSource;
      stopEvent(arg0: number, arg1: zombie.audio.GameSoundClip, arg2: java.util.BitSet): void;
      stopOrTriggerSound(arg0: number): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection, arg3: java.nio.ByteBuffer): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      testDefense(arg0: zombie.characters.IsoZombie): boolean;
      testDotSide(arg0: zombie.iso.IsoMovingObject): string;
      toString(): string;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitModData(): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      unsetOutlineHighlight(): void;
      update(): void;
      updateEmitter(): void;
      updateEquippedRadioFreq(): void;
      updateEvent(arg0: number, arg1: zombie.audio.GameSoundClip): void;
      updateLightInfo(): void;
      updateRecoilVar(): void;
      updateSpeedModifiers(): void;
      updateTextObjects(): void;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      writeInventory(arg0: java.nio.ByteBuffer): void;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
      zeroForwardDirectionX(): void;
      zeroForwardDirectionY(): void;
    }
    /** [ENUM] zombie.characters.IsoGameCharacter$BodyLocation */
    export class IsoGameCharacter$BodyLocation {
      /* ENUM VALUES */
      static readonly Arm: IsoGameCharacter$BodyLocation; 
      static readonly Chest: IsoGameCharacter$BodyLocation; 
      static readonly Foot: IsoGameCharacter$BodyLocation; 
      static readonly Hand: IsoGameCharacter$BodyLocation; 
      static readonly Head: IsoGameCharacter$BodyLocation; 
      static readonly Leg: IsoGameCharacter$BodyLocation; 
      static readonly Stomach: IsoGameCharacter$BodyLocation; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.characters.IsoGameCharacter$BodyLocation[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): IsoGameCharacter$BodyLocation;
      valueOf(arg0: string): zombie.characters.IsoGameCharacter$BodyLocation;
      values(): zombie.characters.IsoGameCharacter$BodyLocation[];
    }
    // zombie.characters.IsoGameCharacter$CharacterTraits extends zombie.characters.traits.TraitCollection
    export class IsoGameCharacter$CharacterTraits {
      private constructor();
      readonly AdrenalineJunkie?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly Agoraphobic?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly Asthmatic?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly Athletic?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly Axeman?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly Brave?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly Brooding?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly Burglar?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly Claustophobic?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly Clumsy?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly Conspicuous?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly Cowardly?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly Deaf?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly Desensitized?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly Disorganized?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly EagleEyed?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly Emaciated?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly FastHealer?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly FastLearner?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly Feeble?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly Graceful?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly HardOfHearing?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly HeartyAppitite?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly HeavyDrinker?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly Hemophobic?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly HighThirst?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly Hypercondriac?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly Illiterate?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly Inconspicuous?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly Injured?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly Insomniac?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly IronGut?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly Jogger?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly KeenHearing?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly LightDrinker?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly LightEater?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly LowThirst?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly Lucky?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly Marksman?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly NeedsLessSleep?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly NeedsMoreSleep?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly NightOwl?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly NightVision?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly Nutritionist?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly Nutritionist2?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly Obese?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly Organized?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly OutOfShape?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly Outdoorsman?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly Overweight?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly Pacifist?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly Patient?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly PlaysFootball?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly ProneToIllness?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly Resilient?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly ShortSighted?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly ShortTemper?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly SlowHealer?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly SlowLearner?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly Smoker?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly SpeedDemon?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly Stout?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly Strong?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly SundayDriver?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly ThickSkinned?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly ThinSkinned?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly Underweight?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly Unfit?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly Unlucky?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly VeryUnderweight?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly Weak?: zombie.characters.traits.TraitCollection$TraitSlot;
      readonly WeakStomach?: zombie.characters.traits.TraitCollection$TraitSlot;
  
      add(arg0: string): void;
      addAll(arg0: java.util.Collection<string>): void;
      clear(): void;
      contains(arg0: any): boolean;
      equals(arg0: any): boolean;
      get(arg0: number): string;
      getClass(): java.lang.Class<any>;
      getTraitSlot(arg0: string): zombie.characters.traits.TraitCollection$TraitSlot;
      hashCode(): number;
      isEmpty(): boolean;
      isIlliterate(): boolean;
      notify(): void;
      notifyAll(): void;
      remove(arg0: any): boolean;
      removeAll(arg0: java.util.Collection<any>): void;
      set(arg0: string, arg1: boolean): void;
      size(): number;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.characters.IsoGameCharacter$LightInfo extends java.lang.Object
    export class IsoGameCharacter$LightInfo {
      private constructor();
      angleX: number;
      angleY: number;
      bmod: number;
      gmod: number;
      night: number;
      rmod: number;
      square?: zombie.iso.IsoGridSquare;
      time: number;
      torches?: java.util.ArrayList<zombie.characters.IsoGameCharacter$TorchInfo>;
      x: number;
      y: number;
      z: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      initFrom(arg0: zombie.characters.IsoGameCharacter$LightInfo): void;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.characters.IsoGameCharacter$Location extends java.lang.Object
    export class IsoGameCharacter$Location {
      private constructor();
      x: number;
      y: number;
      z: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.characters.IsoGameCharacter$PerkInfo extends java.lang.Object
    export class IsoGameCharacter$PerkInfo {
      private constructor();
      level: number;
      perk?: zombie.characters.skills.PerkFactory$Perk;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getLevel(): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.characters.IsoGameCharacter$TorchInfo extends java.lang.Object
    export class IsoGameCharacter$TorchInfo {
      private constructor();
      angleX: number;
      angleY: number;
      bCone: boolean;
      dist: number;
      dot: number;
      focusing: number;
      id: number;
      strength: number;
      x: number;
      y: number;
      z: number;
  
      alloc(): zombie.characters.IsoGameCharacter$TorchInfo;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      release(arg0: zombie.characters.IsoGameCharacter$TorchInfo): void;
      set(arg0: zombie.vehicles.VehiclePart): zombie.characters.IsoGameCharacter$TorchInfo;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.characters.IsoGameCharacter$XP extends java.lang.Object
    export class IsoGameCharacter$XP {
      private constructor();
      static readonly MaxXPGrowthRate: number;
      TotalXP: number;
      XPMap?: java.util.HashMap<zombie.characters.skills.PerkFactory$Perk, number>;
      XPMapMultiplier?: java.util.HashMap<zombie.characters.skills.PerkFactory$Perk, zombie.characters.IsoGameCharacter$XPMultiplier>;
      lastlevel: number;
      level: number;
  
      AddXP(arg0: zombie.inventory.types.HandWeapon, arg1: number): void;
      AddXPNoMultiplier(arg0: zombie.characters.skills.PerkFactory$Perk, arg1: number): void;
      addXpMultiplier(arg0: zombie.characters.skills.PerkFactory$Perk, arg1: number, arg2: number, arg3: number): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getLevel(): number;
      getMultiplier(arg0: zombie.characters.skills.PerkFactory$Perk): number;
      getMultiplierMap(): java.util.HashMap<zombie.characters.skills.PerkFactory$Perk, zombie.characters.IsoGameCharacter$XPMultiplier>;
      getPerkBoost(arg0: zombie.characters.skills.PerkFactory$Perk): number;
      getTotalXp(): number;
      getXP(arg0: zombie.characters.skills.PerkFactory$Perk): number;
      hashCode(): number;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      notify(): void;
      notifyAll(): void;
      recalcSumm(): void;
      save(arg0: java.nio.ByteBuffer): void;
      setLevel(arg0: number): void;
      setPerkBoost(arg0: zombie.characters.skills.PerkFactory$Perk, arg1: number): void;
      setTotalXP(arg0: number): void;
      setXPToLevel(arg0: zombie.characters.skills.PerkFactory$Perk, arg1: number): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.characters.IsoGameCharacter$XPMultiplier extends java.lang.Object
    export class IsoGameCharacter$XPMultiplier {
      private constructor();
      maxLevel: number;
      minLevel: number;
      multiplier: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.characters.IsoLivingCharacter extends zombie.characters.IsoGameCharacter
    export class IsoLivingCharacter {
      private constructor();
      Asleep: boolean;
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      readonly IsVisibleToPlayer?: boolean[];
      static LowLightingQualityHack: boolean;
      static readonly MAX_WALL_SPLATS: number;
      static readonly MAX_ZOMBIES_EATING: number;
      NoPicking: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OutlineOnMouseover: boolean;
      static readonly RENDER_OFFSET_X: number;
      static readonly RENDER_OFFSET_Y: number;
      ReanimatedCorpse?: zombie.characters.IsoGameCharacter;
      ReanimatedCorpseID: number;
      readonly StateMachineParams?: java.util.HashMap<zombie.ai.State, java.util.HashMap<any, any>>;
      readonly Traits?: zombie.characters.IsoGameCharacter$CharacterTraits;
      readonly actionContext?: zombie.characters.action.ActionContext;
      readonly advancedAnimator?: zombie.core.skinnedmodel.advancedanimation.AdvancedAnimator;
      readonly amputations?: java.util.ArrayList<string>;
      readonly attackVars?: zombie.network.packets.hit.AttackVars;
      bAlphaForced: boolean;
      bCollidedWithPushable: boolean;
      bDoShove: boolean;
      bNeverDoneAlpha: boolean;
      readonly bOutline?: boolean[];
      bUpdateEquippedTextures: boolean;
      bagsWorn?: java.util.ArrayList<zombie.inventory.types.InventoryContainer>;
      readonly bareHands?: zombie.inventory.types.HandWeapon;
      beard?: zombie.core.skinnedmodel.model.ModelInstance;
      blockTurning: boolean;
      static bmod: number;
      bumpNbr: number;
      callOut: boolean;
      clientIgnoreCollision: number;
      container?: zombie.inventory.ItemContainer;
      def?: zombie.iso.sprite.IsoSpriteInstance;
      dir?: zombie.iso.IsoDirections;
      doDirtBloodEtc: boolean;
      doNotSync: boolean;
      doRenderShadow: boolean;
      emitter?: zombie.audio.BaseSoundEmitter;
      forceNullOverride: boolean;
      static gmod: number;
      hair?: zombie.core.skinnedmodel.model.ModelInstance;
      highlightFlags: number;
      readonly hitList?: java.util.ArrayList<zombie.network.packets.hit.HitInfo>;
      invRadioFreq?: java.util.ArrayList<number>;
      keyId: number;
      knockbackAttackMod: number;
      last?: zombie.iso.IsoGridSquare;
      lastAutomaticShoot: number;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      legsSprite?: zombie.iso.sprite.IsoSprite;
      lx: number;
      ly: number;
      lz: number;
      name?: string;
      readonly networkCharacter?: zombie.characters.NetworkCharacter;
      noDamage: boolean;
      nx: number;
      ny: number;
      offsetX: number;
      offsetY: number;
      readonly outlineColor?: zombie.core.textures.ColorInfo[];
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      overridePrimaryHandModel?: string;
      overrideSecondaryHandModel?: string;
      partialThumpDmg: number;
      primaryHandModel?: zombie.core.skinnedmodel.model.ModelInstance;
      realState?: zombie.network.NetworkVariables$ZombieState;
      realdir?: zombie.iso.IsoDirections;
      realx: number;
      realy: number;
      realz: number;
      removedFromWorldMS: number;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      static readonly s_maxPossibleTwist: number;
      savedVehicleRunning: boolean;
      savedVehicleSeat: number;
      savedVehicleX: number;
      savedVehicleY: number;
      secondaryHandModel?: zombie.core.skinnedmodel.model.ModelInstance;
      sheetRope: boolean;
      sheetRopeHealth: number;
      shootInARow: number;
      speedMod: number;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      square?: zombie.iso.IsoGridSquare;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      targetOnGround?: zombie.characters.IsoGameCharacter;
      tintb: number;
      tintg: number;
      tintr: number;
      static treeSoundMgr?: zombie.iso.IsoMovingObject$TreeSoundManager;
      upKillCount: boolean;
      useChargeDelta: number;
      vocalEvent: number;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
      x: number;
      y: number;
      z: number;
  
      Anger(arg0: number): void;
      ApplyInBedOffset(arg0: boolean): void;
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      AttemptAttack(arg0: number): boolean;
      BetaAntiDepress(arg0: number): void;
      BetaBlockers(arg0: number): void;
      CacheEquipped(): void;
      Callout(): void;
      CanAttack(): boolean;
      CanSee(arg0: zombie.iso.IsoMovingObject): boolean;
      ClearEquippedCache(): void;
      ClearVariable(arg0: string): void;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number): void;
      Despawn(): void;
      DirectionFromVector(arg0: zombie.iso.Vector2): void;
      DirtySlice(): void;
      DistTo(arg0: number, arg1: number): number;
      DistToProper(arg0: zombie.iso.IsoObject): number;
      DistToSquared(arg0: zombie.iso.IsoMovingObject): number;
      DoAttack(arg0: number): boolean;
      DoCollideNorS(): void;
      DoCollideWorE(): void;
      DoDeath(arg0: zombie.inventory.types.HandWeapon, arg1: zombie.characters.IsoGameCharacter): void;
      DoFloorSplat(arg0: zombie.iso.IsoGridSquare, arg1: string, arg2: boolean, arg3: number, arg4: number): void;
      DoFootstepSound(arg0: number): void;
      DoSneezeText(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoSwingCollisionBoneCheck(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number): boolean;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      DrawSneezeText(): void;
      Dressup(arg0: zombie.characters.SurvivorDesc): void;
      Eat(arg0: zombie.inventory.InventoryItem, arg1: number): boolean;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      FireCheck(): void;
      GetAnimSetName(): string;
      GetPrimaryEquippedCache(): zombie.inventory.InventoryItem;
      GetSecondaryEquippedCache(): zombie.inventory.InventoryItem;
      GetVariable(arg0: string): string;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasItem(arg0: string): boolean;
      HasTooltip(): boolean;
      HasTrait(arg0: string): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      HitSilence(arg0: zombie.inventory.types.HandWeapon, arg1: zombie.characters.IsoGameCharacter, arg2: boolean, arg3: number): void;
      InitSpriteParts(arg0: zombie.characters.SurvivorDesc): void;
      IsAttackRange(arg0: number, arg1: number, arg2: number): boolean;
      IsSpeaking(): boolean;
      Kill(arg0: zombie.characters.IsoGameCharacter): void;
      LevelPerk(arg0: zombie.characters.skills.PerkFactory$Perk, arg1: boolean): void;
      LoseLevel(arg0: zombie.characters.skills.PerkFactory$Perk): void;
      Move(arg0: zombie.iso.Vector2): void;
      MoveForward(arg0: number, arg1: number, arg2: number, arg3: number): void;
      MoveUnmodded(arg0: zombie.iso.Vector2): void;
      NPCGetAiming(): boolean;
      NPCGetRunning(): boolean;
      NPCSetAiming(arg0: boolean): void;
      NPCSetAttack(arg0: boolean): void;
      NPCSetJustMoved(arg0: boolean): void;
      NPCSetMelee(arg0: boolean): void;
      NPCSetRunning(arg0: boolean): void;
      OnAnimEvent(arg0: zombie.core.skinnedmodel.advancedanimation.AnimLayer, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      OnDeath(): void;
      PainMeds(arg0: number): void;
      PlayAnim(arg0: string): void;
      PlayAnimUnlooped(arg0: string): void;
      PlayAnimWithSpeed(arg0: string, arg1: number): void;
      QueueAction(arg0: zombie.characters.CharacterTimedActions.BaseAction): void;
      ReadLiterature(arg0: zombie.inventory.types.Literature): void;
      ReduceHealthWhenBurning(): void;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      Say(arg0: string): void;
      SayDebug(arg0: number, arg1: string): void;
      SayRadio(arg0: string, arg1: number, arg2: number, arg3: number, arg4: zombie.ui.UIFont, arg5: number, arg6: number, arg7: string): void;
      SayShout(arg0: string): void;
      SayWhisper(arg0: string): void;
      Seen(arg0: java.util.Stack<zombie.iso.IsoMovingObject>): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      SetOnFire(): void;
      SetVariable(arg0: string, arg1: string): void;
      SleepingTablet(arg0: number): void;
      SpreadFire(): void;
      SpreadFireMP(): void;
      StartAction(arg0: zombie.characters.CharacterTimedActions.BaseAction): void;
      StartTimedActionAnim(arg0: string, arg1: string): void;
      StopAllActionQueue(): void;
      StopAllActionQueueAiming(): void;
      StopAllActionQueueRunning(): void;
      StopAllActionQueueWalking(): void;
      StopBurning(): void;
      StopTimedActionAnim(): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      Throw(arg0: zombie.inventory.types.HandWeapon): void;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      actionStateChanged(arg0: zombie.characters.action.ActionContext): void;
      addBasicPatch(arg0: zombie.characterTextures.BloodBodyPartType): void;
      addBlood(arg0: zombie.characterTextures.BloodBodyPartType, arg1: boolean, arg2: boolean, arg3: boolean): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addDirt(arg0: zombie.characterTextures.BloodBodyPartType, arg1: number, arg2: boolean): void;
      addHole(arg0: zombie.characterTextures.BloodBodyPartType): boolean;
      addHoleFromZombieAttacks(arg0: zombie.characterTextures.BloodBodyPartType, arg1: boolean): boolean;
      addLineChatElement(arg0: string): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      addToWorld(): void;
      addVisualDamage(arg0: string): void;
      addWorldSoundUnlessInvisible(arg0: number, arg1: number, arg2: boolean): void;
      applyTraits(arg0: java.util.ArrayList<string>): void;
      attackFromWindowsLunge(arg0: zombie.characters.IsoZombie): void;
      autoDrink(): void;
      avoidDamage(): boolean;
      becomeCorpse(): void;
      calcHitDir(arg0: zombie.iso.Vector2): void;
      calculateBaseSpeed(): number;
      canAddSheetRope(): boolean;
      canClimbDownSheetRope(arg0: zombie.iso.IsoGridSquare): boolean;
      canClimbDownSheetRopeInCurrentSquare(): boolean;
      canClimbSheetRope(arg0: zombie.iso.IsoGridSquare): boolean;
      canHaveMultipleHits(): number;
      canSprint(): boolean;
      changeState(arg0: zombie.ai.State): void;
      checkHaveElectricity(): void;
      checkIsNearWall(): number;
      cleanWallBlood(): void;
      clearAttachedAnimSprite(): void;
      clearAttachedItems(): void;
      clearVariable(arg0: string): void;
      clearVariables(): void;
      clearWornItems(): void;
      climbDownSheetRope(): void;
      climbOverFence(arg0: zombie.iso.IsoDirections): void;
      climbSheetRope(): void;
      climbThroughWindow(arg0: zombie.iso.objects.IsoThumpable, arg1: number): void;
      climbThroughWindowFrame(arg0: zombie.iso.IsoObject): void;
      closeWindow(arg0: zombie.iso.objects.IsoWindow): void;
      clothingItemChanged(arg0: string): void;
      collideWith(arg0: zombie.iso.IsoObject): void;
      compareMovePriority(arg0: zombie.characters.IsoGameCharacter): number;
      compareToY(arg0: zombie.iso.IsoMovingObject): number;
      containsVariable(arg0: string): boolean;
      countAddSheetRope(): number;
      createContainersFromSpriteProperties(): void;
      createKeyRing(): void;
      customHashCode(): number;
      dbgGetAnimTrack(arg0: number, arg1: number): zombie.core.skinnedmodel.animation.AnimationTrack;
      dbgGetAnimTrackName(arg0: number, arg1: number): string;
      dbgGetAnimTrackTime(arg0: number, arg1: number): number;
      dbgGetAnimTrackWeight(arg0: number, arg1: number): number;
      debugPrintout(): void;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      distToNearestCamCharacter(): number;
      doFindExternalWaterSource(): void;
      doHitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.vehicles.BaseVehicle$HitVars): void;
      doStairs(): void;
      drawDirectionLine(arg0: zombie.iso.Vector2, arg1: number, arg2: number, arg3: number, arg4: number): void;
      dressInClothingItem(arg0: string): void;
      dressInNamedOutfit(arg0: string): void;
      dressInPersistentOutfit(arg0: string): void;
      dressInPersistentOutfitID(arg0: number): void;
      dressInRandomOutfit(): void;
      dropHandItems(): void;
      dropHeavyItems(): void;
      endPlaybackGameVariables(arg0: zombie.core.skinnedmodel.advancedanimation.AnimationVariableSource): void;
      ensureOnTile(): void;
      enterVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number, arg2: org.joml.Vector3f): void;
      equals(arg0: any): boolean;
      exert(arg0: number): void;
      faceLocation(arg0: number, arg1: number): void;
      faceLocationF(arg0: number, arg1: number): void;
      facePosition(arg0: number, arg1: number): void;
      faceThisObject(arg0: zombie.iso.IsoObject): void;
      faceThisObjectAlt(arg0: zombie.iso.IsoObject): void;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      fallenOnKnees(): void;
      forceAwake(): void;
      getAbsoluteExcessTwist(): number;
      getActionContext(): zombie.characters.action.ActionContext;
      getActionStateName(): string;
      getActiveLightItems(arg0: java.util.ArrayList<zombie.inventory.InventoryItem>): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getAdvancedAnimator(): zombie.core.skinnedmodel.advancedanimation.AdvancedAnimator;
      getAge(): number;
      getAlpha(arg0: number): number;
      getAlreadyReadPages(arg0: string): number;
      getAnimAngle(): number;
      getAnimAngleRadians(): number;
      getAnimAngleStepDelta(): number;
      getAnimAngleTwistDelta(): number;
      getAnimVector(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getAnimationDebug(): string;
      getAnimationPlayer(): zombie.core.skinnedmodel.animation.AnimationPlayer;
      getAnimationPlayerRecorder(): zombie.core.skinnedmodel.animation.debug.AnimationPlayerRecorder;
      getAnimationStateName(): string;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getAttachedItem(arg0: string): zombie.inventory.InventoryItem;
      getAttachedItems(): zombie.characters.AttachedItems.AttachedItems;
      getAttachedLocationGroup(): zombie.characters.AttachedItems.AttachedLocationGroup;
      getAttackTargetSquare(): zombie.iso.IsoGridSquare;
      getAttackedBy(): zombie.characters.IsoGameCharacter;
      getAutoWalkDirection(): zombie.iso.Vector2;
      getBarricadeStrengthMod(): number;
      getBarricadeTimeMod(): number;
      getBed(): zombie.iso.IsoObject;
      getBedType(): string;
      getBeenMovingFor(): number;
      getBeenSprintingFor(): number;
      getBetaDelta(): number;
      getBetaEffect(): number;
      getBloodImpactX(): number;
      getBloodImpactY(): number;
      getBloodImpactZ(): number;
      getBloodSplat(): zombie.iso.sprite.IsoSprite;
      getBodyDamage(): zombie.characters.BodyDamage.BodyDamage;
      getBodyDamageRemote(): zombie.characters.BodyDamage.BodyDamage;
      getBodyLocationGroup(): zombie.characters.WornItems.BodyLocationGroup;
      getBodyPartClothingDefense(arg0: number, arg1: boolean, arg2: boolean): number;
      getBrain(): zombie.ai.GameCharacterAIBrain;
      getBuilding(): zombie.iso.areas.IsoBuilding;
      getBumpFallType(): string;
      getBumpType(): string;
      getBumpedChr(): zombie.characters.IsoGameCharacter;
      getBumpedType(arg0: zombie.characters.IsoGameCharacter): string;
      getCell(): zombie.iso.IsoCell;
      getCharacterActions(): java.util.Stack<zombie.characters.CharacterTimedActions.BaseAction>;
      getCharacterTraits(): zombie.characters.IsoGameCharacter$CharacterTraits;
      getChatElement(): zombie.chat.ChatElement;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getChopTreeSpeed(): number;
      getClass(): java.lang.Class<any>;
      getClickSound(): string;
      getClothingItem_Back(): zombie.inventory.InventoryItem;
      getClothingItem_Feet(): zombie.inventory.InventoryItem;
      getClothingItem_Hands(): zombie.inventory.InventoryItem;
      getClothingItem_Head(): zombie.inventory.InventoryItem;
      getClothingItem_Legs(): zombie.inventory.InventoryItem;
      getClothingItem_Torso(): zombie.inventory.InventoryItem;
      getClothingWetness(): zombie.characters.ClothingWetness;
      getCollideType(): string;
      getCollidedObject(): zombie.iso.IsoObject;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getCurrentActionContextStateName(): string;
      getCurrentBuilding(): zombie.iso.areas.IsoBuilding;
      getCurrentBuildingDef(): zombie.iso.BuildingDef;
      getCurrentRoomDef(): zombie.iso.RoomDef;
      getCurrentSquare(): zombie.iso.IsoGridSquare;
      getCurrentState(): zombie.ai.State;
      getCurrentStateName(): string;
      getCurrentZone(): zombie.iso.IsoMetaGrid$Zone;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getDamage(): number;
      getDangerLevels(): number;
      getDebugMonitor(): zombie.core.skinnedmodel.advancedanimation.debug.AnimatorDebugMonitor;
      getDefaultState(): zombie.ai.State;
      getDeferredAngleDelta(): number;
      getDeferredMovement(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getDeferredRotationWeight(): number;
      getDepressDelta(): number;
      getDepressEffect(): number;
      getDescriptor(): zombie.characters.SurvivorDesc;
      getDieCount(): number;
      getDir(): zombie.iso.IsoDirections;
      getDirectionAngle(): number;
      getDistanceSq(arg0: zombie.iso.IsoMovingObject): number;
      getDotWithForwardDirection(arg0: number, arg1: number): number;
      getEatingZombies(): java.util.ArrayList<zombie.characters.IsoZombie>;
      getEmitter(): zombie.characters.BaseCharacterSoundEmitter;
      getEnemyList(): java.util.Stack<zombie.characters.IsoGameCharacter>;
      getEquipedRadio(): zombie.inventory.types.Radio;
      getExcessTwist(): number;
      getFMODParameters(): zombie.audio.FMODParameterList;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getFallTime(): number;
      getFamiliarBuildings(): java.util.Stack<zombie.iso.areas.IsoBuilding>;
      getFatigueMod(): number;
      getFatiqueMultiplier(): number;
      getFeelerTile(arg0: number): zombie.iso.IsoGridSquare;
      getFeelersize(): number;
      getFinder(): zombie.ai.astar.AStarPathFinderResult;
      getFireKillRate(): number;
      getFireSpreadProbability(): number;
      getFollowingTarget(): zombie.characters.IsoGameCharacter;
      getForceWakeUpTime(): number;
      getForwardDirection(): zombie.iso.Vector2;
      getFullName(): string;
      getFuturWalkedSquare(): zombie.iso.IsoGridSquare;
      getGameCharacterAIBrain(): zombie.ai.GameCharacterAIBrain;
      getGameVariables(): java.lang.Iterable<zombie.core.skinnedmodel.advancedanimation.IAnimationVariableSlot>;
      getGlobalMovementMod(): number;
      getHaloTimerCount(): number;
      getHammerSoundMod(): number;
      getHealth(): number;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getHitChancesMod(): number;
      getHitDir(): zombie.iso.Vector2;
      getHitForce(): number;
      getHitFromAngle(): number;
      getHitReaction(): string;
      getHitReactionNetworkAI(): zombie.characters.HitReactionNetworkAI;
      getHittingMod(): number;
      getHoursSurvived(): number;
      getHungerMultiplier(): number;
      getHurtSound(): string;
      getHyperthermiaMod(): number;
      getID(): number;
      getIDCount(): number;
      getIgnoreMovement(): boolean;
      getImpulsex(): number;
      getImpulsey(): number;
      getInf(): zombie.core.textures.ColorInfo;
      getInventory(): zombie.inventory.ItemContainer;
      getInventoryWeight(): number;
      getIsNPC(): boolean;
      getIsSurfaceNormalOffset(): boolean;
      getItemContainer(): zombie.inventory.ItemContainer;
      getItemVisuals(): zombie.core.skinnedmodel.visual.ItemVisuals;
      getKeyId(): number;
      getKnownRecipes(): java.util.List<string>;
      getLastBump(): number;
      getLastChatMessage(): zombie.chat.ChatMessage;
      getLastCollideTime(): number;
      getLastFallSpeed(): number;
      getLastHeardSound(): zombie.characters.IsoGameCharacter$Location;
      getLastHitCount(): number;
      getLastHourSleeped(): number;
      getLastKnownLocation(): java.util.HashMap<string, zombie.characters.IsoGameCharacter$Location>;
      getLastKnownLocationOf(arg0: string): zombie.characters.IsoGameCharacter$Location;
      getLastLocalEnemies(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getLastSpokenLine(): string;
      getLastSquare(): zombie.iso.IsoGridSquare;
      getLastTargettedBy(): zombie.characters.IsoZombie;
      getLastZombieKills(): number;
      getLeaveBodyTimedown(): number;
      getLegsSprite(): zombie.iso.sprite.IsoSprite;
      getLevelMaxForXp(): number;
      getLevelUpLevels(): number[];
      getLevelUpMultiplier(): number;
      getLightInfo2(): zombie.characters.IsoGameCharacter$LightInfo;
      getLightfootMod(): number;
      getLimpulsex(): number;
      getLimpulsey(): number;
      getLlx(): number;
      getLly(): number;
      getLlz(): number;
      getLocalEnemyList(): java.util.Stack<zombie.characters.IsoGameCharacter>;
      getLocalGroupList(): java.util.ArrayList<zombie.iso.IsoMovingObject>;
      getLocalList(): java.util.ArrayList<zombie.iso.IsoMovingObject>;
      getLocalNeutralList(): java.util.ArrayList<zombie.iso.IsoMovingObject>;
      getLocalRelevantEnemyList(): java.util.ArrayList<zombie.iso.IsoMovingObject>;
      getLookAngleRadians(): number;
      getLookVector(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getLowDangerInVicinity(arg0: number, arg1: number): zombie.iso.IsoGridSquare;
      getLrx(): number;
      getLry(): number;
      getLx(): number;
      getLy(): number;
      getLz(): number;
      getMaintenanceMod(): number;
      getMapKnowledge(): zombie.ai.MapKnowledge;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getMasterRegion(): zombie.iso.areas.isoregion.regions.IWorldRegion;
      getMaxChatLines(): number;
      getMaxTwist(): number;
      getMaxWeight(): number;
      getMaxWeightBase(): number;
      getMeleeCombatMod(): number;
      getMeleeDelay(): number;
      getMetalBarricadeStrengthMod(): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getModel(): zombie.core.skinnedmodel.model.ModelInstance;
      getModelInstance(): zombie.core.skinnedmodel.model.ModelInstance;
      getMomentumScalar(): number;
      getMoodles(): zombie.characters.Moodles.Moodles;
      getMoveDelta(): number;
      getMoveForwardVec(): zombie.iso.Vector2;
      getMoveSpeed(): number;
      getMovementLastFrame(): zombie.iso.Vector2;
      getMovingObjectIndex(): number;
      getName(): string;
      getNearVehicle(): zombie.vehicles.BaseVehicle;
      getNetworkCharacterAI(): zombie.characters.NetworkCharacterAI;
      getNew(): zombie.iso.IsoObject;
      getNextWander(): number;
      getNimbleMod(): number;
      getNoDamage(): boolean;
      getNumSurvivorsInVicinity(): number;
      getNx(): number;
      getNy(): number;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffsetX(): number;
      getOffsetY(): number;
      getOnlineID(): number;
      getOrCreateSleepingEventData(): zombie.ai.sadisticAIDirector.SleepingEventData;
      getOrCreateVariable(arg0: string): zombie.core.skinnedmodel.advancedanimation.IAnimationVariableSlot;
      getOutfitName(): string;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPacingMod(): number;
      getPainDelta(): number;
      getPainEffect(): number;
      getPath2(): zombie.vehicles.PolygonalMap2$Path;
      getPathFindBehavior2(): zombie.vehicles.PathFindBehavior2;
      getPathFindIndex(): number;
      getPathIndex(): number;
      getPathTargetX(): number;
      getPathTargetY(): number;
      getPathTargetZ(): number;
      getPatience(): number;
      getPatienceMax(): number;
      getPatienceMin(): number;
      getPerkInfo(arg0: zombie.characters.skills.PerkFactory$Perk): zombie.characters.IsoGameCharacter$PerkInfo;
      getPerkLevel(arg0: zombie.characters.skills.PerkFactory$Perk): number;
      getPerkList(): java.util.ArrayList<zombie.characters.IsoGameCharacter$PerkInfo>;
      getPersistentOutfitID(): number;
      getPipedFuelAmount(): number;
      getPosition(arg0: zombie.iso.Vector3): zombie.iso.Vector3;
      getPreviousActionContextStateName(): string;
      getPreviousStateName(): string;
      getPrimaryHandItem(): zombie.inventory.InventoryItem;
      getPrimaryHandType(): string;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRandomDefaultOutfit(): zombie.core.skinnedmodel.population.Outfit;
      getReadyModelData(): java.util.ArrayList<zombie.core.skinnedmodel.model.ModelInstance>;
      getReanimAnimDelay(): number;
      getReanimAnimFrame(): number;
      getReanimateTimer(): number;
      getRecoilDelay(): number;
      getRecoveryMod(): number;
      getReduceInfectionPower(): number;
      getRemoteID(): number;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getRunSpeedModifier(): number;
      getSafetyCooldown(): number;
      getSayLine(): string;
      getScreenX(): number;
      getScreenY(): number;
      getScriptModule(): string;
      getScriptName(): string;
      getScriptnx(): number;
      getScriptny(): number;
      getSecondaryHandItem(): zombie.inventory.InventoryItem;
      getSecondaryHandType(): string;
      getShoulderTwist(): number;
      getShovingMod(): number;
      getSleepingTabletDelta(): number;
      getSleepingTabletEffect(): number;
      getSlowFactor(): number;
      getSlowTimer(): number;
      getSneakSpotMod(): number;
      getSpeakColour(): zombie.core.Color;
      getSpeakTime(): number;
      getSpecialObjectIndex(): number;
      getSpeedMod(): number;
      getSprintMod(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteDef(): zombie.iso.sprite.IsoSpriteInstance;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSquare(): zombie.iso.IsoGridSquare;
      getStaggerTimeMod(): number;
      getStateEventDelayTimer(): number;
      getStateMachine(): zombie.ai.StateMachine;
      getStateMachineParams(arg0: zombie.ai.State): java.util.HashMap<any, any>;
      getStaticMovingObjectIndex(): number;
      getStats(): zombie.characters.Stats;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getSurroundingAttackingZombies(): number;
      getSurvivorKills(): number;
      getSurvivorMap(): java.util.HashMap<number, zombie.characters.SurvivorDesc>;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTalkerType(): string;
      getTargetAlpha(arg0: number): number;
      getTargetTwist(): number;
      getTeleport(): zombie.characters.NetworkTeleport;
      getTemperature(): number;
      getTempo(): zombie.iso.Vector2;
      getTextureCreator(): zombie.core.skinnedmodel.model.ModelInstanceTextureCreator;
      getTextureName(): string;
      getThirstMultiplier(): number;
      getThreatLevel(): number;
      getThumpCondition(): number;
      getThumpTarget(): zombie.iso.objects.interfaces.Thumpable;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTile(): string;
      getTimeSinceLastSmoke(): number;
      getTimeSinceZombieAttack(): number;
      getTimeThumping(): number;
      getTimedActionTimeModifier(): number;
      getTorchStrength(): number;
      getTotalBlood(): number;
      getTraits(): zombie.characters.traits.TraitCollection;
      getTurnDelta(): number;
      getTwist(): number;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUID(): string;
      getUseHandWeapon(): zombie.inventory.types.HandWeapon;
      getUsedItemsOn(): java.util.Stack<string>;
      getUserNameHeight(): number;
      getUsesExternalWaterSource(): boolean;
      getVariable(arg0: zombie.core.skinnedmodel.advancedanimation.AnimationVariableHandle): zombie.core.skinnedmodel.advancedanimation.IAnimationVariableSlot;
      getVariableBoolean(arg0: string, arg1: boolean): boolean;
      getVariableFloat(arg0: string, arg1: number): number;
      getVariableString(arg0: string): string;
      getVectorFromDirection(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getVehicle(): zombie.vehicles.BaseVehicle;
      getVeryCloseEnemyList(): java.util.ArrayList<zombie.iso.IsoMovingObject>;
      getVisual(): zombie.core.skinnedmodel.visual.BaseVisual;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWaterSource(arg0: java.util.ArrayList<zombie.inventory.InventoryItem>): zombie.inventory.InventoryItem;
      getWeaponLevel(): number;
      getWeight(): number;
      getWeightMod(): number;
      getWeldingSoundMod(): number;
      getWidth(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWorldObjectIndex(): number;
      getWornItem(arg0: string): zombie.inventory.InventoryItem;
      getWornItems(): zombie.characters.WornItems.WornItems;
      getX(): number;
      getXp(): zombie.characters.IsoGameCharacter$XP;
      getXpForLevel(arg0: number): number;
      getY(): number;
      getZ(): number;
      getZombieKills(): number;
      hasActiveModel(): boolean;
      hasAnimationPlayer(): boolean;
      hasEquipped(arg0: string): boolean;
      hasEquippedTag(arg0: string): boolean;
      hasExternalWaterSource(): boolean;
      hasFootInjury(): boolean;
      hasHitReaction(): boolean;
      hasItems(arg0: string, arg1: number): boolean;
      hasModData(): boolean;
      hasPath(): boolean;
      hasTimedActions(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      helmetFall(arg0: boolean, arg1: string): boolean;
      hitConsequences(arg0: zombie.inventory.types.HandWeapon, arg1: zombie.characters.IsoGameCharacter, arg2: boolean, arg3: number, arg4: boolean): void;
      initAttachedItems(arg0: string): void;
      initLightInfo2(): zombie.characters.IsoGameCharacter$LightInfo;
      initSpritePartsEmpty(): void;
      initWornItems(arg0: string): void;
      isAboveTopOfStairs(): boolean;
      isAimAtFloor(): boolean;
      isAiming(): boolean;
      isAlive(): boolean;
      isAllowConversation(): boolean;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isAnimForecasted(): boolean;
      isAnimationRecorderActive(): boolean;
      isAsleep(): boolean;
      isAttachedItem(arg0: zombie.inventory.InventoryItem): boolean;
      isAttackAnim(): boolean;
      isAttackWasSuperAttack(): boolean;
      isAttacking(): boolean;
      isAutoWalk(): boolean;
      isBehaviourMoving(): boolean;
      isBehind(arg0: zombie.characters.IsoGameCharacter): boolean;
      isBeingSteppedOn(): boolean;
      isBlink(): boolean;
      isBuildCheat(): boolean;
      isBumpDone(): boolean;
      isBumpFall(): boolean;
      isBumpStaggered(): boolean;
      isBumped(): boolean;
      isCanShout(): boolean;
      isCharacter(): boolean;
      isClimbing(): boolean;
      isClimbingThroughWindow(arg0: zombie.iso.objects.IsoWindow): boolean;
      isCloseKilled(): boolean;
      isClosingWindow(arg0: zombie.iso.objects.IsoWindow): boolean;
      isCollidable(): boolean;
      isCollided(): boolean;
      isCollidedE(): boolean;
      isCollidedN(): boolean;
      isCollidedS(): boolean;
      isCollidedThisFrame(): boolean;
      isCollidedW(): boolean;
      isCollidedWithDoor(): boolean;
      isCollidedWithPushableThisFrame(): boolean;
      isCollidedWithVehicle(): boolean;
      isCriticalHit(): boolean;
      isCurrentState(arg0: zombie.ai.State): boolean;
      isDead(): boolean;
      isDeathDragDown(): boolean;
      isDestroyed(): boolean;
      isDoDeathSound(): boolean;
      isDoShove(): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isDriving(): boolean;
      isEatingOther(arg0: zombie.iso.IsoMovingObject): boolean;
      isEquipped(arg0: zombie.inventory.InventoryItem): boolean;
      isEquippedClothing(arg0: zombie.inventory.InventoryItem): boolean;
      isExistInTheWorld(): boolean;
      isFacingLocation(arg0: number, arg1: number, arg2: number): boolean;
      isFacingObject(arg0: zombie.iso.IsoObject, arg1: number): boolean;
      isFallOnFront(): boolean;
      isFarmingCheat(): boolean;
      isFemale(): boolean;
      isFirstUpdate(): boolean;
      isFloor(): boolean;
      isForceShove(): boolean;
      isGodMod(): boolean;
      isHandItem(arg0: zombie.inventory.InventoryItem): boolean;
      isHealthCheat(): boolean;
      isHeavyItem(arg0: zombie.inventory.InventoryItem): boolean;
      isHideWeaponModel(): boolean;
      isHighlighted(): boolean;
      isHitFromBehind(): boolean;
      isHoppable(): boolean;
      isIgnoreMovementForDirection(): boolean;
      isIgnoreStaggerBack(): boolean;
      isInARoom(): boolean;
      isInTrees(): boolean;
      isInTrees2(arg0: boolean): boolean;
      isInTreesNoBush(): boolean;
      isInvincible(): boolean;
      isInvisible(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isItemInBothHands(arg0: zombie.inventory.InventoryItem): boolean;
      isKnockedDown(): boolean;
      isKnownPoison(arg0: zombie.inventory.InventoryItem): boolean;
      isLastCollidedN(): boolean;
      isLastCollidedW(): boolean;
      isLocal(): boolean;
      isMaskClicked(arg0: number, arg1: number): boolean;
      isMechanicsCheat(): boolean;
      isMovablesCheat(): boolean;
      isMovedThumpable(): boolean;
      isMoving(): boolean;
      isMuzzleFlash(): boolean;
      isNPC(): boolean;
      isNoPicking(): boolean;
      isNorthHoppable(): boolean;
      isOnDeathDone(): boolean;
      isOnFire(): boolean;
      isOnFloor(): boolean;
      isOnKillDone(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isOutside(): boolean;
      isPathing(): boolean;
      isPersistentOutfitInit(): boolean;
      isPlayerMoving(): boolean;
      isPlayingDeathSound(): boolean;
      isPrimaryEquipped(arg0: string): boolean;
      isPrimaryHandItem(arg0: zombie.inventory.InventoryItem): boolean;
      isProne(): boolean;
      isPushableForSeparate(): boolean;
      isPushedByForSeparate(arg0: zombie.iso.IsoMovingObject): boolean;
      isRangedWeaponEmpty(): boolean;
      isReading(): boolean;
      isReanim(): boolean;
      isRecipeKnown(arg0: string): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isRunning(): boolean;
      isSafety(): boolean;
      isSceneCulled(): boolean;
      isSeatedInVehicle(): boolean;
      isSecondaryHandItem(arg0: zombie.inventory.InventoryItem): boolean;
      isShootable(): boolean;
      isShowAdminTag(): boolean;
      isSitOnGround(): boolean;
      isSkipResolveCollision(): boolean;
      isSneaking(): boolean;
      isSolid(): boolean;
      isSolidForSeparate(): boolean;
      isSpeaking(): boolean;
      isSprinting(): boolean;
      isSpriteInvisible(): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isStrafing(): boolean;
      isSuperAttack(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isTeleporting(): boolean;
      isTimedActionInstant(): boolean;
      isTimedActionInstantCheat(): boolean;
      isUnderVehicle(): boolean;
      isUnlimitedCarry(): boolean;
      isUnlimitedEndurance(): boolean;
      isUsingWornItems(): boolean;
      isVariable(arg0: string, arg1: string): boolean;
      isVehicleCollisionActive(arg0: zombie.vehicles.BaseVehicle): boolean;
      isVisibleToNPCs(): boolean;
      isZombie(): boolean;
      isZombieAttacking(): boolean;
      isZombiesDontAttack(): boolean;
      isbAltCollide(): boolean;
      isbDoDefer(): boolean;
      isbFalling(): boolean;
      isbOnBed(): boolean;
      isbUseParts(): boolean;
      learnRecipe(arg0: string): boolean;
      level0(arg0: zombie.characters.skills.PerkFactory$Perk): void;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      onCullStateChanged(arg0: zombie.core.skinnedmodel.ModelManager, arg1: boolean): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      onWornItemsChanged(): void;
      openWindow(arg0: zombie.iso.objects.IsoWindow): void;
      pathToCharacter(arg0: zombie.characters.IsoGameCharacter): void;
      pathToLocation(arg0: number, arg1: number, arg2: number): void;
      pathToLocationF(arg0: number, arg1: number, arg2: number): void;
      pathToSound(arg0: number, arg1: number, arg2: number): void;
      playBloodSplatterSound(): void;
      playDeadSound(): void;
      playEmote(arg0: string): void;
      playHurtSound(): void;
      playSound(arg0: string): number;
      playSoundLocal(arg0: string): number;
      playbackRecordCurrentStateSnapshot(): zombie.characters.action.ActionStateSnapshot;
      playbackSetCurrentStateSnapshot(arg0: zombie.characters.action.ActionStateSnapshot): void;
      postUpdateEquippedTextures(): void;
      postUpdateModelTextures(): void;
      postupdate(): void;
      preupdate(): void;
      processHitDamage(arg0: zombie.inventory.types.HandWeapon, arg1: zombie.characters.IsoGameCharacter, arg2: number, arg3: boolean, arg4: number): number;
      readInventory(arg0: java.nio.ByteBuffer): string;
      releaseAnimationPlayer(): void;
      reloadOutfit(): void;
      removeAllContainers(): void;
      removeAttachedItem(arg0: zombie.inventory.InventoryItem): void;
      removeFromHands(arg0: zombie.inventory.InventoryItem): boolean;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      removeWornItem(arg0: zombie.inventory.InventoryItem): void;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderServerGUI(): void;
      renderShadow(arg0: number, arg1: number, arg2: number): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reportEvent(arg0: string): void;
      reset(): void;
      resetBeardGrowingTime(): void;
      resetBodyDamageRemote(): void;
      resetEquippedHandsModels(): void;
      resetHairGrowingTime(): void;
      resetModel(): void;
      resetModelNextFrame(): void;
      reuseGridSquare(): void;
      save(arg0: java.nio.ByteBuffer): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      sendStopBurning(): void;
      separate(): void;
      serverRemoveItemFromZombie(arg0: string): void;
      setAge(arg0: number): void;
      setAimAtFloor(arg0: boolean): void;
      setAllowConversation(arg0: boolean): void;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAlreadyReadPages(arg0: string, arg1: number): void;
      setAnimForecasted(arg0: number): void;
      setAnimated(arg0: boolean): void;
      setAsleep(arg0: boolean): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setAttachedItem(arg0: string, arg1: zombie.inventory.InventoryItem): void;
      setAttachedItems(arg0: zombie.characters.AttachedItems.AttachedItems): void;
      setAttackAnim(arg0: boolean): void;
      setAttackTargetSquare(arg0: zombie.iso.IsoGridSquare): void;
      setAttackWasSuperAttack(arg0: boolean): void;
      setAttackedBy(arg0: zombie.characters.IsoGameCharacter): void;
      setAutoWalk(arg0: boolean): void;
      setAutoWalkDirection(arg0: zombie.iso.Vector2): void;
      setAvoidDamage(arg0: boolean): void;
      setBed(arg0: zombie.iso.IsoObject): void;
      setBedType(arg0: string): void;
      setBeenMovingFor(arg0: number): void;
      setBeenSprintingFor(arg0: number): void;
      setBetaDelta(arg0: number): void;
      setBetaEffect(arg0: number): void;
      setBlink(arg0: boolean): void;
      setBloodImpactX(arg0: number): void;
      setBloodImpactY(arg0: number): void;
      setBloodImpactZ(arg0: number): void;
      setBloodSplat(arg0: zombie.iso.sprite.IsoSprite): void;
      setBuildCheat(arg0: boolean): void;
      setBumpDone(arg0: boolean): void;
      setBumpFall(arg0: boolean): void;
      setBumpFallType(arg0: string): void;
      setBumpStaggered(arg0: boolean): void;
      setBumpType(arg0: string): void;
      setBumpedChr(arg0: zombie.characters.IsoGameCharacter): void;
      setCanShout(arg0: boolean): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setClickSound(arg0: string): void;
      setCloseKilled(arg0: boolean): void;
      setClothingItem_Back(arg0: zombie.inventory.InventoryItem): void;
      setClothingItem_Feet(arg0: zombie.inventory.InventoryItem): void;
      setClothingItem_Hands(arg0: zombie.inventory.InventoryItem): void;
      setClothingItem_Head(arg0: zombie.inventory.InventoryItem): void;
      setClothingItem_Legs(arg0: zombie.inventory.InventoryItem): void;
      setClothingItem_Torso(arg0: zombie.inventory.InventoryItem): void;
      setCollidable(arg0: boolean): void;
      setCollideType(arg0: string): void;
      setCollidedE(arg0: boolean): void;
      setCollidedN(arg0: boolean): void;
      setCollidedObject(arg0: zombie.iso.IsoObject): void;
      setCollidedS(arg0: boolean): void;
      setCollidedThisFrame(arg0: boolean): void;
      setCollidedW(arg0: boolean): void;
      setCollidedWithDoor(arg0: boolean): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCriticalHit(arg0: boolean): void;
      setCurrent(arg0: zombie.iso.IsoGridSquare): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setDamage(arg0: number): void;
      setDangerLevels(arg0: number): void;
      setDeathDragDown(arg0: boolean): void;
      setDebugMonitor(arg0: zombie.core.skinnedmodel.advancedanimation.debug.AnimatorDebugMonitor): void;
      setDefaultCondition(arg0: number): void;
      setDefaultState(arg0: zombie.ai.State): void;
      setDelayToSleep(arg0: number): void;
      setDepressDelta(arg0: number): void;
      setDepressEffect(arg0: number): void;
      setDescriptor(arg0: zombie.characters.SurvivorDesc): void;
      setDestroyed(arg0: boolean): void;
      setDieCount(arg0: number): void;
      setDir(arg0: number): void;
      setDirectionAngle(arg0: number): void;
      setDoDeathSound(arg0: boolean): void;
      setDoShove(arg0: boolean): void;
      setEatingZombies(arg0: java.util.ArrayList<zombie.characters.IsoZombie>): void;
      setFallOnFront(arg0: boolean): void;
      setFallTime(arg0: number): void;
      setFarmingCheat(arg0: boolean): void;
      setFeelersize(arg0: number): void;
      setFemale(arg0: boolean): void;
      setFireKillRate(arg0: number): void;
      setFireSpreadProbability(arg0: number): void;
      setFirstUpdate(arg0: boolean): void;
      setFollowingTarget(arg0: zombie.characters.IsoGameCharacter): void;
      setForceShove(arg0: boolean): void;
      setForceWakeUpTime(arg0: number): void;
      setForwardDirection(arg0: zombie.iso.Vector2): void;
      setGodMod(arg0: boolean): void;
      setHaloNote(arg0: string, arg1: number): void;
      setHealth(arg0: number): void;
      setHealthCheat(arg0: boolean): void;
      setHideWeaponModel(arg0: boolean): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setHitDir(arg0: zombie.iso.Vector2): void;
      setHitForce(arg0: number): void;
      setHitFromAngle(arg0: number): void;
      setHitFromBehind(arg0: boolean): void;
      setHitReaction(arg0: string): void;
      setHurtSound(arg0: string): void;
      setID(arg0: number): void;
      setIDCount(arg0: number): void;
      setIgnoreAimingInput(arg0: boolean): void;
      setIgnoreMovement(arg0: boolean): void;
      setIgnoreStaggerBack(arg0: boolean): void;
      setImpulsex(arg0: number): void;
      setImpulsey(arg0: number): void;
      setInventory(arg0: zombie.inventory.ItemContainer): void;
      setInvincible(arg0: boolean): void;
      setInvisible(arg0: boolean): void;
      setIsAiming(arg0: boolean): void;
      setIsNPC(arg0: boolean): void;
      setKeyId(arg0: number): void;
      setKnockedDown(arg0: boolean): void;
      setLast(arg0: zombie.iso.IsoGridSquare): void;
      setLastBump(arg0: number): void;
      setLastChatMessage(arg0: zombie.chat.ChatMessage): void;
      setLastCollideTime(arg0: number): void;
      setLastCollidedN(arg0: boolean): void;
      setLastCollidedW(arg0: boolean): void;
      setLastFallSpeed(arg0: number): void;
      setLastHeardSound(arg0: number, arg1: number, arg2: number): void;
      setLastHitCount(arg0: number): void;
      setLastHourSleeped(arg0: number): void;
      setLastLocalEnemies(arg0: number): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setLastSpokenLine(arg0: string): void;
      setLastTargettedBy(arg0: zombie.characters.IsoZombie): void;
      setLastZombieKills(arg0: number): void;
      setLeaveBodyTimedown(arg0: number): void;
      setLegsSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setLevelUpMultiplier(arg0: number): void;
      setLimpulsex(arg0: number): void;
      setLimpulsey(arg0: number): void;
      setLlx(arg0: number): void;
      setLly(arg0: number): void;
      setLlz(arg0: number): void;
      setLrx(arg0: number): void;
      setLry(arg0: number): void;
      setLx(arg0: number): void;
      setLy(arg0: number): void;
      setLz(arg0: number): void;
      setMaxTwist(arg0: number): void;
      setMaxWeight(arg0: number): void;
      setMaxWeightBase(arg0: number): void;
      setMechanicsCheat(arg0: boolean): void;
      setMeleeDelay(arg0: number): void;
      setMetabolicTarget(arg0: zombie.characters.BodyDamage.Metabolics): void;
      setMomentumScalar(arg0: number): void;
      setMovablesCheat(arg0: boolean): void;
      setMoveDelta(arg0: number): void;
      setMoveForwardVec(arg0: zombie.iso.Vector2): void;
      setMovedThumpable(arg0: boolean): void;
      setMovementLastFrame(arg0: zombie.iso.Vector2): void;
      setMoving(arg0: boolean): void;
      setMovingSquareNow(): void;
      setNPC(arg0: boolean): void;
      setName(arg0: string): void;
      setNextWander(arg0: number): void;
      setNoDamage(arg0: boolean): void;
      setNoPicking(arg0: boolean): void;
      setNumSurvivorsInVicinity(arg0: number): void;
      setNx(arg0: number): void;
      setNy(arg0: number): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOnDeathDone(arg0: boolean): void;
      setOnFire(arg0: boolean): void;
      setOnFloor(arg0: boolean): void;
      setOnKillDone(arg0: boolean): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPainDelta(arg0: number): void;
      setPainEffect(arg0: number): void;
      setPath2(arg0: zombie.vehicles.PolygonalMap2$Path): void;
      setPathFindIndex(arg0: number): void;
      setPathIndex(arg0: number): void;
      setPathing(arg0: boolean): void;
      setPatience(arg0: number): void;
      setPatienceMax(arg0: number): void;
      setPatienceMin(arg0: number): void;
      setPerkLevelDebug(arg0: zombie.characters.skills.PerkFactory$Perk, arg1: number): void;
      setPersistentOutfitID(arg0: number, arg1: boolean): void;
      setPipedFuelAmount(arg0: number): void;
      setPlayingDeathSound(arg0: boolean): void;
      setPrimaryHandItem(arg0: zombie.inventory.InventoryItem): void;
      setRangedWeaponEmpty(arg0: boolean): void;
      setReading(arg0: boolean): void;
      setReanim(arg0: boolean): void;
      setReanimAnimDelay(arg0: number): void;
      setReanimAnimFrame(arg0: number): void;
      setReanimateTimer(arg0: number): void;
      setRecoilDelay(arg0: number): void;
      setReduceInfectionPower(arg0: number): void;
      setRemoteID(arg0: number): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setRunning(arg0: boolean): void;
      setSafety(arg0: boolean): void;
      setSafetyCooldown(arg0: number): void;
      setSayLine(arg0: string): void;
      setSceneCulled(arg0: boolean): void;
      setScriptModule(arg0: string): void;
      setScriptnx(arg0: number): void;
      setScriptny(arg0: number): void;
      setSecondaryHandItem(arg0: zombie.inventory.InventoryItem): void;
      setShootable(arg0: boolean): void;
      setShowAdminTag(arg0: boolean): void;
      setSitOnGround(arg0: boolean): void;
      setSleepingTabletDelta(arg0: number): void;
      setSleepingTabletEffect(arg0: number): void;
      setSlowFactor(arg0: number): void;
      setSlowTimer(arg0: number): void;
      setSneaking(arg0: boolean): void;
      setSolid(arg0: boolean): void;
      setSpeakColour(arg0: zombie.core.Color): void;
      setSpeakColourInfo(arg0: zombie.core.textures.ColorInfo): void;
      setSpeakTime(arg0: number): void;
      setSpeaking(arg0: boolean): void;
      setSpecialTooltip(arg0: boolean): void;
      setSpeedMod(arg0: number): void;
      setSprinting(arg0: boolean): void;
      setSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setStaggerTimeMod(arg0: number): void;
      setStateEventDelayTimer(arg0: number): void;
      setStateMachineLocked(arg0: boolean): void;
      setSuperAttack(arg0: boolean): void;
      setSurvivorKills(arg0: number): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTaintedWater(arg0: boolean): void;
      setTargetAlpha(arg0: number): void;
      setTeleport(arg0: zombie.characters.NetworkTeleport): void;
      setTemperature(arg0: number): void;
      setTextureCreator(arg0: zombie.core.skinnedmodel.model.ModelInstanceTextureCreator): void;
      setThumpTarget(arg0: zombie.iso.objects.interfaces.Thumpable): void;
      setTimeOfSleep(arg0: number): void;
      setTimeSinceLastSmoke(arg0: number): void;
      setTimeSinceZombieAttack(arg0: number): void;
      setTimeThumping(arg0: number): void;
      setTimedActionInstantCheat(arg0: boolean): void;
      setTurnDelta(arg0: number): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUnlimitedCarry(arg0: boolean): void;
      setUnlimitedEndurance(arg0: boolean): void;
      setUseHandWeapon(arg0: zombie.inventory.types.HandWeapon): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setVariable(arg0: string, arg1: boolean): void;
      setVehicle(arg0: zombie.vehicles.BaseVehicle): void;
      setVisibleToNPCs(arg0: boolean): void;
      setWaterAmount(arg0: number): void;
      setWeight(arg0: number): void;
      setWidth(arg0: number): void;
      setWornItem(arg0: string, arg1: zombie.inventory.InventoryItem): void;
      setWornItems(arg0: zombie.characters.WornItems.WornItems): void;
      setX(arg0: number): void;
      setXp(arg0: zombie.characters.IsoGameCharacter$XP): void;
      setY(arg0: number): void;
      setZ(arg0: number): void;
      setZombieKills(arg0: number): void;
      setZombiesDontAttack(arg0: boolean): void;
      setbAltCollide(arg0: boolean): void;
      setbClimbing(arg0: boolean): void;
      setbDoDefer(arg0: boolean): void;
      setbFalling(arg0: boolean): void;
      setbOnBed(arg0: boolean): void;
      setbUseParts(arg0: boolean): void;
      shouldBeTurning(): boolean;
      shouldBeTurning90(): boolean;
      shouldBeTurningAround(): boolean;
      shouldBecomeCorpse(): boolean;
      shouldBecomeZombieAfterDeath(): boolean;
      shouldDoInventory(): boolean;
      shouldWaitToStartTimedAction(): boolean;
      smashCarWindow(arg0: zombie.vehicles.VehiclePart): void;
      smashWindow(arg0: zombie.iso.objects.IsoWindow): void;
      softReset(): void;
      splatBlood(arg0: number, arg1: number): void;
      splatBloodFloor(): void;
      splatBloodFloorBig(): void;
      spotted(arg0: zombie.iso.IsoMovingObject, arg1: boolean): void;
      startEvent(arg0: number, arg1: zombie.audio.GameSoundClip, arg2: java.util.BitSet): void;
      startMuzzleFlash(): void;
      startPlaybackGameVariables(): zombie.core.skinnedmodel.advancedanimation.AnimationVariableSource;
      stopEvent(arg0: number, arg1: zombie.audio.GameSoundClip, arg2: java.util.BitSet): void;
      stopOrTriggerSound(arg0: number): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection, arg3: java.nio.ByteBuffer): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      testDefense(arg0: zombie.characters.IsoZombie): boolean;
      testDotSide(arg0: zombie.iso.IsoMovingObject): string;
      toString(): string;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitModData(): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      unsetOutlineHighlight(): void;
      update(): void;
      updateEmitter(): void;
      updateEquippedRadioFreq(): void;
      updateEvent(arg0: number, arg1: zombie.audio.GameSoundClip): void;
      updateLightInfo(): void;
      updateRecoilVar(): void;
      updateSpeedModifiers(): void;
      updateTextObjects(): void;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      writeInventory(arg0: java.nio.ByteBuffer): void;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
      zeroForwardDirectionX(): void;
      zeroForwardDirectionY(): void;
    }
    // zombie.characters.IsoPlayer extends zombie.characters.IsoLivingCharacter
    export class IsoPlayer {
      private constructor();
      Asleep: boolean;
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      ContextPanic: number;
      CurrentSpeed: number;
      static DEATH_MUSIC_NAME?: string;
      readonly IsVisibleToPlayer?: boolean[];
      JoypadBind: number;
      L3Pressed: boolean;
      static LowLightingQualityHack: boolean;
      static readonly MAX: number;
      static readonly MAX_WALL_SPLATS: number;
      static readonly MAX_ZOMBIES_EATING: number;
      MaxSpeed: number;
      MoodleCantSprint: boolean;
      NoPicking: boolean;
      static readonly NoSound: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OnlineChunkGridWidth: number;
      OnlineID: number;
      OutlineOnMouseover: boolean;
      PlayerIndex: number;
      R3Pressed: boolean;
      static readonly RENDER_OFFSET_X: number;
      static readonly RENDER_OFFSET_Y: number;
      ReanimatedCorpse?: zombie.characters.IsoGameCharacter;
      ReanimatedCorpseID: number;
      SaveFileName?: string;
      readonly StateMachineParams?: java.util.HashMap<zombie.ai.State, java.util.HashMap<any, any>>;
      TimeSinceLastNetData: number;
      TimeSinceOpenDoor: number;
      readonly Traits?: zombie.characters.IsoGameCharacter$CharacterTraits;
      accessLevel?: string;
      readonly actionContext?: zombie.characters.action.ActionContext;
      readonly advancedAnimator?: zombie.core.skinnedmodel.advancedanimation.AdvancedAnimator;
      readonly amputations?: java.util.ArrayList<string>;
      static assumedPlayer: number;
      attackStarted: boolean;
      readonly attackVars?: zombie.network.packets.hit.AttackVars;
      bAlphaForced: boolean;
      bBannedAttacking: boolean;
      bCollidedWithPushable: boolean;
      bDeathFinished: boolean;
      bDoShove: boolean;
      bJoypadIgnoreAimUntilCentered: boolean;
      bJoypadIgnoreChargingRT: boolean;
      bJoypadMovementActive: boolean;
      bNeverDoneAlpha: boolean;
      readonly bOutline?: boolean[];
      bPressContext: boolean;
      bRemote: boolean;
      bUpdateEquippedTextures: boolean;
      bagsWorn?: java.util.ArrayList<zombie.inventory.types.InventoryContainer>;
      readonly bareHands?: zombie.inventory.types.HandWeapon;
      beard?: zombie.core.skinnedmodel.model.ModelInstance;
      bleedingLevel: number;
      blockTurning: boolean;
      static bmod: number;
      bumpNbr: number;
      callOut: boolean;
      canHearAll: boolean;
      canSeeAll: boolean;
      chargeTime: number;
      clientIgnoreCollision: number;
      closestZombie: number;
      container?: zombie.inventory.ItemContainer;
      def?: zombie.iso.sprite.IsoSpriteInstance;
      dir?: zombie.iso.IsoDirections;
      dirtyRecalcGridStack: boolean;
      dirtyRecalcGridStackTime: number;
      doDirtBloodEtc: boolean;
      doNotSync: boolean;
      doRenderShadow: boolean;
      emitter?: zombie.audio.BaseSoundEmitter;
      factionPvp: boolean;
      forceNullOverride: boolean;
      static gmod: number;
      hair?: zombie.core.skinnedmodel.model.ModelInstance;
      highlightFlags: number;
      readonly hitList?: java.util.ArrayList<zombie.network.packets.hit.HitInfo>;
      invRadioFreq?: java.util.ArrayList<number>;
      isCharging: boolean;
      isChargingLT: boolean;
      isSpeek: boolean;
      static isTestAIMode: boolean;
      isVoiceMute: boolean;
      keyId: number;
      knockbackAttackMod: number;
      last?: zombie.iso.IsoGridSquare;
      readonly lastAngle?: zombie.iso.Vector2;
      lastAutomaticShoot: number;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      lastTargeted: number;
      legsSprite?: zombie.iso.sprite.IsoSprite;
      lx: number;
      ly: number;
      lz: number;
      maxWeightDelta: number;
      mpTorchCone: boolean;
      mpTorchDist: number;
      mpTorchStrength: number;
      name?: string;
      readonly networkAI?: zombie.characters.NetworkPlayerAI;
      readonly networkCharacter?: zombie.characters.NetworkCharacter;
      noDamage: boolean;
      numNearbyBuildingsRooms: number;
      static numPlayers: number;
      nx: number;
      ny: number;
      offsetX: number;
      offsetY: number;
      readonly outlineColor?: zombie.core.textures.ColorInfo[];
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      overridePrimaryHandModel?: string;
      overrideSecondaryHandModel?: string;
      partialThumpDmg: number;
      readonly playerMoveDir?: zombie.iso.Vector2;
      static readonly players?: zombie.characters.IsoPlayer[];
      primaryHandModel?: zombie.core.skinnedmodel.model.ModelInstance;
      realState?: zombie.network.NetworkVariables$ZombieState;
      realdir?: zombie.iso.IsoDirections;
      realx: number;
      realy: number;
      realz: number;
      remoteFitLvl: number;
      remoteSneakLvl: number;
      remoteStrLvl: number;
      removedFromWorldMS: number;
      replay?: zombie.network.ReplayManager;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      runningTime: number;
      static readonly s_maxPossibleTwist: number;
      savedVehicleRunning: boolean;
      savedVehicleSeat: number;
      savedVehicleX: number;
      savedVehicleY: number;
      secondaryHandModel?: zombie.core.skinnedmodel.model.ModelInstance;
      serverPlayerIndex: number;
      sheetRope: boolean;
      sheetRopeHealth: number;
      shootInARow: number;
      showTag: boolean;
      soundListener?: fmod.fmod.BaseSoundListener;
      speedMod: number;
      spottedByPlayer: boolean;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      sqlID: number;
      square?: zombie.iso.IsoGridSquare;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      tagPrefix?: string;
      targetOnGround?: zombie.characters.IsoGameCharacter;
      targetedByZombie: boolean;
      timePressedContext: number;
      tintb: number;
      tintg: number;
      tintr: number;
      static treeSoundMgr?: zombie.iso.IsoMovingObject$TreeSoundManager;
      upKillCount: boolean;
      useChargeDelta: number;
      useChargeTime: number;
      username?: string;
      vocalEvent: number;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
      x: number;
      y: number;
      z: number;
  
      Anger(arg0: number): void;
      ApplyInBedOffset(arg0: boolean): void;
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      AttemptAttack(arg0: number): boolean;
      BetaAntiDepress(arg0: number): void;
      BetaBlockers(arg0: number): void;
      CacheEquipped(): void;
      Callout(): void;
      CanAttack(): boolean;
      CanSee(arg0: zombie.iso.IsoMovingObject): boolean;
      ClearEquippedCache(): void;
      ClearVariable(arg0: string): void;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number): void;
      Despawn(): void;
      DirectionFromVector(arg0: zombie.iso.Vector2): void;
      DirtySlice(): void;
      DistTo(arg0: number, arg1: number): number;
      DistToProper(arg0: zombie.iso.IsoObject): number;
      DistToSquared(arg0: zombie.iso.IsoMovingObject): number;
      DoAttack(arg0: number): boolean;
      DoCollideNorS(): void;
      DoCollideWorE(): void;
      DoDeath(arg0: zombie.inventory.types.HandWeapon, arg1: zombie.characters.IsoGameCharacter): void;
      DoFloorSplat(arg0: zombie.iso.IsoGridSquare, arg1: string, arg2: boolean, arg3: number, arg4: number): void;
      DoFootstepSound(arg0: number): void;
      DoSneezeText(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoSwingCollisionBoneCheck(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number): boolean;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      DrawSneezeText(): void;
      Dressup(arg0: zombie.characters.SurvivorDesc): void;
      Eat(arg0: zombie.inventory.InventoryItem, arg1: number): boolean;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      FireCheck(): void;
      GetAnimSetName(): string;
      GetPrimaryEquippedCache(): zombie.inventory.InventoryItem;
      GetSecondaryEquippedCache(): zombie.inventory.InventoryItem;
      GetVariable(arg0: string): string;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasItem(arg0: string): boolean;
      HasTooltip(): boolean;
      HasTrait(arg0: string): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      HitSilence(arg0: zombie.inventory.types.HandWeapon, arg1: zombie.characters.IsoGameCharacter, arg2: boolean, arg3: number): void;
      InitSpriteParts(arg0: zombie.characters.SurvivorDesc): void;
      IsAiming(): boolean;
      IsAttackRange(arg0: number, arg1: number, arg2: number): boolean;
      IsInMeleeAttack(): boolean;
      IsRunning(): boolean;
      IsSpeaking(): boolean;
      IsUsingAimWeapon(): boolean;
      Kill(arg0: zombie.characters.IsoGameCharacter): void;
      LevelPerk(arg0: zombie.characters.skills.PerkFactory$Perk, arg1: boolean): void;
      LoseLevel(arg0: zombie.characters.skills.PerkFactory$Perk): void;
      Move(arg0: zombie.iso.Vector2): void;
      MoveForward(arg0: number, arg1: number, arg2: number, arg3: number): void;
      MoveUnmodded(arg0: zombie.iso.Vector2): void;
      NPCGetAiming(): boolean;
      NPCGetRunning(): boolean;
      NPCSetAiming(arg0: boolean): void;
      NPCSetAttack(arg0: boolean): void;
      NPCSetJustMoved(arg0: boolean): void;
      NPCSetMelee(arg0: boolean): void;
      NPCSetRunning(arg0: boolean): void;
      OnAnimEvent(arg0: zombie.core.skinnedmodel.advancedanimation.AnimLayer, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      OnDeath(): void;
      PainMeds(arg0: number): void;
      PlayAnim(arg0: string): void;
      PlayAnimUnlooped(arg0: string): void;
      PlayAnimWithSpeed(arg0: string, arg1: number): void;
      QueueAction(arg0: zombie.characters.CharacterTimedActions.BaseAction): void;
      ReadLiterature(arg0: zombie.inventory.types.Literature): void;
      ReduceHealthWhenBurning(): void;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      Say(arg0: string): void;
      SayDebug(arg0: number, arg1: string): void;
      SayRadio(arg0: string, arg1: number, arg2: number, arg3: number, arg4: zombie.ui.UIFont, arg5: number, arg6: number, arg7: string): void;
      SayShout(arg0: string): void;
      SayWhisper(arg0: string): void;
      Seen(arg0: java.util.Stack<zombie.iso.IsoMovingObject>): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      SetOnFire(): void;
      SetVariable(arg0: string, arg1: string): void;
      SleepingTablet(arg0: number): void;
      SpreadFire(): void;
      SpreadFireMP(): void;
      StartAction(arg0: zombie.characters.CharacterTimedActions.BaseAction): void;
      StartTimedActionAnim(arg0: string, arg1: string): void;
      StopAllActionQueue(): void;
      StopAllActionQueueAiming(): void;
      StopAllActionQueueRunning(): void;
      StopAllActionQueueWalking(): void;
      StopBurning(): void;
      StopTimedActionAnim(): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      TestZombieSpotPlayer(arg0: zombie.iso.IsoMovingObject): void;
      Throw(arg0: zombie.inventory.types.HandWeapon): void;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      actionStateChanged(arg0: zombie.characters.action.ActionContext): void;
      addBasicPatch(arg0: zombie.characterTextures.BloodBodyPartType): void;
      addBlood(arg0: zombie.characterTextures.BloodBodyPartType, arg1: boolean, arg2: boolean, arg3: boolean): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addDirt(arg0: zombie.characterTextures.BloodBodyPartType, arg1: number, arg2: boolean): void;
      addHole(arg0: zombie.characterTextures.BloodBodyPartType): boolean;
      addHoleFromZombieAttacks(arg0: zombie.characterTextures.BloodBodyPartType, arg1: boolean): boolean;
      addLineChatElement(arg0: string): void;
      addMechanicsItem(arg0: string, arg1: zombie.vehicles.VehiclePart, arg2: number): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      addToWorld(): void;
      addVisualDamage(arg0: string): void;
      addWorldSoundUnlessInvisible(arg0: number, arg1: number, arg2: boolean): void;
      allPlayersAsleep(): boolean;
      allPlayersDead(): boolean;
      applyTraits(arg0: java.util.ArrayList<string>): void;
      attackFromWindowsLunge(arg0: zombie.characters.IsoZombie): void;
      autoDrink(): void;
      avoidDamage(): boolean;
      becomeCorpse(): void;
      calcHitDir(arg0: zombie.iso.Vector2): void;
      calculateBaseSpeed(): number;
      calculateContext(): void;
      calculateCritChance(arg0: zombie.characters.IsoGameCharacter): number;
      canAddSheetRope(): boolean;
      canClimbDownSheetRope(arg0: zombie.iso.IsoGridSquare): boolean;
      canClimbDownSheetRopeInCurrentSquare(): boolean;
      canClimbOverWall(arg0: zombie.iso.IsoDirections): boolean;
      canClimbSheetRope(arg0: zombie.iso.IsoGridSquare): boolean;
      canHaveMultipleHits(): number;
      canSeePlayerStats(): boolean;
      canSprint(): boolean;
      changeState(arg0: zombie.ai.State): void;
      checkCanSeeClient(arg0: zombie.characters.IsoPlayer): boolean;
      checkHaveElectricity(): void;
      checkIsNearWall(): number;
      cleanWallBlood(): void;
      clearAttachedAnimSprite(): void;
      clearAttachedItems(): void;
      clearNetworkEvents(): void;
      clearVariable(arg0: string): void;
      clearVariables(): void;
      clearWornItems(): void;
      climbDownSheetRope(): void;
      climbOverFence(arg0: zombie.iso.IsoDirections): void;
      climbOverWall(arg0: zombie.iso.IsoDirections): boolean;
      climbSheetRope(): void;
      climbThroughWindow(arg0: zombie.iso.objects.IsoThumpable, arg1: number): void;
      climbThroughWindowFrame(arg0: zombie.iso.IsoObject): void;
      closeWindow(arg0: zombie.iso.objects.IsoWindow): void;
      clothingItemChanged(arg0: string): void;
      collideWith(arg0: zombie.iso.IsoObject): void;
      compareMovePriority(arg0: zombie.characters.IsoGameCharacter): number;
      compareToY(arg0: zombie.iso.IsoMovingObject): number;
      containsVariable(arg0: string): boolean;
      countAddSheetRope(): number;
      createContainersFromSpriteProperties(): void;
      createKeyRing(): void;
      createPlayerStats(arg0: zombie.core.network.ByteBufferWriter, arg1: string): zombie.core.network.ByteBufferWriter;
      customHashCode(): number;
      dbgGetAnimTrack(arg0: number, arg1: number): zombie.core.skinnedmodel.animation.AnimationTrack;
      dbgGetAnimTrackName(arg0: number, arg1: number): string;
      dbgGetAnimTrackTime(arg0: number, arg1: number): number;
      dbgGetAnimTrackWeight(arg0: number, arg1: number): number;
      debugPrintout(): void;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      distToNearestCamCharacter(): number;
      doBeatenVehicle(arg0: number): number;
      doContext(arg0: zombie.iso.IsoDirections): boolean;
      doFindExternalWaterSource(): void;
      doHitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.vehicles.BaseVehicle$HitVars): void;
      doStairs(): void;
      drawDirectionLine(arg0: zombie.iso.Vector2, arg1: number, arg2: number, arg3: number, arg4: number): void;
      dressInClothingItem(arg0: string): void;
      dressInNamedOutfit(arg0: string): void;
      dressInPersistentOutfit(arg0: string): void;
      dressInPersistentOutfitID(arg0: number): void;
      dressInRandomOutfit(): void;
      dropHandItems(): void;
      dropHeavyItems(): void;
      endPlaybackGameVariables(arg0: zombie.core.skinnedmodel.advancedanimation.AnimationVariableSource): void;
      ensureOnTile(): void;
      enterVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number, arg2: org.joml.Vector3f): void;
      equals(arg0: any): boolean;
      exert(arg0: number): void;
      faceLocation(arg0: number, arg1: number): void;
      faceLocationF(arg0: number, arg1: number): void;
      facePosition(arg0: number, arg1: number): void;
      faceThisObject(arg0: zombie.iso.IsoObject): void;
      faceThisObjectAlt(arg0: zombie.iso.IsoObject): void;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      fallenOnKnees(): void;
      forceAwake(): void;
      getAbsoluteExcessTwist(): number;
      getAccessLevel(): string;
      getActionContext(): zombie.characters.action.ActionContext;
      getActionStateName(): string;
      getActiveLightItem(): zombie.inventory.InventoryItem;
      getActiveLightItems(arg0: java.util.ArrayList<zombie.inventory.InventoryItem>): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getAdvancedAnimator(): zombie.core.skinnedmodel.advancedanimation.AdvancedAnimator;
      getAge(): number;
      getAimVector(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getAimingMod(): number;
      getAimingRangeMod(): number;
      getAllFileNames(): java.util.ArrayList<string>;
      getAllSavedPlayers(): java.util.ArrayList<zombie.characters.IsoPlayer>;
      getAlpha(arg0: number): number;
      getAlreadyReadBook(): java.util.ArrayList<string>;
      getAlreadyReadPages(arg0: string): number;
      getAnimAngle(): number;
      getAnimAngleRadians(): number;
      getAnimAngleStepDelta(): number;
      getAnimAngleTwistDelta(): number;
      getAnimVector(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getAnimationDebug(): string;
      getAnimationPlayer(): zombie.core.skinnedmodel.animation.AnimationPlayer;
      getAnimationPlayerRecorder(): zombie.core.skinnedmodel.animation.debug.AnimationPlayerRecorder;
      getAnimationStateName(): string;
      getAsleepTime(): number;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getAttachedItem(arg0: string): zombie.inventory.InventoryItem;
      getAttachedItems(): zombie.characters.AttachedItems.AttachedItems;
      getAttachedLocationGroup(): zombie.characters.AttachedItems.AttachedLocationGroup;
      getAttackTargetSquare(): zombie.iso.IsoGridSquare;
      getAttackType(): string;
      getAttackedBy(): zombie.characters.IsoGameCharacter;
      getAutoWalkDirection(): zombie.iso.Vector2;
      getBarricadeStrengthMod(): number;
      getBarricadeTimeMod(): number;
      getBed(): zombie.iso.IsoObject;
      getBedType(): string;
      getBeenMovingFor(): number;
      getBeenSprintingFor(): number;
      getBetaDelta(): number;
      getBetaEffect(): number;
      getBloodImpactX(): number;
      getBloodImpactY(): number;
      getBloodImpactZ(): number;
      getBloodSplat(): zombie.iso.sprite.IsoSprite;
      getBodyDamage(): zombie.characters.BodyDamage.BodyDamage;
      getBodyDamageRemote(): zombie.characters.BodyDamage.BodyDamage;
      getBodyLocationGroup(): zombie.characters.WornItems.BodyLocationGroup;
      getBodyPartClothingDefense(arg0: number, arg1: boolean, arg2: boolean): number;
      getBrain(): zombie.ai.GameCharacterAIBrain;
      getBuilding(): zombie.iso.areas.IsoBuilding;
      getBumpFallType(): string;
      getBumpType(): string;
      getBumpedChr(): zombie.characters.IsoGameCharacter;
      getBumpedType(arg0: zombie.characters.IsoGameCharacter): string;
      getCell(): zombie.iso.IsoCell;
      getCharacterActions(): java.util.Stack<zombie.characters.CharacterTimedActions.BaseAction>;
      getCharacterTraits(): zombie.characters.IsoGameCharacter$CharacterTraits;
      getChatElement(): zombie.chat.ChatElement;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getChopTreeSpeed(): number;
      getClass(): java.lang.Class<any>;
      getClearSpottedTimer(): number;
      getClickSound(): string;
      getClosestZombieDist(): zombie.characters.IsoGameCharacter;
      getClosestZombieToOtherZombie(arg0: zombie.characters.IsoZombie): zombie.characters.IsoZombie;
      getClothingItem_Back(): zombie.inventory.InventoryItem;
      getClothingItem_Feet(): zombie.inventory.InventoryItem;
      getClothingItem_Hands(): zombie.inventory.InventoryItem;
      getClothingItem_Head(): zombie.inventory.InventoryItem;
      getClothingItem_Legs(): zombie.inventory.InventoryItem;
      getClothingItem_Torso(): zombie.inventory.InventoryItem;
      getClothingWetness(): zombie.characters.ClothingWetness;
      getCollideType(): string;
      getCollidedObject(): zombie.iso.IsoObject;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getContextDoorOrWindowOrWindowFrame(arg0: zombie.iso.IsoDirections): zombie.iso.IsoObject;
      getControllerAimDir(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getCoopPVP(): boolean;
      getCurrentActionContextStateName(): string;
      getCurrentBuilding(): zombie.iso.areas.IsoBuilding;
      getCurrentBuildingDef(): zombie.iso.BuildingDef;
      getCurrentRoomDef(): zombie.iso.RoomDef;
      getCurrentSquare(): zombie.iso.IsoGridSquare;
      getCurrentState(): zombie.ai.State;
      getCurrentStateName(): string;
      getCurrentZone(): zombie.iso.IsoMetaGrid$Zone;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getDamage(): number;
      getDamageFromHitByACar(arg0: number): number;
      getDangerLevels(): number;
      getDebugMonitor(): zombie.core.skinnedmodel.advancedanimation.debug.AnimatorDebugMonitor;
      getDefaultState(): zombie.ai.State;
      getDeferredAngleDelta(): number;
      getDeferredMovement(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getDeferredRotationWeight(): number;
      getDepressDelta(): number;
      getDepressEffect(): number;
      getDescriptor(): zombie.characters.SurvivorDesc;
      getDialogMood(): number;
      getDieCount(): number;
      getDir(): zombie.iso.IsoDirections;
      getDirectionAngle(): number;
      getDisplayName(): string;
      getDistanceSq(arg0: zombie.iso.IsoMovingObject): number;
      getDotWithForwardDirection(arg0: number, arg1: number): number;
      getDragCharacter(): zombie.characters.IsoSurvivor;
      getDragObject(): zombie.iso.IsoMovingObject;
      getEatingZombies(): java.util.ArrayList<zombie.characters.IsoZombie>;
      getEmitter(): zombie.characters.BaseCharacterSoundEmitter;
      getEnemyList(): java.util.Stack<zombie.characters.IsoGameCharacter>;
      getEquipedRadio(): zombie.inventory.types.Radio;
      getExcessTwist(): number;
      getFMODParameters(): zombie.audio.FMODParameterList;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getFallTime(): number;
      getFamiliarBuildings(): java.util.Stack<zombie.iso.areas.IsoBuilding>;
      getFatigueMod(): number;
      getFatiqueMultiplier(): number;
      getFeelerTile(arg0: number): zombie.iso.IsoGridSquare;
      getFeelersize(): number;
      getFinder(): zombie.ai.astar.AStarPathFinderResult;
      getFireKillRate(): number;
      getFireSpreadProbability(): number;
      getFitness(): zombie.characters.BodyDamage.Fitness;
      getFollowDeadCount(): number;
      getFollowID(): number;
      getFollowingTarget(): zombie.characters.IsoGameCharacter;
      getForceWakeUpTime(): number;
      getForname(): string;
      getForwardDirection(): zombie.iso.Vector2;
      getFullName(): string;
      getFuturWalkedSquare(): zombie.iso.IsoGridSquare;
      getGameCharacterAIBrain(): zombie.ai.GameCharacterAIBrain;
      getGameVariables(): java.lang.Iterable<zombie.core.skinnedmodel.advancedanimation.IAnimationVariableSlot>;
      getGlobalMovementMod(): number;
      getHaloTimerCount(): number;
      getHammerSoundMod(): number;
      getHealth(): number;
      getHeartDelay(): number;
      getHeartDelayMax(): number;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getHitChancesMod(): number;
      getHitDir(): zombie.iso.Vector2;
      getHitForce(): number;
      getHitFromAngle(): number;
      getHitReaction(): string;
      getHitReactionNetworkAI(): zombie.characters.HitReactionNetworkAI;
      getHittingMod(): number;
      getHoursSurvived(): number;
      getHumanVisual(): zombie.core.skinnedmodel.visual.HumanVisual;
      getHungerMultiplier(): number;
      getHurtSound(): string;
      getHyperthermiaMod(): number;
      getID(): number;
      getIDCount(): number;
      getIgnoreMovement(): boolean;
      getImpulsex(): number;
      getImpulsey(): number;
      getInf(): zombie.core.textures.ColorInfo;
      getInstance(): zombie.characters.IsoPlayer;
      getInvAimingMod(): number;
      getInvAimingRangeMod(): number;
      getInventory(): zombie.inventory.ItemContainer;
      getInventoryWeight(): number;
      getIsNPC(): boolean;
      getIsSurfaceNormalOffset(): boolean;
      getItemContainer(): zombie.inventory.ItemContainer;
      getItemVisuals(arg0: zombie.core.skinnedmodel.visual.ItemVisuals): void;
      getJoypadBind(): number;
      getKeyId(): number;
      getKnownRecipes(): java.util.List<string>;
      getLastAngle(): zombie.iso.Vector2;
      getLastBump(): number;
      getLastChatMessage(): zombie.chat.ChatMessage;
      getLastCollideTime(): number;
      getLastFallSpeed(): number;
      getLastHeardSound(): zombie.characters.IsoGameCharacter$Location;
      getLastHitCount(): number;
      getLastHourSleeped(): number;
      getLastKnownLocation(): java.util.HashMap<string, zombie.characters.IsoGameCharacter$Location>;
      getLastKnownLocationOf(arg0: string): zombie.characters.IsoGameCharacter$Location;
      getLastLocalEnemies(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getLastSeenZomboidTime(): number;
      getLastSpokenLine(): string;
      getLastSpotted(): java.util.Stack<zombie.iso.IsoMovingObject>;
      getLastSquare(): zombie.iso.IsoGridSquare;
      getLastTargettedBy(): zombie.characters.IsoZombie;
      getLastZombieKills(): number;
      getLeaveBodyTimedown(): number;
      getLegsSprite(): zombie.iso.sprite.IsoSprite;
      getLevelMaxForXp(): number;
      getLevelUpLevels(): number[];
      getLevelUpMultiplier(): number;
      getLightDistance(): number;
      getLightInfo2(): zombie.characters.IsoGameCharacter$LightInfo;
      getLightfootMod(): number;
      getLimpulsex(): number;
      getLimpulsey(): number;
      getLlx(): number;
      getLly(): number;
      getLlz(): number;
      getLocalEnemyList(): java.util.Stack<zombie.characters.IsoGameCharacter>;
      getLocalGroupList(): java.util.ArrayList<zombie.iso.IsoMovingObject>;
      getLocalList(): java.util.ArrayList<zombie.iso.IsoMovingObject>;
      getLocalNeutralList(): java.util.ArrayList<zombie.iso.IsoMovingObject>;
      getLocalPlayerByOnlineID(arg0: number): zombie.characters.IsoPlayer;
      getLocalRelevantEnemyList(): java.util.ArrayList<zombie.iso.IsoMovingObject>;
      getLookAngleRadians(): number;
      getLookVector(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getLowDangerInVicinity(arg0: number, arg1: number): zombie.iso.IsoGridSquare;
      getLrx(): number;
      getLry(): number;
      getLx(): number;
      getLy(): number;
      getLz(): number;
      getMaintenanceMod(): number;
      getMapKnowledge(): zombie.ai.MapKnowledge;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getMasterRegion(): zombie.iso.areas.isoregion.regions.IWorldRegion;
      getMaxChatLines(): number;
      getMaxTwist(): number;
      getMaxWeight(): number;
      getMaxWeightBase(): number;
      getMaxWeightDelta(): number;
      getMechanicsItem(arg0: string): number;
      getMeleeCombatMod(): number;
      getMeleeDelay(): number;
      getMetalBarricadeStrengthMod(): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getModel(): zombie.core.skinnedmodel.model.ModelInstance;
      getModelInstance(): zombie.core.skinnedmodel.model.ModelInstance;
      getMomentumScalar(): number;
      getMoodleLevel(arg0: zombie.characters.Moodles.MoodleType): number;
      getMoodles(): zombie.characters.Moodles.Moodles;
      getMouseAimVector(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getMoveDelta(): number;
      getMoveForwardVec(): zombie.iso.Vector2;
      getMoveSpeed(): number;
      getMovementLastFrame(): zombie.iso.Vector2;
      getMovingObjectIndex(): number;
      getName(): string;
      getNearVehicle(): zombie.vehicles.BaseVehicle;
      getNetworkCharacterAI(): zombie.characters.NetworkCharacterAI;
      getNew(): zombie.iso.IsoObject;
      getNextWander(): number;
      getNimbleMod(): number;
      getNoDamage(): boolean;
      getNumSurvivorsInVicinity(): number;
      getNutrition(): zombie.characters.BodyDamage.Nutrition;
      getNx(): number;
      getNy(): number;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffSetXUI(): number;
      getOffSetYUI(): number;
      getOffsetX(): number;
      getOffsetY(): number;
      getOnlineID(): number;
      getOrCreateSleepingEventData(): zombie.ai.sadisticAIDirector.SleepingEventData;
      getOrCreateVariable(arg0: string): zombie.core.skinnedmodel.advancedanimation.IAnimationVariableSlot;
      getOutfitName(): string;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPacingMod(): number;
      getPainDelta(): number;
      getPainEffect(): number;
      getParameterCharacterMovementSpeed(): zombie.audio.parameters.ParameterCharacterMovementSpeed;
      getPath2(): zombie.vehicles.PolygonalMap2$Path;
      getPathFindBehavior2(): zombie.vehicles.PathFindBehavior2;
      getPathFindIndex(): number;
      getPathIndex(): number;
      getPathSpeed(): number;
      getPathTargetX(): number;
      getPathTargetY(): number;
      getPathTargetZ(): number;
      getPatience(): number;
      getPatienceMax(): number;
      getPatienceMin(): number;
      getPerkInfo(arg0: zombie.characters.skills.PerkFactory$Perk): zombie.characters.IsoGameCharacter$PerkInfo;
      getPerkLevel(arg0: zombie.characters.skills.PerkFactory$Perk): number;
      getPerkList(): java.util.ArrayList<zombie.characters.IsoGameCharacter$PerkInfo>;
      getPersistentOutfitID(): number;
      getPing(): number;
      getPipedFuelAmount(): number;
      getPlayerClothingInsulation(): number;
      getPlayerClothingTemperature(): number;
      getPlayerIndex(): number;
      getPlayerMoveDir(): zombie.iso.Vector2;
      getPlayerNum(): number;
      getPlayers(): java.util.ArrayList<zombie.characters.IsoPlayer>;
      getPosition(arg0: zombie.iso.Vector3): zombie.iso.Vector3;
      getPreviousActionContextStateName(): string;
      getPreviousStateName(): string;
      getPrimaryHandItem(): zombie.inventory.InventoryItem;
      getPrimaryHandType(): string;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRandomDefaultOutfit(): zombie.core.skinnedmodel.population.Outfit;
      getReadyModelData(): java.util.ArrayList<zombie.core.skinnedmodel.model.ModelInstance>;
      getReanimAnimDelay(): number;
      getReanimAnimFrame(): number;
      getReanimateTimer(): number;
      getRecoilDelay(): number;
      getRecoveryMod(): number;
      getReduceInfectionPower(): number;
      getRelevantAndDistance(arg0: number, arg1: number, arg2: number): number;
      getReloadingMod(): number;
      getRemoteID(): number;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getRunSpeedModifier(): number;
      getSafetyCooldown(): number;
      getSayLine(): string;
      getScreenX(): number;
      getScreenY(): number;
      getScriptModule(): string;
      getScriptName(): string;
      getScriptnx(): number;
      getScriptny(): number;
      getSecondaryHandItem(): zombie.inventory.InventoryItem;
      getSecondaryHandType(): string;
      getSeeNearbyCharacterDistance(): number;
      getShoulderTwist(): number;
      getShovingMod(): number;
      getSleepingPillsTaken(): number;
      getSleepingTabletDelta(): number;
      getSleepingTabletEffect(): number;
      getSlowFactor(): number;
      getSlowTimer(): number;
      getSneakSpotMod(): number;
      getSpeakColour(): zombie.core.Color;
      getSpeakTime(): number;
      getSpecialObjectIndex(): number;
      getSpeedMod(): number;
      getSpottedList(): java.util.Stack<zombie.iso.IsoMovingObject>;
      getSprintMod(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteDef(): zombie.iso.sprite.IsoSpriteInstance;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSquare(): zombie.iso.IsoGridSquare;
      getStaggerTimeMod(): number;
      getStateEventDelayTimer(): number;
      getStateMachine(): zombie.ai.StateMachine;
      getStateMachineParams(arg0: zombie.ai.State): java.util.HashMap<any, any>;
      getStaticMovingObjectIndex(): number;
      getStaticTraits(): java.util.Stack<string>;
      getStats(): zombie.characters.Stats;
      getSteamID(): number;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getSurname(): string;
      getSurroundingAttackingZombies(): number;
      getSurvivorKills(): number;
      getSurvivorMap(): java.util.HashMap<number, zombie.characters.SurvivorDesc>;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTagColor(): zombie.core.textures.ColorInfo;
      getTagPrefix(): string;
      getTalkerType(): string;
      getTargetAlpha(arg0: number): number;
      getTargetTwist(): number;
      getTeleport(): zombie.characters.NetworkTeleport;
      getTemperature(): number;
      getTempo(): zombie.iso.Vector2;
      getTextureCreator(): zombie.core.skinnedmodel.model.ModelInstanceTextureCreator;
      getTextureName(): string;
      getThirstMultiplier(): number;
      getThreatLevel(): number;
      getThumpCondition(): number;
      getThumpTarget(): zombie.iso.objects.interfaces.Thumpable;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTicksSinceSeenZombie(): number;
      getTile(): string;
      getTimeSinceLastSmoke(): number;
      getTimeSinceLastStab(): number;
      getTimeSinceZombieAttack(): number;
      getTimeSurvived(): string;
      getTimeThumping(): number;
      getTimedActionTimeModifier(): number;
      getTorchDot(): number;
      getTorchStrength(): number;
      getTotalBlood(): number;
      getTraits(): zombie.characters.traits.TraitCollection;
      getTransactionID(): number;
      getTurnDelta(): number;
      getTwist(): number;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUID(): string;
      getUniqueFileName(): string;
      getUseHandWeapon(): zombie.inventory.types.HandWeapon;
      getUseableVehicle(): zombie.vehicles.BaseVehicle;
      getUsedItemsOn(): java.util.Stack<string>;
      getUserNameHeight(): number;
      getUsername(): string;
      getUsesExternalWaterSource(): boolean;
      getVariable(arg0: zombie.core.skinnedmodel.advancedanimation.AnimationVariableHandle): zombie.core.skinnedmodel.advancedanimation.IAnimationVariableSlot;
      getVariableBoolean(arg0: string, arg1: boolean): boolean;
      getVariableFloat(arg0: string, arg1: number): number;
      getVariableString(arg0: string): string;
      getVectorFromDirection(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getVehicle(): zombie.vehicles.BaseVehicle;
      getVeryCloseEnemyList(): java.util.ArrayList<zombie.iso.IsoMovingObject>;
      getVisual(): zombie.core.skinnedmodel.visual.BaseVisual;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWaterSource(arg0: java.util.ArrayList<zombie.inventory.InventoryItem>): zombie.inventory.InventoryItem;
      getWeaponLevel(): number;
      getWeight(): number;
      getWeightMod(): number;
      getWeldingSoundMod(): number;
      getWidth(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWorldObjectIndex(): number;
      getWornItem(arg0: string): zombie.inventory.InventoryItem;
      getWornItems(): zombie.characters.WornItems.WornItems;
      getX(): number;
      getXp(): zombie.characters.IsoGameCharacter$XP;
      getXpForLevel(arg0: number): number;
      getY(): number;
      getZ(): number;
      getZombieKills(): number;
      getZombieRelevenceScore(arg0: zombie.characters.IsoZombie): number;
      hasActiveModel(): boolean;
      hasAnimationPlayer(): boolean;
      hasEquipped(arg0: string): boolean;
      hasEquippedTag(arg0: string): boolean;
      hasExternalWaterSource(): boolean;
      hasFootInjury(): boolean;
      hasHitReaction(): boolean;
      hasInstance(): boolean;
      hasItems(arg0: string, arg1: number): boolean;
      hasModData(): boolean;
      hasPath(): boolean;
      hasTimedActions(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      helmetFall(arg0: boolean, arg1: string): boolean;
      hitConsequences(arg0: zombie.inventory.types.HandWeapon, arg1: zombie.characters.IsoGameCharacter, arg2: boolean, arg3: number, arg4: boolean): void;
      hopFence(arg0: zombie.iso.IsoDirections, arg1: boolean): boolean;
      initAttachedItems(arg0: string): void;
      initLightInfo2(): zombie.characters.IsoGameCharacter$LightInfo;
      initSpritePartsEmpty(): void;
      initWornItems(arg0: string): void;
      invokeOnPlayerInstance(arg0: java.lang.Runnable): void;
      isAboveTopOfStairs(): boolean;
      isAccessLevel(arg0: string): boolean;
      isAimAtFloor(): boolean;
      isAimControlActive(): boolean;
      isAimKeyDown(): boolean;
      isAiming(): boolean;
      isAlive(): boolean;
      isAllChatMuted(): boolean;
      isAllowConversation(): boolean;
      isAllowRun(): boolean;
      isAllowSprint(): boolean;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isAnimForecasted(): boolean;
      isAnimationRecorderActive(): boolean;
      isAsleep(): boolean;
      isAttachedItem(arg0: zombie.inventory.InventoryItem): boolean;
      isAttackAnim(): boolean;
      isAttackAnimThrowTimeOut(): boolean;
      isAttackFromBehind(): boolean;
      isAttackStarted(): boolean;
      isAttackWasSuperAttack(): boolean;
      isAttacking(): boolean;
      isAuthorizeMeleeAction(): boolean;
      isAuthorizeShoveStomp(): boolean;
      isAutoWalk(): boolean;
      isBannedAttacking(): boolean;
      isBehaviourMoving(): boolean;
      isBehind(arg0: zombie.characters.IsoGameCharacter): boolean;
      isBeingSteppedOn(): boolean;
      isBlink(): boolean;
      isBlockMovement(): boolean;
      isBuildCheat(): boolean;
      isBumpDone(): boolean;
      isBumpFall(): boolean;
      isBumpStaggered(): boolean;
      isBumped(): boolean;
      isCanHearAll(): boolean;
      isCanSeeAll(): boolean;
      isCanShout(): boolean;
      isCharacter(): boolean;
      isCheatPlayerSeeEveryone(): boolean;
      isClimbOverWallStruggle(): boolean;
      isClimbOverWallSuccess(): boolean;
      isClimbing(): boolean;
      isClimbingThroughWindow(arg0: zombie.iso.objects.IsoWindow): boolean;
      isCloseKilled(): boolean;
      isClosingWindow(arg0: zombie.iso.objects.IsoWindow): boolean;
      isCollidable(): boolean;
      isCollided(): boolean;
      isCollidedE(): boolean;
      isCollidedN(): boolean;
      isCollidedS(): boolean;
      isCollidedThisFrame(): boolean;
      isCollidedW(): boolean;
      isCollidedWithDoor(): boolean;
      isCollidedWithPushableThisFrame(): boolean;
      isCollidedWithVehicle(): boolean;
      isCriticalHit(): boolean;
      isCurrentState(arg0: zombie.ai.State): boolean;
      isDead(): boolean;
      isDeaf(): boolean;
      isDeathDragDown(): boolean;
      isDestroyed(): boolean;
      isDoDeathSound(): boolean;
      isDoShove(): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isDriving(): boolean;
      isEatingOther(arg0: zombie.iso.IsoMovingObject): boolean;
      isEquipped(arg0: zombie.inventory.InventoryItem): boolean;
      isEquippedClothing(arg0: zombie.inventory.InventoryItem): boolean;
      isExistInTheWorld(): boolean;
      isFacingLocation(arg0: number, arg1: number, arg2: number): boolean;
      isFacingObject(arg0: zombie.iso.IsoObject, arg1: number): boolean;
      isFactionPvp(): boolean;
      isFallOnFront(): boolean;
      isFarmingCheat(): boolean;
      isFemale(): boolean;
      isFirstUpdate(): boolean;
      isFloor(): boolean;
      isForceAim(): boolean;
      isForceOverrideAnim(): boolean;
      isForceRun(): boolean;
      isForceShove(): boolean;
      isForceSprint(): boolean;
      isGhostMode(): boolean;
      isGodMod(): boolean;
      isHandItem(arg0: zombie.inventory.InventoryItem): boolean;
      isHealthCheat(): boolean;
      isHeavyItem(arg0: zombie.inventory.InventoryItem): boolean;
      isHideWeaponModel(): boolean;
      isHighlighted(): boolean;
      isHitFromBehind(): boolean;
      isHoppable(): boolean;
      isIgnoreAutoVault(): boolean;
      isIgnoreContextKey(): boolean;
      isIgnoreInputsForDirection(): boolean;
      isIgnoreMovementForDirection(): boolean;
      isIgnoreStaggerBack(): boolean;
      isInARoom(): boolean;
      isInTrees(): boolean;
      isInTrees2(arg0: boolean): boolean;
      isInTreesNoBush(): boolean;
      isInvincible(): boolean;
      isInvisible(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isItemInBothHands(arg0: zombie.inventory.InventoryItem): boolean;
      isJustMoved(): boolean;
      isKnockedDown(): boolean;
      isKnownPoison(arg0: zombie.inventory.InventoryItem): boolean;
      isLBPressed(): boolean;
      isLastCollidedN(): boolean;
      isLastCollidedW(): boolean;
      isLocal(): boolean;
      isLocalPlayer(): boolean;
      isLookingWhileInVehicle(): boolean;
      isMaskClicked(arg0: number, arg1: number): boolean;
      isMechanicsCheat(): boolean;
      isMovablesCheat(): boolean;
      isMovedThumpable(): boolean;
      isMoving(): boolean;
      isMuzzleFlash(): boolean;
      isNPC(): boolean;
      isNearVehicle(): boolean;
      isNetworkTeleportEnabled(): boolean;
      isNoClip(): boolean;
      isNoPicking(): boolean;
      isNorthHoppable(): boolean;
      isOnDeathDone(): boolean;
      isOnFire(): boolean;
      isOnFloor(): boolean;
      isOnKillDone(): boolean;
      isOnlyPlayerAsleep(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isOutside(): boolean;
      isPathfindRunning(): boolean;
      isPathing(): boolean;
      isPerformingAnAction(): boolean;
      isPersistentOutfitInit(): boolean;
      isPlayerMoving(): boolean;
      isPlayingDeathSound(): boolean;
      isPrimaryEquipped(arg0: string): boolean;
      isPrimaryHandItem(arg0: zombie.inventory.InventoryItem): boolean;
      isProne(): boolean;
      isPushableForSeparate(): boolean;
      isPushedByForSeparate(arg0: zombie.iso.IsoMovingObject): boolean;
      isRangedWeaponEmpty(): boolean;
      isReading(): boolean;
      isReanim(): boolean;
      isRecipeKnown(arg0: string): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isRunning(): boolean;
      isSafeToClimbOver(arg0: zombie.iso.IsoDirections): boolean;
      isSafety(): boolean;
      isSaveFileIPValid(): boolean;
      isSaveFileInUse(): boolean;
      isSceneCulled(): boolean;
      isSeatedInVehicle(): boolean;
      isSecondaryHandItem(arg0: zombie.inventory.InventoryItem): boolean;
      isSeeEveryone(): boolean;
      isSeeNonPvpZone(): boolean;
      isServerPlayerIDValid(arg0: string): boolean;
      isShootable(): boolean;
      isShowAdminTag(): boolean;
      isShowMPInfos(): boolean;
      isShowTag(): boolean;
      isSitOnGround(): boolean;
      isSkeleton(): boolean;
      isSkipResolveCollision(): boolean;
      isSneaking(): boolean;
      isSolid(): boolean;
      isSolidForSeparate(): boolean;
      isSpeaking(): boolean;
      isSprinting(): boolean;
      isSpriteInvisible(): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isStrafing(): boolean;
      isSuperAttack(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isTargetedByZombie(): boolean;
      isTeleporting(): boolean;
      isTimedActionInstant(): boolean;
      isTimedActionInstantCheat(): boolean;
      isTorchCone(): boolean;
      isUnderVehicle(): boolean;
      isUnlimitedCarry(): boolean;
      isUnlimitedEndurance(): boolean;
      isUsingWornItems(): boolean;
      isVariable(arg0: string, arg1: string): boolean;
      isVehicleCollisionActive(arg0: zombie.vehicles.BaseVehicle): boolean;
      isVisibleToNPCs(): boolean;
      isWaiting(): boolean;
      isWearingNightVisionGoggles(): boolean;
      isZombie(): boolean;
      isZombieAttacking(): boolean;
      isZombiesDontAttack(): boolean;
      isbAltCollide(): boolean;
      isbChangeCharacterDebounce(): boolean;
      isbCouldBeSeenThisFrame(): boolean;
      isbDoDefer(): boolean;
      isbFalling(): boolean;
      isbOnBed(): boolean;
      isbSeenThisFrame(): boolean;
      isbUseParts(): boolean;
      learnRecipe(arg0: string): boolean;
      level0(arg0: zombie.characters.skills.PerkFactory$Perk): void;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      nullifyAiming(): void;
      onCullStateChanged(arg0: zombie.core.skinnedmodel.ModelManager, arg1: boolean): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      onWornItemsChanged(): void;
      openWindow(arg0: zombie.iso.objects.IsoWindow): void;
      pathToCharacter(arg0: zombie.characters.IsoGameCharacter): void;
      pathToLocation(arg0: number, arg1: number, arg2: number): void;
      pathToLocationF(arg0: number, arg1: number, arg2: number): void;
      pathToSound(arg0: number, arg1: number, arg2: number): void;
      playBloodSplatterSound(): void;
      playDeadSound(): void;
      playEmote(arg0: string): void;
      playHurtSound(): void;
      playSound(arg0: string): number;
      playSoundLocal(arg0: string): number;
      playbackRecordCurrentStateSnapshot(): zombie.characters.action.ActionStateSnapshot;
      playbackSetCurrentStateSnapshot(arg0: zombie.characters.action.ActionStateSnapshot): void;
      postUpdateEquippedTextures(): void;
      postUpdateModelTextures(): void;
      postupdate(): void;
      pressedAim(): boolean;
      pressedAttack(arg0: boolean): void;
      pressedCancelAction(): boolean;
      pressedMovement(arg0: boolean): boolean;
      preupdate(): void;
      processHitDamage(arg0: zombie.inventory.types.HandWeapon, arg1: zombie.characters.IsoGameCharacter, arg2: number, arg3: boolean, arg4: number): number;
      readInventory(arg0: java.nio.ByteBuffer): string;
      releaseAnimationPlayer(): void;
      reloadOutfit(): void;
      removeAllContainers(): void;
      removeAttachedItem(arg0: zombie.inventory.InventoryItem): void;
      removeFromHands(arg0: zombie.inventory.InventoryItem): boolean;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSaveFile(): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      removeWornItem(arg0: zombie.inventory.InventoryItem): void;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderServerGUI(): void;
      renderShadow(arg0: number, arg1: number, arg2: number): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reportEvent(arg0: string): void;
      reset(): void;
      resetBeardGrowingTime(): void;
      resetBodyDamageRemote(): void;
      resetEquippedHandsModels(): void;
      resetHairGrowingTime(): void;
      resetModel(): void;
      resetModelNextFrame(): void;
      reuseGridSquare(): void;
      save(arg0: java.nio.ByteBuffer): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      sendStopBurning(): void;
      separate(): void;
      serverRemoveItemFromZombie(arg0: string): void;
      setAccessLevel(arg0: string): void;
      setAge(arg0: number): void;
      setAimAtFloor(arg0: boolean): void;
      setAllChatMuted(arg0: boolean): void;
      setAllowConversation(arg0: boolean): void;
      setAllowRun(arg0: boolean): void;
      setAllowSprint(arg0: boolean): void;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAlreadyReadPages(arg0: string, arg1: number): void;
      setAnimForecasted(arg0: number): void;
      setAnimated(arg0: boolean): void;
      setAsleep(arg0: boolean): void;
      setAsleepTime(arg0: number): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setAttachedItem(arg0: string, arg1: zombie.inventory.InventoryItem): void;
      setAttachedItems(arg0: zombie.characters.AttachedItems.AttachedItems): void;
      setAttackAnim(arg0: boolean): void;
      setAttackAnimThrowTimer(arg0: number): void;
      setAttackFromBehind(arg0: boolean): void;
      setAttackTargetSquare(arg0: zombie.iso.IsoGridSquare): void;
      setAttackType(arg0: string): void;
      setAttackWasSuperAttack(arg0: boolean): void;
      setAttackedBy(arg0: zombie.characters.IsoGameCharacter): void;
      setAuthorizeMeleeAction(arg0: boolean): void;
      setAuthorizeShoveStomp(arg0: boolean): void;
      setAutoWalk(arg0: boolean): void;
      setAutoWalkDirection(arg0: zombie.iso.Vector2): void;
      setAvoidDamage(arg0: boolean): void;
      setBannedAttacking(arg0: boolean): void;
      setBed(arg0: zombie.iso.IsoObject): void;
      setBedType(arg0: string): void;
      setBeenMovingFor(arg0: number): void;
      setBeenSprintingFor(arg0: number): void;
      setBetaDelta(arg0: number): void;
      setBetaEffect(arg0: number): void;
      setBlink(arg0: boolean): void;
      setBlockMovement(arg0: boolean): void;
      setBloodImpactX(arg0: number): void;
      setBloodImpactY(arg0: number): void;
      setBloodImpactZ(arg0: number): void;
      setBloodSplat(arg0: zombie.iso.sprite.IsoSprite): void;
      setBuildCheat(arg0: boolean): void;
      setBumpDone(arg0: boolean): void;
      setBumpFall(arg0: boolean): void;
      setBumpFallType(arg0: string): void;
      setBumpStaggered(arg0: boolean): void;
      setBumpType(arg0: string): void;
      setBumpedChr(arg0: zombie.characters.IsoGameCharacter): void;
      setCanHearAll(arg0: boolean): void;
      setCanSeeAll(arg0: boolean): void;
      setCanShout(arg0: boolean): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setClearSpottedTimer(arg0: number): void;
      setClickSound(arg0: string): void;
      setClimbOverWallStruggle(arg0: boolean): void;
      setClimbOverWallSuccess(arg0: boolean): void;
      setCloseKilled(arg0: boolean): void;
      setClothingItem_Back(arg0: zombie.inventory.InventoryItem): void;
      setClothingItem_Feet(arg0: zombie.inventory.InventoryItem): void;
      setClothingItem_Hands(arg0: zombie.inventory.InventoryItem): void;
      setClothingItem_Head(arg0: zombie.inventory.InventoryItem): void;
      setClothingItem_Legs(arg0: zombie.inventory.InventoryItem): void;
      setClothingItem_Torso(arg0: zombie.inventory.InventoryItem): void;
      setCollidable(arg0: boolean): void;
      setCollideType(arg0: string): void;
      setCollidedE(arg0: boolean): void;
      setCollidedN(arg0: boolean): void;
      setCollidedObject(arg0: zombie.iso.IsoObject): void;
      setCollidedS(arg0: boolean): void;
      setCollidedThisFrame(arg0: boolean): void;
      setCollidedW(arg0: boolean): void;
      setCollidedWithDoor(arg0: boolean): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCoopPVP(arg0: boolean): void;
      setCriticalHit(arg0: boolean): void;
      setCurrent(arg0: zombie.iso.IsoGridSquare): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setDamage(arg0: number): void;
      setDangerLevels(arg0: number): void;
      setDeathDragDown(arg0: boolean): void;
      setDebugMonitor(arg0: zombie.core.skinnedmodel.advancedanimation.debug.AnimatorDebugMonitor): void;
      setDefaultCondition(arg0: number): void;
      setDefaultState(arg0: zombie.ai.State): void;
      setDelayToSleep(arg0: number): void;
      setDepressDelta(arg0: number): void;
      setDepressEffect(arg0: number): void;
      setDescriptor(arg0: zombie.characters.SurvivorDesc): void;
      setDestroyed(arg0: boolean): void;
      setDialogMood(arg0: number): void;
      setDieCount(arg0: number): void;
      setDir(arg0: number): void;
      setDirectionAngle(arg0: number): void;
      setDisplayName(arg0: string): void;
      setDoDeathSound(arg0: boolean): void;
      setDoShove(arg0: boolean): void;
      setDragCharacter(arg0: zombie.characters.IsoSurvivor): void;
      setDragObject(arg0: zombie.iso.IsoMovingObject): void;
      setEatingZombies(arg0: java.util.ArrayList<zombie.characters.IsoZombie>): void;
      setFactionPvp(arg0: boolean): void;
      setFallOnFront(arg0: boolean): void;
      setFallTime(arg0: number): void;
      setFarmingCheat(arg0: boolean): void;
      setFeelersize(arg0: number): void;
      setFemale(arg0: boolean): void;
      setFireKillRate(arg0: number): void;
      setFireSpreadProbability(arg0: number): void;
      setFirstUpdate(arg0: boolean): void;
      setFitnessSpeed(): void;
      setFollowDeadCount(arg0: number): void;
      setFollowID(arg0: number): void;
      setFollowingTarget(arg0: zombie.characters.IsoGameCharacter): void;
      setForceAim(arg0: boolean): void;
      setForceOverrideAnim(arg0: boolean): void;
      setForceRun(arg0: boolean): void;
      setForceShove(arg0: boolean): void;
      setForceSprint(arg0: boolean): void;
      setForceWakeUpTime(arg0: number): void;
      setForname(arg0: string): void;
      setForwardDirection(arg0: zombie.iso.Vector2): void;
      setGhostMode(arg0: boolean): void;
      setGodMod(arg0: boolean): void;
      setHaloNote(arg0: string, arg1: number): void;
      setHealth(arg0: number): void;
      setHealthCheat(arg0: boolean): void;
      setHeartDelay(arg0: number): void;
      setHeartDelayMax(arg0: number): void;
      setHideWeaponModel(arg0: boolean): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setHitDir(arg0: zombie.iso.Vector2): void;
      setHitForce(arg0: number): void;
      setHitFromAngle(arg0: number): void;
      setHitFromBehind(arg0: boolean): void;
      setHitReaction(arg0: string): void;
      setHoursSurvived(arg0: number): void;
      setHurtSound(arg0: string): void;
      setID(arg0: number): void;
      setIDCount(arg0: number): void;
      setIgnoreAimingInput(arg0: boolean): void;
      setIgnoreAutoVault(arg0: boolean): void;
      setIgnoreContextKey(arg0: boolean): void;
      setIgnoreInputsForDirection(arg0: boolean): void;
      setIgnoreMovement(arg0: boolean): void;
      setIgnoreStaggerBack(arg0: boolean): void;
      setImpulsex(arg0: number): void;
      setImpulsey(arg0: number): void;
      setInitiateAttack(arg0: boolean): void;
      setInstance(arg0: zombie.characters.IsoPlayer): void;
      setInventory(arg0: zombie.inventory.ItemContainer): void;
      setInvincible(arg0: boolean): void;
      setInvisible(arg0: boolean): void;
      setIsAiming(arg0: boolean): void;
      setIsNPC(arg0: boolean): void;
      setJoypadIgnoreAimUntilCentered(arg0: boolean): void;
      setJustMoved(arg0: boolean): void;
      setKeyId(arg0: number): void;
      setKnockedDown(arg0: boolean): void;
      setLast(arg0: zombie.iso.IsoGridSquare): void;
      setLastAngle(arg0: zombie.iso.Vector2): void;
      setLastBump(arg0: number): void;
      setLastChatMessage(arg0: zombie.chat.ChatMessage): void;
      setLastCollideTime(arg0: number): void;
      setLastCollidedN(arg0: boolean): void;
      setLastCollidedW(arg0: boolean): void;
      setLastFallSpeed(arg0: number): void;
      setLastHeardSound(arg0: number, arg1: number, arg2: number): void;
      setLastHitCount(arg0: number): void;
      setLastHourSleeped(arg0: number): void;
      setLastLocalEnemies(arg0: number): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setLastSpokenLine(arg0: string): void;
      setLastSpotted(arg0: java.util.Stack<zombie.iso.IsoMovingObject>): void;
      setLastTargettedBy(arg0: zombie.characters.IsoZombie): void;
      setLastZombieKills(arg0: number): void;
      setLeaveBodyTimedown(arg0: number): void;
      setLegsSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setLevelUpMultiplier(arg0: number): void;
      setLimpulsex(arg0: number): void;
      setLimpulsey(arg0: number): void;
      setLlx(arg0: number): void;
      setLly(arg0: number): void;
      setLlz(arg0: number): void;
      setLocalPlayer(arg0: number, arg1: zombie.characters.IsoPlayer): void;
      setLrx(arg0: number): void;
      setLry(arg0: number): void;
      setLx(arg0: number): void;
      setLy(arg0: number): void;
      setLz(arg0: number): void;
      setMaxTwist(arg0: number): void;
      setMaxWeight(arg0: number): void;
      setMaxWeightBase(arg0: number): void;
      setMaxWeightDelta(arg0: number): void;
      setMechanicsCheat(arg0: boolean): void;
      setMeleeDelay(arg0: number): void;
      setMeleeHitSurface(arg0: string): void;
      setMetabolicTarget(arg0: zombie.characters.BodyDamage.Metabolics): void;
      setMomentumScalar(arg0: number): void;
      setMoodleCantSprint(arg0: boolean): void;
      setMovablesCheat(arg0: boolean): void;
      setMoveDelta(arg0: number): void;
      setMoveForwardVec(arg0: zombie.iso.Vector2): void;
      setMoveSpeed(arg0: number): void;
      setMovedThumpable(arg0: boolean): void;
      setMovementLastFrame(arg0: zombie.iso.Vector2): void;
      setMoving(arg0: boolean): void;
      setMovingSquareNow(): void;
      setNPC(arg0: boolean): void;
      setName(arg0: string): void;
      setNetworkTeleportEnabled(arg0: boolean): void;
      setNextWander(arg0: number): void;
      setNoClip(arg0: boolean): void;
      setNoDamage(arg0: boolean): void;
      setNoPicking(arg0: boolean): void;
      setNumSurvivorsInVicinity(arg0: number): void;
      setNx(arg0: number): void;
      setNy(arg0: number): void;
      setOffSetXUI(arg0: number): void;
      setOffSetYUI(arg0: number): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOnDeathDone(arg0: boolean): void;
      setOnFire(arg0: boolean): void;
      setOnFloor(arg0: boolean): void;
      setOnKillDone(arg0: boolean): void;
      setOnlineID(arg0: number): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPainDelta(arg0: number): void;
      setPainEffect(arg0: number): void;
      setPath2(arg0: zombie.vehicles.PolygonalMap2$Path): void;
      setPathFindIndex(arg0: number): void;
      setPathIndex(arg0: number): void;
      setPathfindRunning(arg0: boolean): void;
      setPathing(arg0: boolean): void;
      setPatience(arg0: number): void;
      setPatienceMax(arg0: number): void;
      setPatienceMin(arg0: number): void;
      setPerformingAnAction(arg0: boolean): void;
      setPerkLevelDebug(arg0: zombie.characters.skills.PerkFactory$Perk, arg1: number): void;
      setPersistentOutfitID(arg0: number, arg1: boolean): void;
      setPing(arg0: number): void;
      setPipedFuelAmount(arg0: number): void;
      setPlayerMoveDir(arg0: zombie.iso.Vector2): void;
      setPlayerStats(arg0: java.nio.ByteBuffer, arg1: string): string;
      setPlayingDeathSound(arg0: boolean): void;
      setPosition(arg0: number, arg1: number, arg2: number): void;
      setPrimaryHandItem(arg0: zombie.inventory.InventoryItem): void;
      setRangedWeaponEmpty(arg0: boolean): void;
      setReading(arg0: boolean): void;
      setReanim(arg0: boolean): void;
      setReanimAnimDelay(arg0: number): void;
      setReanimAnimFrame(arg0: number): void;
      setReanimateTimer(arg0: number): void;
      setRecoilDelay(arg0: number): void;
      setReduceInfectionPower(arg0: number): void;
      setRemoteID(arg0: number): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setRunning(arg0: boolean): void;
      setSafety(arg0: boolean): void;
      setSafetyCooldown(arg0: number): void;
      setSayLine(arg0: string): void;
      setSceneCulled(arg0: boolean): void;
      setScriptModule(arg0: string): void;
      setScriptnx(arg0: number): void;
      setScriptny(arg0: number): void;
      setSecondaryHandItem(arg0: zombie.inventory.InventoryItem): void;
      setSeeNonPvpZone(arg0: boolean): void;
      setShootable(arg0: boolean): void;
      setShowAdminTag(arg0: boolean): void;
      setShowMPInfos(arg0: boolean): void;
      setShowTag(arg0: boolean): void;
      setSitOnGround(arg0: boolean): void;
      setSleepingPillsTaken(arg0: number): void;
      setSleepingTabletDelta(arg0: number): void;
      setSleepingTabletEffect(arg0: number): void;
      setSlowFactor(arg0: number): void;
      setSlowTimer(arg0: number): void;
      setSneaking(arg0: boolean): void;
      setSolid(arg0: boolean): void;
      setSpeakColour(arg0: zombie.core.Color): void;
      setSpeakColourInfo(arg0: zombie.core.textures.ColorInfo): void;
      setSpeakTime(arg0: number): void;
      setSpeaking(arg0: boolean): void;
      setSpecialTooltip(arg0: boolean): void;
      setSpeedMod(arg0: number): void;
      setSprinting(arg0: boolean): void;
      setSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setStaggerTimeMod(arg0: number): void;
      setStateEventDelayTimer(arg0: number): void;
      setStateMachineLocked(arg0: boolean): void;
      setSteamID(arg0: number): void;
      setSuperAttack(arg0: boolean): void;
      setSurname(arg0: string): void;
      setSurvivorKills(arg0: number): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTagColor(arg0: zombie.core.textures.ColorInfo): void;
      setTagPrefix(arg0: string): void;
      setTaintedWater(arg0: boolean): void;
      setTargetAlpha(arg0: number): void;
      setTeleport(arg0: zombie.characters.NetworkTeleport): void;
      setTemperature(arg0: number): void;
      setTextureCreator(arg0: zombie.core.skinnedmodel.model.ModelInstanceTextureCreator): void;
      setThumpTarget(arg0: zombie.iso.objects.interfaces.Thumpable): void;
      setTicksSinceSeenZombie(arg0: number): void;
      setTimeOfSleep(arg0: number): void;
      setTimeSinceLastSmoke(arg0: number): void;
      setTimeSinceLastStab(arg0: number): void;
      setTimeSinceZombieAttack(arg0: number): void;
      setTimeThumping(arg0: number): void;
      setTimedActionInstantCheat(arg0: boolean): void;
      setTransactionID(arg0: number): void;
      setTurnDelta(arg0: number): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUnlimitedCarry(arg0: boolean): void;
      setUnlimitedEndurance(arg0: boolean): void;
      setUseHandWeapon(arg0: zombie.inventory.types.HandWeapon): void;
      setUsername(arg0: string): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setVariable(arg0: string, arg1: boolean): void;
      setVehicle(arg0: zombie.vehicles.BaseVehicle): void;
      setVehicle4TestCollision(arg0: zombie.vehicles.BaseVehicle): void;
      setVehicleHitLocation(arg0: zombie.vehicles.BaseVehicle): void;
      setVisibleToNPCs(arg0: boolean): void;
      setWaiting(arg0: boolean): void;
      setWaterAmount(arg0: number): void;
      setWearingNightVisionGoggles(arg0: boolean): void;
      setWeight(arg0: number): void;
      setWidth(arg0: number): void;
      setWornItem(arg0: string, arg1: zombie.inventory.InventoryItem): void;
      setWornItems(arg0: zombie.characters.WornItems.WornItems): void;
      setX(arg0: number): void;
      setXp(arg0: zombie.characters.IsoGameCharacter$XP): void;
      setY(arg0: number): void;
      setZ(arg0: number): void;
      setZombieKills(arg0: number): void;
      setZombiesDontAttack(arg0: boolean): void;
      setbAltCollide(arg0: boolean): void;
      setbChangeCharacterDebounce(arg0: boolean): void;
      setbClimbing(arg0: boolean): void;
      setbCouldBeSeenThisFrame(arg0: boolean): void;
      setbDoDefer(arg0: boolean): void;
      setbFalling(arg0: boolean): void;
      setbOnBed(arg0: boolean): void;
      setbSeenThisFrame(arg0: boolean): void;
      setbUseParts(arg0: boolean): void;
      shouldBeTurning(): boolean;
      shouldBeTurning90(): boolean;
      shouldBeTurningAround(): boolean;
      shouldBecomeCorpse(): boolean;
      shouldBecomeZombieAfterDeath(): boolean;
      shouldDoInventory(): boolean;
      shouldWaitToStartTimedAction(): boolean;
      smashCarWindow(arg0: zombie.vehicles.VehiclePart): void;
      smashWindow(arg0: zombie.iso.objects.IsoWindow): void;
      softReset(): void;
      splatBlood(arg0: number, arg1: number): void;
      splatBloodFloor(): void;
      splatBloodFloorBig(): void;
      spotted(arg0: zombie.iso.IsoMovingObject, arg1: boolean): void;
      startEvent(arg0: number, arg1: zombie.audio.GameSoundClip, arg2: java.util.BitSet): void;
      startMuzzleFlash(): void;
      startPlaybackGameVariables(): zombie.core.skinnedmodel.advancedanimation.AnimationVariableSource;
      startReceivingBodyDamageUpdates(arg0: zombie.characters.IsoPlayer): void;
      stopEvent(arg0: number, arg1: zombie.audio.GameSoundClip, arg2: java.util.BitSet): void;
      stopOrTriggerSound(arg0: number): void;
      stopReceivingBodyDamageUpdates(arg0: zombie.characters.IsoPlayer): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection, arg3: java.nio.ByteBuffer): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      testDefense(arg0: zombie.characters.IsoZombie): boolean;
      testDotSide(arg0: zombie.iso.IsoMovingObject): string;
      toString(): string;
      toggleForceAim(): boolean;
      toggleForceRun(): boolean;
      toggleForceSprint(): boolean;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitModData(): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      unsetOutlineHighlight(): void;
      update(): void;
      updateEmitter(): void;
      updateEquippedRadioFreq(): void;
      updateEvent(arg0: number, arg1: zombie.audio.GameSoundClip): void;
      updateLOS(): void;
      updateLightInfo(): void;
      updateMovementRates(): void;
      updateRecoilVar(): void;
      updateSpeedModifiers(): void;
      updateTextObjects(): void;
      updateUsername(): void;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      writeInventory(arg0: java.nio.ByteBuffer): void;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
      zeroForwardDirectionX(): void;
      zeroForwardDirectionY(): void;
      zombiesSwitchOwnershipEachUpdate(): boolean;
    }
    // zombie.characters.IsoSurvivor extends zombie.characters.IsoLivingCharacter
    export class IsoSurvivor {
      private constructor();
      Asleep: boolean;
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      Draggable: boolean;
      readonly IsVisibleToPlayer?: boolean[];
      static LowLightingQualityHack: boolean;
      static readonly MAX_WALL_SPLATS: number;
      static readonly MAX_ZOMBIES_EATING: number;
      NoGoreDeath: boolean;
      NoPicking: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OutlineOnMouseover: boolean;
      static readonly RENDER_OFFSET_X: number;
      static readonly RENDER_OFFSET_Y: number;
      ReanimatedCorpse?: zombie.characters.IsoGameCharacter;
      ReanimatedCorpseID: number;
      readonly StateMachineParams?: java.util.HashMap<zombie.ai.State, java.util.HashMap<any, any>>;
      readonly Traits?: zombie.characters.IsoGameCharacter$CharacterTraits;
      readonly actionContext?: zombie.characters.action.ActionContext;
      readonly advancedAnimator?: zombie.core.skinnedmodel.advancedanimation.AdvancedAnimator;
      readonly amputations?: java.util.ArrayList<string>;
      readonly attackVars?: zombie.network.packets.hit.AttackVars;
      bAlphaForced: boolean;
      bCollidedWithPushable: boolean;
      bDoShove: boolean;
      bNeverDoneAlpha: boolean;
      readonly bOutline?: boolean[];
      bUpdateEquippedTextures: boolean;
      bagsWorn?: java.util.ArrayList<zombie.inventory.types.InventoryContainer>;
      readonly bareHands?: zombie.inventory.types.HandWeapon;
      beard?: zombie.core.skinnedmodel.model.ModelInstance;
      blockTurning: boolean;
      static bmod: number;
      bumpNbr: number;
      callOut: boolean;
      clientIgnoreCollision: number;
      collidePushable?: zombie.iso.IsoPushableObject;
      container?: zombie.inventory.ItemContainer;
      def?: zombie.iso.sprite.IsoSpriteInstance;
      dir?: zombie.iso.IsoDirections;
      doDirtBloodEtc: boolean;
      doNotSync: boolean;
      doRenderShadow: boolean;
      emitter?: zombie.audio.BaseSoundEmitter;
      following?: zombie.characters.IsoGameCharacter;
      forceNullOverride: boolean;
      static gmod: number;
      hair?: zombie.core.skinnedmodel.model.ModelInstance;
      highlightFlags: number;
      readonly hitList?: java.util.ArrayList<zombie.network.packets.hit.HitInfo>;
      invRadioFreq?: java.util.ArrayList<number>;
      keyId: number;
      knockbackAttackMod: number;
      last?: zombie.iso.IsoGridSquare;
      lastAutomaticShoot: number;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      legsSprite?: zombie.iso.sprite.IsoSprite;
      lx: number;
      ly: number;
      lz: number;
      name?: string;
      readonly networkCharacter?: zombie.characters.NetworkCharacter;
      nightsSurvived: number;
      noDamage: boolean;
      nx: number;
      ny: number;
      offsetX: number;
      offsetY: number;
      readonly outlineColor?: zombie.core.textures.ColorInfo[];
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      overridePrimaryHandModel?: string;
      overrideSecondaryHandModel?: string;
      partialThumpDmg: number;
      ping: number;
      primaryHandModel?: zombie.core.skinnedmodel.model.ModelInstance;
      realState?: zombie.network.NetworkVariables$ZombieState;
      realdir?: zombie.iso.IsoDirections;
      realx: number;
      realy: number;
      realz: number;
      removedFromWorldMS: number;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      static readonly s_maxPossibleTwist: number;
      savedVehicleRunning: boolean;
      savedVehicleSeat: number;
      savedVehicleX: number;
      savedVehicleY: number;
      secondaryHandModel?: zombie.core.skinnedmodel.model.ModelInstance;
      sheetRope: boolean;
      sheetRopeHealth: number;
      shootInARow: number;
      speedMod: number;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      square?: zombie.iso.IsoGridSquare;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      targetOnGround?: zombie.characters.IsoGameCharacter;
      tintb: number;
      tintg: number;
      tintr: number;
      static treeSoundMgr?: zombie.iso.IsoMovingObject$TreeSoundManager;
      upKillCount: boolean;
      useChargeDelta: number;
      vocalEvent: number;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
      x: number;
      y: number;
      z: number;
  
      Anger(arg0: number): void;
      ApplyInBedOffset(arg0: boolean): void;
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      AttemptAttack(arg0: number): boolean;
      BetaAntiDepress(arg0: number): void;
      BetaBlockers(arg0: number): void;
      CacheEquipped(): void;
      Callout(): void;
      CanAttack(): boolean;
      CanSee(arg0: zombie.iso.IsoMovingObject): boolean;
      ClearEquippedCache(): void;
      ClearVariable(arg0: string): void;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number): void;
      Despawn(): void;
      DirectionFromVector(arg0: zombie.iso.Vector2): void;
      DirtySlice(): void;
      DistTo(arg0: number, arg1: number): number;
      DistToProper(arg0: zombie.iso.IsoObject): number;
      DistToSquared(arg0: zombie.iso.IsoMovingObject): number;
      DoAttack(arg0: number): boolean;
      DoCollideNorS(): void;
      DoCollideWorE(): void;
      DoDeath(arg0: zombie.inventory.types.HandWeapon, arg1: zombie.characters.IsoGameCharacter): void;
      DoFloorSplat(arg0: zombie.iso.IsoGridSquare, arg1: string, arg2: boolean, arg3: number, arg4: number): void;
      DoFootstepSound(arg0: number): void;
      DoSneezeText(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoSwingCollisionBoneCheck(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number): boolean;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      DrawSneezeText(): void;
      Dressup(arg0: zombie.characters.SurvivorDesc): void;
      Eat(arg0: zombie.inventory.InventoryItem, arg1: number): boolean;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      FireCheck(): void;
      GetAnimSetName(): string;
      GetPrimaryEquippedCache(): zombie.inventory.InventoryItem;
      GetSecondaryEquippedCache(): zombie.inventory.InventoryItem;
      GetVariable(arg0: string): string;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasItem(arg0: string): boolean;
      HasTooltip(): boolean;
      HasTrait(arg0: string): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      HitSilence(arg0: zombie.inventory.types.HandWeapon, arg1: zombie.characters.IsoGameCharacter, arg2: boolean, arg3: number): void;
      InitSpriteParts(arg0: zombie.characters.SurvivorDesc): void;
      IsAttackRange(arg0: number, arg1: number, arg2: number): boolean;
      IsSpeaking(): boolean;
      Kill(arg0: zombie.characters.IsoGameCharacter): void;
      LevelPerk(arg0: zombie.characters.skills.PerkFactory$Perk, arg1: boolean): void;
      LoseLevel(arg0: zombie.characters.skills.PerkFactory$Perk): void;
      Move(arg0: zombie.iso.Vector2): void;
      MoveForward(arg0: number, arg1: number, arg2: number, arg3: number): void;
      MoveUnmodded(arg0: zombie.iso.Vector2): void;
      NPCGetAiming(): boolean;
      NPCGetRunning(): boolean;
      NPCSetAiming(arg0: boolean): void;
      NPCSetAttack(arg0: boolean): void;
      NPCSetJustMoved(arg0: boolean): void;
      NPCSetMelee(arg0: boolean): void;
      NPCSetRunning(arg0: boolean): void;
      OnAnimEvent(arg0: zombie.core.skinnedmodel.advancedanimation.AnimLayer, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      OnDeath(): void;
      PainMeds(arg0: number): void;
      PlayAnim(arg0: string): void;
      PlayAnimUnlooped(arg0: string): void;
      PlayAnimWithSpeed(arg0: string, arg1: number): void;
      QueueAction(arg0: zombie.characters.CharacterTimedActions.BaseAction): void;
      ReadLiterature(arg0: zombie.inventory.types.Literature): void;
      ReduceHealthWhenBurning(): void;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      Say(arg0: string): void;
      SayDebug(arg0: number, arg1: string): void;
      SayRadio(arg0: string, arg1: number, arg2: number, arg3: number, arg4: zombie.ui.UIFont, arg5: number, arg6: number, arg7: string): void;
      SayShout(arg0: string): void;
      SayWhisper(arg0: string): void;
      Seen(arg0: java.util.Stack<zombie.iso.IsoMovingObject>): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      SetOnFire(): void;
      SetVariable(arg0: string, arg1: string): void;
      SleepingTablet(arg0: number): void;
      SpreadFire(): void;
      SpreadFireMP(): void;
      StartAction(arg0: zombie.characters.CharacterTimedActions.BaseAction): void;
      StartTimedActionAnim(arg0: string, arg1: string): void;
      StopAllActionQueue(): void;
      StopAllActionQueueAiming(): void;
      StopAllActionQueueRunning(): void;
      StopAllActionQueueWalking(): void;
      StopBurning(): void;
      StopTimedActionAnim(): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      Throw(arg0: zombie.inventory.types.HandWeapon): void;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      actionStateChanged(arg0: zombie.characters.action.ActionContext): void;
      addBasicPatch(arg0: zombie.characterTextures.BloodBodyPartType): void;
      addBlood(arg0: zombie.characterTextures.BloodBodyPartType, arg1: boolean, arg2: boolean, arg3: boolean): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addDirt(arg0: zombie.characterTextures.BloodBodyPartType, arg1: number, arg2: boolean): void;
      addHole(arg0: zombie.characterTextures.BloodBodyPartType): boolean;
      addHoleFromZombieAttacks(arg0: zombie.characterTextures.BloodBodyPartType, arg1: boolean): boolean;
      addLineChatElement(arg0: string): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      addToWorld(): void;
      addVisualDamage(arg0: string): void;
      addWorldSoundUnlessInvisible(arg0: number, arg1: number, arg2: boolean): void;
      applyTraits(arg0: java.util.ArrayList<string>): void;
      attackFromWindowsLunge(arg0: zombie.characters.IsoZombie): void;
      autoDrink(): void;
      avoidDamage(): boolean;
      becomeCorpse(): void;
      calcHitDir(arg0: zombie.iso.Vector2): void;
      calculateBaseSpeed(): number;
      canAddSheetRope(): boolean;
      canClimbDownSheetRope(arg0: zombie.iso.IsoGridSquare): boolean;
      canClimbDownSheetRopeInCurrentSquare(): boolean;
      canClimbSheetRope(arg0: zombie.iso.IsoGridSquare): boolean;
      canHaveMultipleHits(): number;
      canSprint(): boolean;
      changeState(arg0: zombie.ai.State): void;
      checkHaveElectricity(): void;
      checkIsNearWall(): number;
      cleanWallBlood(): void;
      clearAttachedAnimSprite(): void;
      clearAttachedItems(): void;
      clearVariable(arg0: string): void;
      clearVariables(): void;
      clearWornItems(): void;
      climbDownSheetRope(): void;
      climbOverFence(arg0: zombie.iso.IsoDirections): void;
      climbSheetRope(): void;
      climbThroughWindow(arg0: zombie.iso.objects.IsoThumpable, arg1: number): void;
      climbThroughWindowFrame(arg0: zombie.iso.IsoObject): void;
      closeWindow(arg0: zombie.iso.objects.IsoWindow): void;
      clothingItemChanged(arg0: string): void;
      collideWith(arg0: zombie.iso.IsoObject): void;
      compareMovePriority(arg0: zombie.characters.IsoGameCharacter): number;
      compareToY(arg0: zombie.iso.IsoMovingObject): number;
      containsVariable(arg0: string): boolean;
      countAddSheetRope(): number;
      createContainersFromSpriteProperties(): void;
      createKeyRing(): void;
      customHashCode(): number;
      dbgGetAnimTrack(arg0: number, arg1: number): zombie.core.skinnedmodel.animation.AnimationTrack;
      dbgGetAnimTrackName(arg0: number, arg1: number): string;
      dbgGetAnimTrackTime(arg0: number, arg1: number): number;
      dbgGetAnimTrackWeight(arg0: number, arg1: number): number;
      debugPrintout(): void;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      distToNearestCamCharacter(): number;
      doFindExternalWaterSource(): void;
      doHitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.vehicles.BaseVehicle$HitVars): void;
      doStairs(): void;
      drawDirectionLine(arg0: zombie.iso.Vector2, arg1: number, arg2: number, arg3: number, arg4: number): void;
      dressInClothingItem(arg0: string): void;
      dressInNamedOutfit(arg0: string): void;
      dressInPersistentOutfit(arg0: string): void;
      dressInPersistentOutfitID(arg0: number): void;
      dressInRandomOutfit(): void;
      dropHandItems(): void;
      dropHeavyItems(): void;
      endPlaybackGameVariables(arg0: zombie.core.skinnedmodel.advancedanimation.AnimationVariableSource): void;
      ensureOnTile(): void;
      enterVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number, arg2: org.joml.Vector3f): void;
      equals(arg0: any): boolean;
      exert(arg0: number): void;
      faceLocation(arg0: number, arg1: number): void;
      faceLocationF(arg0: number, arg1: number): void;
      facePosition(arg0: number, arg1: number): void;
      faceThisObject(arg0: zombie.iso.IsoObject): void;
      faceThisObjectAlt(arg0: zombie.iso.IsoObject): void;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      fallenOnKnees(): void;
      forceAwake(): void;
      getAbsoluteExcessTwist(): number;
      getActionContext(): zombie.characters.action.ActionContext;
      getActionStateName(): string;
      getActiveLightItems(arg0: java.util.ArrayList<zombie.inventory.InventoryItem>): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getAdvancedAnimator(): zombie.core.skinnedmodel.advancedanimation.AdvancedAnimator;
      getAge(): number;
      getAlpha(arg0: number): number;
      getAlreadyReadPages(arg0: string): number;
      getAnimAngle(): number;
      getAnimAngleRadians(): number;
      getAnimAngleStepDelta(): number;
      getAnimAngleTwistDelta(): number;
      getAnimVector(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getAnimationDebug(): string;
      getAnimationPlayer(): zombie.core.skinnedmodel.animation.AnimationPlayer;
      getAnimationPlayerRecorder(): zombie.core.skinnedmodel.animation.debug.AnimationPlayerRecorder;
      getAnimationStateName(): string;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getAttachedItem(arg0: string): zombie.inventory.InventoryItem;
      getAttachedItems(): zombie.characters.AttachedItems.AttachedItems;
      getAttachedLocationGroup(): zombie.characters.AttachedItems.AttachedLocationGroup;
      getAttackTargetSquare(): zombie.iso.IsoGridSquare;
      getAttackedBy(): zombie.characters.IsoGameCharacter;
      getAutoWalkDirection(): zombie.iso.Vector2;
      getBarricadeStrengthMod(): number;
      getBarricadeTimeMod(): number;
      getBed(): zombie.iso.IsoObject;
      getBedType(): string;
      getBeenMovingFor(): number;
      getBeenSprintingFor(): number;
      getBetaDelta(): number;
      getBetaEffect(): number;
      getBloodImpactX(): number;
      getBloodImpactY(): number;
      getBloodImpactZ(): number;
      getBloodSplat(): zombie.iso.sprite.IsoSprite;
      getBodyDamage(): zombie.characters.BodyDamage.BodyDamage;
      getBodyDamageRemote(): zombie.characters.BodyDamage.BodyDamage;
      getBodyLocationGroup(): zombie.characters.WornItems.BodyLocationGroup;
      getBodyPartClothingDefense(arg0: number, arg1: boolean, arg2: boolean): number;
      getBrain(): zombie.ai.GameCharacterAIBrain;
      getBuilding(): zombie.iso.areas.IsoBuilding;
      getBumpFallType(): string;
      getBumpType(): string;
      getBumpedChr(): zombie.characters.IsoGameCharacter;
      getBumpedType(arg0: zombie.characters.IsoGameCharacter): string;
      getCell(): zombie.iso.IsoCell;
      getCharacterActions(): java.util.Stack<zombie.characters.CharacterTimedActions.BaseAction>;
      getCharacterTraits(): zombie.characters.IsoGameCharacter$CharacterTraits;
      getChatElement(): zombie.chat.ChatElement;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getChopTreeSpeed(): number;
      getClass(): java.lang.Class<any>;
      getClickSound(): string;
      getClothingItem_Back(): zombie.inventory.InventoryItem;
      getClothingItem_Feet(): zombie.inventory.InventoryItem;
      getClothingItem_Hands(): zombie.inventory.InventoryItem;
      getClothingItem_Head(): zombie.inventory.InventoryItem;
      getClothingItem_Legs(): zombie.inventory.InventoryItem;
      getClothingItem_Torso(): zombie.inventory.InventoryItem;
      getClothingWetness(): zombie.characters.ClothingWetness;
      getCollideType(): string;
      getCollidedObject(): zombie.iso.IsoObject;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getCurrentActionContextStateName(): string;
      getCurrentBuilding(): zombie.iso.areas.IsoBuilding;
      getCurrentBuildingDef(): zombie.iso.BuildingDef;
      getCurrentRoomDef(): zombie.iso.RoomDef;
      getCurrentSquare(): zombie.iso.IsoGridSquare;
      getCurrentState(): zombie.ai.State;
      getCurrentStateName(): string;
      getCurrentZone(): zombie.iso.IsoMetaGrid$Zone;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getDamage(): number;
      getDangerLevels(): number;
      getDebugMonitor(): zombie.core.skinnedmodel.advancedanimation.debug.AnimatorDebugMonitor;
      getDefaultState(): zombie.ai.State;
      getDeferredAngleDelta(): number;
      getDeferredMovement(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getDeferredRotationWeight(): number;
      getDepressDelta(): number;
      getDepressEffect(): number;
      getDescriptor(): zombie.characters.SurvivorDesc;
      getDieCount(): number;
      getDir(): zombie.iso.IsoDirections;
      getDirectionAngle(): number;
      getDistanceSq(arg0: zombie.iso.IsoMovingObject): number;
      getDotWithForwardDirection(arg0: number, arg1: number): number;
      getEatingZombies(): java.util.ArrayList<zombie.characters.IsoZombie>;
      getEmitter(): zombie.characters.BaseCharacterSoundEmitter;
      getEnemyList(): java.util.Stack<zombie.characters.IsoGameCharacter>;
      getEquipedRadio(): zombie.inventory.types.Radio;
      getExcessTwist(): number;
      getFMODParameters(): zombie.audio.FMODParameterList;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getFallTime(): number;
      getFamiliarBuildings(): java.util.Stack<zombie.iso.areas.IsoBuilding>;
      getFatigueMod(): number;
      getFatiqueMultiplier(): number;
      getFeelerTile(arg0: number): zombie.iso.IsoGridSquare;
      getFeelersize(): number;
      getFinder(): zombie.ai.astar.AStarPathFinderResult;
      getFireKillRate(): number;
      getFireSpreadProbability(): number;
      getFollowingTarget(): zombie.characters.IsoGameCharacter;
      getForceWakeUpTime(): number;
      getForwardDirection(): zombie.iso.Vector2;
      getFullName(): string;
      getFuturWalkedSquare(): zombie.iso.IsoGridSquare;
      getGameCharacterAIBrain(): zombie.ai.GameCharacterAIBrain;
      getGameVariables(): java.lang.Iterable<zombie.core.skinnedmodel.advancedanimation.IAnimationVariableSlot>;
      getGlobalMovementMod(): number;
      getHaloTimerCount(): number;
      getHammerSoundMod(): number;
      getHealth(): number;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getHitChancesMod(): number;
      getHitDir(): zombie.iso.Vector2;
      getHitForce(): number;
      getHitFromAngle(): number;
      getHitReaction(): string;
      getHitReactionNetworkAI(): zombie.characters.HitReactionNetworkAI;
      getHittingMod(): number;
      getHoursSurvived(): number;
      getHungerMultiplier(): number;
      getHurtSound(): string;
      getHyperthermiaMod(): number;
      getID(): number;
      getIDCount(): number;
      getIgnoreMovement(): boolean;
      getImpulsex(): number;
      getImpulsey(): number;
      getInf(): zombie.core.textures.ColorInfo;
      getInventory(): zombie.inventory.ItemContainer;
      getInventoryWeight(): number;
      getIsNPC(): boolean;
      getIsSurfaceNormalOffset(): boolean;
      getItemContainer(): zombie.inventory.ItemContainer;
      getItemVisuals(): zombie.core.skinnedmodel.visual.ItemVisuals;
      getKeyId(): number;
      getKnownRecipes(): java.util.List<string>;
      getLastBump(): number;
      getLastChatMessage(): zombie.chat.ChatMessage;
      getLastCollideTime(): number;
      getLastFallSpeed(): number;
      getLastHeardSound(): zombie.characters.IsoGameCharacter$Location;
      getLastHitCount(): number;
      getLastHourSleeped(): number;
      getLastKnownLocation(): java.util.HashMap<string, zombie.characters.IsoGameCharacter$Location>;
      getLastKnownLocationOf(arg0: string): zombie.characters.IsoGameCharacter$Location;
      getLastLocalEnemies(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getLastSpokenLine(): string;
      getLastSquare(): zombie.iso.IsoGridSquare;
      getLastTargettedBy(): zombie.characters.IsoZombie;
      getLastZombieKills(): number;
      getLeaveBodyTimedown(): number;
      getLegsSprite(): zombie.iso.sprite.IsoSprite;
      getLevelMaxForXp(): number;
      getLevelUpLevels(): number[];
      getLevelUpMultiplier(): number;
      getLightInfo2(): zombie.characters.IsoGameCharacter$LightInfo;
      getLightfootMod(): number;
      getLimpulsex(): number;
      getLimpulsey(): number;
      getLlx(): number;
      getLly(): number;
      getLlz(): number;
      getLocalEnemyList(): java.util.Stack<zombie.characters.IsoGameCharacter>;
      getLocalGroupList(): java.util.ArrayList<zombie.iso.IsoMovingObject>;
      getLocalList(): java.util.ArrayList<zombie.iso.IsoMovingObject>;
      getLocalNeutralList(): java.util.ArrayList<zombie.iso.IsoMovingObject>;
      getLocalRelevantEnemyList(): java.util.ArrayList<zombie.iso.IsoMovingObject>;
      getLookAngleRadians(): number;
      getLookVector(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getLowDangerInVicinity(arg0: number, arg1: number): zombie.iso.IsoGridSquare;
      getLrx(): number;
      getLry(): number;
      getLx(): number;
      getLy(): number;
      getLz(): number;
      getMaintenanceMod(): number;
      getMapKnowledge(): zombie.ai.MapKnowledge;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getMasterRegion(): zombie.iso.areas.isoregion.regions.IWorldRegion;
      getMaxChatLines(): number;
      getMaxTwist(): number;
      getMaxWeight(): number;
      getMaxWeightBase(): number;
      getMeleeCombatMod(): number;
      getMeleeDelay(): number;
      getMetalBarricadeStrengthMod(): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getModel(): zombie.core.skinnedmodel.model.ModelInstance;
      getModelInstance(): zombie.core.skinnedmodel.model.ModelInstance;
      getMomentumScalar(): number;
      getMoodles(): zombie.characters.Moodles.Moodles;
      getMoveDelta(): number;
      getMoveForwardVec(): zombie.iso.Vector2;
      getMoveSpeed(): number;
      getMovementLastFrame(): zombie.iso.Vector2;
      getMovingObjectIndex(): number;
      getName(): string;
      getNearVehicle(): zombie.vehicles.BaseVehicle;
      getNetworkCharacterAI(): zombie.characters.NetworkCharacterAI;
      getNew(): zombie.iso.IsoObject;
      getNextWander(): number;
      getNimbleMod(): number;
      getNoDamage(): boolean;
      getNumSurvivorsInVicinity(): number;
      getNx(): number;
      getNy(): number;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffsetX(): number;
      getOffsetY(): number;
      getOnlineID(): number;
      getOrCreateSleepingEventData(): zombie.ai.sadisticAIDirector.SleepingEventData;
      getOrCreateVariable(arg0: string): zombie.core.skinnedmodel.advancedanimation.IAnimationVariableSlot;
      getOutfitName(): string;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPacingMod(): number;
      getPainDelta(): number;
      getPainEffect(): number;
      getPath2(): zombie.vehicles.PolygonalMap2$Path;
      getPathFindBehavior2(): zombie.vehicles.PathFindBehavior2;
      getPathFindIndex(): number;
      getPathIndex(): number;
      getPathTargetX(): number;
      getPathTargetY(): number;
      getPathTargetZ(): number;
      getPatience(): number;
      getPatienceMax(): number;
      getPatienceMin(): number;
      getPerkInfo(arg0: zombie.characters.skills.PerkFactory$Perk): zombie.characters.IsoGameCharacter$PerkInfo;
      getPerkLevel(arg0: zombie.characters.skills.PerkFactory$Perk): number;
      getPerkList(): java.util.ArrayList<zombie.characters.IsoGameCharacter$PerkInfo>;
      getPersistentOutfitID(): number;
      getPipedFuelAmount(): number;
      getPosition(arg0: zombie.iso.Vector3): zombie.iso.Vector3;
      getPreviousActionContextStateName(): string;
      getPreviousStateName(): string;
      getPrimaryHandItem(): zombie.inventory.InventoryItem;
      getPrimaryHandType(): string;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRandomDefaultOutfit(): zombie.core.skinnedmodel.population.Outfit;
      getReadyModelData(): java.util.ArrayList<zombie.core.skinnedmodel.model.ModelInstance>;
      getReanimAnimDelay(): number;
      getReanimAnimFrame(): number;
      getReanimateTimer(): number;
      getRecoilDelay(): number;
      getRecoveryMod(): number;
      getReduceInfectionPower(): number;
      getRemoteID(): number;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getRunSpeedModifier(): number;
      getSafetyCooldown(): number;
      getSayLine(): string;
      getScreenX(): number;
      getScreenY(): number;
      getScriptModule(): string;
      getScriptName(): string;
      getScriptnx(): number;
      getScriptny(): number;
      getSecondaryHandItem(): zombie.inventory.InventoryItem;
      getSecondaryHandType(): string;
      getShoulderTwist(): number;
      getShovingMod(): number;
      getSleepingTabletDelta(): number;
      getSleepingTabletEffect(): number;
      getSlowFactor(): number;
      getSlowTimer(): number;
      getSneakSpotMod(): number;
      getSpeakColour(): zombie.core.Color;
      getSpeakTime(): number;
      getSpecialObjectIndex(): number;
      getSpeedMod(): number;
      getSprintMod(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteDef(): zombie.iso.sprite.IsoSpriteInstance;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSquare(): zombie.iso.IsoGridSquare;
      getStaggerTimeMod(): number;
      getStateEventDelayTimer(): number;
      getStateMachine(): zombie.ai.StateMachine;
      getStateMachineParams(arg0: zombie.ai.State): java.util.HashMap<any, any>;
      getStaticMovingObjectIndex(): number;
      getStats(): zombie.characters.Stats;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getSurroundingAttackingZombies(): number;
      getSurvivorKills(): number;
      getSurvivorMap(): java.util.HashMap<number, zombie.characters.SurvivorDesc>;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTalkerType(): string;
      getTargetAlpha(arg0: number): number;
      getTargetTwist(): number;
      getTeleport(): zombie.characters.NetworkTeleport;
      getTemperature(): number;
      getTempo(): zombie.iso.Vector2;
      getTextureCreator(): zombie.core.skinnedmodel.model.ModelInstanceTextureCreator;
      getTextureName(): string;
      getThirstMultiplier(): number;
      getThreatLevel(): number;
      getThumpCondition(): number;
      getThumpTarget(): zombie.iso.objects.interfaces.Thumpable;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTile(): string;
      getTimeSinceLastSmoke(): number;
      getTimeSinceZombieAttack(): number;
      getTimeThumping(): number;
      getTimedActionTimeModifier(): number;
      getTorchStrength(): number;
      getTotalBlood(): number;
      getTraits(): zombie.characters.traits.TraitCollection;
      getTurnDelta(): number;
      getTwist(): number;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUID(): string;
      getUseHandWeapon(): zombie.inventory.types.HandWeapon;
      getUsedItemsOn(): java.util.Stack<string>;
      getUserNameHeight(): number;
      getUsesExternalWaterSource(): boolean;
      getVariable(arg0: zombie.core.skinnedmodel.advancedanimation.AnimationVariableHandle): zombie.core.skinnedmodel.advancedanimation.IAnimationVariableSlot;
      getVariableBoolean(arg0: string, arg1: boolean): boolean;
      getVariableFloat(arg0: string, arg1: number): number;
      getVariableString(arg0: string): string;
      getVectorFromDirection(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getVehicle(): zombie.vehicles.BaseVehicle;
      getVeryCloseEnemyList(): java.util.ArrayList<zombie.iso.IsoMovingObject>;
      getVisual(): zombie.core.skinnedmodel.visual.BaseVisual;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWaterSource(arg0: java.util.ArrayList<zombie.inventory.InventoryItem>): zombie.inventory.InventoryItem;
      getWeaponLevel(): number;
      getWeight(): number;
      getWeightMod(): number;
      getWeldingSoundMod(): number;
      getWidth(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWorldObjectIndex(): number;
      getWornItem(arg0: string): zombie.inventory.InventoryItem;
      getWornItems(): zombie.characters.WornItems.WornItems;
      getX(): number;
      getXp(): zombie.characters.IsoGameCharacter$XP;
      getXpForLevel(arg0: number): number;
      getY(): number;
      getZ(): number;
      getZombieKills(): number;
      hasActiveModel(): boolean;
      hasAnimationPlayer(): boolean;
      hasEquipped(arg0: string): boolean;
      hasEquippedTag(arg0: string): boolean;
      hasExternalWaterSource(): boolean;
      hasFootInjury(): boolean;
      hasHitReaction(): boolean;
      hasItems(arg0: string, arg1: number): boolean;
      hasModData(): boolean;
      hasPath(): boolean;
      hasTimedActions(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      helmetFall(arg0: boolean, arg1: string): boolean;
      hitConsequences(arg0: zombie.inventory.types.HandWeapon, arg1: zombie.characters.IsoGameCharacter, arg2: boolean, arg3: number, arg4: boolean): void;
      initAttachedItems(arg0: string): void;
      initLightInfo2(): zombie.characters.IsoGameCharacter$LightInfo;
      initSpritePartsEmpty(): void;
      initWornItems(arg0: string): void;
      isAboveTopOfStairs(): boolean;
      isAimAtFloor(): boolean;
      isAiming(): boolean;
      isAlive(): boolean;
      isAllowConversation(): boolean;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isAnimForecasted(): boolean;
      isAnimationRecorderActive(): boolean;
      isAsleep(): boolean;
      isAttachedItem(arg0: zombie.inventory.InventoryItem): boolean;
      isAttackAnim(): boolean;
      isAttackWasSuperAttack(): boolean;
      isAttacking(): boolean;
      isAutoWalk(): boolean;
      isBehaviourMoving(): boolean;
      isBehind(arg0: zombie.characters.IsoGameCharacter): boolean;
      isBeingSteppedOn(): boolean;
      isBlink(): boolean;
      isBuildCheat(): boolean;
      isBumpDone(): boolean;
      isBumpFall(): boolean;
      isBumpStaggered(): boolean;
      isBumped(): boolean;
      isCanShout(): boolean;
      isCharacter(): boolean;
      isClimbing(): boolean;
      isClimbingThroughWindow(arg0: zombie.iso.objects.IsoWindow): boolean;
      isCloseKilled(): boolean;
      isClosingWindow(arg0: zombie.iso.objects.IsoWindow): boolean;
      isCollidable(): boolean;
      isCollided(): boolean;
      isCollidedE(): boolean;
      isCollidedN(): boolean;
      isCollidedS(): boolean;
      isCollidedThisFrame(): boolean;
      isCollidedW(): boolean;
      isCollidedWithDoor(): boolean;
      isCollidedWithPushableThisFrame(): boolean;
      isCollidedWithVehicle(): boolean;
      isCriticalHit(): boolean;
      isCurrentState(arg0: zombie.ai.State): boolean;
      isDead(): boolean;
      isDeathDragDown(): boolean;
      isDestroyed(): boolean;
      isDoDeathSound(): boolean;
      isDoShove(): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isDriving(): boolean;
      isEatingOther(arg0: zombie.iso.IsoMovingObject): boolean;
      isEquipped(arg0: zombie.inventory.InventoryItem): boolean;
      isEquippedClothing(arg0: zombie.inventory.InventoryItem): boolean;
      isExistInTheWorld(): boolean;
      isFacingLocation(arg0: number, arg1: number, arg2: number): boolean;
      isFacingObject(arg0: zombie.iso.IsoObject, arg1: number): boolean;
      isFallOnFront(): boolean;
      isFarmingCheat(): boolean;
      isFemale(): boolean;
      isFirstUpdate(): boolean;
      isFloor(): boolean;
      isForceShove(): boolean;
      isGodMod(): boolean;
      isHandItem(arg0: zombie.inventory.InventoryItem): boolean;
      isHealthCheat(): boolean;
      isHeavyItem(arg0: zombie.inventory.InventoryItem): boolean;
      isHideWeaponModel(): boolean;
      isHighlighted(): boolean;
      isHitFromBehind(): boolean;
      isHoppable(): boolean;
      isIgnoreMovementForDirection(): boolean;
      isIgnoreStaggerBack(): boolean;
      isInARoom(): boolean;
      isInTrees(): boolean;
      isInTrees2(arg0: boolean): boolean;
      isInTreesNoBush(): boolean;
      isInvincible(): boolean;
      isInvisible(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isItemInBothHands(arg0: zombie.inventory.InventoryItem): boolean;
      isKnockedDown(): boolean;
      isKnownPoison(arg0: zombie.inventory.InventoryItem): boolean;
      isLastCollidedN(): boolean;
      isLastCollidedW(): boolean;
      isLocal(): boolean;
      isMaskClicked(arg0: number, arg1: number): boolean;
      isMechanicsCheat(): boolean;
      isMovablesCheat(): boolean;
      isMovedThumpable(): boolean;
      isMoving(): boolean;
      isMuzzleFlash(): boolean;
      isNPC(): boolean;
      isNoPicking(): boolean;
      isNorthHoppable(): boolean;
      isOnDeathDone(): boolean;
      isOnFire(): boolean;
      isOnFloor(): boolean;
      isOnKillDone(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isOutside(): boolean;
      isPathing(): boolean;
      isPersistentOutfitInit(): boolean;
      isPlayerMoving(): boolean;
      isPlayingDeathSound(): boolean;
      isPrimaryEquipped(arg0: string): boolean;
      isPrimaryHandItem(arg0: zombie.inventory.InventoryItem): boolean;
      isProne(): boolean;
      isPushableForSeparate(): boolean;
      isPushedByForSeparate(arg0: zombie.iso.IsoMovingObject): boolean;
      isRangedWeaponEmpty(): boolean;
      isReading(): boolean;
      isReanim(): boolean;
      isRecipeKnown(arg0: string): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isRunning(): boolean;
      isSafety(): boolean;
      isSceneCulled(): boolean;
      isSeatedInVehicle(): boolean;
      isSecondaryHandItem(arg0: zombie.inventory.InventoryItem): boolean;
      isShootable(): boolean;
      isShowAdminTag(): boolean;
      isSitOnGround(): boolean;
      isSkipResolveCollision(): boolean;
      isSneaking(): boolean;
      isSolid(): boolean;
      isSolidForSeparate(): boolean;
      isSpeaking(): boolean;
      isSprinting(): boolean;
      isSpriteInvisible(): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isStrafing(): boolean;
      isSuperAttack(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isTeleporting(): boolean;
      isTimedActionInstant(): boolean;
      isTimedActionInstantCheat(): boolean;
      isUnderVehicle(): boolean;
      isUnlimitedCarry(): boolean;
      isUnlimitedEndurance(): boolean;
      isUsingWornItems(): boolean;
      isVariable(arg0: string, arg1: string): boolean;
      isVehicleCollisionActive(arg0: zombie.vehicles.BaseVehicle): boolean;
      isVisibleToNPCs(): boolean;
      isZombie(): boolean;
      isZombieAttacking(): boolean;
      isZombiesDontAttack(): boolean;
      isbAltCollide(): boolean;
      isbDoDefer(): boolean;
      isbFalling(): boolean;
      isbOnBed(): boolean;
      isbUseParts(): boolean;
      learnRecipe(arg0: string): boolean;
      level0(arg0: zombie.characters.skills.PerkFactory$Perk): void;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      onCullStateChanged(arg0: zombie.core.skinnedmodel.ModelManager, arg1: boolean): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      onWornItemsChanged(): void;
      openWindow(arg0: zombie.iso.objects.IsoWindow): void;
      pathToCharacter(arg0: zombie.characters.IsoGameCharacter): void;
      pathToLocation(arg0: number, arg1: number, arg2: number): void;
      pathToLocationF(arg0: number, arg1: number, arg2: number): void;
      pathToSound(arg0: number, arg1: number, arg2: number): void;
      playBloodSplatterSound(): void;
      playDeadSound(): void;
      playEmote(arg0: string): void;
      playHurtSound(): void;
      playSound(arg0: string): number;
      playSoundLocal(arg0: string): number;
      playbackRecordCurrentStateSnapshot(): zombie.characters.action.ActionStateSnapshot;
      playbackSetCurrentStateSnapshot(arg0: zombie.characters.action.ActionStateSnapshot): void;
      postUpdateEquippedTextures(): void;
      postUpdateModelTextures(): void;
      postupdate(): void;
      preupdate(): void;
      processHitDamage(arg0: zombie.inventory.types.HandWeapon, arg1: zombie.characters.IsoGameCharacter, arg2: number, arg3: boolean, arg4: number): number;
      readInventory(arg0: java.nio.ByteBuffer): string;
      releaseAnimationPlayer(): void;
      reloadOutfit(): void;
      reloadSpritePart(): void;
      removeAllContainers(): void;
      removeAttachedItem(arg0: zombie.inventory.InventoryItem): void;
      removeFromHands(arg0: zombie.inventory.InventoryItem): boolean;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      removeWornItem(arg0: zombie.inventory.InventoryItem): void;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderServerGUI(): void;
      renderShadow(arg0: number, arg1: number, arg2: number): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reportEvent(arg0: string): void;
      reset(): void;
      resetBeardGrowingTime(): void;
      resetBodyDamageRemote(): void;
      resetEquippedHandsModels(): void;
      resetHairGrowingTime(): void;
      resetModel(): void;
      resetModelNextFrame(): void;
      reuseGridSquare(): void;
      save(arg0: java.nio.ByteBuffer): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      sendStopBurning(): void;
      separate(): void;
      serverRemoveItemFromZombie(arg0: string): void;
      setAge(arg0: number): void;
      setAimAtFloor(arg0: boolean): void;
      setAllowConversation(arg0: boolean): void;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAlreadyReadPages(arg0: string, arg1: number): void;
      setAnimForecasted(arg0: number): void;
      setAnimated(arg0: boolean): void;
      setAsleep(arg0: boolean): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setAttachedItem(arg0: string, arg1: zombie.inventory.InventoryItem): void;
      setAttachedItems(arg0: zombie.characters.AttachedItems.AttachedItems): void;
      setAttackAnim(arg0: boolean): void;
      setAttackTargetSquare(arg0: zombie.iso.IsoGridSquare): void;
      setAttackWasSuperAttack(arg0: boolean): void;
      setAttackedBy(arg0: zombie.characters.IsoGameCharacter): void;
      setAutoWalk(arg0: boolean): void;
      setAutoWalkDirection(arg0: zombie.iso.Vector2): void;
      setAvoidDamage(arg0: boolean): void;
      setBed(arg0: zombie.iso.IsoObject): void;
      setBedType(arg0: string): void;
      setBeenMovingFor(arg0: number): void;
      setBeenSprintingFor(arg0: number): void;
      setBetaDelta(arg0: number): void;
      setBetaEffect(arg0: number): void;
      setBlink(arg0: boolean): void;
      setBloodImpactX(arg0: number): void;
      setBloodImpactY(arg0: number): void;
      setBloodImpactZ(arg0: number): void;
      setBloodSplat(arg0: zombie.iso.sprite.IsoSprite): void;
      setBuildCheat(arg0: boolean): void;
      setBumpDone(arg0: boolean): void;
      setBumpFall(arg0: boolean): void;
      setBumpFallType(arg0: string): void;
      setBumpStaggered(arg0: boolean): void;
      setBumpType(arg0: string): void;
      setBumpedChr(arg0: zombie.characters.IsoGameCharacter): void;
      setCanShout(arg0: boolean): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setClickSound(arg0: string): void;
      setCloseKilled(arg0: boolean): void;
      setClothingItem_Back(arg0: zombie.inventory.InventoryItem): void;
      setClothingItem_Feet(arg0: zombie.inventory.InventoryItem): void;
      setClothingItem_Hands(arg0: zombie.inventory.InventoryItem): void;
      setClothingItem_Head(arg0: zombie.inventory.InventoryItem): void;
      setClothingItem_Legs(arg0: zombie.inventory.InventoryItem): void;
      setClothingItem_Torso(arg0: zombie.inventory.InventoryItem): void;
      setCollidable(arg0: boolean): void;
      setCollideType(arg0: string): void;
      setCollidedE(arg0: boolean): void;
      setCollidedN(arg0: boolean): void;
      setCollidedObject(arg0: zombie.iso.IsoObject): void;
      setCollidedS(arg0: boolean): void;
      setCollidedThisFrame(arg0: boolean): void;
      setCollidedW(arg0: boolean): void;
      setCollidedWithDoor(arg0: boolean): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCriticalHit(arg0: boolean): void;
      setCurrent(arg0: zombie.iso.IsoGridSquare): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setDamage(arg0: number): void;
      setDangerLevels(arg0: number): void;
      setDeathDragDown(arg0: boolean): void;
      setDebugMonitor(arg0: zombie.core.skinnedmodel.advancedanimation.debug.AnimatorDebugMonitor): void;
      setDefaultCondition(arg0: number): void;
      setDefaultState(arg0: zombie.ai.State): void;
      setDelayToSleep(arg0: number): void;
      setDepressDelta(arg0: number): void;
      setDepressEffect(arg0: number): void;
      setDescriptor(arg0: zombie.characters.SurvivorDesc): void;
      setDestroyed(arg0: boolean): void;
      setDieCount(arg0: number): void;
      setDir(arg0: number): void;
      setDirectionAngle(arg0: number): void;
      setDoDeathSound(arg0: boolean): void;
      setDoShove(arg0: boolean): void;
      setEatingZombies(arg0: java.util.ArrayList<zombie.characters.IsoZombie>): void;
      setFallOnFront(arg0: boolean): void;
      setFallTime(arg0: number): void;
      setFarmingCheat(arg0: boolean): void;
      setFeelersize(arg0: number): void;
      setFemale(arg0: boolean): void;
      setFireKillRate(arg0: number): void;
      setFireSpreadProbability(arg0: number): void;
      setFirstUpdate(arg0: boolean): void;
      setFollowingTarget(arg0: zombie.characters.IsoGameCharacter): void;
      setForceShove(arg0: boolean): void;
      setForceWakeUpTime(arg0: number): void;
      setForwardDirection(arg0: zombie.iso.Vector2): void;
      setGodMod(arg0: boolean): void;
      setHaloNote(arg0: string, arg1: number): void;
      setHealth(arg0: number): void;
      setHealthCheat(arg0: boolean): void;
      setHideWeaponModel(arg0: boolean): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setHitDir(arg0: zombie.iso.Vector2): void;
      setHitForce(arg0: number): void;
      setHitFromAngle(arg0: number): void;
      setHitFromBehind(arg0: boolean): void;
      setHitReaction(arg0: string): void;
      setHurtSound(arg0: string): void;
      setID(arg0: number): void;
      setIDCount(arg0: number): void;
      setIgnoreAimingInput(arg0: boolean): void;
      setIgnoreMovement(arg0: boolean): void;
      setIgnoreStaggerBack(arg0: boolean): void;
      setImpulsex(arg0: number): void;
      setImpulsey(arg0: number): void;
      setInventory(arg0: zombie.inventory.ItemContainer): void;
      setInvincible(arg0: boolean): void;
      setInvisible(arg0: boolean): void;
      setIsAiming(arg0: boolean): void;
      setIsNPC(arg0: boolean): void;
      setKeyId(arg0: number): void;
      setKnockedDown(arg0: boolean): void;
      setLast(arg0: zombie.iso.IsoGridSquare): void;
      setLastBump(arg0: number): void;
      setLastChatMessage(arg0: zombie.chat.ChatMessage): void;
      setLastCollideTime(arg0: number): void;
      setLastCollidedN(arg0: boolean): void;
      setLastCollidedW(arg0: boolean): void;
      setLastFallSpeed(arg0: number): void;
      setLastHeardSound(arg0: number, arg1: number, arg2: number): void;
      setLastHitCount(arg0: number): void;
      setLastHourSleeped(arg0: number): void;
      setLastLocalEnemies(arg0: number): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setLastSpokenLine(arg0: string): void;
      setLastTargettedBy(arg0: zombie.characters.IsoZombie): void;
      setLastZombieKills(arg0: number): void;
      setLeaveBodyTimedown(arg0: number): void;
      setLegsSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setLevelUpMultiplier(arg0: number): void;
      setLimpulsex(arg0: number): void;
      setLimpulsey(arg0: number): void;
      setLlx(arg0: number): void;
      setLly(arg0: number): void;
      setLlz(arg0: number): void;
      setLrx(arg0: number): void;
      setLry(arg0: number): void;
      setLx(arg0: number): void;
      setLy(arg0: number): void;
      setLz(arg0: number): void;
      setMaxTwist(arg0: number): void;
      setMaxWeight(arg0: number): void;
      setMaxWeightBase(arg0: number): void;
      setMechanicsCheat(arg0: boolean): void;
      setMeleeDelay(arg0: number): void;
      setMetabolicTarget(arg0: zombie.characters.BodyDamage.Metabolics): void;
      setMomentumScalar(arg0: number): void;
      setMovablesCheat(arg0: boolean): void;
      setMoveDelta(arg0: number): void;
      setMoveForwardVec(arg0: zombie.iso.Vector2): void;
      setMovedThumpable(arg0: boolean): void;
      setMovementLastFrame(arg0: zombie.iso.Vector2): void;
      setMoving(arg0: boolean): void;
      setMovingSquareNow(): void;
      setNPC(arg0: boolean): void;
      setName(arg0: string): void;
      setNextWander(arg0: number): void;
      setNoDamage(arg0: boolean): void;
      setNoPicking(arg0: boolean): void;
      setNumSurvivorsInVicinity(arg0: number): void;
      setNx(arg0: number): void;
      setNy(arg0: number): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOnDeathDone(arg0: boolean): void;
      setOnFire(arg0: boolean): void;
      setOnFloor(arg0: boolean): void;
      setOnKillDone(arg0: boolean): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPainDelta(arg0: number): void;
      setPainEffect(arg0: number): void;
      setPath2(arg0: zombie.vehicles.PolygonalMap2$Path): void;
      setPathFindIndex(arg0: number): void;
      setPathIndex(arg0: number): void;
      setPathing(arg0: boolean): void;
      setPatience(arg0: number): void;
      setPatienceMax(arg0: number): void;
      setPatienceMin(arg0: number): void;
      setPerkLevelDebug(arg0: zombie.characters.skills.PerkFactory$Perk, arg1: number): void;
      setPersistentOutfitID(arg0: number, arg1: boolean): void;
      setPipedFuelAmount(arg0: number): void;
      setPlayingDeathSound(arg0: boolean): void;
      setPrimaryHandItem(arg0: zombie.inventory.InventoryItem): void;
      setRangedWeaponEmpty(arg0: boolean): void;
      setReading(arg0: boolean): void;
      setReanim(arg0: boolean): void;
      setReanimAnimDelay(arg0: number): void;
      setReanimAnimFrame(arg0: number): void;
      setReanimateTimer(arg0: number): void;
      setRecoilDelay(arg0: number): void;
      setReduceInfectionPower(arg0: number): void;
      setRemoteID(arg0: number): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setRunning(arg0: boolean): void;
      setSafety(arg0: boolean): void;
      setSafetyCooldown(arg0: number): void;
      setSayLine(arg0: string): void;
      setSceneCulled(arg0: boolean): void;
      setScriptModule(arg0: string): void;
      setScriptnx(arg0: number): void;
      setScriptny(arg0: number): void;
      setSecondaryHandItem(arg0: zombie.inventory.InventoryItem): void;
      setShootable(arg0: boolean): void;
      setShowAdminTag(arg0: boolean): void;
      setSitOnGround(arg0: boolean): void;
      setSleepingTabletDelta(arg0: number): void;
      setSleepingTabletEffect(arg0: number): void;
      setSlowFactor(arg0: number): void;
      setSlowTimer(arg0: number): void;
      setSneaking(arg0: boolean): void;
      setSolid(arg0: boolean): void;
      setSpeakColour(arg0: zombie.core.Color): void;
      setSpeakColourInfo(arg0: zombie.core.textures.ColorInfo): void;
      setSpeakTime(arg0: number): void;
      setSpeaking(arg0: boolean): void;
      setSpecialTooltip(arg0: boolean): void;
      setSpeedMod(arg0: number): void;
      setSprinting(arg0: boolean): void;
      setSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setStaggerTimeMod(arg0: number): void;
      setStateEventDelayTimer(arg0: number): void;
      setStateMachineLocked(arg0: boolean): void;
      setSuperAttack(arg0: boolean): void;
      setSurvivorKills(arg0: number): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTaintedWater(arg0: boolean): void;
      setTargetAlpha(arg0: number): void;
      setTeleport(arg0: zombie.characters.NetworkTeleport): void;
      setTemperature(arg0: number): void;
      setTextureCreator(arg0: zombie.core.skinnedmodel.model.ModelInstanceTextureCreator): void;
      setThumpTarget(arg0: zombie.iso.objects.interfaces.Thumpable): void;
      setTimeOfSleep(arg0: number): void;
      setTimeSinceLastSmoke(arg0: number): void;
      setTimeSinceZombieAttack(arg0: number): void;
      setTimeThumping(arg0: number): void;
      setTimedActionInstantCheat(arg0: boolean): void;
      setTurnDelta(arg0: number): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUnlimitedCarry(arg0: boolean): void;
      setUnlimitedEndurance(arg0: boolean): void;
      setUseHandWeapon(arg0: zombie.inventory.types.HandWeapon): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setVariable(arg0: string, arg1: boolean): void;
      setVehicle(arg0: zombie.vehicles.BaseVehicle): void;
      setVisibleToNPCs(arg0: boolean): void;
      setWaterAmount(arg0: number): void;
      setWeight(arg0: number): void;
      setWidth(arg0: number): void;
      setWornItem(arg0: string, arg1: zombie.inventory.InventoryItem): void;
      setWornItems(arg0: zombie.characters.WornItems.WornItems): void;
      setX(arg0: number): void;
      setXp(arg0: zombie.characters.IsoGameCharacter$XP): void;
      setY(arg0: number): void;
      setZ(arg0: number): void;
      setZombieKills(arg0: number): void;
      setZombiesDontAttack(arg0: boolean): void;
      setbAltCollide(arg0: boolean): void;
      setbClimbing(arg0: boolean): void;
      setbDoDefer(arg0: boolean): void;
      setbFalling(arg0: boolean): void;
      setbOnBed(arg0: boolean): void;
      setbUseParts(arg0: boolean): void;
      shouldBeTurning(): boolean;
      shouldBeTurning90(): boolean;
      shouldBeTurningAround(): boolean;
      shouldBecomeCorpse(): boolean;
      shouldBecomeZombieAfterDeath(): boolean;
      shouldDoInventory(): boolean;
      shouldWaitToStartTimedAction(): boolean;
      smashCarWindow(arg0: zombie.vehicles.VehiclePart): void;
      smashWindow(arg0: zombie.iso.objects.IsoWindow): void;
      softReset(): void;
      splatBlood(arg0: number, arg1: number): void;
      splatBloodFloor(): void;
      splatBloodFloorBig(): void;
      spotted(arg0: zombie.iso.IsoMovingObject, arg1: boolean): void;
      startEvent(arg0: number, arg1: zombie.audio.GameSoundClip, arg2: java.util.BitSet): void;
      startMuzzleFlash(): void;
      startPlaybackGameVariables(): zombie.core.skinnedmodel.advancedanimation.AnimationVariableSource;
      stopEvent(arg0: number, arg1: zombie.audio.GameSoundClip, arg2: java.util.BitSet): void;
      stopOrTriggerSound(arg0: number): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection, arg3: java.nio.ByteBuffer): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      testDefense(arg0: zombie.characters.IsoZombie): boolean;
      testDotSide(arg0: zombie.iso.IsoMovingObject): string;
      toString(): string;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitModData(): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      unsetOutlineHighlight(): void;
      update(): void;
      updateEmitter(): void;
      updateEquippedRadioFreq(): void;
      updateEvent(arg0: number, arg1: zombie.audio.GameSoundClip): void;
      updateLightInfo(): void;
      updateRecoilVar(): void;
      updateSpeedModifiers(): void;
      updateTextObjects(): void;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      writeInventory(arg0: java.nio.ByteBuffer): void;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
      zeroForwardDirectionX(): void;
      zeroForwardDirectionY(): void;
    }
    // zombie.characters.IsoZombie extends zombie.characters.IsoGameCharacter
    export class IsoZombie {
      private constructor();
      AllowRepathDelay: number;
      static readonly AllowRepathDelayMax: number;
      Asleep: boolean;
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      AttackAnimTime: number;
      static AttackAnimTimeMax: number;
      static readonly CRAWLER_DAMAGE_DOT: number;
      static readonly CRAWLER_DAMAGE_RANGE: number;
      static readonly EAT_BODY_DIST: number;
      static readonly EAT_BODY_TIME: number;
      FollowCount: number;
      Ghost: boolean;
      ImmortalTutorialZombie: boolean;
      readonly IsVisibleToPlayer?: boolean[];
      KeepItReal: boolean;
      static readonly LUNGE_TIME: number;
      LastTargetSeenX: number;
      LastTargetSeenY: number;
      LastTargetSeenZ: number;
      static LowLightingQualityHack: boolean;
      LungeSoundTime: number;
      LungeTimer: number;
      static readonly MAX_WALL_SPLATS: number;
      static readonly MAX_ZOMBIES_EATING: number;
      NoPicking: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OnlineID: number;
      OutlineOnMouseover: boolean;
      static readonly PALETTE_COUNT: number;
      static readonly RENDER_OFFSET_X: number;
      static readonly RENDER_OFFSET_Y: number;
      ReanimatedCorpse?: zombie.characters.IsoGameCharacter;
      ReanimatedCorpseID: number;
      static readonly SPEED_FAST_SHAMBLER: number;
      static readonly SPEED_RANDOM: number;
      static readonly SPEED_SHAMBLER: number;
      static readonly SPEED_SPRINTER: number;
      static readonly SPRINTER_FIXES: boolean;
      SpriteName?: string;
      readonly StateMachineParams?: java.util.HashMap<zombie.ai.State, java.util.HashMap<any, any>>;
      TimeSinceSeenFlesh: number;
      readonly Traits?: zombie.characters.IsoGameCharacter$CharacterTraits;
      ZombieID: number;
      readonly actionContext?: zombie.characters.action.ActionContext;
      readonly advancedAnimator?: zombie.core.skinnedmodel.advancedanimation.AdvancedAnimator;
      alerted: boolean;
      readonly amputations?: java.util.ArrayList<string>;
      atlasTex?: zombie.core.textures.Texture;
      readonly attackVars?: zombie.network.packets.hit.AttackVars;
      authOwner?: zombie.core.raknet.UdpConnection;
      authOwnerPlayer?: zombie.characters.IsoPlayer;
      bAlphaForced: boolean;
      bCrawling: boolean;
      bDressInRandomOutfit: boolean;
      bIndoorZombie: boolean;
      bLunger: boolean;
      bNeverDoneAlpha: boolean;
      readonly bOutline?: boolean[];
      bRemote: boolean;
      bRunning: boolean;
      bStaggerBack: boolean;
      bUpdateEquippedTextures: boolean;
      bagsWorn?: java.util.ArrayList<zombie.inventory.types.InventoryContainer>;
      beard?: zombie.core.skinnedmodel.model.ModelInstance;
      blockTurning: boolean;
      static bmod: number;
      bodyToEat?: zombie.iso.objects.IsoDeadBody;
      bumpNbr: number;
      callOut: boolean;
      clientIgnoreCollision: number;
      cognition: number;
      collideWhileHit: boolean;
      container?: zombie.inventory.ItemContainer;
      def?: zombie.iso.sprite.IsoSpriteInstance;
      dir?: zombie.iso.IsoDirections;
      doDirtBloodEtc: boolean;
      doNotSync: boolean;
      doRenderShadow: boolean;
      eatBodyTarget?: zombie.iso.IsoMovingObject;
      emitter?: zombie.audio.BaseSoundEmitter;
      forceNullOverride: boolean;
      static gmod: number;
      group?: zombie.characters.ZombieGroup;
      hair?: zombie.core.skinnedmodel.model.ModelInstance;
      highlightFlags: number;
      readonly hitList?: java.util.ArrayList<zombie.network.packets.hit.HitInfo>;
      inactive: boolean;
      invRadioFreq?: java.util.ArrayList<number>;
      keyId: number;
      knockbackAttackMod: number;
      laceration: boolean;
      last?: zombie.iso.IsoGridSquare;
      lastAutomaticShoot: number;
      lastChangeOwner: number;
      lastPlayerHit: number;
      lastRemoteUpdate: number;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      legsSprite?: zombie.iso.sprite.IsoSprite;
      lx: number;
      ly: number;
      lz: number;
      movex: number;
      movey: number;
      mpIdleSound: boolean;
      name?: string;
      readonly networkAI?: zombie.characters.NetworkZombieAI;
      readonly networkCharacter?: zombie.characters.NetworkCharacter;
      nextIdleSound: number;
      noDamage: boolean;
      nx: number;
      ny: number;
      offsetX: number;
      offsetY: number;
      readonly outlineColor?: zombie.core.textures.ColorInfo[];
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      overridePrimaryHandModel?: string;
      overrideSecondaryHandModel?: string;
      palette: number;
      readonly parameterZombieState?: zombie.audio.parameters.ParameterZombieState;
      partialThumpDmg: number;
      pendingOutfitName?: string;
      primaryHandModel?: zombie.core.skinnedmodel.model.ModelInstance;
      realState?: zombie.network.NetworkVariables$ZombieState;
      realdir?: zombie.iso.IsoDirections;
      realx: number;
      realy: number;
      realz: number;
      removedFromWorldMS: number;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      static readonly s_maxPossibleTwist: number;
      savedVehicleRunning: boolean;
      savedVehicleSeat: number;
      savedVehicleX: number;
      savedVehicleY: number;
      scratch: boolean;
      secondaryHandModel?: zombie.core.skinnedmodel.model.ModelInstance;
      sheetRope: boolean;
      sheetRopeHealth: number;
      shootInARow: number;
      soundAttract: number;
      soundAttractTimeout: number;
      soundSourceTarget?: any;
      speedMod: number;
      speedType: number;
      spotSoundDelay: number;
      spottedLast?: zombie.iso.IsoMovingObject;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      square?: zombie.iso.IsoGridSquare;
      strength: number;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      target?: zombie.iso.IsoMovingObject;
      thumpFlag: number;
      thumpSent: boolean;
      tintb: number;
      tintg: number;
      tintr: number;
      static treeSoundMgr?: zombie.iso.IsoMovingObject$TreeSoundManager;
      upKillCount: boolean;
      readonly vectorToTarget?: zombie.iso.Vector2;
      vocalEvent: number;
      walkVariant?: string;
      walkVariantUse?: string;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
      x: number;
      y: number;
      z: number;
      zombiePacket?: zombie.network.packets.ZombiePacket;
      zombiePacketUpdated: boolean;
  
      Anger(arg0: number): void;
      ApplyInBedOffset(arg0: boolean): void;
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      BetaAntiDepress(arg0: number): void;
      BetaBlockers(arg0: number): void;
      CacheEquipped(): void;
      Callout(): void;
      CanAttack(): boolean;
      CanSee(arg0: zombie.iso.IsoMovingObject): boolean;
      ClearEquippedCache(): void;
      ClearVariable(arg0: string): void;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number): void;
      Despawn(): void;
      DirectionFromVector(arg0: zombie.iso.Vector2): void;
      DirtySlice(): void;
      DistTo(arg0: number, arg1: number): number;
      DistToProper(arg0: zombie.iso.IsoObject): number;
      DistToSquared(arg0: zombie.iso.IsoMovingObject): number;
      DoCollideNorS(): void;
      DoCollideWorE(): void;
      DoCorpseInventory(): void;
      DoDeath(arg0: zombie.inventory.types.HandWeapon, arg1: zombie.characters.IsoGameCharacter): void;
      DoFloorSplat(arg0: zombie.iso.IsoGridSquare, arg1: string, arg2: boolean, arg3: number, arg4: number): void;
      DoFootstepSound(arg0: number): void;
      DoSneezeText(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoSwingCollisionBoneCheck(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number): boolean;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      DoZombieInventory(): void;
      DoZombieSpeeds(arg0: number): void;
      DoZombieStats(): void;
      DrawSneezeText(): void;
      Dressup(arg0: zombie.characters.SurvivorDesc): void;
      Eat(arg0: zombie.inventory.InventoryItem, arg1: number): boolean;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      FireCheck(): void;
      GetAnimSetName(): string;
      GetPrimaryEquippedCache(): zombie.inventory.InventoryItem;
      GetSecondaryEquippedCache(): zombie.inventory.InventoryItem;
      GetVariable(arg0: string): string;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasItem(arg0: string): boolean;
      HasTooltip(): boolean;
      HasTrait(arg0: string): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      HitSilence(arg0: zombie.inventory.types.HandWeapon, arg1: zombie.characters.IsoGameCharacter, arg2: boolean, arg3: number): void;
      InitSpriteParts(arg0: zombie.characters.SurvivorDesc): void;
      InitSpritePartsZombie(arg0: zombie.characters.SurvivorDesc): void;
      IsAttackRange(arg0: number, arg1: number, arg2: number): boolean;
      IsSpeaking(): boolean;
      Kill(arg0: zombie.characters.IsoGameCharacter, arg1: boolean): void;
      LevelPerk(arg0: zombie.characters.skills.PerkFactory$Perk, arg1: boolean): void;
      LoseLevel(arg0: zombie.characters.skills.PerkFactory$Perk): void;
      Move(arg0: zombie.iso.Vector2): void;
      MoveForward(arg0: number, arg1: number, arg2: number, arg3: number): void;
      MoveUnmodded(arg0: zombie.iso.Vector2): void;
      NPCGetAiming(): boolean;
      NPCGetRunning(): boolean;
      NPCSetAiming(arg0: boolean): void;
      NPCSetAttack(arg0: boolean): void;
      NPCSetJustMoved(arg0: boolean): void;
      NPCSetMelee(arg0: boolean): void;
      NPCSetRunning(arg0: boolean): void;
      OnAnimEvent(arg0: zombie.core.skinnedmodel.advancedanimation.AnimLayer, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      OnDeath(): void;
      PainMeds(arg0: number): void;
      PlayAnim(arg0: string): void;
      PlayAnimUnlooped(arg0: string): void;
      PlayAnimWithSpeed(arg0: string, arg1: number): void;
      QueueAction(arg0: zombie.characters.CharacterTimedActions.BaseAction): void;
      ReadLiterature(arg0: zombie.inventory.types.Literature): void;
      ReduceHealthWhenBurning(): void;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      RespondToSound(): void;
      Say(arg0: string): void;
      SayDebug(arg0: number, arg1: string): void;
      SayRadio(arg0: string, arg1: number, arg2: number, arg3: number, arg4: zombie.ui.UIFont, arg5: number, arg6: number, arg7: string): void;
      SayShout(arg0: string): void;
      SayWhisper(arg0: string): void;
      Seen(arg0: java.util.Stack<zombie.iso.IsoMovingObject>): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      SetOnFire(): void;
      SetVariable(arg0: string, arg1: string): void;
      SleepingTablet(arg0: number): void;
      SpreadFire(): void;
      SpreadFireMP(): void;
      StartAction(arg0: zombie.characters.CharacterTimedActions.BaseAction): void;
      StartTimedActionAnim(arg0: string, arg1: string): void;
      StopAllActionQueue(): void;
      StopAllActionQueueAiming(): void;
      StopAllActionQueueRunning(): void;
      StopAllActionQueueWalking(): void;
      StopBurning(): void;
      StopTimedActionAnim(): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      Throw(arg0: zombie.inventory.types.HandWeapon): void;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      Wander(): void;
      WanderFromWindow(): boolean;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      actionStateChanged(arg0: zombie.characters.action.ActionContext): void;
      addAggro(arg0: zombie.iso.IsoMovingObject, arg1: number): void;
      addBasicPatch(arg0: zombie.characterTextures.BloodBodyPartType): void;
      addBlood(arg0: zombie.characterTextures.BloodBodyPartType, arg1: boolean, arg2: boolean, arg3: boolean): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addDirt(arg0: zombie.characterTextures.BloodBodyPartType, arg1: number, arg2: boolean): void;
      addHole(arg0: zombie.characterTextures.BloodBodyPartType): boolean;
      addHoleFromZombieAttacks(arg0: zombie.characterTextures.BloodBodyPartType, arg1: boolean): boolean;
      addItemToSpawnAtDeath(arg0: zombie.inventory.InventoryItem): void;
      addLineChatElement(arg0: string): void;
      addRandomBloodDirtHolesEtc(): void;
      addRandomVisualBandages(): void;
      addRandomVisualDamages(): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      addToWorld(): void;
      addVisualBandage(arg0: zombie.characters.BodyDamage.BodyPartType, arg1: boolean): void;
      addVisualDamage(arg0: string): void;
      addWorldSoundUnlessInvisible(arg0: number, arg1: number, arg2: boolean): void;
      applyDamageFromVehicle(arg0: number, arg1: number): void;
      applyTraits(arg0: java.util.ArrayList<string>): void;
      attackFromWindowsLunge(arg0: zombie.characters.IsoZombie): void;
      autoDrink(): void;
      avoidDamage(): boolean;
      becomeCorpse(): void;
      calcHitDir(arg0: zombie.iso.Vector2): void;
      calculateBaseSpeed(): number;
      canAddSheetRope(): boolean;
      canBeDeletedUnnoticed(arg0: number): boolean;
      canClimbDownSheetRope(arg0: zombie.iso.IsoGridSquare): boolean;
      canClimbDownSheetRopeInCurrentSquare(): boolean;
      canClimbSheetRope(arg0: zombie.iso.IsoGridSquare): boolean;
      canHaveMultipleHits(): number;
      canSprint(): boolean;
      changeState(arg0: zombie.ai.State): void;
      checkHaveElectricity(): void;
      checkIsNearWall(): number;
      cleanWallBlood(): void;
      clearAggroList(): void;
      clearAttachedAnimSprite(): void;
      clearAttachedItems(): void;
      clearItemsToSpawnAtDeath(): void;
      clearVariable(arg0: string): void;
      clearVariables(): void;
      clearWornItems(): void;
      climbDownSheetRope(): void;
      climbOverFence(arg0: zombie.iso.IsoDirections): void;
      climbSheetRope(): void;
      climbThroughWindow(arg0: zombie.iso.objects.IsoThumpable, arg1: number): void;
      climbThroughWindowFrame(arg0: zombie.iso.IsoObject): void;
      closeWindow(arg0: zombie.iso.objects.IsoWindow): void;
      clothingItemChanged(arg0: string): void;
      collideWith(arg0: zombie.iso.IsoObject): void;
      compareMovePriority(arg0: zombie.characters.IsoGameCharacter): number;
      compareToY(arg0: zombie.iso.IsoMovingObject): number;
      containsVariable(arg0: string): boolean;
      countAddSheetRope(): number;
      createContainersFromSpriteProperties(): void;
      createKeyRing(): void;
      customHashCode(): number;
      dbgGetAnimTrack(arg0: number, arg1: number): zombie.core.skinnedmodel.animation.AnimationTrack;
      dbgGetAnimTrackName(arg0: number, arg1: number): string;
      dbgGetAnimTrackTime(arg0: number, arg1: number): number;
      dbgGetAnimTrackWeight(arg0: number, arg1: number): number;
      debugPrintout(): void;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      distToNearestCamCharacter(): number;
      doFindExternalWaterSource(): void;
      doHitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.vehicles.BaseVehicle$HitVars): void;
      doStairs(): void;
      drawDirectionLine(arg0: zombie.iso.Vector2, arg1: number, arg2: number, arg3: number, arg4: number): void;
      dressInClothingItem(arg0: string): void;
      dressInNamedOutfit(arg0: string): void;
      dressInPersistentOutfit(arg0: string): void;
      dressInPersistentOutfitID(arg0: number): void;
      dressInRandomOutfit(): void;
      dropHandItems(): void;
      dropHeavyItems(): void;
      endPlaybackGameVariables(arg0: zombie.core.skinnedmodel.advancedanimation.AnimationVariableSource): void;
      ensureOnTile(): void;
      enterVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number, arg2: org.joml.Vector3f): void;
      equals(arg0: any): boolean;
      exert(arg0: number): void;
      faceLocation(arg0: number, arg1: number): void;
      faceLocationF(arg0: number, arg1: number): void;
      facePosition(arg0: number, arg1: number): void;
      faceThisObject(arg0: zombie.iso.IsoObject): void;
      faceThisObjectAlt(arg0: zombie.iso.IsoObject): void;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      fallenOnKnees(): void;
      forceAwake(): void;
      getAbsoluteExcessTwist(): number;
      getActionContext(): zombie.characters.action.ActionContext;
      getActionStateName(): string;
      getActiveLightItems(arg0: java.util.ArrayList<zombie.inventory.InventoryItem>): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getAdvancedAnimator(): zombie.core.skinnedmodel.advancedanimation.AdvancedAnimator;
      getAge(): number;
      getAlpha(arg0: number): number;
      getAlreadyReadPages(arg0: string): number;
      getAnimAngle(): number;
      getAnimAngleRadians(): number;
      getAnimAngleStepDelta(): number;
      getAnimAngleTwistDelta(): number;
      getAnimVector(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getAnimationDebug(): string;
      getAnimationPlayer(): zombie.core.skinnedmodel.animation.AnimationPlayer;
      getAnimationPlayerRecorder(): zombie.core.skinnedmodel.animation.debug.AnimationPlayerRecorder;
      getAnimationStateName(): string;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getAttachedItem(arg0: string): zombie.inventory.InventoryItem;
      getAttachedItems(): zombie.characters.AttachedItems.AttachedItems;
      getAttachedLocationGroup(): zombie.characters.AttachedItems.AttachedLocationGroup;
      getAttackTargetSquare(): zombie.iso.IsoGridSquare;
      getAttackedBy(): zombie.characters.IsoGameCharacter;
      getAutoWalkDirection(): zombie.iso.Vector2;
      getBarricadeStrengthMod(): number;
      getBarricadeTimeMod(): number;
      getBed(): zombie.iso.IsoObject;
      getBedType(): string;
      getBeenMovingFor(): number;
      getBeenSprintingFor(): number;
      getBetaDelta(): number;
      getBetaEffect(): number;
      getBloodImpactX(): number;
      getBloodImpactY(): number;
      getBloodImpactZ(): number;
      getBloodSplat(): zombie.iso.sprite.IsoSprite;
      getBodyDamage(): zombie.characters.BodyDamage.BodyDamage;
      getBodyDamageRemote(): zombie.characters.BodyDamage.BodyDamage;
      getBodyLocationGroup(): zombie.characters.WornItems.BodyLocationGroup;
      getBodyPartClothingDefense(arg0: number, arg1: boolean, arg2: boolean): number;
      getBrain(): zombie.ai.GameCharacterAIBrain;
      getBuilding(): zombie.iso.areas.IsoBuilding;
      getBumpFallType(): string;
      getBumpType(): string;
      getBumpedChr(): zombie.characters.IsoGameCharacter;
      getBumpedType(arg0: zombie.characters.IsoGameCharacter): string;
      getCell(): zombie.iso.IsoCell;
      getCharacterActions(): java.util.Stack<zombie.characters.CharacterTimedActions.BaseAction>;
      getCharacterTraits(): zombie.characters.IsoGameCharacter$CharacterTraits;
      getChatElement(): zombie.chat.ChatElement;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getChopTreeSpeed(): number;
      getClass(): java.lang.Class<any>;
      getClickSound(): string;
      getClothingItem_Back(): zombie.inventory.InventoryItem;
      getClothingItem_Feet(): zombie.inventory.InventoryItem;
      getClothingItem_Hands(): zombie.inventory.InventoryItem;
      getClothingItem_Head(): zombie.inventory.InventoryItem;
      getClothingItem_Legs(): zombie.inventory.InventoryItem;
      getClothingItem_Torso(): zombie.inventory.InventoryItem;
      getClothingWetness(): zombie.characters.ClothingWetness;
      getCollideType(): string;
      getCollidedObject(): zombie.iso.IsoObject;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getCrawlerType(): number;
      getCurrentActionContextStateName(): string;
      getCurrentBuilding(): zombie.iso.areas.IsoBuilding;
      getCurrentBuildingDef(): zombie.iso.BuildingDef;
      getCurrentRoomDef(): zombie.iso.RoomDef;
      getCurrentSquare(): zombie.iso.IsoGridSquare;
      getCurrentState(): zombie.ai.State;
      getCurrentStateName(): string;
      getCurrentZone(): zombie.iso.IsoMetaGrid$Zone;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getDamage(): number;
      getDangerLevels(): number;
      getDebugMonitor(): zombie.core.skinnedmodel.advancedanimation.debug.AnimatorDebugMonitor;
      getDefaultState(): zombie.ai.State;
      getDeferredAngleDelta(): number;
      getDeferredMovement(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getDeferredRotationWeight(): number;
      getDepressDelta(): number;
      getDepressEffect(): number;
      getDescriptor(): zombie.characters.SurvivorDesc;
      getDieCount(): number;
      getDir(): zombie.iso.IsoDirections;
      getDirectionAngle(): number;
      getDistanceSq(arg0: zombie.iso.IsoMovingObject): number;
      getDotWithForwardDirection(arg0: number, arg1: number): number;
      getEatBodyTarget(): zombie.iso.IsoMovingObject;
      getEatSpeed(): number;
      getEatingZombies(): java.util.ArrayList<zombie.characters.IsoZombie>;
      getEmitter(): zombie.characters.BaseCharacterSoundEmitter;
      getEnemyList(): java.util.Stack<zombie.characters.IsoGameCharacter>;
      getEquipedRadio(): zombie.inventory.types.Radio;
      getExcessTwist(): number;
      getFMODParameters(): zombie.audio.FMODParameterList;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getFallTime(): number;
      getFamiliarBuildings(): java.util.Stack<zombie.iso.areas.IsoBuilding>;
      getFatigueMod(): number;
      getFatiqueMultiplier(): number;
      getFeelerTile(arg0: number): zombie.iso.IsoGridSquare;
      getFeelersize(): number;
      getFinder(): zombie.ai.astar.AStarPathFinderResult;
      getFireKillRate(): number;
      getFireSpreadProbability(): number;
      getFollowingTarget(): zombie.characters.IsoGameCharacter;
      getFootstepVolume(): number;
      getForceWakeUpTime(): number;
      getForwardDirection(): zombie.iso.Vector2;
      getFullName(): string;
      getFuturWalkedSquare(): zombie.iso.IsoGridSquare;
      getGameCharacterAIBrain(): zombie.ai.GameCharacterAIBrain;
      getGameVariables(): java.lang.Iterable<zombie.core.skinnedmodel.advancedanimation.IAnimationVariableSlot>;
      getGlobalMovementMod(): number;
      getHaloTimerCount(): number;
      getHammerSoundMod(): number;
      getHealth(): number;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getHitAngle(): zombie.iso.Vector2;
      getHitChancesMod(): number;
      getHitDir(): zombie.iso.Vector2;
      getHitForce(): number;
      getHitFromAngle(): number;
      getHitHeadWhileOnFloor(): number;
      getHitReaction(): string;
      getHitReactionNetworkAI(): zombie.characters.HitReactionNetworkAI;
      getHitTime(): number;
      getHittingMod(): number;
      getHoursSurvived(): number;
      getHumanVisual(): zombie.core.skinnedmodel.visual.HumanVisual;
      getHungerMultiplier(): number;
      getHurtSound(): string;
      getHyperthermiaMod(): number;
      getID(): number;
      getIDCount(): number;
      getIgnoreMovement(): boolean;
      getImpulsex(): number;
      getImpulsey(): number;
      getInf(): zombie.core.textures.ColorInfo;
      getInventory(): zombie.inventory.ItemContainer;
      getInventoryWeight(): number;
      getIsNPC(): boolean;
      getIsSurfaceNormalOffset(): boolean;
      getItemContainer(): zombie.inventory.ItemContainer;
      getItemVisuals(arg0: zombie.core.skinnedmodel.visual.ItemVisuals): void;
      getKeyId(): number;
      getKnownRecipes(): java.util.List<string>;
      getLastBump(): number;
      getLastChatMessage(): zombie.chat.ChatMessage;
      getLastCollideTime(): number;
      getLastFallSpeed(): number;
      getLastHeardSound(): zombie.characters.IsoGameCharacter$Location;
      getLastHitCount(): number;
      getLastHourSleeped(): number;
      getLastKnownLocation(): java.util.HashMap<string, zombie.characters.IsoGameCharacter$Location>;
      getLastKnownLocationOf(arg0: string): zombie.characters.IsoGameCharacter$Location;
      getLastLocalEnemies(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getLastSpokenLine(): string;
      getLastSquare(): zombie.iso.IsoGridSquare;
      getLastTargettedBy(): zombie.characters.IsoZombie;
      getLastZombieKills(): number;
      getLeaveBodyTimedown(): number;
      getLegsSprite(): zombie.iso.sprite.IsoSprite;
      getLevelMaxForXp(): number;
      getLevelUpLevels(): number[];
      getLevelUpMultiplier(): number;
      getLightInfo2(): zombie.characters.IsoGameCharacter$LightInfo;
      getLightfootMod(): number;
      getLimpulsex(): number;
      getLimpulsey(): number;
      getLlx(): number;
      getLly(): number;
      getLlz(): number;
      getLocalEnemyList(): java.util.Stack<zombie.characters.IsoGameCharacter>;
      getLocalGroupList(): java.util.ArrayList<zombie.iso.IsoMovingObject>;
      getLocalList(): java.util.ArrayList<zombie.iso.IsoMovingObject>;
      getLocalNeutralList(): java.util.ArrayList<zombie.iso.IsoMovingObject>;
      getLocalRelevantEnemyList(): java.util.ArrayList<zombie.iso.IsoMovingObject>;
      getLookAngleRadians(): number;
      getLookVector(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getLowDangerInVicinity(arg0: number, arg1: number): zombie.iso.IsoGridSquare;
      getLrx(): number;
      getLry(): number;
      getLx(): number;
      getLy(): number;
      getLz(): number;
      getMaintenanceMod(): number;
      getMapKnowledge(): zombie.ai.MapKnowledge;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getMasterRegion(): zombie.iso.areas.isoregion.regions.IWorldRegion;
      getMaxChatLines(): number;
      getMaxTwist(): number;
      getMaxWeight(): number;
      getMaxWeightBase(): number;
      getMeleeCombatMod(): number;
      getMeleeDelay(): number;
      getMetalBarricadeStrengthMod(): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getModel(): zombie.core.skinnedmodel.model.ModelInstance;
      getModelInstance(): zombie.core.skinnedmodel.model.ModelInstance;
      getMomentumScalar(): number;
      getMoodles(): zombie.characters.Moodles.Moodles;
      getMoveDelta(): number;
      getMoveForwardVec(): zombie.iso.Vector2;
      getMoveSpeed(): number;
      getMovementLastFrame(): zombie.iso.Vector2;
      getMovingObjectIndex(): number;
      getName(): string;
      getNearVehicle(): zombie.vehicles.BaseVehicle;
      getNetworkCharacterAI(): zombie.characters.NetworkCharacterAI;
      getNew(): zombie.iso.IsoObject;
      getNextWander(): number;
      getNimbleMod(): number;
      getNoDamage(): boolean;
      getNumSurvivorsInVicinity(): number;
      getNx(): number;
      getNy(): number;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffsetX(): number;
      getOffsetY(): number;
      getOnlineID(): number;
      getOrCreateSleepingEventData(): zombie.ai.sadisticAIDirector.SleepingEventData;
      getOrCreateVariable(arg0: string): zombie.core.skinnedmodel.advancedanimation.IAnimationVariableSlot;
      getOutfitName(): string;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPacingMod(): number;
      getPainDelta(): number;
      getPainEffect(): number;
      getPath2(): zombie.vehicles.PolygonalMap2$Path;
      getPathFindBehavior2(): zombie.vehicles.PathFindBehavior2;
      getPathFindIndex(): number;
      getPathIndex(): number;
      getPathTargetX(): number;
      getPathTargetY(): number;
      getPathTargetZ(): number;
      getPatience(): number;
      getPatienceMax(): number;
      getPatienceMin(): number;
      getPerkInfo(arg0: zombie.characters.skills.PerkFactory$Perk): zombie.characters.IsoGameCharacter$PerkInfo;
      getPerkLevel(arg0: zombie.characters.skills.PerkFactory$Perk): number;
      getPerkList(): java.util.ArrayList<zombie.characters.IsoGameCharacter$PerkInfo>;
      getPersistentOutfitID(): number;
      getPipedFuelAmount(): number;
      getPlayerAttackPosition(): string;
      getPosition(arg0: zombie.iso.Vector3): zombie.iso.Vector3;
      getPreviousActionContextStateName(): string;
      getPreviousStateName(): string;
      getPrimaryHandItem(): zombie.inventory.InventoryItem;
      getPrimaryHandType(): string;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRandomDefaultOutfit(): zombie.core.skinnedmodel.population.Outfit;
      getReadyModelData(): java.util.ArrayList<zombie.core.skinnedmodel.model.ModelInstance>;
      getRealState(): string;
      getReanimAnimDelay(): number;
      getReanimAnimFrame(): number;
      getReanimateTimer(): number;
      getReanimatedPlayer(): zombie.characters.IsoPlayer;
      getRecoilDelay(): number;
      getRecoveryMod(): number;
      getReduceInfectionPower(): number;
      getRemoteID(): number;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getRunSpeedModifier(): number;
      getSafetyCooldown(): number;
      getSayLine(): string;
      getScreenProperX(arg0: number): number;
      getScreenProperY(arg0: number): number;
      getScreenX(): number;
      getScreenY(): number;
      getScriptModule(): string;
      getScriptName(): string;
      getScriptnx(): number;
      getScriptny(): number;
      getSecondaryHandItem(): zombie.inventory.InventoryItem;
      getSecondaryHandType(): string;
      getSharedDescriptor(): zombie.SharedDescriptors$Descriptor;
      getSharedDescriptorID(): number;
      getShoulderTwist(): number;
      getShovingMod(): number;
      getSleepingTabletDelta(): number;
      getSleepingTabletEffect(): number;
      getSlowFactor(): number;
      getSlowTimer(): number;
      getSneakSpotMod(): number;
      getSpeakColour(): zombie.core.Color;
      getSpeakTime(): number;
      getSpecialObjectIndex(): number;
      getSpeedMod(): number;
      getSprintMod(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteDef(): zombie.iso.sprite.IsoSpriteInstance;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSquare(): zombie.iso.IsoGridSquare;
      getStaggerTimeMod(): number;
      getStateEventDelayTimer(): number;
      getStateMachine(): zombie.ai.StateMachine;
      getStateMachineParams(arg0: zombie.ai.State): java.util.HashMap<any, any>;
      getStaticMovingObjectIndex(): number;
      getStats(): zombie.characters.Stats;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getSurroundingAttackingZombies(): number;
      getSurvivorKills(): number;
      getSurvivorMap(): java.util.HashMap<number, zombie.characters.SurvivorDesc>;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTalkerType(): string;
      getTarget(): zombie.iso.IsoMovingObject;
      getTargetAlpha(arg0: number): number;
      getTargetSeenTime(): number;
      getTargetTwist(): number;
      getTeleport(): zombie.characters.NetworkTeleport;
      getTemperature(): number;
      getTempo(): zombie.iso.Vector2;
      getTextureCreator(): zombie.core.skinnedmodel.model.ModelInstanceTextureCreator;
      getTextureName(): string;
      getThirstMultiplier(): number;
      getThreatLevel(): number;
      getThumpCondition(): number;
      getThumpTarget(): zombie.iso.objects.interfaces.Thumpable;
      getThumpTimer(): number;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTile(): string;
      getTimeSinceLastSmoke(): number;
      getTimeSinceZombieAttack(): number;
      getTimeThumping(): number;
      getTimedActionTimeModifier(): number;
      getTorchStrength(): number;
      getTotalBlood(): number;
      getTraits(): zombie.characters.traits.TraitCollection;
      getTurnDelta(): number;
      getTwist(): number;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUID(): string;
      getUseHandWeapon(): zombie.inventory.types.HandWeapon;
      getUsedItemsOn(): java.util.Stack<string>;
      getUserNameHeight(): number;
      getUsesExternalWaterSource(): boolean;
      getVariable(arg0: zombie.core.skinnedmodel.advancedanimation.AnimationVariableHandle): zombie.core.skinnedmodel.advancedanimation.IAnimationVariableSlot;
      getVariableBoolean(arg0: string, arg1: boolean): boolean;
      getVariableFloat(arg0: string, arg1: number): number;
      getVariableString(arg0: string): string;
      getVectorFromDirection(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getVehicle(): zombie.vehicles.BaseVehicle;
      getVeryCloseEnemyList(): java.util.ArrayList<zombie.iso.IsoMovingObject>;
      getVisual(): zombie.core.skinnedmodel.visual.BaseVisual;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWaterSource(arg0: java.util.ArrayList<zombie.inventory.InventoryItem>): zombie.inventory.InventoryItem;
      getWeaponLevel(): number;
      getWeight(): number;
      getWeightMod(): number;
      getWeldingSoundMod(): number;
      getWidth(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWorldObjectIndex(): number;
      getWornItem(arg0: string): zombie.inventory.InventoryItem;
      getWornItems(): zombie.characters.WornItems.WornItems;
      getX(): number;
      getXp(): zombie.characters.IsoGameCharacter$XP;
      getXpForLevel(arg0: number): number;
      getY(): number;
      getZ(): number;
      getZombieKills(): number;
      getZombieLungeSpeed(): void;
      getZombieWalkTowardSpeed(arg0: number, arg1: number, arg2: zombie.iso.Vector2): void;
      hasActiveModel(): boolean;
      hasAnimationPlayer(): boolean;
      hasEquipped(arg0: string): boolean;
      hasEquippedTag(arg0: string): boolean;
      hasExternalWaterSource(): boolean;
      hasFootInjury(): boolean;
      hasHitReaction(): boolean;
      hasItems(arg0: string, arg1: number): boolean;
      hasModData(): boolean;
      hasPath(): boolean;
      hasTimedActions(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      helmetFall(arg0: boolean, arg1: string): boolean;
      hitConsequences(arg0: zombie.inventory.types.HandWeapon, arg1: zombie.characters.IsoGameCharacter, arg2: boolean, arg3: number, arg4: boolean): void;
      initAttachedItems(arg0: string): void;
      initCanCrawlUnderVehicle(): void;
      initLightInfo2(): zombie.characters.IsoGameCharacter$LightInfo;
      initSpritePartsEmpty(): void;
      initWornItems(arg0: string): void;
      initializeStates(): void;
      isAboveTopOfStairs(): boolean;
      isAimAtFloor(): boolean;
      isAiming(): boolean;
      isAlive(): boolean;
      isAllowConversation(): boolean;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isAlwaysKnockedDown(): boolean;
      isAnimForecasted(): boolean;
      isAnimationRecorderActive(): boolean;
      isAsleep(): boolean;
      isAttachedItem(arg0: zombie.inventory.InventoryItem): boolean;
      isAttackAnim(): boolean;
      isAttackWasSuperAttack(): boolean;
      isAttacking(): boolean;
      isAutoWalk(): boolean;
      isBecomeCrawler(): boolean;
      isBehaviourMoving(): boolean;
      isBehind(arg0: zombie.characters.IsoGameCharacter): boolean;
      isBeingSteppedOn(): boolean;
      isBlink(): boolean;
      isBuildCheat(): boolean;
      isBumpDone(): boolean;
      isBumpFall(): boolean;
      isBumpStaggered(): boolean;
      isBumped(): boolean;
      isCanCrawlUnderVehicle(): boolean;
      isCanShout(): boolean;
      isCanWalk(): boolean;
      isCharacter(): boolean;
      isClimbing(): boolean;
      isClimbingThroughWindow(arg0: zombie.iso.objects.IsoWindow): boolean;
      isCloseKilled(): boolean;
      isClosingWindow(arg0: zombie.iso.objects.IsoWindow): boolean;
      isCollidable(): boolean;
      isCollided(): boolean;
      isCollidedE(): boolean;
      isCollidedN(): boolean;
      isCollidedS(): boolean;
      isCollidedThisFrame(): boolean;
      isCollidedW(): boolean;
      isCollidedWithDoor(): boolean;
      isCollidedWithVehicle(): boolean;
      isCrawling(): boolean;
      isCriticalHit(): boolean;
      isCurrentState(arg0: zombie.ai.State): boolean;
      isDead(): boolean;
      isDeathDragDown(): boolean;
      isDestroyed(): boolean;
      isDoDeathSound(): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isDriving(): boolean;
      isEatingOther(arg0: zombie.iso.IsoMovingObject): boolean;
      isEquipped(arg0: zombie.inventory.InventoryItem): boolean;
      isEquippedClothing(arg0: zombie.inventory.InventoryItem): boolean;
      isExistInTheWorld(): boolean;
      isFacingLocation(arg0: number, arg1: number, arg2: number): boolean;
      isFacingObject(arg0: zombie.iso.IsoObject, arg1: number): boolean;
      isFacingTarget(): boolean;
      isFakeDead(): boolean;
      isFallOnFront(): boolean;
      isFarmingCheat(): boolean;
      isFemale(): boolean;
      isFirstUpdate(): boolean;
      isFloor(): boolean;
      isForceEatingAnimation(): boolean;
      isForceFakeDead(): boolean;
      isForceShove(): boolean;
      isGodMod(): boolean;
      isHandItem(arg0: zombie.inventory.InventoryItem): boolean;
      isHealthCheat(): boolean;
      isHeavyItem(arg0: zombie.inventory.InventoryItem): boolean;
      isHideWeaponModel(): boolean;
      isHighlighted(): boolean;
      isHitFromBehind(): boolean;
      isHitLegsWhileOnFloor(): boolean;
      isHoppable(): boolean;
      isIgnoreMovementForDirection(): boolean;
      isIgnoreStaggerBack(): boolean;
      isInARoom(): boolean;
      isInTrees(): boolean;
      isInTrees2(arg0: boolean): boolean;
      isInTreesNoBush(): boolean;
      isInvincible(): boolean;
      isInvisible(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isItemInBothHands(arg0: zombie.inventory.InventoryItem): boolean;
      isJawStabAttach(): boolean;
      isKnifeDeath(): boolean;
      isKnockedDown(): boolean;
      isKnownPoison(arg0: zombie.inventory.InventoryItem): boolean;
      isLastCollidedN(): boolean;
      isLastCollidedW(): boolean;
      isLeadAggro(arg0: zombie.iso.IsoMovingObject): boolean;
      isLocal(): boolean;
      isMaskClicked(arg0: number, arg1: number): boolean;
      isMechanicsCheat(): boolean;
      isMovablesCheat(): boolean;
      isMovedThumpable(): boolean;
      isMoving(): boolean;
      isMuzzleFlash(): boolean;
      isNPC(): boolean;
      isNoPicking(): boolean;
      isNoTeeth(): boolean;
      isNorthHoppable(): boolean;
      isOnDeathDone(): boolean;
      isOnFire(): boolean;
      isOnFloor(): boolean;
      isOnKillDone(): boolean;
      isOnlyJawStab(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isOutside(): boolean;
      isPathing(): boolean;
      isPersistentOutfitInit(): boolean;
      isPlayerMoving(): boolean;
      isPlayingDeathSound(): boolean;
      isPrimaryEquipped(arg0: string): boolean;
      isPrimaryHandItem(arg0: zombie.inventory.InventoryItem): boolean;
      isProne(): boolean;
      isPushableForSeparate(): boolean;
      isPushedByForSeparate(arg0: zombie.iso.IsoMovingObject): boolean;
      isRangedWeaponEmpty(): boolean;
      isReading(): boolean;
      isReanim(): boolean;
      isReanimate(): boolean;
      isReanimatedPlayer(): boolean;
      isRecipeKnown(arg0: string): boolean;
      isRemoteZombie(): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isRunning(): boolean;
      isSafety(): boolean;
      isSceneCulled(): boolean;
      isSeatedInVehicle(): boolean;
      isSecondaryHandItem(arg0: zombie.inventory.InventoryItem): boolean;
      isShootable(): boolean;
      isShowAdminTag(): boolean;
      isSitAgainstWall(): boolean;
      isSitOnGround(): boolean;
      isSkeleton(): boolean;
      isSkipResolveCollision(): boolean;
      isSneaking(): boolean;
      isSolid(): boolean;
      isSolidForSeparate(): boolean;
      isSpeaking(): boolean;
      isSprinting(): boolean;
      isSpriteInvisible(): boolean;
      isStaggerBack(): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isStrafing(): boolean;
      isSuperAttack(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isTargetInCone(arg0: number, arg1: number): boolean;
      isTargetLocationKnown(): boolean;
      isTargetVisible(): boolean;
      isTeleporting(): boolean;
      isTimedActionInstant(): boolean;
      isTimedActionInstantCheat(): boolean;
      isUnderVehicle(): boolean;
      isUnlimitedCarry(): boolean;
      isUnlimitedEndurance(): boolean;
      isUseless(): boolean;
      isUsingWornItems(): boolean;
      isVariable(arg0: string, arg1: string): boolean;
      isVehicleCollisionActive(arg0: zombie.vehicles.BaseVehicle): boolean;
      isVisibleToNPCs(): boolean;
      isZombie(): boolean;
      isZombieAttacking(arg0: zombie.iso.IsoMovingObject): boolean;
      isZombiesDontAttack(): boolean;
      isbAltCollide(): boolean;
      isbDoDefer(): boolean;
      isbFalling(): boolean;
      isbOnBed(): boolean;
      isbUseParts(): boolean;
      knockDown(arg0: boolean): void;
      learnRecipe(arg0: string): boolean;
      level0(arg0: zombie.characters.skills.PerkFactory$Perk): void;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      makeInactive(arg0: boolean): void;
      notify(): void;
      notifyAll(): void;
      onCullStateChanged(arg0: zombie.core.skinnedmodel.ModelManager, arg1: boolean): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      onWornItemsChanged(): void;
      openWindow(arg0: zombie.iso.objects.IsoWindow): void;
      pathToCharacter(arg0: zombie.characters.IsoGameCharacter): void;
      pathToLocation(arg0: number, arg1: number, arg2: number): void;
      pathToLocationF(arg0: number, arg1: number, arg2: number): void;
      pathToSound(arg0: number, arg1: number, arg2: number): void;
      playBloodSplatterSound(): void;
      playDeadSound(): void;
      playEmote(arg0: string): void;
      playHurtSound(): void;
      playSound(arg0: string): number;
      playSoundLocal(arg0: string): number;
      playbackRecordCurrentStateSnapshot(): zombie.characters.action.ActionStateSnapshot;
      playbackSetCurrentStateSnapshot(arg0: zombie.characters.action.ActionStateSnapshot): void;
      postUpdateEquippedTextures(): void;
      postUpdateModelTextures(): void;
      postupdate(): void;
      preupdate(): void;
      processHitDamage(arg0: zombie.inventory.types.HandWeapon, arg1: zombie.characters.IsoGameCharacter, arg2: number, arg3: boolean, arg4: number): number;
      readInventory(arg0: java.nio.ByteBuffer): string;
      releaseAnimationPlayer(): void;
      reloadOutfit(): void;
      removeAllContainers(): void;
      removeAttachedItem(arg0: zombie.inventory.InventoryItem): void;
      removeFromHands(arg0: zombie.inventory.InventoryItem): boolean;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      removeWornItem(arg0: zombie.inventory.InventoryItem): void;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderServerGUI(): void;
      renderShadow(arg0: number, arg1: number, arg2: number): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reportEvent(arg0: string): void;
      reset(): void;
      resetBeardGrowingTime(): void;
      resetBodyDamageRemote(): void;
      resetEquippedHandsModels(): void;
      resetForReuse(): void;
      resetHairGrowingTime(): void;
      resetModel(): void;
      resetModelNextFrame(): void;
      reuseGridSquare(): void;
      save(arg0: java.nio.ByteBuffer): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      sendStopBurning(): void;
      separate(): void;
      serverRemoveItemFromZombie(arg0: string): void;
      setAge(arg0: number): void;
      setAimAtFloor(arg0: boolean): void;
      setAllowConversation(arg0: boolean): void;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAlreadyReadPages(arg0: string, arg1: number): void;
      setAlwaysKnockedDown(arg0: boolean): void;
      setAnimForecasted(arg0: number): void;
      setAnimated(arg0: boolean): void;
      setAsSurvivor(): void;
      setAsleep(arg0: boolean): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setAttachedItem(arg0: string, arg1: zombie.inventory.InventoryItem): void;
      setAttachedItems(arg0: zombie.characters.AttachedItems.AttachedItems): void;
      setAttackAnim(arg0: boolean): void;
      setAttackTargetSquare(arg0: zombie.iso.IsoGridSquare): void;
      setAttackWasSuperAttack(arg0: boolean): void;
      setAttackedBy(arg0: zombie.characters.IsoGameCharacter): void;
      setAutoWalk(arg0: boolean): void;
      setAutoWalkDirection(arg0: zombie.iso.Vector2): void;
      setAvoidDamage(arg0: boolean): void;
      setBecomeCrawler(arg0: boolean): void;
      setBed(arg0: zombie.iso.IsoObject): void;
      setBedType(arg0: string): void;
      setBeenMovingFor(arg0: number): void;
      setBeenSprintingFor(arg0: number): void;
      setBetaDelta(arg0: number): void;
      setBetaEffect(arg0: number): void;
      setBlink(arg0: boolean): void;
      setBloodImpactX(arg0: number): void;
      setBloodImpactY(arg0: number): void;
      setBloodImpactZ(arg0: number): void;
      setBloodSplat(arg0: zombie.iso.sprite.IsoSprite): void;
      setBodyToEat(arg0: zombie.iso.objects.IsoDeadBody): void;
      setBuildCheat(arg0: boolean): void;
      setBumpDone(arg0: boolean): void;
      setBumpFall(arg0: boolean): void;
      setBumpFallType(arg0: string): void;
      setBumpStaggered(arg0: boolean): void;
      setBumpType(arg0: string): void;
      setBumpedChr(arg0: zombie.characters.IsoGameCharacter): void;
      setCanCrawlUnderVehicle(arg0: boolean): void;
      setCanShout(arg0: boolean): void;
      setCanWalk(arg0: boolean): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setClickSound(arg0: string): void;
      setCloseKilled(arg0: boolean): void;
      setClothingItem_Back(arg0: zombie.inventory.InventoryItem): void;
      setClothingItem_Feet(arg0: zombie.inventory.InventoryItem): void;
      setClothingItem_Hands(arg0: zombie.inventory.InventoryItem): void;
      setClothingItem_Head(arg0: zombie.inventory.InventoryItem): void;
      setClothingItem_Legs(arg0: zombie.inventory.InventoryItem): void;
      setClothingItem_Torso(arg0: zombie.inventory.InventoryItem): void;
      setCollidable(arg0: boolean): void;
      setCollideType(arg0: string): void;
      setCollidedE(arg0: boolean): void;
      setCollidedN(arg0: boolean): void;
      setCollidedObject(arg0: zombie.iso.IsoObject): void;
      setCollidedS(arg0: boolean): void;
      setCollidedThisFrame(arg0: boolean): void;
      setCollidedW(arg0: boolean): void;
      setCollidedWithDoor(arg0: boolean): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCrawler(arg0: boolean): void;
      setCrawlerType(arg0: number): void;
      setCriticalHit(arg0: boolean): void;
      setCurrent(arg0: zombie.iso.IsoGridSquare): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setDamage(arg0: number): void;
      setDangerLevels(arg0: number): void;
      setDeathDragDown(arg0: boolean): void;
      setDebugMonitor(arg0: zombie.core.skinnedmodel.advancedanimation.debug.AnimatorDebugMonitor): void;
      setDefaultCondition(arg0: number): void;
      setDefaultState(arg0: zombie.ai.State): void;
      setDelayToSleep(arg0: number): void;
      setDepressDelta(arg0: number): void;
      setDepressEffect(arg0: number): void;
      setDescriptor(arg0: zombie.characters.SurvivorDesc): void;
      setDestroyed(arg0: boolean): void;
      setDieCount(arg0: number): void;
      setDir(arg0: number): void;
      setDirectionAngle(arg0: number): void;
      setDoDeathSound(arg0: boolean): void;
      setDressInRandomOutfit(arg0: boolean): void;
      setEatBodyTarget(arg0: zombie.iso.IsoMovingObject, arg1: boolean): void;
      setEatingZombies(arg0: java.util.ArrayList<zombie.characters.IsoZombie>): void;
      setFakeDead(arg0: boolean): void;
      setFallOnFront(arg0: boolean): void;
      setFallTime(arg0: number): void;
      setFarmingCheat(arg0: boolean): void;
      setFeelersize(arg0: number): void;
      setFemale(arg0: boolean): void;
      setFemaleEtc(arg0: boolean): void;
      setFireKillRate(arg0: number): void;
      setFireSpreadProbability(arg0: number): void;
      setFirstUpdate(arg0: boolean): void;
      setFollowingTarget(arg0: zombie.characters.IsoGameCharacter): void;
      setForceEatingAnimation(arg0: boolean): void;
      setForceFakeDead(arg0: boolean): void;
      setForceShove(arg0: boolean): void;
      setForceWakeUpTime(arg0: number): void;
      setForwardDirection(arg0: zombie.iso.Vector2): void;
      setGodMod(arg0: boolean): void;
      setHaloNote(arg0: string, arg1: number): void;
      setHealth(arg0: number): void;
      setHealthCheat(arg0: boolean): void;
      setHideWeaponModel(arg0: boolean): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setHitAngle(arg0: zombie.iso.Vector2): void;
      setHitDir(arg0: zombie.iso.Vector2): void;
      setHitForce(arg0: number): void;
      setHitFromAngle(arg0: number): void;
      setHitFromBehind(arg0: boolean): void;
      setHitHeadWhileOnFloor(arg0: number): void;
      setHitLegsWhileOnFloor(arg0: boolean): void;
      setHitReaction(arg0: string): void;
      setHitTime(arg0: number): void;
      setHurtSound(arg0: string): void;
      setID(arg0: number): void;
      setIDCount(arg0: number): void;
      setIgnoreAimingInput(arg0: boolean): void;
      setIgnoreMovement(arg0: boolean): void;
      setIgnoreStaggerBack(arg0: boolean): void;
      setImmortalTutorialZombie(arg0: boolean): void;
      setImpulsex(arg0: number): void;
      setImpulsey(arg0: number): void;
      setInventory(arg0: zombie.inventory.ItemContainer): void;
      setInvincible(arg0: boolean): void;
      setInvisible(arg0: boolean): void;
      setIsAiming(arg0: boolean): void;
      setIsNPC(arg0: boolean): void;
      setJawStabAttach(arg0: boolean): void;
      setKeyId(arg0: number): void;
      setKnifeDeath(arg0: boolean): void;
      setKnockedDown(arg0: boolean): void;
      setLast(arg0: zombie.iso.IsoGridSquare): void;
      setLastBump(arg0: number): void;
      setLastChatMessage(arg0: zombie.chat.ChatMessage): void;
      setLastCollideTime(arg0: number): void;
      setLastCollidedN(arg0: boolean): void;
      setLastCollidedW(arg0: boolean): void;
      setLastFallSpeed(arg0: number): void;
      setLastHeardSound(arg0: number, arg1: number, arg2: number): void;
      setLastHitCount(arg0: number): void;
      setLastHourSleeped(arg0: number): void;
      setLastLocalEnemies(arg0: number): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setLastSpokenLine(arg0: string): void;
      setLastTargettedBy(arg0: zombie.characters.IsoZombie): void;
      setLastZombieKills(arg0: number): void;
      setLeaveBodyTimedown(arg0: number): void;
      setLegsSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setLevelUpMultiplier(arg0: number): void;
      setLimpulsex(arg0: number): void;
      setLimpulsey(arg0: number): void;
      setLlx(arg0: number): void;
      setLly(arg0: number): void;
      setLlz(arg0: number): void;
      setLrx(arg0: number): void;
      setLry(arg0: number): void;
      setLx(arg0: number): void;
      setLy(arg0: number): void;
      setLz(arg0: number): void;
      setMaxTwist(arg0: number): void;
      setMaxWeight(arg0: number): void;
      setMaxWeightBase(arg0: number): void;
      setMechanicsCheat(arg0: boolean): void;
      setMeleeDelay(arg0: number): void;
      setMetabolicTarget(arg0: zombie.characters.BodyDamage.Metabolics): void;
      setMomentumScalar(arg0: number): void;
      setMovablesCheat(arg0: boolean): void;
      setMoveDelta(arg0: number): void;
      setMoveForwardVec(arg0: zombie.iso.Vector2): void;
      setMovedThumpable(arg0: boolean): void;
      setMovementLastFrame(arg0: zombie.iso.Vector2): void;
      setMoving(arg0: boolean): void;
      setMovingSquareNow(): void;
      setNPC(arg0: boolean): void;
      setName(arg0: string): void;
      setNextWander(arg0: number): void;
      setNoDamage(arg0: boolean): void;
      setNoPicking(arg0: boolean): void;
      setNoTeeth(arg0: boolean): void;
      setNumSurvivorsInVicinity(arg0: number): void;
      setNx(arg0: number): void;
      setNy(arg0: number): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOnDeathDone(arg0: boolean): void;
      setOnFire(arg0: boolean): void;
      setOnFloor(arg0: boolean): void;
      setOnKillDone(arg0: boolean): void;
      setOnlyJawStab(arg0: boolean): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPainDelta(arg0: number): void;
      setPainEffect(arg0: number): void;
      setPath2(arg0: zombie.vehicles.PolygonalMap2$Path): void;
      setPathFindIndex(arg0: number): void;
      setPathIndex(arg0: number): void;
      setPathing(arg0: boolean): void;
      setPatience(arg0: number): void;
      setPatienceMax(arg0: number): void;
      setPatienceMin(arg0: number): void;
      setPerkLevelDebug(arg0: zombie.characters.skills.PerkFactory$Perk, arg1: number): void;
      setPersistentOutfitID(arg0: number, arg1: boolean): void;
      setPipedFuelAmount(arg0: number): void;
      setPlayerAttackPosition(arg0: string): void;
      setPlayingDeathSound(arg0: boolean): void;
      setPrimaryHandItem(arg0: zombie.inventory.InventoryItem): void;
      setRangedWeaponEmpty(arg0: boolean): void;
      setReading(arg0: boolean): void;
      setReanim(arg0: boolean): void;
      setReanimAnimDelay(arg0: number): void;
      setReanimAnimFrame(arg0: number): void;
      setReanimate(arg0: boolean): void;
      setReanimateTimer(arg0: number): void;
      setReanimatedPlayer(arg0: boolean): void;
      setRecoilDelay(arg0: number): void;
      setReduceInfectionPower(arg0: number): void;
      setRemoteID(arg0: number): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setRunning(arg0: boolean): void;
      setSafety(arg0: boolean): void;
      setSafetyCooldown(arg0: number): void;
      setSayLine(arg0: string): void;
      setSceneCulled(arg0: boolean): void;
      setScriptModule(arg0: string): void;
      setScriptnx(arg0: number): void;
      setScriptny(arg0: number): void;
      setSecondaryHandItem(arg0: zombie.inventory.InventoryItem): void;
      setShootable(arg0: boolean): void;
      setShowAdminTag(arg0: boolean): void;
      setSitAgainstWall(arg0: boolean): void;
      setSitOnGround(arg0: boolean): void;
      setSkeleton(arg0: boolean): void;
      setSleepingTabletDelta(arg0: number): void;
      setSleepingTabletEffect(arg0: number): void;
      setSlowFactor(arg0: number): void;
      setSlowTimer(arg0: number): void;
      setSneaking(arg0: boolean): void;
      setSolid(arg0: boolean): void;
      setSpeakColour(arg0: zombie.core.Color): void;
      setSpeakColourInfo(arg0: zombie.core.textures.ColorInfo): void;
      setSpeakTime(arg0: number): void;
      setSpeaking(arg0: boolean): void;
      setSpecialTooltip(arg0: boolean): void;
      setSpeedMod(arg0: number): void;
      setSprinting(arg0: boolean): void;
      setSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setStaggerBack(arg0: boolean): void;
      setStaggerTimeMod(arg0: number): void;
      setStateEventDelayTimer(arg0: number): void;
      setStateMachineLocked(arg0: boolean): void;
      setSuperAttack(arg0: boolean): void;
      setSurvivorKills(arg0: number): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTaintedWater(arg0: boolean): void;
      setTarget(arg0: zombie.iso.IsoMovingObject): void;
      setTargetAlpha(arg0: number): void;
      setTargetSeenTime(arg0: number): void;
      setTeleport(arg0: zombie.characters.NetworkTeleport): void;
      setTemperature(arg0: number): void;
      setTextureCreator(arg0: zombie.core.skinnedmodel.model.ModelInstanceTextureCreator): void;
      setThumpCondition(arg0: number, arg1: number): void;
      setThumpFlag(arg0: number): void;
      setThumpTarget(arg0: zombie.iso.objects.interfaces.Thumpable): void;
      setThumpTimer(arg0: number): void;
      setTimeOfSleep(arg0: number): void;
      setTimeSinceLastSmoke(arg0: number): void;
      setTimeSinceZombieAttack(arg0: number): void;
      setTimeThumping(arg0: number): void;
      setTimedActionInstantCheat(arg0: boolean): void;
      setTurnAlertedValues(arg0: number, arg1: number): void;
      setTurnDelta(arg0: number): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUnlimitedCarry(arg0: boolean): void;
      setUnlimitedEndurance(arg0: boolean): void;
      setUseHandWeapon(arg0: zombie.inventory.types.HandWeapon): void;
      setUseless(arg0: boolean): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setVariable(arg0: string, arg1: boolean): void;
      setVehicle(arg0: zombie.vehicles.BaseVehicle): void;
      setVehicle4TestCollision(arg0: zombie.vehicles.BaseVehicle): void;
      setVehicleHitLocation(arg0: zombie.vehicles.BaseVehicle): void;
      setVisibleToNPCs(arg0: boolean): void;
      setWalkType(arg0: string): void;
      setWasFakeDead(arg0: boolean): void;
      setWaterAmount(arg0: number): void;
      setWeight(arg0: number): void;
      setWidth(arg0: number): void;
      setWornItem(arg0: string, arg1: zombie.inventory.InventoryItem): void;
      setWornItems(arg0: zombie.characters.WornItems.WornItems): void;
      setX(arg0: number): void;
      setXp(arg0: zombie.characters.IsoGameCharacter$XP): void;
      setY(arg0: number): void;
      setZ(arg0: number): void;
      setZombieKills(arg0: number): void;
      setZombiesDontAttack(arg0: boolean): void;
      setbAltCollide(arg0: boolean): void;
      setbClimbing(arg0: boolean): void;
      setbDoDefer(arg0: boolean): void;
      setbFalling(arg0: boolean): void;
      setbOnBed(arg0: boolean): void;
      setbUseParts(arg0: boolean): void;
      shouldBeTurning(): boolean;
      shouldBeTurning90(): boolean;
      shouldBeTurningAround(): boolean;
      shouldBecomeCorpse(): boolean;
      shouldBecomeZombieAfterDeath(): boolean;
      shouldDoFenceLunge(): boolean;
      shouldDoInventory(): boolean;
      shouldGetUpFromCrawl(): boolean;
      shouldWaitToStartTimedAction(): boolean;
      smashCarWindow(arg0: zombie.vehicles.VehiclePart): void;
      smashWindow(arg0: zombie.iso.objects.IsoWindow): void;
      softReset(): void;
      splatBlood(arg0: number, arg1: number): void;
      splatBloodFloor(): void;
      splatBloodFloorBig(): void;
      spotted(arg0: zombie.iso.IsoMovingObject, arg1: boolean): void;
      startEvent(arg0: number, arg1: zombie.audio.GameSoundClip, arg2: java.util.BitSet): void;
      startMuzzleFlash(): void;
      startPlaybackGameVariables(): zombie.core.skinnedmodel.advancedanimation.AnimationVariableSource;
      stopEvent(arg0: number, arg1: zombie.audio.GameSoundClip, arg2: java.util.BitSet): void;
      stopOrTriggerSound(arg0: number): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection, arg3: java.nio.ByteBuffer): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      testCollideWithVehicles(arg0: zombie.vehicles.BaseVehicle): boolean;
      testDefense(arg0: zombie.characters.IsoZombie): boolean;
      testDotSide(arg0: zombie.iso.IsoMovingObject): string;
      toString(): string;
      toggleCrawling(): void;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitModData(): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      tryThump(arg0: zombie.iso.IsoGridSquare): boolean;
      unsetOutlineHighlight(): void;
      update(): void;
      updateEmitter(): void;
      updateEquippedRadioFreq(): void;
      updateEvent(arg0: number, arg1: zombie.audio.GameSoundClip): void;
      updateLightInfo(): void;
      updateRecoilVar(): void;
      updateSpeedModifiers(): void;
      updateTextObjects(): void;
      useDescriptor(arg0: zombie.SharedDescriptors$Descriptor): void;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      wasFakeDead(): boolean;
      wasLocal(): boolean;
      writeInventory(arg0: java.nio.ByteBuffer): void;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
      zeroForwardDirectionX(): void;
      zeroForwardDirectionY(): void;
    }
    /** [ENUM] zombie.characters.IsoZombie$ZombieSound */
    export class IsoZombie$ZombieSound {
      /* ENUM VALUES */
      static readonly Burned: IsoZombie$ZombieSound; 
      static readonly DeadCloseKilled: IsoZombie$ZombieSound; 
      static readonly DeadNotCloseKilled: IsoZombie$ZombieSound; 
      static readonly Hurt: IsoZombie$ZombieSound; 
      static readonly Idle: IsoZombie$ZombieSound; 
      static readonly Lunge: IsoZombie$ZombieSound; 
      static readonly MAX: IsoZombie$ZombieSound; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.characters.IsoZombie$ZombieSound[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): IsoZombie$ZombieSound;
      fromIndex(arg0: number): zombie.characters.IsoZombie$ZombieSound;
      radius(): number;
      valueOf(arg0: string): zombie.characters.IsoZombie$ZombieSound;
      values(): zombie.characters.IsoZombie$ZombieSound[];
    }
    // zombie.characters.MoveDeltaModifiers extends java.lang.Object
    export class MoveDeltaModifiers {
      private constructor();
      moveDelta: number;
      turnDelta: number;
      twistDelta: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.characters.NetworkCharacter extends java.lang.Object
    export class NetworkCharacter {
      private constructor();
      readonly transform?: zombie.characters.NetworkCharacter$Transform;
  
      checkReset(arg0: number): void;
      checkResetPlayer(arg0: number): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      predict(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): zombie.characters.NetworkCharacter$Transform;
      reconstruct(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): zombie.characters.NetworkCharacter$Transform;
      reset(): void;
      toString(): string;
      updateExtrapolationPoint(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      updateInterpolationPoint(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      updatePointInternal(arg0: number, arg1: number, arg2: number, arg3: number): void;
      updateTransform(arg0: number, arg1: number, arg2: number, arg3: number): void;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.characters.NetworkCharacter$Operation */
    export class NetworkCharacter$Operation {
      /* ENUM VALUES */
      static readonly EXTRAPOLATION: NetworkCharacter$Operation; 
      static readonly INTERPOLATION: NetworkCharacter$Operation; 
      static readonly NONE: NetworkCharacter$Operation; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.characters.NetworkCharacter$Operation[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): NetworkCharacter$Operation;
      valueOf(arg0: string): zombie.characters.NetworkCharacter$Operation;
      values(): zombie.characters.NetworkCharacter$Operation[];
    }
    // zombie.characters.NetworkCharacter$Transform extends java.lang.Object
    export class NetworkCharacter$Transform {
      private constructor();
      moving: boolean;
      operation?: zombie.characters.NetworkCharacter$Operation;
      position?: zombie.iso.Vector2;
      rotation?: zombie.iso.Vector2;
      time: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.characters.NetworkCharacterAI extends java.lang.Object
    export class NetworkCharacterAI {
      private constructor();
      readonly debugData?: java.util.HashMap<number, string>;
      predictionType?: zombie.network.NetworkVariables$PredictionTypes;
      teleportDebug?: zombie.characters.NetworkTeleport$NetworkTeleportDebug;
  
      addTeleportData(arg0: number, arg1: string): void;
      checkPosition(arg0: zombie.core.raknet.UdpConnection, arg1: zombie.characters.IsoGameCharacter, arg2: number, arg3: number): boolean;
      clearTeleportDebug(): void;
      equals(arg0: any): boolean;
      getAction(): zombie.characters.CharacterTimedActions.BaseAction;
      getClass(): java.lang.Class<any>;
      getTeleportDebug(): zombie.characters.NetworkTeleport$NetworkTeleportDebug;
      hashCode(): number;
      isCollisionEnabled(): boolean;
      isNoCollisionTimeout(): boolean;
      isSetDeadBody(): boolean;
      isSetVehicleHit(): boolean;
      isVehicleHitTimeout(): boolean;
      notify(): void;
      notifyAll(): void;
      processDeadBody(): void;
      processVehicleHit(): void;
      reset(): void;
      resetSpeedLimiter(): void;
      resetVehicleHitTimeout(): void;
      setAction(arg0: zombie.characters.CharacterTimedActions.BaseAction): void;
      setDeadBody(arg0: zombie.network.packets.DeadCharacterPacket): void;
      setLocal(arg0: boolean): void;
      setNoCollision(arg0: number): void;
      setOverride(arg0: boolean, arg1: string, arg2: string): void;
      setTeleportDebug(arg0: zombie.characters.NetworkTeleport$NetworkTeleportDebug): void;
      setVehicleHit(arg0: zombie.network.packets.hit.VehicleHitPacket): void;
      startAction(): void;
      stopAction(): void;
      toString(): string;
      updateHitVehicle(): void;
      wait(arg0: number): void;
      wasLocal(): boolean;
    }
    // zombie.characters.NetworkPlayerAI extends zombie.characters.NetworkCharacterAI
    export class NetworkPlayerAI {
      private constructor();
      climbFenceOutcomeFall: boolean;
      collidePointX: number;
      collidePointY: number;
      readonly debugData?: java.util.HashMap<number, string>;
      direction?: zombie.iso.Vector2;
      distance?: zombie.iso.Vector2;
      readonly events?: java.util.LinkedList<zombie.network.packets.EventPacket>;
      footstepSoundRadius: number;
      forcePathFinder: boolean;
      lastBooleanVariables: number;
      lastForwardDirection: number;
      lastPlayerMoveDirLen: number;
      moving: boolean;
      needToMovingUsingPathFinder: boolean;
      predictionType?: zombie.network.NetworkVariables$PredictionTypes;
      targetX: number;
      targetY: number;
      targetZ: number;
      teleportDebug?: zombie.characters.NetworkTeleport$NetworkTeleportDebug;
      usePathFind: boolean;
  
      addTeleportData(arg0: number, arg1: string): void;
      checkPosition(arg0: zombie.core.raknet.UdpConnection, arg1: zombie.characters.IsoGameCharacter, arg2: number, arg3: number): boolean;
      clearTeleportDebug(): void;
      equals(arg0: any): boolean;
      getAction(): zombie.characters.CharacterTimedActions.BaseAction;
      getClass(): java.lang.Class<any>;
      getTeleportDebug(): zombie.characters.NetworkTeleport$NetworkTeleportDebug;
      hashCode(): number;
      isCollisionEnabled(): boolean;
      isNeedToUpdate(): boolean;
      isNoCollisionTimeout(): boolean;
      isPressedCancelAction(): boolean;
      isPressedMovement(): boolean;
      isSetDeadBody(): boolean;
      isSetVehicleHit(): boolean;
      isVehicleHitTimeout(): boolean;
      needToUpdate(): void;
      notify(): void;
      notifyAll(): void;
      parse(arg0: zombie.network.packets.PlayerPacket): void;
      processDeadBody(): void;
      processVehicleHit(): void;
      reset(): void;
      resetSpeedLimiter(): void;
      resetVehicleHitTimeout(): void;
      set(arg0: zombie.network.packets.PlayerPacket): boolean;
      setAction(arg0: zombie.characters.CharacterTimedActions.BaseAction): void;
      setBlockUpdate(arg0: boolean): void;
      setDeadBody(arg0: zombie.network.packets.DeadCharacterPacket): void;
      setLocal(arg0: boolean): void;
      setNoCollision(arg0: number): void;
      setOverride(arg0: boolean, arg1: string, arg2: string): void;
      setPressedCancelAction(arg0: boolean): void;
      setPressedMovement(arg0: boolean): void;
      setTeleportDebug(arg0: zombie.characters.NetworkTeleport$NetworkTeleportDebug): void;
      setUpdateTimer(arg0: number): void;
      setVehicleHit(arg0: zombie.network.packets.hit.VehicleHitPacket): void;
      startAction(): void;
      stopAction(): void;
      toString(): string;
      update(): void;
      updateHitVehicle(): void;
      wait(arg0: number): void;
      wasLocal(): boolean;
    }
    // zombie.characters.NetworkTeleport extends java.lang.Object
    export class NetworkTeleport {
      private constructor();
      static enable: boolean;
      static enableInstantTeleport: boolean;
      ndirection: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      process(arg0: number): void;
      stop(arg0: number): void;
      teleport(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.network.packets.PlayerPacket, arg2: number): boolean;
      toString(): string;
      update(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.network.packets.PlayerPacket): void;
      wait(arg0: number): void;
    }
    // zombie.characters.NetworkTeleport$NetworkTeleportDebug extends java.lang.Object
    export class NetworkTeleport$NetworkTeleportDebug {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDistance(): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.characters.NetworkTeleport$Type */
    export class NetworkTeleport$Type {
      /* ENUM VALUES */
      static readonly disappearing: NetworkTeleport$Type; 
      static readonly materialization: NetworkTeleport$Type; 
      static readonly none: NetworkTeleport$Type; 
      static readonly teleportation: NetworkTeleport$Type; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.characters.NetworkTeleport$Type[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): NetworkTeleport$Type;
      valueOf(arg0: string): zombie.characters.NetworkTeleport$Type;
      values(): zombie.characters.NetworkTeleport$Type[];
    }
    // zombie.characters.NetworkZombieAI extends zombie.characters.NetworkCharacterAI
    export class NetworkZombieAI {
      private constructor();
      DebugInterfaceActive: boolean;
      readonly debugData?: java.util.HashMap<number, string>;
      isClimbing: boolean;
      readonly mindSync?: zombie.characters.NetworkZombieMind;
      predictionType?: zombie.network.NetworkVariables$PredictionTypes;
      targetX: number;
      targetY: number;
      targetZ: number;
      teleportDebug?: zombie.characters.NetworkTeleport$NetworkTeleportDebug;
      usePathFind: boolean;
      readonly zombie?: zombie.characters.IsoZombie;
  
      addTeleportData(arg0: number, arg1: string): void;
      checkPosition(arg0: zombie.core.raknet.UdpConnection, arg1: zombie.characters.IsoGameCharacter, arg2: number, arg3: number): boolean;
      clearTeleportDebug(): void;
      equals(arg0: any): boolean;
      extraUpdate(): void;
      getAction(): zombie.characters.CharacterTimedActions.BaseAction;
      getClass(): java.lang.Class<any>;
      getPredictionDebug(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.network.packets.ZombiePacket, arg2: number, arg3: number): string;
      getTeleportDebug(): zombie.characters.NetworkTeleport$NetworkTeleportDebug;
      hashCode(): number;
      isCollisionEnabled(): boolean;
      isNoCollisionTimeout(): boolean;
      isSetDeadBody(): boolean;
      isSetVehicleHit(): boolean;
      isVehicleHitTimeout(): boolean;
      notify(): void;
      notifyAll(): void;
      parse(arg0: zombie.network.packets.ZombiePacket): void;
      preupdate(): void;
      processDeadBody(): void;
      processVehicleHit(): void;
      reset(): void;
      resetSpeedLimiter(): void;
      resetVehicleHitTimeout(): void;
      set(arg0: zombie.network.packets.ZombiePacket): void;
      setAction(arg0: zombie.characters.CharacterTimedActions.BaseAction): void;
      setDeadBody(arg0: zombie.network.packets.DeadCharacterPacket): void;
      setLocal(arg0: boolean): void;
      setNoCollision(arg0: number): void;
      setOverride(arg0: boolean, arg1: string, arg2: string): void;
      setTeleportDebug(arg0: zombie.characters.NetworkTeleport$NetworkTeleportDebug): void;
      setUpdateTimer(arg0: number): void;
      setVehicleHit(arg0: zombie.network.packets.hit.VehicleHitPacket): void;
      startAction(): void;
      stopAction(): void;
      toString(): string;
      updateHitVehicle(): void;
      wait(arg0: number): void;
      wasLocal(): boolean;
    }
    // zombie.characters.NetworkZombieMind extends java.lang.Object
    export class NetworkZombieMind {
      private constructor();
      doRestorePFBTarget(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      parse(arg0: zombie.network.packets.ZombiePacket): void;
      restorePFBTarget(): void;
      set(arg0: zombie.network.packets.ZombiePacket): void;
      toString(): string;
      wait(arg0: number): void;
      zombieIdleUpdate(): void;
    }
    /** [ENUM] zombie.characters.Stance */
    export class Stance {
      /* ENUM VALUES */
      static readonly Haste: Stance; 
      static readonly Normal: Stance; 
      static readonly Stealth: Stance; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.characters.Stance[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): Stance;
      valueOf(arg0: string): zombie.characters.Stance;
      values(): zombie.characters.Stance[];
    }
    // zombie.characters.Stats extends java.lang.Object
    export class Stats {
      private constructor();
      Anger: number;
      Boredom: number;
      ChasingZombiesDanger: number;
      Drunkenness: number;
      Fear: number;
      LastNumChasingZombies: number;
      LastNumVisibleZombies: number;
      LastVeryCloseZombies: number;
      MusicZombiesTargeting: number;
      MusicZombiesVisible: number;
      NumChasingZombies: number;
      static NumCloseZombies: number;
      NumVisibleZombies: number;
      Pain: number;
      Panic: number;
      Sanity: number;
      Sickness: number;
      Tripping: boolean;
      TrippingRotAngle: number;
      boredom: number;
      endurance: number;
      enduranceRecharging: boolean;
      endurancedanger: number;
      endurancelast: number;
      endurancewarn: number;
      fatigue: number;
      fitness: number;
      hunger: number;
      idleboredom: number;
      morale: number;
      stress: number;
      stressFromCigarettes: number;
      thirst: number;
  
      equals(arg0: any): boolean;
      getAnger(): number;
      getBoredom(): number;
      getClass(): java.lang.Class<any>;
      getDrunkenness(): number;
      getEndurance(): number;
      getEnduranceRecharging(): boolean;
      getEndurancedanger(): number;
      getEndurancelast(): number;
      getEndurancewarn(): number;
      getFatigue(): number;
      getFear(): number;
      getFitness(): number;
      getHunger(): number;
      getIdleboredom(): number;
      getMaxStressFromCigarettes(): number;
      getMorale(): number;
      getNumChasingZombies(): number;
      getNumVeryCloseZombies(): number;
      getNumVisibleZombies(): number;
      getPain(): number;
      getPanic(): number;
      getSanity(): number;
      getSickness(): number;
      getStress(): number;
      getStressFromCigarettes(): number;
      getThirst(): number;
      getTrippingRotAngle(): number;
      getVisibleZombies(): number;
      hashCode(): number;
      isTripping(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      notify(): void;
      notifyAll(): void;
      resetStats(): void;
      save(arg0: java.nio.ByteBuffer): void;
      setAnger(arg0: number): void;
      setBoredom(arg0: number): void;
      setDrunkenness(arg0: number): void;
      setEndurance(arg0: number): void;
      setEndurancedanger(arg0: number): void;
      setEndurancelast(arg0: number): void;
      setEndurancewarn(arg0: number): void;
      setFatigue(arg0: number): void;
      setFear(arg0: number): void;
      setFitness(arg0: number): void;
      setHunger(arg0: number): void;
      setIdleboredom(arg0: number): void;
      setMorale(arg0: number): void;
      setNumVisibleZombies(arg0: number): void;
      setPain(arg0: number): void;
      setPanic(arg0: number): void;
      setSanity(arg0: number): void;
      setSickness(arg0: number): void;
      setStress(arg0: number): void;
      setStressFromCigarettes(arg0: number): void;
      setThirst(arg0: number): void;
      setTripping(arg0: boolean): void;
      setTrippingRotAngle(arg0: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.characters.SurvivorDesc extends java.lang.Object
    export class SurvivorDesc {
      private constructor();
      static readonly HairCommonColors?: java.util.ArrayList<zombie.core.ImmutableColor>;
      Profession?: string;
      static readonly TrouserCommonColors?: java.util.ArrayList<zombie.core.Color>;
      bDead: boolean;
      readonly extra?: java.util.ArrayList<string>;
      readonly humanVisual?: zombie.core.skinnedmodel.visual.HumanVisual;
      readonly wornItems?: zombie.characters.WornItems.WornItems;
  
      addHairColor(arg0: zombie.core.textures.ColorInfo): void;
      addObservation(arg0: string): void;
      addTrouserColor(arg0: zombie.core.textures.ColorInfo): void;
      dressInNamedOutfit(arg0: string): void;
      equals(arg0: any): boolean;
      getAggressiveness(): number;
      getBravery(): number;
      getCalculatedToughness(): number;
      getClass(): java.lang.Class<any>;
      getCommonHairColor(): java.util.ArrayList<zombie.core.ImmutableColor>;
      getCompassion(): number;
      getExtras(): java.util.ArrayList<string>;
      getFavourindoors(): number;
      getForename(): string;
      getFriendliness(): number;
      getGroup(): zombie.characters.SurvivorGroup;
      getHumanVisual(): zombie.core.skinnedmodel.visual.HumanVisual;
      getID(): number;
      getIDCount(): number;
      getInstance(): zombie.characters.IsoGameCharacter;
      getInventoryScript(): string;
      getItemVisuals(arg0: zombie.core.skinnedmodel.visual.ItemVisuals): void;
      getLoner(): number;
      getLoyalty(): number;
      getMetCount(): java.util.HashMap<number, number>;
      getMeta(): se.krka.kahlua.vm.KahluaTable;
      getObservations(): java.util.ArrayList<zombie.characters.traits.ObservationFactory$Observation>;
      getProfession(): string;
      getRandomSkinColor(): zombie.core.Color;
      getSurname(): string;
      getTemper(): number;
      getTorso(): string;
      getType(): zombie.characters.SurvivorFactory$SurvivorType;
      getWornItem(arg0: string): zombie.inventory.InventoryItem;
      getWornItems(): zombie.characters.WornItems.WornItems;
      getXPBoostMap(): java.util.HashMap<zombie.characters.skills.PerkFactory$Perk, number>;
      hasObservation(arg0: string): boolean;
      hashCode(): number;
      isAggressive(): boolean;
      isDead(): boolean;
      isFemale(): boolean;
      isFriendly(): boolean;
      isLeader(): boolean;
      isSkeleton(): boolean;
      isZombie(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number, arg2: zombie.characters.IsoGameCharacter): void;
      loadCompact(arg0: java.nio.ByteBuffer): void;
      meet(arg0: zombie.characters.SurvivorDesc): void;
      notify(): void;
      notifyAll(): void;
      save(arg0: java.nio.ByteBuffer): void;
      saveCompact(arg0: java.nio.ByteBuffer): void;
      setAggressiveness(arg0: number): void;
      setBravery(arg0: number): void;
      setCompassion(arg0: number): void;
      setFavourindoors(arg0: number): void;
      setFemale(arg0: boolean): void;
      setForename(arg0: string): void;
      setFriendliness(arg0: number): void;
      setID(arg0: number): void;
      setIDCount(arg0: number): void;
      setInstance(arg0: zombie.characters.IsoGameCharacter): void;
      setInventoryScript(arg0: string): void;
      setLoner(arg0: number): void;
      setLoyalty(arg0: number): void;
      setProfession(arg0: string): void;
      setProfessionSkills(arg0: zombie.characters.professions.ProfessionFactory$Profession): void;
      setSurname(arg0: string): void;
      setTemper(arg0: number): void;
      setTorso(arg0: string): void;
      setType(arg0: zombie.characters.SurvivorFactory$SurvivorType): void;
      setWornItem(arg0: string, arg1: zombie.inventory.InventoryItem): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.characters.SurvivorFactory extends java.lang.Object
    export class SurvivorFactory {
      private constructor();
      static readonly FemaleForenames?: java.util.ArrayList<string>;
      static readonly MaleForenames?: java.util.ArrayList<string>;
      static readonly Surnames?: java.util.ArrayList<string>;
  
      CreateFamily(arg0: number): zombie.characters.SurvivorDesc[];
      CreateSurvivor(arg0: zombie.characters.SurvivorFactory$SurvivorType): zombie.characters.SurvivorDesc;
      CreateSurvivorGroup(arg0: number): zombie.characters.SurvivorDesc[];
      InstansiateInCell(arg0: zombie.characters.SurvivorDesc, arg1: zombie.iso.IsoCell, arg2: number, arg3: number, arg4: number): zombie.characters.IsoSurvivor;
      Reset(): void;
      addFemaleForename(arg0: string): void;
      addMaleForename(arg0: string): void;
      addSurname(arg0: string): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      randomName(arg0: zombie.characters.SurvivorDesc): void;
      setTorso(arg0: zombie.characters.SurvivorDesc): void;
      toString(): string;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.characters.SurvivorFactory$SurvivorType */
    export class SurvivorFactory$SurvivorType {
      /* ENUM VALUES */
      static readonly Aggressive: SurvivorFactory$SurvivorType; 
      static readonly Friendly: SurvivorFactory$SurvivorType; 
      static readonly Neutral: SurvivorFactory$SurvivorType; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.characters.SurvivorFactory$SurvivorType[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): SurvivorFactory$SurvivorType;
      valueOf(arg0: string): zombie.characters.SurvivorFactory$SurvivorType;
      values(): zombie.characters.SurvivorFactory$SurvivorType[];
    }
    // zombie.characters.SurvivorGroup extends java.lang.Object
    export class SurvivorGroup {
      private constructor();
      readonly Members?: java.util.ArrayList<zombie.characters.SurvivorDesc>;
      Order?: string;
      Safehouse?: zombie.iso.BuildingDef;
  
      addMember(arg0: zombie.characters.SurvivorDesc): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getLeader(): zombie.characters.SurvivorDesc;
      hashCode(): number;
      isLeader(arg0: zombie.characters.SurvivorDesc): boolean;
      notify(): void;
      notifyAll(): void;
      removeMember(arg0: zombie.characters.SurvivorDesc): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.characters.ZombieGroup extends java.lang.Object
    export class ZombieGroup {
      private constructor();
      lastSpreadOutTime: number;
  
      add(arg0: zombie.characters.IsoZombie): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getLeader(): zombie.characters.IsoZombie;
      hashCode(): number;
      isEmpty(): boolean;
      notify(): void;
      notifyAll(): void;
      remove(arg0: zombie.characters.IsoZombie): void;
      reset(): zombie.characters.ZombieGroup;
      size(): number;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.characters.AttachedItems {
    // zombie.characters.AttachedItems.AttachedItem extends java.lang.Object
    export class AttachedItem {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getItem(): zombie.inventory.InventoryItem;
      getLocation(): string;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.characters.AttachedItems.AttachedItems extends java.lang.Object
    export class AttachedItems {
      private constructor();
      clear(): void;
      contains(arg0: zombie.inventory.InventoryItem): boolean;
      copyFrom(arg0: zombie.characters.AttachedItems.AttachedItems): void;
      equals(arg0: any): boolean;
      forEach(arg0: java.util._function.Consumer<zombie.characters.AttachedItems.AttachedItem>): void;
      get(arg0: number): zombie.characters.AttachedItems.AttachedItem;
      getClass(): java.lang.Class<any>;
      getGroup(): zombie.characters.AttachedItems.AttachedLocationGroup;
      getItem(arg0: string): zombie.inventory.InventoryItem;
      getItemByIndex(arg0: number): zombie.inventory.InventoryItem;
      getLocation(arg0: zombie.inventory.InventoryItem): string;
      hashCode(): number;
      isEmpty(): boolean;
      notify(): void;
      notifyAll(): void;
      remove(arg0: zombie.inventory.InventoryItem): void;
      setItem(arg0: string, arg1: zombie.inventory.InventoryItem): void;
      size(): number;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.characters.AttachedItems.AttachedLocation extends java.lang.Object
    export class AttachedLocation {
      private constructor();
      equals(arg0: any): boolean;
      getAttachmentName(): string;
      getClass(): java.lang.Class<any>;
      getId(): string;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      setAttachmentName(arg0: string): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.characters.AttachedItems.AttachedLocationGroup extends java.lang.Object
    export class AttachedLocationGroup {
      private constructor();
      checkValid(arg0: string): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getLocation(arg0: string): zombie.characters.AttachedItems.AttachedLocation;
      getLocationByIndex(arg0: number): zombie.characters.AttachedItems.AttachedLocation;
      getOrCreateLocation(arg0: string): zombie.characters.AttachedItems.AttachedLocation;
      hashCode(): number;
      indexOf(arg0: string): number;
      notify(): void;
      notifyAll(): void;
      size(): number;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.characters.AttachedItems.AttachedLocations extends java.lang.Object
    export class AttachedLocations {
      private constructor();
      Reset(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getGroup(arg0: string): zombie.characters.AttachedItems.AttachedLocationGroup;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.characters.BodyDamage {
    // zombie.characters.BodyDamage.BodyDamage extends java.lang.Object
    export class BodyDamage {
      private constructor();
      readonly BodyParts?: java.util.ArrayList<zombie.characters.BodyDamage.BodyPart>;
      readonly BodyPartsLastState?: java.util.ArrayList<zombie.characters.BodyDamage.BodyPartLast>;
      BoredomDecreaseFromReading: number;
      BoredomLevel: number;
      BurntToDeath: boolean;
      CatchACold: number;
      ColdDamageStage: number;
      ColdProgressionRate: number;
      ColdSneezeTimerMax: number;
      ColdSneezeTimerMin: number;
      ColdStrength: number;
      ContinualPainIncrease: number;
      CurrentNumZombiesVisible: number;
      DamageModCount: number;
      DrunkIncreaseValue: number;
      DrunkReductionValue: number;
      FakeInfectionLevel: number;
      HasACold: boolean;
      HealthFromFood: number;
      HealthFromFoodTimer: number;
      HealthReductionFromSevereBadMoodles: number;
      InfectionGrowthRate: number;
      InfectionLevel: number;
      static readonly InfectionLevelToZombify: number;
      InfectionMortalityDuration: number;
      InfectionTime: number;
      InitialBitePain: number;
      InitialScratchPain: number;
      InitialThumpPain: number;
      InitialWoundPain: number;
      MildColdSneezeTimerMax: number;
      MildColdSneezeTimerMin: number;
      NastyColdSneezeTimerMax: number;
      NastyColdSneezeTimerMin: number;
      OldNumZombiesVisible: number;
      OverallBodyHealth: number;
      PainReductionFromMeds: number;
      PanicIncreaseValue: number;
      PanicIncreaseValueFrame: number;
      PanicReductionValue: number;
      ParentChar?: zombie.characters.IsoGameCharacter;
      ReducedHealthAddition: number;
      SeverlyReducedHealthAddition: number;
      SleepingHealthAddition: number;
      SneezeCoughActive: number;
      SneezeCoughDelay: number;
      SneezeCoughTime: number;
      StandardHealthAddition: number;
      StandardHealthFromFoodTime: number;
      StandardPainReductionWhenWell: number;
      TimeToSneezeOrCough: number;
      UnhappynessLevel: number;
      Wetness: number;
  
      AddDamage(arg0: number, arg1: number): void;
      AddGeneralHealth(arg0: number): void;
      AddRandomDamage(): void;
      AddRandomDamageFromZombie(arg0: zombie.characters.IsoZombie, arg1: string): boolean;
      DamageFromWeapon(arg0: zombie.inventory.types.HandWeapon): void;
      DisableFakeInfection(arg0: number): void;
      DrawUntexturedQuad(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      HasInjury(): boolean;
      IncreasePanic(arg0: number): void;
      IncreasePanicFloat(arg0: number): void;
      IsBandaged(arg0: zombie.characters.BodyDamage.BodyPartType): boolean;
      IsBitten(arg0: number): boolean;
      IsBleeding(arg0: number): boolean;
      IsBleedingStemmed(arg0: zombie.characters.BodyDamage.BodyPartType): boolean;
      IsCortorised(arg0: number): boolean;
      IsCut(arg0: zombie.characters.BodyDamage.BodyPartType): boolean;
      IsDeepWounded(arg0: zombie.characters.BodyDamage.BodyPartType): boolean;
      IsFakeInfected(): boolean;
      IsInfected(arg0: zombie.characters.BodyDamage.BodyPartType): boolean;
      IsOnFire(): boolean;
      IsScratched(arg0: zombie.characters.BodyDamage.BodyPartType): boolean;
      IsSneezingCoughing(): number;
      IsStitched(arg0: zombie.characters.BodyDamage.BodyPartType): boolean;
      IsWounded(arg0: number): boolean;
      JustAteFood(arg0: zombie.inventory.types.Food, arg1: number): void;
      JustDrankBooze(arg0: zombie.inventory.types.Food, arg1: number): void;
      JustReadSomething(arg0: zombie.inventory.types.Literature): void;
      JustTookPainMeds(): void;
      JustTookPill(arg0: zombie.inventory.InventoryItem): void;
      OnFire(arg0: boolean): void;
      ReduceGeneralHealth(arg0: number): void;
      ReducePanic(): void;
      RestoreToFullHealth(): void;
      SetBandaged(arg0: number, arg1: boolean, arg2: number, arg3: boolean, arg4: string): void;
      SetBitten(arg0: number, arg1: boolean, arg2: boolean): void;
      SetBleeding(arg0: zombie.characters.BodyDamage.BodyPartType, arg1: boolean): void;
      SetBleedingStemmed(arg0: number, arg1: boolean): void;
      SetCortorised(arg0: number, arg1: boolean): void;
      SetCut(arg0: number, arg1: boolean): void;
      SetScratched(arg0: zombie.characters.BodyDamage.BodyPartType, arg1: boolean): void;
      SetScratchedFromWeapon(arg0: number, arg1: boolean): void;
      SetWounded(arg0: zombie.characters.BodyDamage.BodyPartType, arg1: boolean): void;
      ShowDebugInfo(): void;
      TriggerSneezeCough(): void;
      Update(): void;
      UpdateBoredom(): void;
      UpdateCold(): void;
      UpdatePanicState(): void;
      UpdateStrength(): void;
      UpdateWetness(): void;
      UseBandageOnMostNeededPart(): boolean;
      WasBurntToDeath(): boolean;
      areBodyPartsBleeding(arg0: zombie.characters.BodyDamage.BodyPartType, arg1: zombie.characters.BodyDamage.BodyPartType): boolean;
      decreaseBodyWetness(arg0: number): void;
      doBodyPartsHaveInjuries(arg0: zombie.characters.BodyDamage.BodyPartType, arg1: zombie.characters.BodyDamage.BodyPartType): boolean;
      doesBodyPartHaveInjury(arg0: zombie.characters.BodyDamage.BodyPartType): boolean;
      equals(arg0: any): boolean;
      getApparentInfectionLevel(): number;
      getBodyPart(arg0: zombie.characters.BodyDamage.BodyPartType): zombie.characters.BodyDamage.BodyPart;
      getBodyPartHealth(arg0: zombie.characters.BodyDamage.BodyPartType): number;
      getBodyPartName(arg0: zombie.characters.BodyDamage.BodyPartType): string;
      getBodyParts(): java.util.ArrayList<zombie.characters.BodyDamage.BodyPart>;
      getBodyPartsLastState(arg0: zombie.characters.BodyDamage.BodyPartType): zombie.characters.BodyDamage.BodyPartLast;
      getBoredomDecreaseFromReading(): number;
      getBoredomLevel(): number;
      getCatchACold(): number;
      getClass(): java.lang.Class<any>;
      getColdDamageStage(): number;
      getColdProgressionRate(): number;
      getColdReduction(): number;
      getColdSneezeTimerMax(): number;
      getColdSneezeTimerMin(): number;
      getColdStrength(): number;
      getContinualPainIncrease(): number;
      getCurrentNumZombiesVisible(): number;
      getDamageModCount(): number;
      getDrunkIncreaseValue(): number;
      getDrunkReductionValue(): number;
      getFakeInfectionLevel(): number;
      getFoodSicknessLevel(): number;
      getHealth(): number;
      getHealthFromFood(): number;
      getHealthFromFoodTimer(): number;
      getHealthReductionFromSevereBadMoodles(): number;
      getInfectionGrowthRate(): number;
      getInfectionLevel(): number;
      getInfectionMortalityDuration(): number;
      getInfectionTime(): number;
      getInitialBitePain(): number;
      getInitialScratchPain(): number;
      getInitialThumpPain(): number;
      getInitialWoundPain(): number;
      getMildColdSneezeTimerMax(): number;
      getMildColdSneezeTimerMin(): number;
      getNastyColdSneezeTimerMax(): number;
      getNastyColdSneezeTimerMin(): number;
      getNumPartsBitten(): number;
      getNumPartsBleeding(): number;
      getNumPartsScratched(): number;
      getOldNumZombiesVisible(): number;
      getOverallBodyHealth(): number;
      getPainReduction(): number;
      getPainReductionFromMeds(): number;
      getPanicIncreaseValue(): number;
      getPanicIncreaseValueFrame(): number;
      getPanicReductionValue(): number;
      getParentChar(): zombie.characters.IsoGameCharacter;
      getPoisonLevel(): number;
      getReducedHealthAddition(): number;
      getRemotePainLevel(): number;
      getSeverlyReducedHealthAddition(): number;
      getSicknessFromCorpsesRate(arg0: number): number;
      getSleepingHealthAddition(): number;
      getSneezeCoughActive(): number;
      getSneezeCoughDelay(): number;
      getSneezeCoughTime(): number;
      getStandardHealthAddition(): number;
      getStandardHealthFromFoodTime(): number;
      getStandardPainReductionWhenWell(): number;
      getTemperature(): number;
      getTemperatureChangeTick(): number;
      getThermoregulator(): zombie.characters.BodyDamage.Thermoregulator;
      getTimeToSneezeOrCough(): number;
      getUnhappynessLevel(): number;
      getWetness(): number;
      hashCode(): number;
      increaseBodyWetness(arg0: number): void;
      isBodyPartBleeding(arg0: zombie.characters.BodyDamage.BodyPartType): boolean;
      isBurntToDeath(): boolean;
      isHasACold(): boolean;
      isInf(): boolean;
      isInfected(): boolean;
      isIsFakeInfected(): boolean;
      isIsOnFire(): boolean;
      isReduceFakeInfection(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      notify(): void;
      notifyAll(): void;
      pickMortalityDuration(): number;
      save(arg0: java.nio.ByteBuffer): void;
      setBodyPartsLastState(): void;
      setBoredomDecreaseFromReading(arg0: number): void;
      setBoredomLevel(arg0: number): void;
      setBurntToDeath(arg0: boolean): void;
      setCatchACold(arg0: number): void;
      setColdDamageStage(arg0: number): void;
      setColdProgressionRate(arg0: number): void;
      setColdReduction(arg0: number): void;
      setColdSneezeTimerMax(arg0: number): void;
      setColdSneezeTimerMin(arg0: number): void;
      setColdStrength(arg0: number): void;
      setContinualPainIncrease(arg0: number): void;
      setCurrentNumZombiesVisible(arg0: number): void;
      setDamageModCount(arg0: number): void;
      setDrunkIncreaseValue(arg0: number): void;
      setDrunkReductionValue(arg0: number): void;
      setFakeInfectionLevel(arg0: number): void;
      setFoodSicknessLevel(arg0: number): void;
      setHasACold(arg0: boolean): void;
      setHealthFromFood(arg0: number): void;
      setHealthFromFoodTimer(arg0: number): void;
      setHealthReductionFromSevereBadMoodles(arg0: number): void;
      setInf(arg0: boolean): void;
      setInfected(arg0: boolean): void;
      setInfectionGrowthRate(arg0: number): void;
      setInfectionLevel(arg0: number): void;
      setInfectionMortalityDuration(arg0: number): void;
      setInfectionTime(arg0: number): void;
      setInitialBitePain(arg0: number): void;
      setInitialScratchPain(arg0: number): void;
      setInitialThumpPain(arg0: number): void;
      setInitialWoundPain(arg0: number): void;
      setIsFakeInfected(arg0: boolean): void;
      setIsOnFire(arg0: boolean): void;
      setMildColdSneezeTimerMax(arg0: number): void;
      setMildColdSneezeTimerMin(arg0: number): void;
      setNastyColdSneezeTimerMax(arg0: number): void;
      setNastyColdSneezeTimerMin(arg0: number): void;
      setOldNumZombiesVisible(arg0: number): void;
      setOverallBodyHealth(arg0: number): void;
      setPainReduction(arg0: number): void;
      setPainReductionFromMeds(arg0: number): void;
      setPanicIncreaseValue(arg0: number): void;
      setPanicReductionValue(arg0: number): void;
      setParentChar(arg0: zombie.characters.IsoGameCharacter): void;
      setPoisonLevel(arg0: number): void;
      setReduceFakeInfection(arg0: boolean): void;
      setReducedHealthAddition(arg0: number): void;
      setRemotePainLevel(arg0: number): void;
      setScratchedWindow(): zombie.characters.BodyDamage.BodyPart;
      setSeverlyReducedHealthAddition(arg0: number): void;
      setSleepingHealthAddition(arg0: number): void;
      setSneezeCoughActive(arg0: number): void;
      setSneezeCoughDelay(arg0: number): void;
      setSneezeCoughTime(arg0: number): void;
      setStandardHealthAddition(arg0: number): void;
      setStandardHealthFromFoodTime(arg0: number): void;
      setStandardPainReductionWhenWell(arg0: number): void;
      setTemperature(arg0: number): void;
      setTimeToSneezeOrCough(arg0: number): void;
      setUnhappynessLevel(arg0: number): void;
      setWetness(arg0: number): void;
      splatBloodFloorBig(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.characters.BodyDamage.BodyPart extends java.lang.Object
    export class BodyPart {
      private constructor();
      AddDamage(arg0: number): void;
      AddHealth(arg0: number): void;
      DamageUpdate(): void;
      DisableFakeInfection(): void;
      HasInjury(): boolean;
      IsBleedingStemmed(): boolean;
      IsCortorised(): boolean;
      IsFakeInfected(): boolean;
      IsInfected(): boolean;
      ReduceHealth(arg0: number): void;
      RestoreToFullHealth(): void;
      SetBitten(arg0: boolean, arg1: boolean): void;
      SetBleedingStemmed(arg0: boolean): void;
      SetCortorised(arg0: boolean): void;
      SetFakeInfected(arg0: boolean): void;
      SetHealth(arg0: number): void;
      SetInfected(arg0: boolean): void;
      SetScratchedWeapon(arg0: boolean): void;
      SetScratchedWindow(arg0: boolean): void;
      bandaged(): boolean;
      bitten(): boolean;
      bleeding(): boolean;
      damageFromFirearm(arg0: number): void;
      deepWounded(): boolean;
      equals(arg0: any): boolean;
      generateBleeding(): void;
      generateDeepShardWound(): void;
      generateDeepWound(): void;
      generateZombieInfection(arg0: number): void;
      getAdditionalPain(arg0: boolean): number;
      getAlcoholLevel(): number;
      getBandageLife(): number;
      getBandageType(): string;
      getBiteTime(): number;
      getBleedingTime(): number;
      getBurnSpeedModifier(): number;
      getBurnTime(): number;
      getClass(): java.lang.Class<any>;
      getComfreyFactor(): number;
      getCutSpeedModifier(): number;
      getCutTime(): number;
      getDeepWoundSpeedModifier(): number;
      getDeepWoundTime(): number;
      getDistToCore(): number;
      getFractureTime(): number;
      getGarlicFactor(): number;
      getHealth(): number;
      getIndex(): number;
      getInnerTemperature(): number;
      getLastTimeBurnWash(): number;
      getPain(): number;
      getPlantainFactor(): number;
      getScratchSpeedModifier(): number;
      getScratchTime(): number;
      getSkinSurface(): number;
      getSkinTemperature(): number;
      getSplintFactor(): number;
      getSplintItem(): string;
      getStiffness(): number;
      getStitchTime(): number;
      getThermalNode(): zombie.characters.BodyDamage.Thermoregulator$ThermalNode;
      getType(): zombie.characters.BodyDamage.BodyPartType;
      getWetness(): number;
      getWoundInfectionLevel(): number;
      hashCode(): number;
      haveBullet(): boolean;
      haveGlass(): boolean;
      isBandageDirty(): boolean;
      isBurnt(): boolean;
      isCut(): boolean;
      isDeepWounded(): boolean;
      isGetBandageXp(): boolean;
      isGetSplintXp(): boolean;
      isGetStitchXp(): boolean;
      isInfectedWound(): boolean;
      isNeedBurnWash(): boolean;
      isSplint(): boolean;
      notify(): void;
      notifyAll(): void;
      scratched(): boolean;
      setAdditionalPain(arg0: number): void;
      setAlcoholLevel(arg0: number): void;
      setBandageLife(arg0: number): void;
      setBandageType(arg0: string): void;
      setBandaged(arg0: boolean, arg1: number, arg2: boolean, arg3: string): void;
      setBiteTime(arg0: number): void;
      setBleeding(arg0: boolean): void;
      setBleedingTime(arg0: number): void;
      setBurnSpeedModifier(arg0: number): void;
      setBurnTime(arg0: number): void;
      setBurned(): void;
      setComfreyFactor(arg0: number): void;
      setCut(arg0: boolean): void;
      setCutSpeedModifier(arg0: number): void;
      setCutTime(arg0: number): void;
      setDeepWoundSpeedModifier(arg0: number): void;
      setDeepWoundTime(arg0: number): void;
      setDeepWounded(arg0: boolean): void;
      setFractureTime(arg0: number): void;
      setGarlicFactor(arg0: number): void;
      setGetBandageXp(arg0: boolean): void;
      setGetSplintXp(arg0: boolean): void;
      setGetStitchXp(arg0: boolean): void;
      setHaveBullet(arg0: boolean, arg1: number): void;
      setHaveGlass(arg0: boolean): void;
      setInfectedWound(arg0: boolean): void;
      setLastTimeBurnWash(arg0: number): void;
      setNeedBurnWash(arg0: boolean): void;
      setPlantainFactor(arg0: number): void;
      setScratchSpeedModifier(arg0: number): void;
      setScratchTime(arg0: number): void;
      setScratched(arg0: boolean, arg1: boolean): void;
      setSplint(arg0: boolean, arg1: number): void;
      setSplintFactor(arg0: number): void;
      setSplintItem(arg0: string): void;
      setStiffness(arg0: number): void;
      setStitchTime(arg0: number): void;
      setStitched(arg0: boolean): void;
      setWetness(arg0: number): void;
      setWoundInfectionLevel(arg0: number): void;
      stitched(): boolean;
      sync(arg0: zombie.characters.BodyDamage.BodyPart, arg1: zombie.network.BodyDamageSync$Updater): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.characters.BodyDamage.BodyPartLast extends java.lang.Object
    export class BodyPartLast {
      private constructor();
      bandaged(): boolean;
      bitten(): boolean;
      copy(arg0: zombie.characters.BodyDamage.BodyPart): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      isCut(): boolean;
      notify(): void;
      notifyAll(): void;
      scratched(): boolean;
      toString(): string;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.characters.BodyDamage.BodyPartType */
    export class BodyPartType {
      /* ENUM VALUES */
      static readonly Foot_L: BodyPartType; 
      static readonly Foot_R: BodyPartType; 
      static readonly ForeArm_L: BodyPartType; 
      static readonly ForeArm_R: BodyPartType; 
      static readonly Groin: BodyPartType; 
      static readonly Hand_L: BodyPartType; 
      static readonly Hand_R: BodyPartType; 
      static readonly Head: BodyPartType; 
      static readonly LowerLeg_L: BodyPartType; 
      static readonly LowerLeg_R: BodyPartType; 
      static readonly MAX: BodyPartType; 
      static readonly Neck: BodyPartType; 
      static readonly Torso_Lower: BodyPartType; 
      static readonly Torso_Upper: BodyPartType; 
      static readonly UpperArm_L: BodyPartType; 
      static readonly UpperArm_R: BodyPartType; 
      static readonly UpperLeg_L: BodyPartType; 
      static readonly UpperLeg_R: BodyPartType; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.characters.BodyDamage.BodyPartType[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): BodyPartType;
      FromIndex(arg0: number): zombie.characters.BodyDamage.BodyPartType;
      FromString(arg0: string): zombie.characters.BodyDamage.BodyPartType;
      GetDistToCore(arg0: zombie.characters.BodyDamage.BodyPartType): number;
      GetMaxActionPenalty(arg0: zombie.characters.BodyDamage.BodyPartType): number;
      GetMaxMovementPenalty(arg0: zombie.characters.BodyDamage.BodyPartType): number;
      GetSkinSurface(arg0: zombie.characters.BodyDamage.BodyPartType): number;
      GetUmbrellaMod(arg0: zombie.characters.BodyDamage.BodyPartType): number;
      ToIndex(arg0: zombie.characters.BodyDamage.BodyPartType): number;
      ToString(arg0: zombie.characters.BodyDamage.BodyPartType): string;
      getBandageModel(): string;
      getBiteWoundModel(arg0: boolean): string;
      getBleedingTimeModifyer(arg0: number): number;
      getCutWoundModel(arg0: boolean): string;
      getDamageModifyer(arg0: number): number;
      getDisplayName(arg0: zombie.characters.BodyDamage.BodyPartType): string;
      getPainModifyer(arg0: number): number;
      getRandom(): zombie.characters.BodyDamage.BodyPartType;
      getScratchWoundModel(arg0: boolean): string;
      index(): number;
      valueOf(arg0: string): zombie.characters.BodyDamage.BodyPartType;
      values(): zombie.characters.BodyDamage.BodyPartType[];
    }
    // zombie.characters.BodyDamage.Fitness extends java.lang.Object
    export class Fitness {
      private constructor();
      equals(arg0: any): boolean;
      exerciseRepeat(): void;
      getClass(): java.lang.Class<any>;
      getCurrentExeStiffnessInc(arg0: string): number;
      getCurrentExeStiffnessTimer(arg0: string): number;
      getParent(): zombie.characters.IsoGameCharacter;
      getRegularity(arg0: string): number;
      getRegularityMap(): java.util.HashMap<string, number>;
      hashCode(): number;
      incFutureStiffness(): void;
      incRegularity(): void;
      incStats(): void;
      init(): void;
      initRegularityMapProfession(): void;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      notify(): void;
      notifyAll(): void;
      onGoingStiffness(): boolean;
      reduceEndurance(): void;
      removeStiffnessValue(arg0: string): void;
      resetValues(): void;
      save(arg0: java.nio.ByteBuffer): void;
      setCurrentExercise(arg0: string): void;
      setParent(arg0: zombie.characters.IsoGameCharacter): void;
      setRegularityMap(arg0: java.util.HashMap<string, number>): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.characters.BodyDamage.Fitness$FitnessExercise extends java.lang.Object
    export class Fitness$FitnessExercise {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.characters.BodyDamage.Metabolics */
    export class Metabolics {
      /* ENUM VALUES */
      static readonly ClimbRope: Metabolics; 
      static readonly Default: Metabolics; 
      static readonly DefaultExercise: Metabolics; 
      static readonly DiggingSpade: Metabolics; 
      static readonly DrivingCar: Metabolics; 
      static readonly Fitness: Metabolics; 
      static readonly FitnessHeavy: Metabolics; 
      static readonly ForestryAxe: Metabolics; 
      static readonly HeavyDomestic: Metabolics; 
      static readonly HeavyWork: Metabolics; 
      static readonly JumpFence: Metabolics; 
      static readonly LightDomestic: Metabolics; 
      static readonly LightWork: Metabolics; 
      static readonly MAX: Metabolics; 
      static readonly MediumWork: Metabolics; 
      static readonly Running10kmh: Metabolics; 
      static readonly Running15kmh: Metabolics; 
      static readonly SeatedResting: Metabolics; 
      static readonly SedentaryActivity: Metabolics; 
      static readonly Sleeping: Metabolics; 
      static readonly StandingAtRest: Metabolics; 
      static readonly UsingTools: Metabolics; 
      static readonly Walking2kmh: Metabolics; 
      static readonly Walking5kmh: Metabolics; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.characters.BodyDamage.Metabolics[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): Metabolics;
      MetToBtuHr(arg0: number): number;
      MetToW(arg0: number): number;
      MetToWm2(arg0: number): number;
      getBtuHr(): number;
      getMet(): number;
      getW(): number;
      getWm2(): number;
      valueOf(arg0: string): zombie.characters.BodyDamage.Metabolics;
      values(): zombie.characters.BodyDamage.Metabolics[];
    }
    // zombie.characters.BodyDamage.Nutrition extends java.lang.Object
    export class Nutrition {
      private constructor();
      applyTraitFromWeight(): void;
      applyWeightFromTraits(): void;
      canAddFitnessXp(): boolean;
      characterHaveWeightTrouble(): boolean;
      equals(arg0: any): boolean;
      getCalories(): number;
      getCarbohydrates(): number;
      getClass(): java.lang.Class<any>;
      getLipids(): number;
      getProteins(): number;
      getWeight(): number;
      hashCode(): number;
      isDecWeight(): boolean;
      isIncWeight(): boolean;
      isIncWeightLot(): boolean;
      load(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      save(arg0: java.nio.ByteBuffer): void;
      setCalories(arg0: number): void;
      setCarbohydrates(arg0: number): void;
      setDecWeight(arg0: boolean): void;
      setIncWeight(arg0: boolean): void;
      setIncWeightLot(arg0: boolean): void;
      setLipids(arg0: number): void;
      setProteins(arg0: number): void;
      setWeight(arg0: number): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.characters.BodyDamage.Thermoregulator extends java.lang.Object
    export class Thermoregulator {
      private constructor();
      equals(arg0: any): boolean;
      getBodyFluids(): number;
      getBodyHeatDelta(): number;
      getBodyHeatMultiplier(): number;
      getCatchAColdDelta(): number;
      getClass(): java.lang.Class<any>;
      getCombatModifier(): number;
      getCoreCelcius(): number;
      getCoreHeatContractMultiplier(): number;
      getCoreHeatDelta(): number;
      getCoreHeatExpandMultiplier(): number;
      getCoreRateOfChange(): number;
      getCoreTemperature(): number;
      getCoreTemperatureUI(): number;
      getDbg_primTotal(): number;
      getDbg_secTotal(): number;
      getDbg_totalHeat(): number;
      getDbg_totalHeatRaw(): number;
      getDefaultMultiplier(): number;
      getEnergy(): number;
      getEnergyMultiplier(): number;
      getExternalAirTemperature(): number;
      getFatigueMultiplier(): number;
      getFluidsMultiplier(): number;
      getHeatGeneration(): number;
      getHeatGenerationUI(): number;
      getMetabolicRate(): number;
      getMetabolicRateDecMultiplier(): number;
      getMetabolicRateIncMultiplier(): number;
      getMetabolicRateReal(): number;
      getMetabolicTarget(): number;
      getMovementModifier(): number;
      getNode(arg0: number): zombie.characters.BodyDamage.Thermoregulator$ThermalNode;
      getNodeForBloodType(arg0: zombie.characterTextures.BloodBodyPartType): zombie.characters.BodyDamage.Thermoregulator$ThermalNode;
      getNodeForType(arg0: zombie.characters.BodyDamage.BodyPartType): zombie.characters.BodyDamage.Thermoregulator$ThermalNode;
      getNodeSize(): number;
      getSetPoint(): number;
      getSimulationMultiplier(): number;
      getSkinCelciusFavorable(): number;
      getSkinCelciusMax(): number;
      getSkinCelciusMin(): number;
      getSkinCelciusMultiplier(): number;
      getTemperatureAir(): number;
      getTemperatureAirAndWind(): number;
      getThermalDamage(): number;
      getTimedActionTimeModifier(): number;
      hashCode(): number;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      notify(): void;
      notifyAll(): void;
      reset(): void;
      save(arg0: java.nio.ByteBuffer): void;
      setMetabolicTarget(arg0: number): void;
      setSimulationMultiplier(arg0: number): void;
      thermalChevronCount(): number;
      thermalChevronUp(): boolean;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.characters.BodyDamage.Thermoregulator$ThermalNode extends java.lang.Object
    export class Thermoregulator$ThermalNode {
      private constructor();
      equals(arg0: any): boolean;
      getBodyResponse(): number;
      getBodyResponseUI(): number;
      getBodyWetness(): number;
      getBodyWetnessUI(): number;
      getCelcius(): number;
      getClass(): java.lang.Class<any>;
      getClothingWetness(): number;
      getClothingWetnessUI(): number;
      getDistToCore(): number;
      getHeatDelta(): number;
      getHeatDeltaUI(): number;
      getInsulation(): number;
      getInsulationUI(): number;
      getName(): string;
      getPrimaryDelta(): number;
      getPrimaryDeltaUI(): number;
      getSecondaryDelta(): number;
      getSecondaryDeltaUI(): number;
      getSkinCelcius(): number;
      getSkinCelciusUI(): number;
      getSkinSurface(): number;
      getWindresist(): number;
      getWindresistUI(): number;
      hasDownstream(): boolean;
      hasUpstream(): boolean;
      hashCode(): number;
      isCore(): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.characters.CharacterTimedActions {
    // zombie.characters.CharacterTimedActions.BaseAction extends java.lang.Object
    export class BaseAction {
      private constructor();
      CurrentTime: number;
      ForceProgressBar: boolean;
      LastTime: number;
      MaxTime: number;
      PrevLastTime: number;
      SoundEffect: number;
      StopOnAim: boolean;
      StopOnRun: boolean;
      StopOnWalk: boolean;
      UseProgressBar: boolean;
      readonly animVariables?: java.util.ArrayList<string>;
      bStarted: boolean;
      blockMovementEtc: boolean;
      caloriesModifier: number;
      chr?: zombie.characters.IsoGameCharacter;
      delta: number;
      loopAction: boolean;
      overrideAnimation: boolean;
      overrideHandModels: boolean;
  
      OnAnimEvent(arg0: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      PlayLoopedSoundTillComplete(arg0: string, arg1: number, arg2: number): void;
      equals(arg0: any): boolean;
      finished(): boolean;
      forceComplete(): void;
      forceStop(): void;
      getClass(): java.lang.Class<any>;
      getCurrentTime(): number;
      getJobDelta(): number;
      getPrimaryHandItem(): zombie.inventory.InventoryItem;
      getPrimaryHandMdl(): string;
      getSecondaryHandItem(): zombie.inventory.InventoryItem;
      getSecondaryHandMdl(): string;
      hasStalled(): boolean;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      perform(): void;
      reset(): void;
      resetJobDelta(): void;
      setActionAnim(arg0: zombie.characters.CharacterActionAnims): void;
      setAnimVariable(arg0: string, arg1: string): void;
      setBlockMovementEtc(arg0: boolean): void;
      setLoopedAction(arg0: boolean): void;
      setOverrideAnimation(arg0: boolean): void;
      setOverrideHandModels(arg0: zombie.inventory.InventoryItem, arg1: zombie.inventory.InventoryItem): void;
      setOverrideHandModelsObject(arg0: any, arg1: any, arg2: boolean): void;
      setOverrideHandModelsString(arg0: string, arg1: string, arg2: boolean): void;
      setUseProgressBar(arg0: boolean): void;
      start(): void;
      stop(): void;
      stopTimedActionAnim(): void;
      toString(): string;
      update(): void;
      valid(): boolean;
      wait(arg0: number): void;
      waitToStart(): void;
    }
    // zombie.characters.CharacterTimedActions.LuaTimedAction extends zombie.characters.CharacterTimedActions.BaseAction
    export class LuaTimedAction {
      private constructor();
      CurrentTime: number;
      ForceProgressBar: boolean;
      LastTime: number;
      MaxTime: number;
      PrevLastTime: number;
      SoundEffect: number;
      StopOnAim: boolean;
      StopOnRun: boolean;
      StopOnWalk: boolean;
      UseProgressBar: boolean;
      readonly animVariables?: java.util.ArrayList<string>;
      bStarted: boolean;
      blockMovementEtc: boolean;
      caloriesModifier: number;
      chr?: zombie.characters.IsoGameCharacter;
      delta: number;
      loopAction: boolean;
      overrideAnimation: boolean;
      overrideHandModels: boolean;
      static statObj?: any[];
  
      OnAnimEvent(arg0: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      PlayLoopedSoundTillComplete(arg0: string, arg1: number, arg2: number): void;
      equals(arg0: any): boolean;
      finished(): boolean;
      forceComplete(): void;
      forceStop(): void;
      getClass(): java.lang.Class<any>;
      getCurrentTime(): number;
      getJobDelta(): number;
      getPrimaryHandItem(): zombie.inventory.InventoryItem;
      getPrimaryHandMdl(): string;
      getSecondaryHandItem(): zombie.inventory.InventoryItem;
      getSecondaryHandMdl(): string;
      hasStalled(): boolean;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      perform(): void;
      reset(): void;
      resetJobDelta(): void;
      setActionAnim(arg0: zombie.characters.CharacterActionAnims): void;
      setAnimVariable(arg0: string, arg1: string): void;
      setBlockMovementEtc(arg0: boolean): void;
      setLoopedAction(arg0: boolean): void;
      setOverrideAnimation(arg0: boolean): void;
      setOverrideHandModels(arg0: zombie.inventory.InventoryItem, arg1: zombie.inventory.InventoryItem): void;
      setOverrideHandModelsObject(arg0: any, arg1: any, arg2: boolean): void;
      setOverrideHandModelsString(arg0: string, arg1: string, arg2: boolean): void;
      setUseProgressBar(arg0: boolean): void;
      start(): void;
      stop(): void;
      stopTimedActionAnim(): void;
      toString(): string;
      update(): void;
      valid(): boolean;
      wait(arg0: number): void;
      waitToStart(): void;
    }
    // zombie.characters.CharacterTimedActions.LuaTimedActionNew extends zombie.characters.CharacterTimedActions.BaseAction
    export class LuaTimedActionNew {
      private constructor();
      CurrentTime: number;
      ForceProgressBar: boolean;
      LastTime: number;
      MaxTime: number;
      PrevLastTime: number;
      SoundEffect: number;
      StopOnAim: boolean;
      StopOnRun: boolean;
      StopOnWalk: boolean;
      UseProgressBar: boolean;
      readonly animVariables?: java.util.ArrayList<string>;
      bStarted: boolean;
      blockMovementEtc: boolean;
      caloriesModifier: number;
      chr?: zombie.characters.IsoGameCharacter;
      delta: number;
      loopAction: boolean;
      overrideAnimation: boolean;
      overrideHandModels: boolean;
  
      Failed(arg0: zombie.ai.astar.Mover): void;
      OnAnimEvent(arg0: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      Pathfind(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number): void;
      PlayLoopedSoundTillComplete(arg0: string, arg1: number, arg2: number): void;
      Succeeded(arg0: zombie.ai.astar.Path, arg1: zombie.ai.astar.Mover): void;
      equals(arg0: any): boolean;
      finished(): boolean;
      forceComplete(): void;
      forceStop(): void;
      getClass(): java.lang.Class<any>;
      getCurrentTime(): number;
      getJobDelta(): number;
      getMetaType(): string;
      getName(): string;
      getPrimaryHandItem(): zombie.inventory.InventoryItem;
      getPrimaryHandMdl(): string;
      getSecondaryHandItem(): zombie.inventory.InventoryItem;
      getSecondaryHandMdl(): string;
      hasStalled(): boolean;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      perform(): void;
      reset(): void;
      resetJobDelta(): void;
      setActionAnim(arg0: zombie.characters.CharacterActionAnims): void;
      setAnimVariable(arg0: string, arg1: string): void;
      setBlockMovementEtc(arg0: boolean): void;
      setCurrentTime(arg0: number): void;
      setLoopedAction(arg0: boolean): void;
      setOverrideAnimation(arg0: boolean): void;
      setOverrideHandModels(arg0: zombie.inventory.InventoryItem, arg1: zombie.inventory.InventoryItem): void;
      setOverrideHandModelsObject(arg0: any, arg1: any, arg2: boolean): void;
      setOverrideHandModelsString(arg0: string, arg1: string, arg2: boolean): void;
      setTime(arg0: number): void;
      setUseProgressBar(arg0: boolean): void;
      start(): void;
      stop(): void;
      stopTimedActionAnim(): void;
      toString(): string;
      update(): void;
      valid(): boolean;
      wait(arg0: number): void;
      waitToStart(): void;
    }
  }
  export namespace zombie.characters.Moodles {
    // zombie.characters.Moodles.Moodle extends java.lang.Object
    export class Moodle {
      private constructor();
      SetLevel(arg0: number): void;
      Update(): boolean;
      chevronDifference(arg0: number, arg1: boolean, arg2: zombie.core.Color): boolean;
      equals(arg0: any): boolean;
      getChevronColor(): zombie.core.Color;
      getChevronCount(): number;
      getClass(): java.lang.Class<any>;
      getLevel(): number;
      hashCode(): number;
      isChevronIsUp(): boolean;
      notify(): void;
      notifyAll(): void;
      setChevron(arg0: number, arg1: boolean, arg2: zombie.core.Color): void;
      toString(): string;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.characters.Moodles.MoodleType */
    export class MoodleType {
      /* ENUM VALUES */
      static readonly Angry: MoodleType; 
      static readonly Bleeding: MoodleType; 
      static readonly Bored: MoodleType; 
      static readonly CantSprint: MoodleType; 
      static readonly Dead: MoodleType; 
      static readonly Drunk: MoodleType; 
      static readonly Endurance: MoodleType; 
      static readonly FoodEaten: MoodleType; 
      static readonly HasACold: MoodleType; 
      static readonly HeavyLoad: MoodleType; 
      static readonly Hungry: MoodleType; 
      static readonly Hyperthermia: MoodleType; 
      static readonly Hypothermia: MoodleType; 
      static readonly Injured: MoodleType; 
      static readonly MAX: MoodleType; 
      static readonly Pain: MoodleType; 
      static readonly Panic: MoodleType; 
      static readonly Sick: MoodleType; 
      static readonly Stress: MoodleType; 
      static readonly Thirst: MoodleType; 
      static readonly Tired: MoodleType; 
      static readonly Unhappy: MoodleType; 
      static readonly Wet: MoodleType; 
      static readonly Windchill: MoodleType; 
      static readonly Zombie: MoodleType; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.characters.Moodles.MoodleType[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): MoodleType;
      FromIndex(arg0: number): zombie.characters.Moodles.MoodleType;
      FromString(arg0: string): zombie.characters.Moodles.MoodleType;
      GoodBadNeutral(arg0: zombie.characters.Moodles.MoodleType): number;
      ToIndex(arg0: zombie.characters.Moodles.MoodleType): number;
      getDescriptionText(arg0: zombie.characters.Moodles.MoodleType, arg1: number): string;
      getDisplayName(arg0: zombie.characters.Moodles.MoodleType, arg1: number): string;
      valueOf(arg0: string): zombie.characters.Moodles.MoodleType;
      values(): zombie.characters.Moodles.MoodleType[];
    }
    // zombie.characters.Moodles.Moodles extends java.lang.Object
    export class Moodles {
      private constructor();
      Randomise(): void;
      UI_RefreshNeeded(): boolean;
      Update(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getGoodBadNeutral(arg0: number): number;
      getMoodleChevronColor(arg0: number): zombie.core.Color;
      getMoodleChevronCount(arg0: number): number;
      getMoodleChevronIsUp(arg0: number): boolean;
      getMoodleDescriptionString(arg0: number): string;
      getMoodleDisplayString(arg0: number): string;
      getMoodleLevel(arg0: zombie.characters.Moodles.MoodleType): number;
      getMoodleType(arg0: number): zombie.characters.Moodles.MoodleType;
      getNumMoodles(): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      setMoodlesStateChanged(arg0: boolean): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.characters.WornItems {
    // zombie.characters.WornItems.BodyLocation extends java.lang.Object
    export class BodyLocation {
      private constructor();
      addAlias(arg0: string): zombie.characters.WornItems.BodyLocation;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getId(): string;
      hashCode(): number;
      isExclusive(arg0: string): boolean;
      isHideModel(arg0: string): boolean;
      isID(arg0: string): boolean;
      isMultiItem(): boolean;
      notify(): void;
      notifyAll(): void;
      setExclusive(arg0: string): zombie.characters.WornItems.BodyLocation;
      setHideModel(arg0: string): zombie.characters.WornItems.BodyLocation;
      setMultiItem(arg0: boolean): zombie.characters.WornItems.BodyLocation;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.characters.WornItems.BodyLocationGroup extends java.lang.Object
    export class BodyLocationGroup {
      private constructor();
      checkValid(arg0: string): void;
      equals(arg0: any): boolean;
      getAllLocations(): java.util.ArrayList<zombie.characters.WornItems.BodyLocation>;
      getClass(): java.lang.Class<any>;
      getLocation(arg0: string): zombie.characters.WornItems.BodyLocation;
      getLocationByIndex(arg0: number): zombie.characters.WornItems.BodyLocation;
      getLocationNotNull(arg0: string): zombie.characters.WornItems.BodyLocation;
      getOrCreateLocation(arg0: string): zombie.characters.WornItems.BodyLocation;
      hashCode(): number;
      indexOf(arg0: string): number;
      isExclusive(arg0: string, arg1: string): boolean;
      isHideModel(arg0: string, arg1: string): boolean;
      isMultiItem(arg0: string): boolean;
      notify(): void;
      notifyAll(): void;
      setExclusive(arg0: string, arg1: string): void;
      setHideModel(arg0: string, arg1: string): void;
      setMultiItem(arg0: string, arg1: boolean): void;
      size(): number;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.characters.WornItems.BodyLocations extends java.lang.Object
    export class BodyLocations {
      private constructor();
      Reset(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getGroup(arg0: string): zombie.characters.WornItems.BodyLocationGroup;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.characters.WornItems.WornItem extends java.lang.Object
    export class WornItem {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getItem(): zombie.inventory.InventoryItem;
      getLocation(): string;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.characters.WornItems.WornItems extends java.lang.Object
    export class WornItems {
      private constructor();
      addItemsToItemContainer(arg0: zombie.inventory.ItemContainer): void;
      clear(): void;
      contains(arg0: zombie.inventory.InventoryItem): boolean;
      copyFrom(arg0: zombie.characters.WornItems.WornItems): void;
      equals(arg0: any): boolean;
      forEach(arg0: java.util._function.Consumer<zombie.characters.WornItems.WornItem>): void;
      get(arg0: number): zombie.characters.WornItems.WornItem;
      getBodyLocationGroup(): zombie.characters.WornItems.BodyLocationGroup;
      getClass(): java.lang.Class<any>;
      getItem(arg0: string): zombie.inventory.InventoryItem;
      getItemByIndex(arg0: number): zombie.inventory.InventoryItem;
      getItemVisuals(arg0: zombie.core.skinnedmodel.visual.ItemVisuals): void;
      getLocation(arg0: zombie.inventory.InventoryItem): string;
      hashCode(): number;
      isEmpty(): boolean;
      notify(): void;
      notifyAll(): void;
      remove(arg0: zombie.inventory.InventoryItem): void;
      setFromItemVisuals(arg0: zombie.core.skinnedmodel.visual.ItemVisuals): void;
      setItem(arg0: string, arg1: zombie.inventory.InventoryItem): void;
      size(): number;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.characters.action {
    // zombie.characters.action.ActionContext extends java.lang.Object
    export class ActionContext {
      private constructor();
      readonly onStateChanged?: java.util.ArrayList<zombie.characters.action.IActionStateChanged>;
  
      childStateCount(): number;
      clearEvent(arg0: string): void;
      equals(arg0: any): boolean;
      foreachChildState(arg0: java.util._function.Consumer<zombie.characters.action.ActionState>): void;
      getChildStateAt(arg0: number): zombie.characters.action.ActionState;
      getChildStates(): java.util.List<zombie.characters.action.ActionState>;
      getClass(): java.lang.Class<any>;
      getCurrentState(): zombie.characters.action.ActionState;
      getCurrentStateName(): string;
      getGroup(): zombie.characters.action.ActionGroup;
      getOwner(): zombie.core.skinnedmodel.advancedanimation.IAnimatable;
      getPlaybackStateSnapshot(): zombie.characters.action.ActionStateSnapshot;
      getPreviousStateName(): string;
      hasChildStates(): boolean;
      hasEventOccurred(arg0: string, arg1: number): boolean;
      hashCode(): number;
      indexOfChildState(arg0: java.util._function.Predicate<zombie.characters.action.ActionState>): number;
      logCurrentState(): void;
      notify(): void;
      notifyAll(): void;
      reportEvent(arg0: string): void;
      setGroup(arg0: zombie.characters.action.ActionGroup): void;
      setPlaybackStateSnapshot(arg0: zombie.characters.action.ActionStateSnapshot): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.characters.action.ActionGroup extends java.lang.Object
    export class ActionGroup {
      private constructor();
      addState(arg0: zombie.characters.action.ActionState): void;
      equals(arg0: any): boolean;
      get(arg0: string): zombie.characters.action.ActionState;
      getActionGroup(arg0: string): zombie.characters.action.ActionGroup;
      getClass(): java.lang.Class<any>;
      getDefaultState(): zombie.characters.action.ActionState;
      getInitialState(): zombie.characters.action.ActionState;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      reloadAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.characters.action.ActionState extends java.lang.Object
    export class ActionState {
      private constructor();
      readonly name?: string;
      readonly transitions?: java.util.ArrayList<zombie.characters.action.ActionTransition>;
  
      canBeSubstate(): boolean;
      canHaveSubState(arg0: zombie.characters.action.ActionState, arg1: zombie.characters.action.ActionState): boolean;
      canHaveSubStates(): boolean;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getName(): string;
      hashCode(): number;
      load(arg0: string): void;
      notify(): void;
      notifyAll(): void;
      parse(arg0: java.io.File): void;
      resetForReload(): void;
      sortTransitions(): void;
      tagsOverlap(arg0: string[], arg1: string[]): boolean;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.characters.action.ActionStateSnapshot extends java.lang.Object
    export class ActionStateSnapshot {
      private constructor();
      childStateNames?: string[];
      stateName?: string;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.characters.action.ActionTransition extends java.lang.Object
    export class ActionTransition {
      private constructor();
      clone(): any;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getTransitionTo(): string;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      parse(arg0: org.w3c.dom.Element, arg1: string, arg2: java.util.List<zombie.characters.action.ActionTransition>): boolean;
      parseTransition(arg0: org.w3c.dom.Element, arg1: java.util.List<zombie.characters.action.ActionTransition>): void;
      parseTransitions(arg0: org.w3c.dom.Element, arg1: string, arg2: java.util.List<zombie.characters.action.ActionTransition>): void;
      passes(arg0: zombie.characters.action.ActionContext, arg1: number): boolean;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.characters.action.IActionStateChanged
    export class IActionStateChanged {
      private constructor();
      actionStateChanged(arg0: zombie.characters.action.ActionContext): void;
    }
  }
  export namespace zombie.characters.professions {
    // zombie.characters.professions.ProfessionFactory extends java.lang.Object
    export class ProfessionFactory {
      private constructor();
      static ProfessionMap?: java.util.LinkedHashMap<string, zombie.characters.professions.ProfessionFactory$Profession>;
  
      Reset(): void;
      addProfession(arg0: string, arg1: string, arg2: string, arg3: number): zombie.characters.professions.ProfessionFactory$Profession;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getProfession(arg0: string): zombie.characters.professions.ProfessionFactory$Profession;
      getProfessions(): java.util.ArrayList<zombie.characters.professions.ProfessionFactory$Profession>;
      hashCode(): number;
      init(): void;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.characters.professions.ProfessionFactory$Profession extends java.lang.Object
    export class ProfessionFactory$Profession {
      private constructor();
      FreeTraitStack?: java.util.Stack<string>;
      IconPath?: string;
      XPBoostMap?: java.util.HashMap<zombie.characters.skills.PerkFactory$Perk, number>;
      cost: number;
      description?: string;
      name?: string;
      texture?: zombie.core.textures.Texture;
      type?: string;
  
      addFreeTrait(arg0: string): void;
      addXPBoost(arg0: zombie.characters.skills.PerkFactory$Perk, arg1: number): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getCost(): number;
      getDescription(): string;
      getFreeRecipes(): java.util.List<string>;
      getFreeTraitStack(): java.util.Stack<string>;
      getFreeTraits(): java.util.ArrayList<string>;
      getIconPath(): string;
      getLabel(): string;
      getLeftLabel(): string;
      getName(): string;
      getRightLabel(): string;
      getTexture(): zombie.core.textures.Texture;
      getType(): string;
      getXPBoostMap(): java.util.HashMap<zombie.characters.skills.PerkFactory$Perk, number>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      setCost(arg0: number): void;
      setDescription(arg0: string): void;
      setFreeRecipes(arg0: java.util.List<string>): void;
      setFreeTraitStack(arg0: java.util.Stack<string>): void;
      setIconPath(arg0: string): void;
      setName(arg0: string): void;
      setType(arg0: string): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.characters.skills {
    // zombie.characters.skills.PerkFactory extends java.lang.Object
    export class PerkFactory {
      private constructor();
      static readonly PerkList?: java.util.ArrayList<zombie.characters.skills.PerkFactory$Perk>;
  
      AddPerk(arg0: zombie.characters.skills.PerkFactory$Perk, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number): zombie.characters.skills.PerkFactory$Perk;
      Reset(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getPerk(arg0: zombie.characters.skills.PerkFactory$Perk): zombie.characters.skills.PerkFactory$Perk;
      getPerkFromName(arg0: string): zombie.characters.skills.PerkFactory$Perk;
      getPerkName(arg0: zombie.characters.skills.PerkFactory$Perk): string;
      hashCode(): number;
      init(): void;
      initTranslations(): void;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.characters.skills.PerkFactory$Perk extends java.lang.Object
    export class PerkFactory$Perk {
      private constructor();
      name?: string;
      parent?: zombie.characters.skills.PerkFactory$Perk;
      passiv: boolean;
      translation?: string;
      xp1: number;
      xp10: number;
      xp2: number;
      xp3: number;
      xp4: number;
      xp5: number;
      xp6: number;
      xp7: number;
      xp8: number;
      xp9: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getId(): string;
      getName(): string;
      getParent(): zombie.characters.skills.PerkFactory$Perk;
      getTotalXpForLevel(arg0: number): number;
      getType(): zombie.characters.skills.PerkFactory$Perk;
      getXp1(): number;
      getXp10(): number;
      getXp2(): number;
      getXp3(): number;
      getXp4(): number;
      getXp5(): number;
      getXp6(): number;
      getXp7(): number;
      getXp8(): number;
      getXp9(): number;
      getXpForLevel(arg0: number): number;
      hashCode(): number;
      index(): number;
      isCustom(): boolean;
      isPassiv(): boolean;
      notify(): void;
      notifyAll(): void;
      setCustom(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.characters.skills.PerkFactory$Perks extends java.lang.Object
    export class PerkFactory$Perks {
      private constructor();
      static readonly Agility?: zombie.characters.skills.PerkFactory$Perk;
      static readonly Aiming?: zombie.characters.skills.PerkFactory$Perk;
      static readonly Axe?: zombie.characters.skills.PerkFactory$Perk;
      static readonly Blacksmith?: zombie.characters.skills.PerkFactory$Perk;
      static readonly Blunt?: zombie.characters.skills.PerkFactory$Perk;
      static readonly Combat?: zombie.characters.skills.PerkFactory$Perk;
      static readonly Cooking?: zombie.characters.skills.PerkFactory$Perk;
      static readonly Crafting?: zombie.characters.skills.PerkFactory$Perk;
      static readonly Doctor?: zombie.characters.skills.PerkFactory$Perk;
      static readonly Electricity?: zombie.characters.skills.PerkFactory$Perk;
      static readonly Farming?: zombie.characters.skills.PerkFactory$Perk;
      static readonly Firearm?: zombie.characters.skills.PerkFactory$Perk;
      static readonly Fishing?: zombie.characters.skills.PerkFactory$Perk;
      static readonly Fitness?: zombie.characters.skills.PerkFactory$Perk;
      static readonly Lightfoot?: zombie.characters.skills.PerkFactory$Perk;
      static readonly LongBlade?: zombie.characters.skills.PerkFactory$Perk;
      static readonly MAX?: zombie.characters.skills.PerkFactory$Perk;
      static readonly Maintenance?: zombie.characters.skills.PerkFactory$Perk;
      static readonly Mechanics?: zombie.characters.skills.PerkFactory$Perk;
      static readonly Melee?: zombie.characters.skills.PerkFactory$Perk;
      static readonly Melting?: zombie.characters.skills.PerkFactory$Perk;
      static readonly MetalWelding?: zombie.characters.skills.PerkFactory$Perk;
      static readonly Nimble?: zombie.characters.skills.PerkFactory$Perk;
      static readonly None?: zombie.characters.skills.PerkFactory$Perk;
      static readonly Passiv?: zombie.characters.skills.PerkFactory$Perk;
      static readonly PlantScavenging?: zombie.characters.skills.PerkFactory$Perk;
      static readonly Reloading?: zombie.characters.skills.PerkFactory$Perk;
      static readonly SmallBlade?: zombie.characters.skills.PerkFactory$Perk;
      static readonly SmallBlunt?: zombie.characters.skills.PerkFactory$Perk;
      static readonly Sneak?: zombie.characters.skills.PerkFactory$Perk;
      static readonly Spear?: zombie.characters.skills.PerkFactory$Perk;
      static readonly Sprinting?: zombie.characters.skills.PerkFactory$Perk;
      static readonly Strength?: zombie.characters.skills.PerkFactory$Perk;
      static readonly Survivalist?: zombie.characters.skills.PerkFactory$Perk;
      static readonly Tailoring?: zombie.characters.skills.PerkFactory$Perk;
      static readonly Trapping?: zombie.characters.skills.PerkFactory$Perk;
      static readonly Woodwork?: zombie.characters.skills.PerkFactory$Perk;
  
      FromString(arg0: string): zombie.characters.skills.PerkFactory$Perk;
      equals(arg0: any): boolean;
      fromIndex(arg0: number): zombie.characters.skills.PerkFactory$Perk;
      getClass(): java.lang.Class<any>;
      getMaxIndex(): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.characters.traits {
    // zombie.characters.traits.ObservationFactory extends java.lang.Object
    export class ObservationFactory {
      private constructor();
      static ObservationMap?: java.util.HashMap<string, zombie.characters.traits.ObservationFactory$Observation>;
  
      addObservation(arg0: string, arg1: string, arg2: string): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getObservation(arg0: string): zombie.characters.traits.ObservationFactory$Observation;
      hashCode(): number;
      init(): void;
      notify(): void;
      notifyAll(): void;
      setMutualExclusive(arg0: string, arg1: string): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.characters.traits.ObservationFactory$Observation extends java.lang.Object
    export class ObservationFactory$Observation {
      private constructor();
      MutuallyExclusive?: java.util.ArrayList<string>;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDescription(): string;
      getLabel(): string;
      getLeftLabel(): string;
      getName(): string;
      getRightLabel(): string;
      getTraitID(): string;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      setDescription(arg0: string): void;
      setName(arg0: string): void;
      setTraitID(arg0: string): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.characters.traits.TraitCollection extends java.lang.Object
    export class TraitCollection {
      private constructor();
      add(arg0: string): void;
      addAll(arg0: java.util.Collection<string>): void;
      clear(): void;
      contains(arg0: any): boolean;
      equals(arg0: any): boolean;
      get(arg0: number): string;
      getClass(): java.lang.Class<any>;
      getTraitSlot(arg0: string): zombie.characters.traits.TraitCollection$TraitSlot;
      hashCode(): number;
      isEmpty(): boolean;
      notify(): void;
      notifyAll(): void;
      remove(arg0: any): boolean;
      removeAll(arg0: java.util.Collection<any>): void;
      set(arg0: string, arg1: boolean): void;
      size(): number;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.characters.traits.TraitCollection$TraitSlot extends java.lang.Object
    export class TraitCollection$TraitSlot {
      private constructor();
      readonly Name?: string;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      isName(arg0: string): boolean;
      isSet(): boolean;
      notify(): void;
      notifyAll(): void;
      set(arg0: boolean): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.characters.traits.TraitFactory extends java.lang.Object
    export class TraitFactory {
      private constructor();
      static TraitMap?: java.util.LinkedHashMap<string, zombie.characters.traits.TraitFactory$Trait>;
  
      Reset(): void;
      addTrait(arg0: string, arg1: string, arg2: number, arg3: string, arg4: boolean, arg5: boolean): zombie.characters.traits.TraitFactory$Trait;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getTrait(arg0: string): zombie.characters.traits.TraitFactory$Trait;
      getTraits(): java.util.ArrayList<zombie.characters.traits.TraitFactory$Trait>;
      hashCode(): number;
      init(): void;
      notify(): void;
      notifyAll(): void;
      setMutualExclusive(arg0: string, arg1: string): void;
      sortList(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.characters.traits.TraitFactory$Trait extends java.lang.Object
    export class TraitFactory$Trait {
      private constructor();
      MutuallyExclusive?: java.util.ArrayList<string>;
      XPBoostMap?: java.util.HashMap<zombie.characters.skills.PerkFactory$Perk, number>;
      cost: number;
      description?: string;
      name?: string;
      prof: boolean;
      texture?: zombie.core.textures.Texture;
      traitID?: string;
  
      addXPBoost(arg0: zombie.characters.skills.PerkFactory$Perk, arg1: number): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getCost(): number;
      getDescription(): string;
      getFreeRecipes(): java.util.List<string>;
      getLabel(): string;
      getLeftLabel(): string;
      getMutuallyExclusiveTraits(): java.util.ArrayList<string>;
      getRightLabel(): string;
      getTexture(): zombie.core.textures.Texture;
      getType(): string;
      getXPBoostMap(): java.util.HashMap<zombie.characters.skills.PerkFactory$Perk, number>;
      hashCode(): number;
      isFree(): boolean;
      isRemoveInMP(): boolean;
      notify(): void;
      notifyAll(): void;
      setDescription(arg0: string): void;
      setFreeRecipes(arg0: java.util.List<string>): void;
      setRemoveInMP(arg0: boolean): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.chat {
    // zombie.chat.ChatBase extends java.lang.Object
    export class ChatBase {
      private constructor();
      addMember(arg0: number): void;
      close(): void;
      createMessage(arg0: string): zombie.chat.ChatMessage;
      createServerMessage(arg0: string): zombie.chat.ServerChatMessage;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getColor(): zombie.core.Color;
      getID(): number;
      getJustAddedMembers(): java.util.ArrayList<number>;
      getJustRemovedMembers(): java.util.ArrayList<number>;
      getMessagePrefix(arg0: zombie.chat.ChatMessage): string;
      getMessageTextWithPrefix(arg0: zombie.chat.ChatMessage): string;
      getMode(): zombie.chat.ChatMode;
      getRange(): number;
      getTabID(): number;
      getTitleID(): string;
      getType(): zombie.network.chat.ChatType;
      getZombieAttractionRange(): number;
      hashCode(): number;
      isEnabled(): boolean;
      isSendingToRadio(): boolean;
      leaveMember(arg0: number): void;
      notify(): void;
      notifyAll(): void;
      packMessage(arg0: zombie.core.network.ByteBufferWriter, arg1: zombie.chat.ChatMessage): void;
      removeMember(arg0: number): void;
      sendMessageToChatMembers(arg0: zombie.chat.ChatMessage): void;
      sendMessageToPlayer(arg0: zombie.core.raknet.UdpConnection, arg1: zombie.chat.ChatMessage): void;
      sendPlayerJoinChatPacket(arg0: zombie.core.raknet.UdpConnection): void;
      sendPlayerLeaveChatPacket(arg0: number): void;
      sendToServer(arg0: zombie.chat.ChatMessage, arg1: zombie.radio.devices.DeviceData): void;
      setFontSize(arg0: string): void;
      setSettings(arg0: zombie.chat.ChatSettings): void;
      setShowTimestamp(arg0: boolean): void;
      setShowTitle(arg0: boolean): void;
      showMessage(arg0: zombie.chat.ChatMessage): void;
      syncMembersByUsernames(arg0: java.util.ArrayList<string>): void;
      toString(): string;
      unpackMessage(arg0: java.nio.ByteBuffer): zombie.chat.ChatMessage;
      wait(arg0: number): void;
    }
    // zombie.chat.ChatElement extends java.lang.Object
    export class ChatElement {
      private constructor();
      static backdropTexture?: zombie.chat.NineGridTexture;
      static doBackDrop: boolean;
  
      IsSpeaking(): boolean;
      NoRender(arg0: number): void;
      RenderBatch(arg0: number): void;
      Say(arg0: string): void;
      SayDebug(arg0: number, arg1: string): void;
      addChatLine(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addNoLogText(arg0: string): void;
      clear(arg0: number): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getHasChatToDisplay(): boolean;
      getMaxChatLines(): number;
      getSayLine(): string;
      getSayLineTag(): string;
      getTalkerType(): string;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      renderBatched(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      setHistoryRange(arg0: number): void;
      setMaxCharsPerLine(arg0: number): void;
      setMaxChatLines(arg0: number): void;
      setTalkerType(arg0: string): void;
      setUseEuclidean(arg0: boolean): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.chat.ChatMessage extends java.lang.Object
    export class ChatMessage {
      private constructor();
      clone(): any;
      equals(arg0: any): boolean;
      getAuthor(): string;
      getChat(): zombie.chat.ChatBase;
      getChatID(): number;
      getClass(): java.lang.Class<any>;
      getCustomTag(): string;
      getDatetime(): java.time.LocalDateTime;
      getDatetimeStr(): string;
      getRadioChannel(): number;
      getText(): string;
      getTextColor(): zombie.core.Color;
      getTextWithPrefix(): string;
      getTextWithReplacedParentheses(): string;
      hashCode(): number;
      isCustomColor(): boolean;
      isFromDiscord(): boolean;
      isLocal(): boolean;
      isOverHeadSpeech(): boolean;
      isScramble(): boolean;
      isServerAlert(): boolean;
      isServerAuthor(): boolean;
      isShouldAttractZombies(): boolean;
      isShowAuthor(): boolean;
      isShowInChat(): boolean;
      makeFromDiscord(): void;
      notify(): void;
      notifyAll(): void;
      pack(arg0: zombie.core.network.ByteBufferWriter): void;
      setAuthor(arg0: string): void;
      setCustomTag(arg0: string): void;
      setDatetime(arg0: java.time.LocalDateTime): void;
      setLocal(arg0: boolean): void;
      setOverHeadSpeech(arg0: boolean): void;
      setRadioChannel(arg0: number): void;
      setScrambledText(arg0: string): void;
      setServerAlert(arg0: boolean): void;
      setServerAuthor(arg0: boolean): void;
      setShouldAttractZombies(arg0: boolean): void;
      setShowInChat(arg0: boolean): void;
      setText(arg0: string): void;
      setTextColor(arg0: zombie.core.Color): void;
      toString(): string;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.chat.ChatMode */
    export class ChatMode {
      /* ENUM VALUES */
      static readonly ClientMultiPlayer: ChatMode; 
      static readonly ServerMultiPlayer: ChatMode; 
      static readonly SinglePlayer: ChatMode; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.chat.ChatMode[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): ChatMode;
      valueOf(arg0: string): zombie.chat.ChatMode;
      values(): zombie.chat.ChatMode[];
    }
    // zombie.chat.ChatSettings extends java.lang.Object
    export class ChatSettings {
      private constructor();
      static readonly infinityRange: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getFont(): zombie.ui.UIFont;
      getFontColor(): zombie.core.Color;
      getFontSize(): string;
      getRange(): number;
      getZombieAttractionRange(): number;
      hashCode(): number;
      isAllowBBcode(): boolean;
      isAllowChatIcons(): boolean;
      isAllowColors(): boolean;
      isAllowFonts(): boolean;
      isAllowImages(): boolean;
      isBold(): boolean;
      isEqualizeLineHeights(): boolean;
      isShowAuthor(): boolean;
      isShowChatTitle(): boolean;
      isShowTimestamp(): boolean;
      isUnique(): boolean;
      isUseOnlyActiveTab(): boolean;
      notify(): void;
      notifyAll(): void;
      pack(arg0: zombie.core.network.ByteBufferWriter): void;
      setAllowBBcode(arg0: boolean): void;
      setAllowChatIcons(arg0: boolean): void;
      setAllowColors(arg0: boolean): void;
      setAllowFonts(arg0: boolean): void;
      setAllowImages(arg0: boolean): void;
      setBold(arg0: boolean): void;
      setEqualizeLineHeights(arg0: boolean): void;
      setFont(arg0: zombie.ui.UIFont): void;
      setFontColor(arg0: zombie.core.Color): void;
      setFontSize(arg0: string): void;
      setRange(arg0: number): void;
      setShowAuthor(arg0: boolean): void;
      setShowChatTitle(arg0: boolean): void;
      setShowTimestamp(arg0: boolean): void;
      setUnique(arg0: boolean): void;
      setUseOnlyActiveTab(arg0: boolean): void;
      setZombieAttractionRange(arg0: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.chat.ChatSettings$FontSize */
    export class ChatSettings$FontSize {
      /* ENUM VALUES */
      static readonly Large: ChatSettings$FontSize; 
      static readonly Medium: ChatSettings$FontSize; 
      static readonly NotDefine: ChatSettings$FontSize; 
      static readonly Small: ChatSettings$FontSize; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.chat.ChatSettings$FontSize[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): ChatSettings$FontSize;
      valueOf(arg0: string): zombie.chat.ChatSettings$FontSize;
      values(): zombie.chat.ChatSettings$FontSize[];
    }
    // zombie.chat.ChatTab extends java.lang.Object
    export class ChatTab {
      private constructor();
      RemoveChat(arg0: number): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getID(): number;
      getTitle(): string;
      getTitleID(): string;
      hashCode(): number;
      isEnabled(): boolean;
      notify(): void;
      notifyAll(): void;
      sendAddTabPacket(arg0: zombie.core.raknet.UdpConnection): void;
      sendRemoveTabPacket(arg0: zombie.core.raknet.UdpConnection): void;
      setEnabled(arg0: boolean): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.chat.NineGridTexture extends java.lang.Object
    export class NineGridTexture {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      renderInnerBased(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.chat.ServerChatMessage extends zombie.chat.ChatMessage
    export class ServerChatMessage {
      private constructor();
      clone(): any;
      equals(arg0: any): boolean;
      getAuthor(): string;
      getChat(): zombie.chat.ChatBase;
      getChatID(): number;
      getClass(): java.lang.Class<any>;
      getCustomTag(): string;
      getDatetime(): java.time.LocalDateTime;
      getDatetimeStr(): string;
      getRadioChannel(): number;
      getText(): string;
      getTextColor(): zombie.core.Color;
      getTextWithPrefix(): string;
      getTextWithReplacedParentheses(): string;
      hashCode(): number;
      isCustomColor(): boolean;
      isFromDiscord(): boolean;
      isLocal(): boolean;
      isOverHeadSpeech(): boolean;
      isScramble(): boolean;
      isServerAlert(): boolean;
      isServerAuthor(): boolean;
      isShouldAttractZombies(): boolean;
      isShowAuthor(): boolean;
      isShowInChat(): boolean;
      makeFromDiscord(): void;
      notify(): void;
      notifyAll(): void;
      pack(arg0: zombie.core.network.ByteBufferWriter): void;
      setAuthor(arg0: string): void;
      setCustomTag(arg0: string): void;
      setDatetime(arg0: java.time.LocalDateTime): void;
      setLocal(arg0: boolean): void;
      setOverHeadSpeech(arg0: boolean): void;
      setRadioChannel(arg0: number): void;
      setScrambledText(arg0: string): void;
      setServerAlert(arg0: boolean): void;
      setServerAuthor(arg0: boolean): void;
      setShouldAttractZombies(arg0: boolean): void;
      setShowInChat(arg0: boolean): void;
      setText(arg0: string): void;
      setTextColor(arg0: zombie.core.Color): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.config {
    // zombie.config.BooleanConfigOption extends zombie.config.ConfigOption
    export class BooleanConfigOption {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDefaultValue(): boolean;
      getName(): string;
      getTooltip(): string;
      getType(): string;
      getValue(): boolean;
      getValueAsLuaString(): string;
      getValueAsObject(): any;
      getValueAsString(): string;
      hashCode(): number;
      isValidString(arg0: string): boolean;
      notify(): void;
      notifyAll(): void;
      parse(arg0: string): void;
      resetToDefault(): void;
      setDefaultToCurrentValue(): void;
      setValue(arg0: boolean): void;
      setValueFromObject(arg0: any): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.config.ConfigOption extends java.lang.Object
    export class ConfigOption {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getName(): string;
      getTooltip(): string;
      getType(): string;
      getValueAsLuaString(): string;
      getValueAsObject(): any;
      getValueAsString(): string;
      hashCode(): number;
      isValidString(arg0: string): boolean;
      notify(): void;
      notifyAll(): void;
      parse(arg0: string): void;
      resetToDefault(): void;
      setDefaultToCurrentValue(): void;
      setValueFromObject(arg0: any): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.config.DoubleConfigOption extends zombie.config.ConfigOption
    export class DoubleConfigOption {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDefaultValue(): number;
      getMax(): number;
      getMin(): number;
      getName(): string;
      getTooltip(): string;
      getType(): string;
      getValue(): number;
      getValueAsLuaString(): string;
      getValueAsObject(): any;
      getValueAsString(): string;
      hashCode(): number;
      isValidString(arg0: string): boolean;
      notify(): void;
      notifyAll(): void;
      parse(arg0: string): void;
      resetToDefault(): void;
      setDefaultToCurrentValue(): void;
      setValue(arg0: number): void;
      setValueFromObject(arg0: any): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.config.EnumConfigOption extends zombie.config.IntegerConfigOption
    export class EnumConfigOption {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDefaultValue(): number;
      getMax(): number;
      getMin(): number;
      getName(): string;
      getNumValues(): number;
      getTooltip(): string;
      getType(): string;
      getValue(): number;
      getValueAsLuaString(): string;
      getValueAsObject(): any;
      getValueAsString(): string;
      hashCode(): number;
      isValidString(arg0: string): boolean;
      notify(): void;
      notifyAll(): void;
      parse(arg0: string): void;
      resetToDefault(): void;
      setDefaultToCurrentValue(): void;
      setValue(arg0: number): void;
      setValueFromObject(arg0: any): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.config.IntegerConfigOption extends zombie.config.ConfigOption
    export class IntegerConfigOption {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDefaultValue(): number;
      getMax(): number;
      getMin(): number;
      getName(): string;
      getTooltip(): string;
      getType(): string;
      getValue(): number;
      getValueAsLuaString(): string;
      getValueAsObject(): any;
      getValueAsString(): string;
      hashCode(): number;
      isValidString(arg0: string): boolean;
      notify(): void;
      notifyAll(): void;
      parse(arg0: string): void;
      resetToDefault(): void;
      setDefaultToCurrentValue(): void;
      setValue(arg0: number): void;
      setValueFromObject(arg0: any): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.config.StringConfigOption extends zombie.config.ConfigOption
    export class StringConfigOption {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDefaultValue(): string;
      getName(): string;
      getTooltip(): string;
      getType(): string;
      getValue(): string;
      getValueAsLuaString(): string;
      getValueAsObject(): any;
      getValueAsString(): string;
      hashCode(): number;
      isValidString(arg0: string): boolean;
      notify(): void;
      notifyAll(): void;
      parse(arg0: string): void;
      resetToDefault(): void;
      setDefaultToCurrentValue(): void;
      setValue(arg0: string): void;
      setValueFromObject(arg0: any): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.core {
    // zombie.core.Clipboard extends java.lang.Object
    export class Clipboard {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getClipboard(): string;
      hashCode(): number;
      initMainThread(): void;
      notify(): void;
      notifyAll(): void;
      rememberCurrentValue(): void;
      setClipboard(arg0: string): void;
      toString(): string;
      updateMainThread(): void;
      wait(arg0: number): void;
    }
    // zombie.core.Color extends java.lang.Object
    export class Color {
      private constructor();
      a: number;
      b: number;
      static readonly black?: zombie.core.Color;
      static readonly blue?: zombie.core.Color;
      static readonly cyan?: zombie.core.Color;
      static readonly darkGray?: zombie.core.Color;
      static readonly darkGreen?: zombie.core.Color;
      g: number;
      static readonly gray?: zombie.core.Color;
      static readonly green?: zombie.core.Color;
      static readonly lightGray?: zombie.core.Color;
      static readonly lightGreen?: zombie.core.Color;
      static readonly magenta?: zombie.core.Color;
      static readonly orange?: zombie.core.Color;
      static readonly pink?: zombie.core.Color;
      static readonly purple?: zombie.core.Color;
      r: number;
      static readonly red?: zombie.core.Color;
      static readonly transparent?: zombie.core.Color;
      static readonly white?: zombie.core.Color;
      static readonly yellow?: zombie.core.Color;
  
      HSBtoRGB(arg0: number, arg1: number, arg2: number, arg3: zombie.core.Color): zombie.core.Color;
      abgrToColor(arg0: number, arg1: zombie.core.Color): zombie.core.Color;
      add(arg0: zombie.core.Color): void;
      addToCopy(arg0: zombie.core.Color): zombie.core.Color;
      blendABGR(arg0: number, arg1: number): number;
      blendBGR(arg0: number, arg1: number): number;
      brighter(arg0: number): zombie.core.Color;
      changeHSBValue(arg0: number, arg1: number, arg2: number): void;
      colorToABGR(arg0: number, arg1: number, arg2: number, arg3: number): number;
      darker(): zombie.core.Color;
      decode(arg0: string): zombie.core.Color;
      equals(arg0: any): boolean;
      fromColor(arg0: number): void;
      getAlpha(): number;
      getAlphaByte(): number;
      getAlphaChannelFromABGR(arg0: number): number;
      getAlphaFloat(): number;
      getBlue(): number;
      getBlueByte(): number;
      getBlueChannelFromABGR(arg0: number): number;
      getBlueFloat(): number;
      getClass(): java.lang.Class<any>;
      getGreen(): number;
      getGreenByte(): number;
      getGreenChannelFromABGR(arg0: number): number;
      getGreenFloat(): number;
      getRed(): number;
      getRedByte(): number;
      getRedChannelFromABGR(arg0: number): number;
      getRedFloat(): number;
      hashCode(): number;
      interp(arg0: zombie.core.Color, arg1: number, arg2: zombie.core.Color): void;
      lerpABGR(arg0: number, arg1: number, arg2: number): number;
      multiply(arg0: zombie.core.Color): zombie.core.Color;
      multiplyABGR(arg0: number, arg1: number): number;
      multiplyBGR(arg0: number, arg1: number): number;
      notify(): void;
      notifyAll(): void;
      random(): zombie.core.Color;
      scale(arg0: number): zombie.core.Color;
      scaleCopy(arg0: number): zombie.core.Color;
      set(arg0: number, arg1: number, arg2: number): zombie.core.Color;
      setABGR(arg0: number): void;
      setAlphaChannelToABGR(arg0: number, arg1: number): number;
      setBlueChannelToABGR(arg0: number, arg1: number): number;
      setColor(arg0: zombie.core.Color, arg1: zombie.core.Color, arg2: number): void;
      setGreenChannelToABGR(arg0: number, arg1: number): number;
      setRedChannelToABGR(arg0: number, arg1: number): number;
      tintABGR(arg0: number, arg1: number): number;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.Colors extends java.lang.Object
    export class Colors {
      private constructor();
      static readonly Aqua?: zombie.core.Color;
      static readonly Aquamarine?: zombie.core.Color;
      static readonly Bisque?: zombie.core.Color;
      static readonly BlanchedAlmond?: zombie.core.Color;
      static readonly Blue?: zombie.core.Color;
      static readonly BlueViolet?: zombie.core.Color;
      static readonly Brown?: zombie.core.Color;
      static readonly BurlyWood?: zombie.core.Color;
      static readonly CadetBlue?: zombie.core.Color;
      static readonly Chartreuse?: zombie.core.Color;
      static readonly Chocolate?: zombie.core.Color;
      static readonly Coral?: zombie.core.Color;
      static readonly CornFlowerBlue?: zombie.core.Color;
      static readonly CornSilk?: zombie.core.Color;
      static readonly Crimson?: zombie.core.Color;
      static readonly Cyan?: zombie.core.Color;
      static readonly DarkBlue?: zombie.core.Color;
      static readonly DarkCyan?: zombie.core.Color;
      static readonly DarkGoldenrod?: zombie.core.Color;
      static readonly DarkGreen?: zombie.core.Color;
      static readonly DarkKhaki?: zombie.core.Color;
      static readonly DarkMagenta?: zombie.core.Color;
      static readonly DarkOliveGreen?: zombie.core.Color;
      static readonly DarkOrange?: zombie.core.Color;
      static readonly DarkOrchid?: zombie.core.Color;
      static readonly DarkRed?: zombie.core.Color;
      static readonly DarkSalmon?: zombie.core.Color;
      static readonly DarkSeaGreen?: zombie.core.Color;
      static readonly DarkSlateBlue?: zombie.core.Color;
      static readonly DarkTurquoise?: zombie.core.Color;
      static readonly DarkViolet?: zombie.core.Color;
      static readonly DeepPink?: zombie.core.Color;
      static readonly DeepSkyBlue?: zombie.core.Color;
      static readonly DodgerBlue?: zombie.core.Color;
      static readonly FireBrick?: zombie.core.Color;
      static readonly ForestGreen?: zombie.core.Color;
      static readonly Fuchsia?: zombie.core.Color;
      static readonly Gold?: zombie.core.Color;
      static readonly Goldenrod?: zombie.core.Color;
      static readonly Green?: zombie.core.Color;
      static readonly GreenYellow?: zombie.core.Color;
      static readonly HotPink?: zombie.core.Color;
      static readonly IndianRed?: zombie.core.Color;
      static readonly Indigo?: zombie.core.Color;
      static readonly Khaki?: zombie.core.Color;
      static readonly Lavender?: zombie.core.Color;
      static readonly LawnGreen?: zombie.core.Color;
      static readonly LemonChiffon?: zombie.core.Color;
      static readonly LightBlue?: zombie.core.Color;
      static readonly LightCoral?: zombie.core.Color;
      static readonly LightCyan?: zombie.core.Color;
      static readonly LightGoldenrodYellow?: zombie.core.Color;
      static readonly LightGreen?: zombie.core.Color;
      static readonly LightPink?: zombie.core.Color;
      static readonly LightSalmon?: zombie.core.Color;
      static readonly LightSeaGreen?: zombie.core.Color;
      static readonly LightSkyBlue?: zombie.core.Color;
      static readonly LightSteelBlue?: zombie.core.Color;
      static readonly LightYellow?: zombie.core.Color;
      static readonly Lime?: zombie.core.Color;
      static readonly LimeGreen?: zombie.core.Color;
      static readonly Magenta?: zombie.core.Color;
      static readonly Maroon?: zombie.core.Color;
      static readonly MediumAquamarine?: zombie.core.Color;
      static readonly MediumBlue?: zombie.core.Color;
      static readonly MediumOrchid?: zombie.core.Color;
      static readonly MediumPurple?: zombie.core.Color;
      static readonly MediumSeaGreen?: zombie.core.Color;
      static readonly MediumSlateBlue?: zombie.core.Color;
      static readonly MediumSpringGreen?: zombie.core.Color;
      static readonly MediumTurquoise?: zombie.core.Color;
      static readonly MediumVioletRed?: zombie.core.Color;
      static readonly MidnightBlue?: zombie.core.Color;
      static readonly Moccasin?: zombie.core.Color;
      static readonly NavajoWhite?: zombie.core.Color;
      static readonly Navy?: zombie.core.Color;
      static readonly Olive?: zombie.core.Color;
      static readonly OliveDrab?: zombie.core.Color;
      static readonly Orange?: zombie.core.Color;
      static readonly OrangeRed?: zombie.core.Color;
      static readonly Orchid?: zombie.core.Color;
      static readonly PaleGoldenrod?: zombie.core.Color;
      static readonly PaleGreen?: zombie.core.Color;
      static readonly PaleTurquoise?: zombie.core.Color;
      static readonly PaleVioletRed?: zombie.core.Color;
      static readonly PapayaWhip?: zombie.core.Color;
      static readonly PeachPu?: zombie.core.Color;
      static readonly Peru?: zombie.core.Color;
      static readonly Pink?: zombie.core.Color;
      static readonly Plum?: zombie.core.Color;
      static readonly PowderBlue?: zombie.core.Color;
      static readonly Purple?: zombie.core.Color;
      static readonly Red?: zombie.core.Color;
      static readonly RosyBrown?: zombie.core.Color;
      static readonly RoyalBlue?: zombie.core.Color;
      static readonly SaddleBrown?: zombie.core.Color;
      static readonly Salmon?: zombie.core.Color;
      static readonly SandyBrown?: zombie.core.Color;
      static readonly SeaGreen?: zombie.core.Color;
      static readonly Sienna?: zombie.core.Color;
      static readonly SkyBlue?: zombie.core.Color;
      static readonly SlateBlue?: zombie.core.Color;
      static readonly SpringGreen?: zombie.core.Color;
      static readonly SteelBlue?: zombie.core.Color;
      static readonly Tan?: zombie.core.Color;
      static readonly Teal?: zombie.core.Color;
      static readonly Thistle?: zombie.core.Color;
      static readonly Tomato?: zombie.core.Color;
      static readonly Turquoise?: zombie.core.Color;
      static readonly Violet?: zombie.core.Color;
      static readonly Wheat?: zombie.core.Color;
      static readonly Yellow?: zombie.core.Color;
      static readonly YellowGreen?: zombie.core.Color;
  
      ColorExists(arg0: string): boolean;
      GetColorByName(arg0: string): zombie.core.Color;
      GetColorFromIndex(arg0: number): zombie.core.Color;
      GetColorNames(): java.util.ArrayList<string>;
      GetColorsCount(): number;
      GetRandomColor(): zombie.core.Color;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.Core extends java.lang.Object
    export class Core {
      private constructor();
      static ChallengeID?: string;
      static CurrentTextEntryBox?: zombie.ui.UITextBox2;
      readonly FloatParamMap?: java.util.HashMap<number, number>;
      static GameMap?: string;
      static GameMode?: string;
      static GameSaveWorld?: string;
      static MaxJukeBoxesActive: number;
      static NumJukeBoxesActive: number;
      readonly OffscreenBuffer?: zombie.core.textures.MultiTextureFBO2;
      static Option3DGroundItem: boolean;
      static OptionAmbientVolume: number;
      static OptionAutoProneAtk: boolean;
      static OptionBloodDecals: number;
      static OptionBorderlessWindow: boolean;
      static OptionChatFadeTime: number;
      static OptionChatFontSize?: string;
      static OptionChatOpaqueOnFocus: boolean;
      static OptionClock24Hour: boolean;
      static OptionClockFormat: number;
      static OptionClockSize: number;
      static OptionContextMenuFont?: string;
      static OptionDoDoorSpriteEffects: boolean;
      static OptionDoWindSpriteEffects: boolean;
      static OptionEnableContentTranslations: boolean;
      static OptionFontSize: number;
      static OptionInventoryFont?: string;
      static OptionLockCursorToWindow: boolean;
      static OptionMaxChatOpaque: number;
      static OptionMeasurementFormat?: string;
      static OptionMinChatOpaque: number;
      static OptionModelTextureMipmaps: boolean;
      static OptionModsEnabled: boolean;
      static OptionMusicLibrary: number;
      static OptionMusicVolume: number;
      static OptionPanCameraWhileAiming: boolean;
      static OptionPanCameraWhileDriving: boolean;
      static OptionRackProgress: boolean;
      static OptionRadialMenuKeyToggle: boolean;
      static OptionReloadDifficulty: number;
      static OptionReloadRadialInstant: boolean;
      static OptionRenderPrecipIndoors: boolean;
      static OptionRenderPrecipitation: number;
      static OptionShowChatTimestamp: boolean;
      static OptionShowChatTitle: boolean;
      static OptionShowCursorWhileAiming: boolean;
      static OptionSoundVolume: number;
      static OptionTemperatureDisplayCelsius: boolean;
      static OptionTexture2x: boolean;
      static OptionTextureCompression: boolean;
      static OptionTooltipFont?: string;
      static OptionUIFBO: boolean;
      static OptionUIRenderFPS: number;
      static OptionUpdateSneakButton: boolean;
      static OptionVSync: boolean;
      static OptionVehicleEngineVolume: number;
      static OptionVoiceAGCMode: number;
      static OptionVoiceEnable: boolean;
      static OptionVoiceMode: number;
      static OptionVoiceRecordDeviceName?: string;
      static OptionVoiceVADMode: number;
      static OptionVoiceVolumeMic: number;
      static OptionVoiceVolumePlayers: number;
      static OptionZoom: boolean;
      static OptiondblTapJogToSprint: boolean;
      RenderShader?: zombie.core.opengl.Shader;
      static SafeMode: boolean;
      static SafeModeForced: boolean;
      static SoundDisabled: boolean;
      static TileScale: number;
      UIRenderAccumulator: number;
      UIRenderThisFrame: boolean;
      static bAltMoveMethod: boolean;
      static bDebug: boolean;
      static readonly bDemo: boolean;
      static bExiting: boolean;
      static bLastStand: boolean;
      static bTutorial: boolean;
      readonly bUseShaders: boolean;
      static blinkAlpha: number;
      static blinkAlphaIncrease: boolean;
      fileversion: number;
      frameStage: number;
      static height: number;
      static readonly iPerfPuddles_All: number;
      static readonly iPerfPuddles_GroundOnly: number;
      static readonly iPerfPuddles_GroundWithRuts: number;
      static readonly iPerfPuddles_None: number;
      static readonly iPerfSkybox_High: number;
      static readonly iPerfSkybox_Medium: number;
      static readonly iPerfSkybox_Static: number;
      steamServerVersion?: string;
      version: number;
      vidMem: number;
      static width: number;
      static xx: number;
      static yy: number;
      static zz: number;
  
      CheckDelayResetLua(): void;
      DelayResetLua(arg0: string, arg1: string): void;
      DoEndFrameStuff(arg0: number, arg1: number): void;
      DoEndFrameStuffFx(arg0: number, arg1: number, arg2: number): void;
      DoFrameReady(): void;
      DoPopIsoStuff(): void;
      DoPushIsoParticleStuff(arg0: number, arg1: number, arg2: number): void;
      DoPushIsoStuff(arg0: number, arg1: number, arg2: number, arg3: number, arg4: boolean): void;
      DoStartFrameStuff(arg0: number, arg1: number, arg2: number, arg3: number): void;
      DoStartFrameStuffSmartTextureFx(arg0: number, arg1: number, arg2: number): void;
      EndFrame(arg0: number): void;
      EndFrameText(arg0: number): void;
      EndFrameUI(): void;
      MoveMethodToggle(): void;
      RenderOffScreenBuffer(): void;
      ResetLua(arg0: boolean, arg1: string): void;
      StartFrame(): void;
      StartFrameText(arg0: number): void;
      StartFrameUI(): boolean;
      TakeFullScreenshot(arg0: string): void;
      TakeScreenshot(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      UnfocusActiveTextEntryBox(): void;
      addKeyBinding(arg0: string, arg1: number): void;
      countMissing3DItems(): void;
      deleteDirectoryRecusrively(arg0: string): void;
      doZoomScroll(arg0: number, arg1: number): void;
      equals(arg0: any): boolean;
      exitToMenu(): void;
      flipPixels(arg0: number[], arg1: number, arg2: number): number[];
      getAutoZoom(arg0: number): boolean;
      getBlinkingMoodle(): string;
      getChallengeID(): string;
      getClass(): java.lang.Class<any>;
      getContentTranslationsEnabled(): boolean;
      getCurrentPlayerZoom(): number;
      getDebug(): boolean;
      getDefaultZoomLevels(): java.util.ArrayList<number>;
      getDifficulty(): string;
      getGLMajorVersion(): number;
      getGLVersion(): string;
      getGameMode(): string;
      getGameVersion(): zombie.core.GameVersion;
      getIgnoreProneZombieRange(): number;
      getInstance(): zombie.core.Core;
      getIsoCursorVisibility(): number;
      getKey(arg0: string): number;
      getKeyMaps(): java.util.Map<string, number>;
      getMaxZoom(): number;
      getMicVolumeError(): boolean;
      getMicVolumeIndicator(): number;
      getMinZoom(): number;
      getMpTextColor(): zombie.core.textures.ColorInfo;
      getMyDocumentFolder(): string;
      getNextZoom(arg0: number, arg1: number): number;
      getObjectHighlitedColor(): zombie.core.textures.ColorInfo;
      getOffscreenBuffer(arg0: number): zombie.core.textures.TextureFBO;
      getOffscreenHeight(arg0: number): number;
      getOffscreenTrueHeight(): number;
      getOffscreenTrueWidth(): number;
      getOffscreenWidth(arg0: number): number;
      getOpenGLVersions(): void;
      getOptionActiveController(arg0: string): boolean;
      getOptionAimOutline(): number;
      getOptionAmbientVolume(): number;
      getOptionAutoDrink(): boolean;
      getOptionBloodDecals(): number;
      getOptionBorderlessWindow(): boolean;
      getOptionChatFadeTime(): number;
      getOptionChatFontSize(): string;
      getOptionChatOpaqueOnFocus(): boolean;
      getOptionClock24Hour(): boolean;
      getOptionClockFormat(): number;
      getOptionClockSize(): number;
      getOptionContextMenuFont(): string;
      getOptionCorpseShadows(): boolean;
      getOptionCycleContainerKey(): string;
      getOptionDisplayAsCelsius(): boolean;
      getOptionDoDoorSpriteEffects(): boolean;
      getOptionDoWindSpriteEffects(): boolean;
      getOptionDropItemsOnSquareCenter(): boolean;
      getOptionEnableLeftJoystickRadialMenu(): boolean;
      getOptionFontSize(): number;
      getOptionIgnoreProneZombieRange(): number;
      getOptionInventoryContainerSize(): number;
      getOptionInventoryFont(): string;
      getOptionLanguageName(): string;
      getOptionLeaveKeyInIgnition(): boolean;
      getOptionLockCursorToWindow(): boolean;
      getOptionMaxChatOpaque(): number;
      getOptionMeasurementFormat(): string;
      getOptionMinChatOpaque(): number;
      getOptionModelTextureMipmaps(): boolean;
      getOptionModsEnabled(): boolean;
      getOptionMusicLibrary(): number;
      getOptionMusicVolume(): number;
      getOptionOnStartup(arg0: string): any;
      getOptionPanCameraWhileAiming(): boolean;
      getOptionPanCameraWhileDriving(): boolean;
      getOptionRackProgress(): boolean;
      getOptionRadialMenuKeyToggle(): boolean;
      getOptionReloadDifficulty(): number;
      getOptionReloadRadialInstant(): boolean;
      getOptionRenderPrecipitation(): number;
      getOptionSearchModeOverlayEffect(): number;
      getOptionShoulderButtonContainerSwitch(): number;
      getOptionShowCursorWhileAiming(): boolean;
      getOptionShowItemModInfo(): boolean;
      getOptionShowSurvivalGuide(): boolean;
      getOptionSimpleClothingTextures(): number;
      getOptionSimpleWeaponTextures(): boolean;
      getOptionSingleContextMenu(arg0: number): boolean;
      getOptionSoundVolume(): number;
      getOptionTexture2x(): boolean;
      getOptionTextureCompression(): boolean;
      getOptionTieredZombieUpdates(): boolean;
      getOptionTimedActionGameSpeedReset(): boolean;
      getOptionTooltipFont(): string;
      getOptionUIFBO(): boolean;
      getOptionUIRenderFPS(): number;
      getOptionUpdateSneakButton(): boolean;
      getOptionVSync(): boolean;
      getOptionVehicleEngineVolume(): number;
      getOptionVoiceAGCMode(): number;
      getOptionVoiceEnable(): boolean;
      getOptionVoiceMode(): number;
      getOptionVoiceRecordDevice(): number;
      getOptionVoiceRecordDeviceName(): string;
      getOptionVoiceVADMode(): number;
      getOptionVoiceVolumeMic(): number;
      getOptionVoiceVolumePlayers(): number;
      getOptionZoom(): boolean;
      getOptionZoomLevels1x(): string;
      getOptionZoomLevels2x(): string;
      getPerfPuddles(): number;
      getPerfPuddlesOnLoad(): number;
      getPerfReflections(): boolean;
      getPerfReflectionsOnLoad(): boolean;
      getPerfSkybox(): number;
      getPerfSkyboxOnLoad(): number;
      getPoisonousBerry(): string;
      getPoisonousMushroom(): string;
      getRealOptionSoundVolume(): number;
      getSaveFolder(): string;
      getScreenHeight(): number;
      getScreenModes(): se.krka.kahlua.vm.KahluaTable;
      getScreenWidth(): number;
      getSeenUpdateText(): string;
      getServerVOIPEnable(): boolean;
      getSteamServerVersion(): string;
      getTileScale(): number;
      getUseShaders(): boolean;
      getVersionNumber(): string;
      getVidMem(): number;
      getXAngle(arg0: number, arg1: number): number;
      getYAngle(arg0: number, arg1: number): number;
      getZoom(arg0: number): number;
      gotNewBelt(): boolean;
      hashCode(): number;
      init(arg0: number, arg1: number): void;
      initFBOs(): void;
      initPoisonousBerry(): void;
      initPoisonousMushroom(): void;
      initShaders(): void;
      isAnimPopupDone(): boolean;
      isAzerty(): boolean;
      isCelsius(): boolean;
      isChallenge(): boolean;
      isCollideZombies(): boolean;
      isDedicated(): boolean;
      isDefaultOptions(): boolean;
      isDoingTextEntry(): boolean;
      isDoneNewSaveFolder(): boolean;
      isFlashIsoCursor(): boolean;
      isForceSnow(): boolean;
      isFullScreen(): boolean;
      isInDebug(): boolean;
      isLastStand(): boolean;
      isModsPopupDone(): boolean;
      isMultiThread(): boolean;
      isNewReloading(): boolean;
      isNoSave(): boolean;
      isOption3DGroundItem(): boolean;
      isOptionAutoProneAtk(): boolean;
      isOptionProgressBar(): boolean;
      isOptionShowChatTimestamp(): boolean;
      isOptionShowChatTitle(): boolean;
      isOptionSimpleClothingTextures(arg0: boolean): boolean;
      isOptiondblTapJogToSprint(): boolean;
      isRenderPrecipIndoors(): boolean;
      isRiversideDone(): boolean;
      isSelectingAll(): boolean;
      isShowFirstTimeSearchTutorial(): boolean;
      isShowFirstTimeSneakTutorial(): boolean;
      isShowFirstTimeVehicleTutorial(): boolean;
      isShowFirstTimeWeatherTutorial(): boolean;
      isShowPing(): boolean;
      isShowYourUsername(): boolean;
      isToggleToAim(): boolean;
      isToggleToRun(): boolean;
      isToggleToSprint(): boolean;
      isTutorialDone(): boolean;
      isVehiclesWarningShow(): boolean;
      isZombieGroupSound(): boolean;
      isZoomEnabled(): boolean;
      loadOptions(): boolean;
      loadedShader(): boolean;
      notify(): void;
      notifyAll(): void;
      quit(): void;
      quitToDesktop(): void;
      reinitKeyMaps(): void;
      saveOptions(): void;
      setAnimPopupDone(arg0: boolean): void;
      setAutoZoom(arg0: number, arg1: boolean): void;
      setAzerty(arg0: boolean): void;
      setBlinkingMoodle(arg0: string): void;
      setCelsius(arg0: boolean): void;
      setChallenge(arg0: boolean): void;
      setCollideZombies(arg0: boolean): void;
      setContentTranslationsEnabled(arg0: boolean): void;
      setDifficulty(arg0: string): void;
      setDisplayMode(arg0: number, arg1: number, arg2: boolean): void;
      setDoneNewSaveFolder(arg0: boolean): void;
      setFlashIsoCursor(arg0: boolean): void;
      setForceSnow(arg0: boolean): void;
      setFramerate(arg0: number): void;
      setFullScreen(arg0: boolean): void;
      setGotNewBelt(arg0: boolean): void;
      setIsSelectingAll(arg0: boolean): void;
      setIsoCursorVisibility(arg0: number): void;
      setKeyMaps(arg0: java.util.Map<string, number>): void;
      setLastRenderedFBO(arg0: zombie.core.textures.TextureFBO): void;
      setModsPopupDone(arg0: boolean): void;
      setMpTextColor(arg0: zombie.core.textures.ColorInfo): void;
      setMultiThread(arg0: boolean): void;
      setNewReloading(arg0: boolean): void;
      setNoSave(arg0: boolean): void;
      setObjectHighlitedColor(arg0: zombie.core.textures.ColorInfo): void;
      setOption3DGroundItem(arg0: boolean): void;
      setOptionActiveController(arg0: number, arg1: boolean): void;
      setOptionAimOutline(arg0: number): void;
      setOptionAmbientVolume(arg0: number): void;
      setOptionAutoDrink(arg0: boolean): void;
      setOptionAutoProneAtk(arg0: boolean): void;
      setOptionBloodDecals(arg0: number): void;
      setOptionBorderlessWindow(arg0: boolean): void;
      setOptionChatFadeTime(arg0: number): void;
      setOptionChatFontSize(arg0: string): void;
      setOptionChatOpaqueOnFocus(arg0: boolean): void;
      setOptionClock24Hour(arg0: boolean): void;
      setOptionClockFormat(arg0: number): void;
      setOptionClockSize(arg0: number): void;
      setOptionContextMenuFont(arg0: string): void;
      setOptionCorpseShadows(arg0: boolean): void;
      setOptionCycleContainerKey(arg0: string): void;
      setOptionDisplayAsCelsius(arg0: boolean): void;
      setOptionDoDoorSpriteEffects(arg0: boolean): void;
      setOptionDoWindSpriteEffects(arg0: boolean): void;
      setOptionDropItemsOnSquareCenter(arg0: boolean): void;
      setOptionEnableLeftJoystickRadialMenu(arg0: boolean): void;
      setOptionFontSize(arg0: number): void;
      setOptionIgnoreProneZombieRange(arg0: number): void;
      setOptionInventoryContainerSize(arg0: number): void;
      setOptionInventoryFont(arg0: string): void;
      setOptionLanguageName(arg0: string): void;
      setOptionLeaveKeyInIgnition(arg0: boolean): void;
      setOptionLockCursorToWindow(arg0: boolean): void;
      setOptionMaxChatOpaque(arg0: number): void;
      setOptionMeasurementFormat(arg0: string): void;
      setOptionMinChatOpaque(arg0: number): void;
      setOptionModelTextureMipmaps(arg0: boolean): void;
      setOptionModsEnabled(arg0: boolean): void;
      setOptionMusicLibrary(arg0: number): void;
      setOptionMusicVolume(arg0: number): void;
      setOptionOnStartup(arg0: string, arg1: any): void;
      setOptionPanCameraWhileAiming(arg0: boolean): void;
      setOptionPanCameraWhileDriving(arg0: boolean): void;
      setOptionProgressBar(arg0: boolean): void;
      setOptionRackProgress(arg0: boolean): void;
      setOptionRadialMenuKeyToggle(arg0: boolean): void;
      setOptionReloadDifficulty(arg0: number): void;
      setOptionReloadRadialInstant(arg0: boolean): void;
      setOptionRenderPrecipitation(arg0: number): void;
      setOptionSearchModeOverlayEffect(arg0: number): void;
      setOptionShoulderButtonContainerSwitch(arg0: number): void;
      setOptionShowChatTimestamp(arg0: boolean): void;
      setOptionShowChatTitle(arg0: boolean): void;
      setOptionShowCursorWhileAiming(arg0: boolean): void;
      setOptionShowItemModInfo(arg0: boolean): void;
      setOptionShowSurvivalGuide(arg0: boolean): void;
      setOptionSimpleClothingTextures(arg0: number): void;
      setOptionSimpleWeaponTextures(arg0: boolean): void;
      setOptionSingleContextMenu(arg0: number, arg1: boolean): void;
      setOptionSoundVolume(arg0: number): void;
      setOptionTexture2x(arg0: boolean): void;
      setOptionTextureCompression(arg0: boolean): void;
      setOptionTieredZombieUpdates(arg0: boolean): void;
      setOptionTimedActionGameSpeedReset(arg0: boolean): void;
      setOptionTooltipFont(arg0: string): void;
      setOptionUIFBO(arg0: boolean): void;
      setOptionUIRenderFPS(arg0: number): void;
      setOptionUpdateSneakButton(arg0: boolean): void;
      setOptionVSync(arg0: boolean): void;
      setOptionVehicleEngineVolume(arg0: number): void;
      setOptionVoiceAGCMode(arg0: number): void;
      setOptionVoiceEnable(arg0: boolean): void;
      setOptionVoiceMode(arg0: number): void;
      setOptionVoiceRecordDevice(arg0: number): void;
      setOptionVoiceRecordDeviceName(arg0: string): void;
      setOptionVoiceVADMode(arg0: number): void;
      setOptionVoiceVolumeMic(arg0: number): void;
      setOptionVoiceVolumePlayers(arg0: number): void;
      setOptionZoom(arg0: boolean): void;
      setOptionZoomLevels1x(arg0: string): void;
      setOptionZoomLevels2x(arg0: string): void;
      setOptiondblTapJogToSprint(arg0: boolean): void;
      setPerfPuddles(arg0: number): void;
      setPerfReflections(arg0: boolean): void;
      setPerfSkybox(arg0: number): void;
      setPoisonousBerry(arg0: string): void;
      setPoisonousMushroom(arg0: string): void;
      setRenderPrecipIndoors(arg0: boolean): void;
      setResolution(arg0: string): void;
      setResolutionAndFullScreen(arg0: number, arg1: number, arg2: boolean): void;
      setRiversideDone(arg0: boolean): void;
      setSaveFolder(arg0: string): void;
      setScreenSize(arg0: number, arg1: number): void;
      setSeenUpdateText(arg0: string): void;
      setShowFirstTimeSearchTutorial(arg0: boolean): void;
      setShowFirstTimeSneakTutorial(arg0: boolean): void;
      setShowFirstTimeVehicleTutorial(arg0: boolean): void;
      setShowFirstTimeWeatherTutorial(arg0: boolean): void;
      setShowPing(arg0: boolean): void;
      setShowYourUsername(arg0: boolean): void;
      setTestingMicrophone(arg0: boolean): void;
      setToggleToAim(arg0: boolean): void;
      setToggleToRun(arg0: boolean): void;
      setToggleToSprint(arg0: boolean): void;
      setTutorialDone(arg0: boolean): void;
      setUseShaders(arg0: boolean): void;
      setVehiclesWarningShow(arg0: boolean): void;
      setVidMem(arg0: number): void;
      setWindowed(arg0: boolean): void;
      setZombieGroupSound(arg0: boolean): void;
      shadersOptionChanged(): void;
      supportCompressedTextures(): boolean;
      supportNPTTexture(): boolean;
      supportRes(arg0: number, arg1: number): boolean;
      supportsFBO(): boolean;
      toString(): string;
      updateKeyboard(): void;
      wait(arg0: number): void;
      zoomLevelsChanged(): void;
      zoomOptionChanged(arg0: boolean): void;
    }
    // zombie.core.GameVersion extends java.lang.Object
    export class GameVersion {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getInt(): number;
      getMajor(): number;
      getMinor(): number;
      getSuffix(): string;
      hashCode(): number;
      isGreaterThan(arg0: zombie.core.GameVersion): boolean;
      isGreaterThanOrEqualTo(arg0: zombie.core.GameVersion): boolean;
      isLessThan(arg0: zombie.core.GameVersion): boolean;
      isLessThanOrEqualTo(arg0: zombie.core.GameVersion): boolean;
      notify(): void;
      notifyAll(): void;
      parse(arg0: string): zombie.core.GameVersion;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.ImmutableColor extends java.lang.Object
    export class ImmutableColor {
      private constructor();
      readonly a: number;
      readonly b: number;
      static readonly black?: zombie.core.ImmutableColor;
      static readonly blue?: zombie.core.ImmutableColor;
      static readonly cyan?: zombie.core.ImmutableColor;
      static readonly darkGray?: zombie.core.ImmutableColor;
      static readonly darkGreen?: zombie.core.ImmutableColor;
      readonly g: number;
      static readonly gray?: zombie.core.ImmutableColor;
      static readonly green?: zombie.core.ImmutableColor;
      static readonly lightGray?: zombie.core.ImmutableColor;
      static readonly lightGreen?: zombie.core.ImmutableColor;
      static readonly magenta?: zombie.core.ImmutableColor;
      static readonly orange?: zombie.core.ImmutableColor;
      static readonly pink?: zombie.core.ImmutableColor;
      static readonly purple?: zombie.core.ImmutableColor;
      readonly r: number;
      static readonly red?: zombie.core.ImmutableColor;
      static readonly transparent?: zombie.core.ImmutableColor;
      static readonly white?: zombie.core.ImmutableColor;
      static readonly yellow?: zombie.core.ImmutableColor;
  
      HSBtoRGB(arg0: number, arg1: number, arg2: number): number[];
      add(arg0: zombie.core.ImmutableColor): zombie.core.ImmutableColor;
      brighter(arg0: number): zombie.core.ImmutableColor;
      darker(): zombie.core.ImmutableColor;
      decode(arg0: string): zombie.core.ImmutableColor;
      equals(arg0: any): boolean;
      getAlphaByte(): number;
      getAlphaFloat(): number;
      getAlphaInt(): number;
      getBlueByte(): number;
      getBlueFloat(): number;
      getBlueInt(): number;
      getClass(): java.lang.Class<any>;
      getGreenByte(): number;
      getGreenFloat(): number;
      getGreenInt(): number;
      getRedByte(): number;
      getRedFloat(): number;
      getRedInt(): number;
      hashCode(): number;
      interp(arg0: zombie.core.ImmutableColor, arg1: number): zombie.core.ImmutableColor;
      multiply(arg0: zombie.core.Color): zombie.core.ImmutableColor;
      notify(): void;
      notifyAll(): void;
      random(): zombie.core.ImmutableColor;
      scale(arg0: number): zombie.core.ImmutableColor;
      toMutableColor(): zombie.core.Color;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.Language extends java.lang.Object
    export class Language {
      private constructor();
      FromString(arg0: string): zombie.core.Language;
      base(): string;
      charset(): string;
      equals(arg0: any): boolean;
      fromIndex(arg0: number): zombie.core.Language;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      index(): number;
      isAzerty(): boolean;
      name(): string;
      notify(): void;
      notifyAll(): void;
      text(): string;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.PerformanceSettings extends java.lang.Object
    export class PerformanceSettings {
      private constructor();
      static AnimationSkip: number;
      static BaseStaticAnimFramerate: number;
      static FogQuality: number;
      static InterpolateAnims: boolean;
      static LightingFPS: number;
      static LightingFrameSkip: number;
      static LightingThread: boolean;
      static ManualFrameSkips: number;
      static ModelLighting: boolean;
      static NewRoofHiding: boolean;
      static PuddlesQuality: number;
      static UseFBOs: boolean;
      static WaterQuality: number;
      static ZombieAnimationSpeedFalloffCount: number;
      static ZombieBonusFullspeedFalloff: number;
      static auto3DZombies: boolean;
      static readonly instance?: zombie.core.PerformanceSettings;
      static numberZombiesBlended: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getFogQuality(): number;
      getFramerate(): number;
      getLightingFPS(): number;
      getLightingQuality(): number;
      getLockFPS(): number;
      getNewRoofHiding(): boolean;
      getPuddlesQuality(): number;
      getUIRenderFPS(): number;
      getWaterQuality(): number;
      hashCode(): number;
      isFramerateUncapped(): boolean;
      isUncappedFPS(): boolean;
      notify(): void;
      notifyAll(): void;
      setFogQuality(arg0: number): void;
      setFramerate(arg0: number): void;
      setFramerateUncapped(arg0: boolean): void;
      setLightingFPS(arg0: number): void;
      setLightingQuality(arg0: number): void;
      setLockFPS(arg0: number): void;
      setNewRoofHiding(arg0: boolean): void;
      setPuddlesQuality(arg0: number): void;
      setUncappedFPS(arg0: boolean): void;
      setWaterQuality(arg0: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.SpriteRenderer extends java.lang.Object
    export class SpriteRenderer {
      private constructor();
      static GL_BLENDFUNC_ENABLED: boolean;
      static readonly NUM_RENDER_STATES: number;
      static readonly instance?: zombie.core.SpriteRenderer;
      readonly m_states?: zombie.core.sprite.SpriteRendererStates;
      static readonly ringBuffer?: zombie.core.SpriteRenderer$RingBuffer;
  
      EndShader(): void;
      ShaderUpdate1f(arg0: number, arg1: number, arg2: number): void;
      ShaderUpdate1i(arg0: number, arg1: number, arg2: number): void;
      ShaderUpdate2f(arg0: number, arg1: number, arg2: number, arg3: number): void;
      ShaderUpdate3f(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      ShaderUpdate4f(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
      StartShader(arg0: number, arg1: number): void;
      acquireStateForRendering(arg0: java.util._function.BooleanSupplier): zombie.core.sprite.SpriteRenderState;
      clearCutawayTexture(): void;
      clearSprites(): void;
      clearUseVertColorsArray(): void;
      create(): void;
      doCoreIntParam(arg0: number, arg1: number): void;
      drawGeneric(arg0: zombie.core.textures.TextureDraw$GenericDrawer): void;
      drawModel(arg0: zombie.core.skinnedmodel.ModelManager$ModelSlot): void;
      drawParticles(arg0: number, arg1: number, arg2: number): void;
      drawPuddles(arg0: zombie.core.opengl.Shader, arg1: number, arg2: number, arg3: number): void;
      drawSkyBox(arg0: zombie.core.opengl.Shader, arg1: number, arg2: number, arg3: number): void;
      drawWater(arg0: zombie.core.opengl.Shader, arg1: number, arg2: number, arg3: boolean): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDoAdditive(): boolean;
      getMainStateIndex(): number;
      getPlayerMaxZoom(): number;
      getPlayerMinZoom(): number;
      getPlayerZoomLevel(): number;
      getPopulatingState(): zombie.core.sprite.SpriteRenderState;
      getRenderStateIndex(): number;
      getRenderingPlayerCamera(arg0: number): zombie.iso.PlayerCamera;
      getRenderingPlayerIndex(): number;
      getRenderingState(): zombie.core.sprite.SpriteRenderState;
      glAlphaFunc(arg0: number, arg1: number): void;
      glBind(arg0: number): void;
      glBlendEquation(arg0: number): void;
      glBlendFunc(arg0: number, arg1: number): void;
      glBlendFuncSeparate(arg0: number, arg1: number, arg2: number, arg3: number): void;
      glBuffer(arg0: number, arg1: number): void;
      glClear(arg0: number): void;
      glClearColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      glColorMask(arg0: number, arg1: number, arg2: number, arg3: number): void;
      glDepthMask(arg0: boolean): void;
      glDisable(arg0: number): void;
      glDoEndFrame(): void;
      glDoEndFrameFx(arg0: number): void;
      glDoStartFrame(arg0: number, arg1: number, arg2: number, arg3: number): void;
      glDoStartFrameFx(arg0: number, arg1: number, arg2: number): void;
      glEnable(arg0: number): void;
      glGenerateMipMaps(arg0: number): void;
      glIgnoreStyles(arg0: boolean): void;
      glLoadIdentity(): void;
      glStencilFunc(arg0: number, arg1: number, arg2: number): void;
      glStencilMask(arg0: number): void;
      glStencilOp(arg0: number, arg1: number, arg2: number): void;
      glTexParameteri(arg0: number, arg1: number, arg2: number): void;
      glViewport(arg0: number, arg1: number, arg2: number, arg3: number): void;
      hashCode(): number;
      initFromIsoCamera(arg0: number): void;
      isMaxZoomLevel(): boolean;
      isMinZoomLevel(): boolean;
      isWaitingForRenderState(): boolean;
      notify(): void;
      notifyAll(): void;
      notifyRenderStateQueue(): void;
      postRender(): void;
      prePopulating(): void;
      pushFrameDown(): void;
      render(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number, arg12: number, arg13: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderClamped(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number, arg12: number, arg13: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderPoly(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number): void;
      renderRect(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      renderdebug(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number, arg12: number, arg13: number, arg14: number, arg15: number, arg16: number, arg17: number, arg18: number, arg19: number, arg20: number, arg21: number, arg22: number, arg23: number, arg24: number, arg25: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderflipped(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderi(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderline(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number): void;
      setCutawayTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number): void;
      setDefaultStyle(arg0: zombie.core.Styles.AbstractStyle): void;
      setDoAdditive(arg0: boolean): void;
      setExtraWallShaderParams(arg0: zombie.core.SpriteRenderer$WallShaderTexRender): void;
      setRenderingPlayerIndex(arg0: number): void;
      setUseVertColorsArray(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      startOffscreenUI(): void;
      stopOffscreenUI(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.SpriteRenderer$RingBuffer extends java.lang.Object
    export class SpriteRenderer$RingBuffer {
      private constructor();
      static IGNORE_STYLES: boolean;
      restoreBoundTextures: boolean;
      restoreVBOs: boolean;
  
      checkShaderChangedTexture1(): void;
      debugBoundTexture(arg0: zombie.core.textures.Texture, arg1: number): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      shaderChangedTexture1(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.core.SpriteRenderer$WallShaderTexRender */
    export class SpriteRenderer$WallShaderTexRender {
      /* ENUM VALUES */
      static readonly All: SpriteRenderer$WallShaderTexRender; 
      static readonly LeftOnly: SpriteRenderer$WallShaderTexRender; 
      static readonly RightOnly: SpriteRenderer$WallShaderTexRender; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.core.SpriteRenderer$WallShaderTexRender[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): SpriteRenderer$WallShaderTexRender;
      valueOf(arg0: string): zombie.core.SpriteRenderer$WallShaderTexRender;
      values(): zombie.core.SpriteRenderer$WallShaderTexRender[];
    }
    // zombie.core.Translator extends java.lang.Object
    export class Translator {
      private constructor();
      static debug: boolean;
      static language?: zombie.core.Language;
  
      addLanguageToList(arg0: zombie.core.Language, arg1: java.util.ArrayList<zombie.core.Language>): void;
      debugItemEvolvedRecipeNames(): void;
      debugItemNames(): void;
      debugMultiStageBuildNames(): void;
      debugRecipeNames(): void;
      equals(arg0: any): boolean;
      getAvailableLanguage(): java.util.ArrayList<zombie.core.Language>;
      getAzertyMap(): java.util.ArrayList<string>;
      getCharset(): string;
      getClass(): java.lang.Class<any>;
      getDefaultLanguage(): zombie.core.Language;
      getDisplayItemName(arg0: string): string;
      getItemEvolvedRecipeName(arg0: string): string;
      getItemNameFromFullType(arg0: string): string;
      getLanguage(): zombie.core.Language;
      getMoveableDisplayName(arg0: string): string;
      getMultiStageBuild(arg0: string): string;
      getNewsVersions(): java.util.ArrayList<string>;
      getRadioText(arg0: string): string;
      getRecipeName(arg0: string): string;
      getText(arg0: string, arg1: any, arg2: any): string;
      getTextMediaEN(arg0: string): string;
      getTextOrNull(arg0: string, arg1: any): string;
      hashCode(): number;
      loadFiles(): void;
      notify(): void;
      notifyAll(): void;
      setDefaultItemEvolvedRecipeName(arg0: string, arg1: string): void;
      setLanguage(arg0: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.core.Collections {
    // zombie.core.Collections.NonBlockingHashMap extends java.util.AbstractMap<TypeK, TypeV>
    export class NonBlockingHashMap<TypeK, TypeV> {
      private constructor();
      clear(): void;
      clone(): any;
      compute(arg0: any, arg1: java.util._function.BiFunction<any, any, any>): any;
      computeIfAbsent(arg0: any, arg1: java.util._function.Function<any, any>): any;
      computeIfPresent(arg0: any, arg1: java.util._function.BiFunction<any, any, any>): any;
      contains(arg0: any): boolean;
      containsKey(arg0: any): boolean;
      containsValue(arg0: any): boolean;
      elements(): java.util.Enumeration<TypeV>;
      entrySet(): java.util.Set<java.util.Map$Entry<TypeK, TypeV>>;
      equals(arg0: any): boolean;
      forEach(arg0: java.util._function.BiConsumer<any, any>): void;
      get(arg0: any): TypeV;
      getClass(): java.lang.Class<any>;
      getOrDefault(arg0: any, arg1: any): any;
      hashCode(): number;
      isEmpty(): boolean;
      keySet(): java.util.Set<TypeK>;
      keys(): java.util.Enumeration<TypeK>;
      merge(arg0: any, arg1: any, arg2: java.util._function.BiFunction<any, any, any>): any;
      notify(): void;
      notifyAll(): void;
      print(): void;
      put(arg0: TypeK, arg1: TypeV): TypeV;
      putAll(arg0: java.util.Map<TypeK, TypeV>): void;
      putIfAbsent(arg0: TypeK, arg1: TypeV): TypeV;
      remove(arg0: any): TypeV;
      replace(arg0: TypeK, arg1: TypeV, arg2: TypeV): boolean;
      replaceAll(arg0: java.util._function.BiFunction<any, any, any>): void;
      reprobes(): number;
      size(): number;
      toString(): string;
      values(): java.util.Collection<TypeV>;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.core.Styles {
    // zombie.core.Styles.AbstractStyle extends java.lang.Object
    export class AbstractStyle {
      private constructor();
      build(): zombie.core.Styles.GeometryData;
      equals(arg0: any): boolean;
      getAlphaOp(): zombie.core.Styles.AlphaOp;
      getClass(): java.lang.Class<any>;
      getRenderSprite(): boolean;
      getStyleID(): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      render(arg0: number, arg1: number): void;
      resetState(): void;
      setupState(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.core.Styles.AlphaOp */
    export class AlphaOp {
      /* ENUM VALUES */
      static readonly KEEP: AlphaOp; 
      static readonly PREMULTIPLY: AlphaOp; 
      static readonly ZERO: AlphaOp; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.core.Styles.AlphaOp[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): AlphaOp;
      op(arg0: org.lwjgl.util.ReadableColor, arg1: number, arg2: java.nio.FloatBuffer): void;
      valueOf(arg0: string): zombie.core.Styles.AlphaOp;
      values(): zombie.core.Styles.AlphaOp[];
    }
    // zombie.core.Styles.FloatList extends java.lang.Object
    export class FloatList {
      private constructor();
      add(arg0: number): number;
      addAll(arg0: zombie.core.Styles.FloatList): void;
      array(): number[];
      capacity(): number;
      clear(): void;
      ensureCapacity(arg0: number): void;
      equals(arg0: any): boolean;
      get(arg0: number): number;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      isEmpty(): boolean;
      notify(): void;
      notifyAll(): void;
      remove(arg0: number): number;
      size(): number;
      toArray(arg0: any[]): void;
      toString(): string;
      trimToSize(): void;
      wait(arg0: number): void;
    }
    // zombie.core.Styles.GeometryData extends java.lang.Object
    export class GeometryData {
      private constructor();
      clear(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getIndexData(): zombie.core.Styles.ShortList;
      getVertexData(): zombie.core.Styles.FloatList;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.Styles.ShortList extends java.lang.Object
    export class ShortList {
      private constructor();
      add(arg0: number): number;
      addAll(arg0: zombie.core.Styles.ShortList): void;
      array(): number[];
      capacity(): number;
      clear(): void;
      ensureCapacity(arg0: number): void;
      equals(arg0: any): boolean;
      get(arg0: number): number;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      isEmpty(): boolean;
      notify(): void;
      notifyAll(): void;
      remove(arg0: number): number;
      size(): number;
      toArray(arg0: number[]): number[];
      toString(): string;
      trimToSize(): void;
      wait(arg0: number): void;
    }
    // zombie.core.Styles.Style
    export class Style {
      private constructor();
      build(): zombie.core.Styles.GeometryData;
      getAlphaOp(): zombie.core.Styles.AlphaOp;
      getRenderSprite(): boolean;
      getStyleID(): number;
      render(arg0: number, arg1: number): void;
      resetState(): void;
      setupState(): void;
    }
  }
  export namespace zombie.core.VBO {
    // zombie.core.VBO.IGLBufferObject
    export class IGLBufferObject {
      private constructor();
      GL_ARRAY_BUFFER(): number;
      GL_BUFFER_SIZE(): number;
      GL_ELEMENT_ARRAY_BUFFER(): number;
      GL_STATIC_DRAW(): number;
      GL_STREAM_DRAW(): number;
      GL_WRITE_ONLY(): number;
      glBindBuffer(arg0: number, arg1: number): void;
      glBufferData(arg0: number, arg1: java.nio.ByteBuffer, arg2: number): void;
      glDeleteBuffers(arg0: number): void;
      glGenBuffers(): number;
      glGetBufferParameter(arg0: number, arg1: number, arg2: java.nio.IntBuffer): void;
      glMapBuffer(arg0: number, arg1: number, arg2: number, arg3: java.nio.ByteBuffer): java.nio.ByteBuffer;
      glUnmapBuffer(arg0: number): boolean;
    }
  }
  export namespace zombie.core.fonts {
    // zombie.core.fonts.AngelCodeFont extends java.lang.Object
    export class AngelCodeFont {
      private constructor();
      chars?: zombie.core.fonts.AngelCodeFont$CharDef[];
      static curA: number;
      static curB: number;
      static curCol?: zombie.core.Color;
      static curG: number;
      static curR: number;
      static xoff: number;
      static yoff: number;
  
      destroy(): void;
      drawString(arg0: number, arg1: number, arg2: string): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getHeight(arg0: string): number;
      getLineHeight(): number;
      getWidth(arg0: string, arg1: number, arg2: number): number;
      getYOffset(arg0: string): number;
      hashCode(): number;
      isEmpty(): boolean;
      notify(): void;
      notifyAll(): void;
      onStateChanged(arg0: zombie.asset.Asset$State, arg1: zombie.asset.Asset$State, arg2: zombie.asset.Asset): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.fonts.AngelCodeFont$CharDef extends java.lang.Object
    export class AngelCodeFont$CharDef {
      private constructor();
      dlIndex: number;
      height: number;
      id: number;
      image?: zombie.core.textures.Texture;
      kerningAmount?: number[];
      kerningSecond?: number[];
      page: number;
      width: number;
      x: number;
      xadvance: number;
      xoffset: number;
      y: number;
      yoffset: number;
  
      destroy(): void;
      draw(arg0: number, arg1: number): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getKerning(arg0: number): number;
      hashCode(): number;
      init(): void;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.fonts.AngelCodeFont$CharDefTexture extends zombie.core.textures.Texture
    export class AngelCodeFont$CharDefTexture {
      private constructor();
      static readonly ASSET_TYPE?: zombie.asset.AssetType;
      static BindCount: number;
      static WarnFailFindTexture: boolean;
      assetParams?: zombie.core.textures.Texture$TextureAssetParams;
      static bDoingQuad: boolean;
      bindAlways: boolean;
      flip: boolean;
      static la: number;
      static lastTextureID: number;
      static lastlastTextureID: number;
      static lb: number;
      static lg: number;
      static lr: number;
      static readonly nullTextures?: java.util.HashSet<string>;
      offsetX: number;
      offsetY: number;
      static totalTextureID: number;
      xEnd: number;
      xStart: number;
      yEnd: number;
      yStart: number;
  
      addDependency(arg0: zombie.asset.Asset): void;
      bind(arg0: number): void;
      bindNone(): void;
      clearTextures(): void;
      collectAllIcons(arg0: java.util.HashMap<string, string>, arg1: java.util.HashMap<string, string>): void;
      copyMaskRegion(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number): void;
      createMask(arg0: zombie.core.utils.BooleanGrid): void;
      destroy(): void;
      equals(arg0: any): boolean;
      flipPixels(arg0: number[], arg1: number, arg2: number): number[];
      forgetTexture(arg0: string): void;
      getAssetManager(): zombie.asset.AssetManager;
      getClass(): java.lang.Class<any>;
      getData(): zombie.core.utils.WrappedBuffer;
      getEngineMipmapTexture(): zombie.core.textures.Texture;
      getErrorTexture(): zombie.core.textures.Texture;
      getHeight(): number;
      getHeightHW(): number;
      getHeightOrig(): number;
      getID(): number;
      getMask(): zombie.core.textures.Mask;
      getName(): string;
      getObserverCb(): zombie.asset.Asset$ObserverCallback;
      getOffsetX(): number;
      getOffsetY(): number;
      getPath(): zombie.asset.AssetPath;
      getRealHeight(): number;
      getRealWidth(): number;
      getRefCount(): number;
      getSharedTexture(arg0: string, arg1: number): zombie.core.textures.Texture;
      getState(): zombie.asset.Asset$State;
      getSteamAvatar(arg0: number): zombie.core.textures.Texture;
      getTexture(arg0: string): zombie.core.textures.Texture;
      getTextureId(): zombie.core.textures.TextureID;
      getType(): zombie.asset.AssetType;
      getUVScale(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getUseAlphaChannel(): boolean;
      getWhite(): zombie.core.textures.Texture;
      getWidth(): number;
      getWidthHW(): number;
      getWidthOrig(): number;
      getXEnd(): number;
      getXStart(): number;
      getYEnd(): number;
      getYStart(): number;
      hashCode(): number;
      isCollisionable(): boolean;
      isDestroyed(): boolean;
      isEmpty(): boolean;
      isFailure(): boolean;
      isReady(): boolean;
      isSolid(): boolean;
      isValid(): boolean;
      loadMaskRegion(arg0: java.nio.ByteBuffer): void;
      makeTransp(arg0: number, arg1: number, arg2: number): void;
      notify(): void;
      notifyAll(): void;
      onBeforeReady(): void;
      onCreated(arg0: zombie.asset.Asset$State): void;
      onTexturePacksChanged(): void;
      processFilePath(arg0: string): string;
      releaseCharDef(): void;
      reload(arg0: string): void;
      reloadFromFile(arg0: string): void;
      removeDependency(arg0: zombie.asset.Asset): void;
      render(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderdiamond(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      rendershader2(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number): void;
      renderstrip(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderwalln(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      renderwallnw(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number): void;
      renderwallw(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      save(arg0: string): void;
      saveMask(arg0: string): void;
      saveMaskRegion(arg0: java.nio.ByteBuffer): void;
      setAlphaForeach(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setAssetParams(arg0: zombie.asset.AssetManager$AssetParams): void;
      setCustomizedTexture(): void;
      setData(arg0: java.nio.ByteBuffer): void;
      setHeight(arg0: number): void;
      setMask(arg0: zombie.core.textures.Mask): void;
      setName(arg0: string): void;
      setNameOnly(arg0: string): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setRealHeight(arg0: number): void;
      setRealWidth(arg0: number): void;
      setRegion(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setUseAlphaChannel(arg0: boolean): void;
      setWidth(arg0: number): void;
      split(arg0: number, arg1: number, arg2: number, arg3: number): zombie.core.textures.Texture;
      split2D(arg0: number[], arg1: number[]): zombie.core.textures.Texture[][];
      splitIcon(): zombie.core.textures.Texture;
      steamAvatarChanged(arg0: number): void;
      toString(): string;
      trygetTexture(arg0: string): zombie.core.textures.Texture;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.core.input {
    // zombie.core.input.Input extends java.lang.Object
    export class Input {
      private constructor();
      static readonly ANY_CONTROLLER: number;
  
      equals(arg0: any): boolean;
      getAxisCount(arg0: number): number;
      getAxisName(arg0: number, arg1: number): string;
      getAxisValue(arg0: number, arg1: number): number;
      getButtonCount(arg0: number): number;
      getButtonName(arg0: number, arg1: number): string;
      getClass(): java.lang.Class<any>;
      getController(arg0: number): org.lwjglx.input.Controller;
      getControllerCount(): number;
      getKeyCode(arg0: string): number;
      getKeyName(arg0: number): string;
      hashCode(): number;
      initControllers(): void;
      isButtonPressedD(arg0: number, arg1: number): boolean;
      isButtonReleasePress(arg0: number, arg1: number): boolean;
      isButtonStartPress(arg0: number, arg1: number): boolean;
      isControllerDownD(arg0: number): boolean;
      isControllerLeftD(arg0: number): boolean;
      isControllerRightD(arg0: number): boolean;
      isControllerUpD(arg0: number): boolean;
      notify(): void;
      notifyAll(): void;
      poll(): void;
      quit(): void;
      toString(): string;
      updateGameThread(): void;
      wait(arg0: number): void;
      wasButtonPressed(arg0: number, arg1: number): boolean;
    }
  }
  export namespace zombie.core.logger {
    // zombie.core.logger.ZLogger extends java.lang.Object
    export class ZLogger {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
      write(arg0: string): void;
      writeUnsafe(arg0: string, arg1: string): void;
    }
  }
  export namespace zombie.core.math {
    // zombie.core.math.PZMath extends java.lang.Object
    export class PZMath {
      private constructor();
      static readonly PI: number;
      static readonly PI2: number;
      static readonly degToRads: number;
      static readonly microsToNanos: number;
      static readonly millisToMicros: number;
      static readonly radToDegs: number;
      static readonly secondsToMillis: number;
      static secondsToNanos: number;
  
      abs(arg0: number): number;
      almostIdentity(arg0: number, arg1: number, arg2: number): number;
      almostUnitIdentity(arg0: number): number;
      c_lerp(arg0: number, arg1: number, arg2: number): number;
      canParseFloat(arg0: string): boolean;
      ceil(arg0: number): number;
      clamp(arg0: number, arg1: number, arg2: number): number;
      clampFloat(arg0: number, arg1: number, arg2: number): number;
      clamp_01(arg0: number): number;
      convertMatrix(arg0: org.joml.Matrix4f, arg1: org.lwjgl.util.vector.Matrix4f): org.lwjgl.util.vector.Matrix4f;
      degToRad(arg0: number): number;
      equal(arg0: number, arg1: number, arg2: number): boolean;
      equals(arg0: any): boolean;
      fastfloor(arg0: number): number;
      floor(arg0: number): number;
      frac(arg0: number): number;
      gain(arg0: number, arg1: number): number;
      getClass(): java.lang.Class<any>;
      getClosestAngle(arg0: number, arg1: number): number;
      getClosestAngleDegrees(arg0: number, arg1: number): number;
      hashCode(): number;
      lerp(arg0: number, arg1: number, arg2: number): number;
      lerpAngle(arg0: number, arg1: number, arg2: number): number;
      lerpFunc_EaseInQuad(arg0: number): number;
      lerpFunc_EaseOutInQuad(arg0: number): number;
      lerpFunc_EaseOutQuad(arg0: number): number;
      max(arg0: number, arg1: number): number;
      min(arg0: number, arg1: number): number;
      notify(): void;
      notifyAll(): void;
      radToDeg(arg0: number): number;
      roundFromEdges(arg0: number): number;
      roundToInt(arg0: number): number;
      roundToIntPlus05(arg0: number): number;
      roundToNearest(arg0: number): number;
      sign(arg0: number): number;
      slerp(arg0: org.lwjgl.util.vector.Quaternion, arg1: org.lwjgl.util.vector.Quaternion, arg2: org.lwjgl.util.vector.Quaternion, arg3: number): org.lwjgl.util.vector.Quaternion;
      sqrt(arg0: number): number;
      step(arg0: number, arg1: number, arg2: number): number;
      testSideOfLine(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): zombie.core.math.PZMath$SideOfLine;
      toString(): string;
      tryParseFloat(arg0: string, arg1: number): number;
      tryParseInt(arg0: string, arg1: number): number;
      wait(arg0: number): void;
      wrap(arg0: number, arg1: number, arg2: number): number;
    }
    /** [ENUM] zombie.core.math.PZMath$SideOfLine */
    export class PZMath$SideOfLine {
      /* ENUM VALUES */
      static readonly Left: PZMath$SideOfLine; 
      static readonly OnLine: PZMath$SideOfLine; 
      static readonly Right: PZMath$SideOfLine; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.core.math.PZMath$SideOfLine[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): PZMath$SideOfLine;
      valueOf(arg0: string): zombie.core.math.PZMath$SideOfLine;
      values(): zombie.core.math.PZMath$SideOfLine[];
    }
    // zombie.core.math.PZMath$UnitTests$vector2 extends java.lang.Object
    export class PZMath$UnitTests$vector2 {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      run(): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.core.network {
    // zombie.core.network.ByteBufferWriter extends java.lang.Object
    export class ByteBufferWriter {
      private constructor();
      bb?: java.nio.ByteBuffer;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      putBoolean(arg0: boolean): void;
      putByte(arg0: number): void;
      putChar(arg0: string): void;
      putDouble(arg0: number): void;
      putFloat(arg0: number): void;
      putInt(arg0: number): void;
      putLong(arg0: number): void;
      putShort(arg0: number): void;
      putUTF(arg0: string): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.core.opengl {
    // zombie.core.opengl.IShaderProgramListener
    export class IShaderProgramListener {
      private constructor();
      callback(arg0: zombie.core.opengl.ShaderProgram): void;
    }
    // zombie.core.opengl.RenderSettings extends java.lang.Object
    export class RenderSettings {
      private constructor();
      applyRenderSettings(arg0: number): void;
      equals(arg0: any): boolean;
      getAmbientForPlayer(arg0: number): number;
      getClass(): java.lang.Class<any>;
      getInstance(): zombie.core.opengl.RenderSettings;
      getMaskClearColorForPlayer(arg0: number): zombie.core.Color;
      getPlayerSettings(arg0: number): zombie.core.opengl.RenderSettings$PlayerRenderSettings;
      hashCode(): number;
      legacyPostRender(arg0: number): void;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.core.opengl.RenderSettings$PlayerRenderSettings extends java.lang.Object
    export class RenderSettings$PlayerRenderSettings {
      private constructor();
      CM_Ambient: number;
      CM_DayLightStrength: number;
      CM_Desaturation: number;
      CM_FogIntensity: number;
      CM_GlobalLight?: zombie.iso.weather.ClimateColorInfo;
      CM_GlobalLightIntensity: number;
      CM_NightStrength: number;
      CM_ViewDistance: number;
  
      equals(arg0: any): boolean;
      getAmbient(): number;
      getBlendColor(): zombie.core.Color;
      getBlendIntensity(): number;
      getBmod(): number;
      getClass(): java.lang.Class<any>;
      getDarkness(): number;
      getDesaturation(): number;
      getFogMod(): number;
      getGmod(): number;
      getMaskClearColor(): zombie.core.Color;
      getNight(): number;
      getRmod(): number;
      getSM_Alpha(): number;
      getSM_Radius(): number;
      getViewDistance(): number;
      hashCode(): number;
      isApplyNightVisionGoggles(): boolean;
      isExterior(): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.opengl.Shader extends java.lang.Object
    export class Shader {
      private constructor();
      static ShaderMap?: java.util.HashMap<number, zombie.core.opengl.Shader>;
      height: number;
      name?: string;
      tex?: zombie.core.textures.Texture;
      width: number;
  
      End(): void;
      Start(): void;
      callback(arg0: zombie.core.opengl.ShaderProgram): void;
      destroy(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getID(): number;
      getProgram(): zombie.core.opengl.ShaderProgram;
      hashCode(): number;
      isCompiled(): boolean;
      notify(): void;
      notifyAll(): void;
      postRender(arg0: zombie.core.textures.TextureDraw): void;
      setTexture(arg0: zombie.core.textures.Texture): void;
      startMainThread(arg0: zombie.core.textures.TextureDraw, arg1: number): void;
      startRenderThread(arg0: zombie.core.textures.TextureDraw): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.opengl.ShaderProgram extends java.lang.Object
    export class ShaderProgram {
      private constructor();
      End(): void;
      Start(): void;
      addCompileListener(arg0: zombie.core.opengl.IShaderProgramListener): void;
      addShader(arg0: string, arg1: zombie.core.opengl.ShaderUnit$Type): zombie.core.opengl.ShaderUnit;
      compile(): void;
      createFragShader(arg0: string): number;
      createShaderProgram(arg0: string, arg1: boolean, arg2: boolean): zombie.core.opengl.ShaderProgram;
      createVertShader(arg0: string): number;
      destroy(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getLogInfo(arg0: number): string;
      getName(): string;
      getShaderID(): number;
      getUniform(arg0: string, arg1: number, arg2: boolean): zombie.core.opengl.ShaderProgram$Uniform;
      hashCode(): number;
      isCompiled(): boolean;
      notify(): void;
      notifyAll(): void;
      printLogInfo(arg0: number): void;
      removeCompileListener(arg0: zombie.core.opengl.IShaderProgramListener): void;
      setSamplerUnit(arg0: string, arg1: number): void;
      setValue(arg0: string, arg1: number): void;
      setValueColor(arg0: string, arg1: number): void;
      setValueColorRGB(arg0: string, arg1: number): void;
      setVector2(arg0: number, arg1: number, arg2: number): void;
      setVector3(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setVector4(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.opengl.ShaderProgram$Uniform extends java.lang.Object
    export class ShaderProgram$Uniform {
      private constructor();
      loc: number;
      name?: string;
      sampler: number;
      size: number;
      type: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.opengl.ShaderUnit extends java.lang.Object
    export class ShaderUnit {
      private constructor();
      attach(): boolean;
      compile(): boolean;
      destroy(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getFileName(): string;
      getGLID(): number;
      getParentShaderProgramGLID(): number;
      hashCode(): number;
      isCompiled(): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.core.opengl.ShaderUnit$Type */
    export class ShaderUnit$Type {
      /* ENUM VALUES */
      static readonly Frag: ShaderUnit$Type; 
      static readonly Vert: ShaderUnit$Type; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.core.opengl.ShaderUnit$Type[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): ShaderUnit$Type;
      valueOf(arg0: string): zombie.core.opengl.ShaderUnit$Type;
      values(): zombie.core.opengl.ShaderUnit$Type[];
    }
    // zombie.core.opengl.SharedVertexBufferObjects extends java.lang.Object
    export class SharedVertexBufferObjects {
      private constructor();
      readonly bufferSizeVertices: number;
      indices?: java.nio.ShortBuffer;
      vertices?: java.nio.FloatBuffer;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      next(): void;
      notify(): void;
      notifyAll(): void;
      startFrame(): void;
      toString(): string;
      unmap(): void;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.core.physics {
    // zombie.core.physics.CarController extends java.lang.Object
    export class CarController {
      private constructor();
      BrakingForce: number;
      EngineForce: number;
      acceleratorOn: boolean;
      brakeOn: boolean;
      readonly clientControls?: zombie.core.physics.CarController$ClientControls;
      clientForce: number;
      static gears?: zombie.core.physics.CarController$GearInfo[];
      isEnable: boolean;
      speed: number;
      readonly vehicleObject?: zombie.vehicles.BaseVehicle;
  
      accelerator(arg0: boolean): void;
      brake(arg0: boolean): void;
      checkShouldBeActive(): void;
      debug(): void;
      drawCircle(arg0: number, arg1: number, arg2: number): void;
      drawRect(arg0: org.joml.Vector3f, arg1: number, arg2: number, arg3: number, arg4: number): void;
      equals(arg0: any): boolean;
      findGear(arg0: number): zombie.core.physics.CarController$GearInfo;
      getClass(): java.lang.Class<any>;
      getClientControls(): zombie.core.physics.CarController$ClientControls;
      hashCode(): number;
      isBrakePedalPressed(): boolean;
      isGasPedalPressed(): boolean;
      notify(): void;
      notifyAll(): void;
      park(): void;
      render(): void;
      toString(): string;
      update(): void;
      updateControls(): void;
      updateTrailer(): void;
      wait(arg0: number): void;
    }
    // zombie.core.physics.CarController$BulletVariables extends java.lang.Object
    export class CarController$BulletVariables {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.physics.CarController$ClientControls extends java.lang.Object
    export class CarController$ClientControls {
      private constructor();
      backward: boolean;
      brake: boolean;
      forward: boolean;
      shift: boolean;
      steering: number;
      wasUsingParkingBrakes: boolean;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      reset(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.physics.CarController$GearInfo extends java.lang.Object
    export class CarController$GearInfo {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.physics.Transform extends java.lang.Object
    export class Transform {
      private constructor();
      readonly basis?: org.joml.Matrix3f;
      readonly origin?: org.joml.Vector3f;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getMatrix(arg0: org.joml.Matrix4f): org.joml.Matrix4f;
      getRotation(arg0: org.joml.Quaternionf): org.joml.Quaternionf;
      hashCode(): number;
      inverse(): void;
      notify(): void;
      notifyAll(): void;
      set(arg0: org.joml.Matrix4f): void;
      setIdentity(): void;
      setRotation(arg0: org.joml.Quaternionf): void;
      toString(): string;
      transform(arg0: org.joml.Vector3f): void;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.core.properties {
    // zombie.core.properties.PropertyContainer extends java.lang.Object
    export class PropertyContainer {
      private constructor();
      static sorted?: java.util.List<any>;
      static test?: zombie.core.Collections.NonBlockingHashMap<zombie.iso.SpriteDetails.IsoFlagType, zombie.core.properties.PropertyContainer$MostTested>;
  
      AddProperties(arg0: zombie.core.properties.PropertyContainer): void;
      Clear(): void;
      CreateKeySet(): void;
      Is(arg0: zombie.iso.SpriteDetails.IsoFlagType): boolean;
      Set(arg0: string, arg1: string): void;
      UnSet(arg0: string): void;
      Val(arg0: string): string;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getFlagsList(): java.util.ArrayList<zombie.iso.SpriteDetails.IsoFlagType>;
      getPropertyNames(): java.util.ArrayList<string>;
      getStackReplaceTileOffset(): number;
      getSurface(): number;
      hashCode(): number;
      isSurfaceOffset(): boolean;
      isTable(): boolean;
      isTableTop(): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.properties.PropertyContainer$MostTested extends java.lang.Object
    export class PropertyContainer$MostTested {
      private constructor();
      count: number;
      flag?: zombie.iso.SpriteDetails.IsoFlagType;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.core.raknet {
    // zombie.core.raknet.RakNetPeerInterface extends java.lang.Object
    export class RakNetPeerInterface {
      private constructor();
      static readonly ID_ALREADY_CONNECTED: number;
      static readonly ID_CONNECTED_PING: number;
      static readonly ID_CONNECTION_ATTEMPT_FAILED: number;
      static readonly ID_CONNECTION_BANNED: number;
      static readonly ID_CONNECTION_LOST: number;
      static readonly ID_CONNECTION_REQUEST_ACCEPTED: number;
      static readonly ID_DISCONNECTION_NOTIFICATION: number;
      static readonly ID_INCOMPATIBLE_PROTOCOL_VERSION: number;
      static readonly ID_INVALID_PASSWORD: number;
      static readonly ID_NEW_INCOMING_CONNECTION: number;
      static readonly ID_NO_FREE_INCOMING_CONNECTIONS: number;
      static readonly ID_PING: number;
      static readonly ID_RAKVOICE_CLOSE_CHANNEL: number;
      static readonly ID_RAKVOICE_DATA: number;
      static readonly ID_RAKVOICE_OPEN_CHANNEL_REPLY: number;
      static readonly ID_RAKVOICE_OPEN_CHANNEL_REQUEST: number;
      static readonly ID_REMOTE_CONNECTION_LOST: number;
      static readonly ID_REMOTE_DISCONNECTION_NOTIFICATION: number;
      static readonly ID_REMOTE_NEW_INCOMING_CONNECTION: number;
      static readonly ID_TIMESTAMP: number;
      static readonly ID_UNCONNECTED_PING: number;
      static readonly ID_USER_PACKET_ENUM: number;
      static readonly PacketPriority_HIGH: number;
      static readonly PacketPriority_IMMEDIATE: number;
      static readonly PacketPriority_LOW: number;
      static readonly PacketPriority_MEDIUM: number;
      static readonly PacketReliability_RELIABLE: number;
      static readonly PacketReliability_RELIABLE_ORDERED: number;
      static readonly PacketReliability_RELIABLE_ORDERED_WITH_ACK_RECEIPT: number;
      static readonly PacketReliability_RELIABLE_SEQUENCED: number;
      static readonly PacketReliability_RELIABLE_WITH_ACK_RECEIPT: number;
      static readonly PacketReliability_UNRELIABLE: number;
      static readonly PacketReliability_UNRELIABLE_SEQUENCED: number;
      static readonly PacketReliability_UNRELIABLE_WITH_ACK_RECEIPT: number;
  
      ApplyNetworkSimulator(arg0: number, arg1: number, arg2: number): void;
      Connect(arg0: string, arg1: number, arg2: string): number;
      ConnectToSteamServer(arg0: number, arg1: string): number;
      GetAveragePing(arg0: number): number;
      GetClientOwnerSteamID(arg0: number): number;
      GetClientSteamID(arg0: number): number;
      GetConnectionsNumber(): number;
      GetLastPing(arg0: number): number;
      GetLowestPing(arg0: number): number;
      GetMTUSize(arg0: number): number;
      GetNetStatistics(arg0: number): zombie.core.znet.ZNetStatistics;
      GetP2PSessionState(arg0: number): zombie.core.znet.ZNetSessionState;
      GetServerIP(): string;
      Init(arg0: boolean): void;
      Receive(arg0: java.nio.ByteBuffer): boolean;
      ReceiveFileAnnounce(): zombie.core.znet.ZNetFileAnnounce;
      ReceiveFileChunk(): zombie.core.znet.ZNetFileChunk;
      Send(arg0: java.nio.ByteBuffer, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): number;
      SendFileAnnounce(arg0: number, arg1: number, arg2: number, arg3: number, arg4: string): number;
      SendFileChunk(arg0: number, arg1: number, arg2: number, arg3: number[], arg4: number): number;
      SendRaw(arg0: java.nio.ByteBuffer, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): number;
      SetClientPort(arg0: number): void;
      SetIncomingPassword(arg0: string): void;
      SetMaximumIncomingConnections(arg0: number): void;
      SetOccasionalPing(arg0: boolean): void;
      SetServerIP(arg0: string): void;
      SetServerPort(arg0: number): void;
      SetTimeoutTime(arg0: number): void;
      SetUnreliableTimeout(arg0: number): void;
      Shutdown(): void;
      Startup(arg0: number): number;
      disconnect(arg0: number): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getGuidFromIndex(arg0: number): number;
      getGuidOfPacket(): number;
      getIPFromGUID(arg0: number): string;
      hashCode(): number;
      init(): void;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.raknet.UdpConnection extends java.lang.Object
    export class UdpConnection {
      private constructor();
      static readonly CONNECTION_GRACE_INTERVAL: number;
      ChunkGridWidth: number;
      ReleventPos?: zombie.iso.Vector3[];
      ReleventRange: number;
      accessLevel: number;
      allChatMuted: boolean;
      awaitingCoopApprove: boolean;
      checksumState?: zombie.core.raknet.UdpConnection$ChecksumState;
      checksumTime: number;
      readonly chunkObjectState?: gnu.trove.list.array.TShortArrayList;
      connectArea?: zombie.iso.Vector3[];
      connectionTimestamp: number;
      idStr?: string;
      index: number;
      ip?: string;
      isCoopHost: boolean;
      isNeighborPlayer: boolean;
      lastUnauthorizedPacket: number;
      loadedCells?: zombie.network.ClientServerMap[];
      maxPlayers: number;
      netSessionState?: zombie.core.znet.ZNetSessionState;
      netStatistics?: zombie.core.znet.ZNetStatistics;
      ownerID: number;
      readonly packetCounts?: number[];
      password?: string;
      ping: boolean;
      readonly pingHistory?: java.util.Deque<number>;
      playerDownloadServer?: zombie.network.PlayerDownloadServer;
      playerIDs?: number[];
      players?: zombie.characters.IsoPlayer[];
      preferredInQueue: boolean;
      statistic?: zombie.core.raknet.UdpConnection$MPClientStatistic;
      steamID: number;
      timerSendZombie?: zombie.core.utils.UpdateTimer;
      username?: string;
      usernames?: string[];
      readonly vehicles?: gnu.trove.set.hash.TShortHashSet;
      wasInLoadingQueue: boolean;
  
      RelevantTo(arg0: number, arg1: number, arg2: number): boolean;
      RelevantToPlayerIndex(arg0: number, arg1: number, arg2: number): boolean;
      calcCountPlayersInRelevantPosition(): void;
      cancelPacket(): void;
      endPacket(): void;
      endPacketImmediate(): void;
      endPacketSuperHighUnreliable(): void;
      endPacketUnordered(): void;
      endPacketUnreliable(): void;
      endPingPacket(): void;
      equals(arg0: any): boolean;
      forceDisconnect(arg0: string): void;
      getAveragePing(): number;
      getClass(): java.lang.Class<any>;
      getConnectedGUID(): number;
      getDescription(): string;
      getInetSocketAddress(): java.net.InetSocketAddress;
      getLastPing(): number;
      getLowestPing(): number;
      getMTUSize(): number;
      getP2PSessionState(): zombie.core.znet.ZNetSessionState;
      getPeer(): zombie.core.raknet.RakNetPeerInterface;
      getPlayerDescription(): string;
      getRelevantAndDistance(arg0: number, arg1: number, arg2: number): number;
      getServerIP(): string;
      getStatistics(): zombie.core.znet.ZNetStatistics;
      hashCode(): number;
      havePlayer(arg0: zombie.characters.IsoPlayer): boolean;
      isConnectionAttemptTimeout(): boolean;
      isConnectionGraceIntervalTimeout(): boolean;
      isFullyConnected(): boolean;
      notify(): void;
      notifyAll(): void;
      setFullyConnected(): void;
      startPacket(): zombie.core.network.ByteBufferWriter;
      startPingPacket(): zombie.core.network.ByteBufferWriter;
      toString(): string;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.core.raknet.UdpConnection$ChecksumState */
    export class UdpConnection$ChecksumState {
      /* ENUM VALUES */
      static readonly Different: UdpConnection$ChecksumState; 
      static readonly Done: UdpConnection$ChecksumState; 
      static readonly Init: UdpConnection$ChecksumState; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.core.raknet.UdpConnection$ChecksumState[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): UdpConnection$ChecksumState;
      valueOf(arg0: string): zombie.core.raknet.UdpConnection$ChecksumState;
      values(): zombie.core.raknet.UdpConnection$ChecksumState[];
    }
    // zombie.core.raknet.UdpConnection$MPClientStatistic extends java.lang.Object
    export class UdpConnection$MPClientStatistic {
      private constructor();
      FPS: number;
      FPSAvg: number;
      FPSHistogramm?: number[];
      FPSMax: number;
      FPSMin: number;
      diff: number;
      enable: number;
      pingAVG: number;
      remotePlayersCount: number;
      remotePlayersDesyncAVG: number;
      remotePlayersDesyncMax: number;
      remotePlayersTeleports: number;
      zombiesCount: number;
      zombiesDesyncAVG: number;
      zombiesDesyncMax: number;
      zombiesLocalOwnership: number;
      zombiesTeleports: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      parse(arg0: java.nio.ByteBuffer): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.core.skinnedmodel {
    // zombie.core.skinnedmodel.ModelManager extends java.lang.Object
    export class ModelManager {
      private constructor();
      static NoOpenGL: boolean;
      readonly SoftwareMeshAnims?: java.util.HashMap<string, zombie.core.skinnedmodel.animation.SoftwareSkinnedModelAnim>;
      bCreateSoftwareMeshes: boolean;
      bDebugEnableModels: boolean;
      bitmap?: zombie.core.textures.TextureFBO;
      static readonly instance?: zombie.core.skinnedmodel.ModelManager;
      m_femaleModel?: zombie.core.skinnedmodel.model.Model;
      m_maleModel?: zombie.core.skinnedmodel.model.Model;
      m_skeletonFemaleModel?: zombie.core.skinnedmodel.model.Model;
      m_skeletonMaleModel?: zombie.core.skinnedmodel.model.Model;
  
      Add(arg0: zombie.characters.IsoGameCharacter): void;
      ContainsChar(arg0: zombie.characters.IsoGameCharacter): boolean;
      Remove(arg0: zombie.vehicles.BaseVehicle): void;
      RenderParticles(arg0: zombie.core.textures.TextureDraw, arg1: number, arg2: number): void;
      RenderPuddles(arg0: number, arg1: number, arg2: number): void;
      RenderSkyBox(arg0: zombie.core.textures.TextureDraw, arg1: number, arg2: number, arg3: number, arg4: number): void;
      RenderWater(arg0: zombie.core.textures.TextureDraw, arg1: number, arg2: number, arg3: boolean): void;
      Reset(arg0: zombie.characters.IsoGameCharacter): void;
      ResetCharacterEquippedHands(arg0: zombie.characters.IsoGameCharacter): void;
      ResetEquippedNextFrame(arg0: zombie.characters.IsoGameCharacter): void;
      ResetNextFrame(arg0: zombie.characters.IsoGameCharacter): void;
      addAnimationClip(arg0: string, arg1: zombie.core.skinnedmodel.animation.AnimationClip): void;
      addStatic(arg0: zombie.core.skinnedmodel.model.ModelInstance, arg1: string, arg2: string, arg3: string): zombie.core.skinnedmodel.model.ModelInstance;
      addStaticForcedTex(arg0: zombie.core.skinnedmodel.model.ModelInstance, arg1: string, arg2: string, arg3: string, arg4: string): zombie.core.skinnedmodel.model.ModelInstance;
      addVehicle(arg0: zombie.vehicles.BaseVehicle): void;
      animationAssetLoaded(arg0: zombie.core.skinnedmodel.model.AnimationAsset): void;
      create(): void;
      derefModelInstance(arg0: zombie.core.skinnedmodel.model.ModelInstance): void;
      derefModelInstances(arg0: java.util.ArrayList<zombie.core.skinnedmodel.model.ModelInstance>): void;
      dressInRandomOutfit(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      getAllAnimationClips(): java.util.Collection<zombie.core.skinnedmodel.animation.AnimationClip>;
      getAnimationClip(arg0: string): zombie.core.skinnedmodel.animation.AnimationClip;
      getBodyModel(arg0: zombie.characters.IsoGameCharacter): zombie.core.skinnedmodel.model.Model;
      getClass(): java.lang.Class<any>;
      getClosestThreeLights(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoLightSource[]): void;
      getLoadedModel(arg0: string, arg1: string, arg2: boolean, arg3: string): zombie.core.skinnedmodel.model.Model;
      getSlot(arg0: zombie.characters.IsoGameCharacter): zombie.core.skinnedmodel.ModelManager$ModelSlot;
      getTextureFlags(): number;
      hashCode(): number;
      isCreated(): boolean;
      isLoadingAnimations(): boolean;
      loadAdditionalModel(arg0: string, arg1: string, arg2: boolean, arg3: string): void;
      loadModAnimations(): void;
      loadStaticModel(arg0: string, arg1: string, arg2: string): zombie.core.skinnedmodel.model.Model;
      newAdditionalModelInstance(arg0: string, arg1: string, arg2: zombie.characters.IsoGameCharacter, arg3: zombie.core.skinnedmodel.animation.AnimationPlayer, arg4: string): zombie.core.skinnedmodel.model.ModelInstance;
      newInstance(arg0: zombie.core.skinnedmodel.model.Model, arg1: zombie.characters.IsoGameCharacter, arg2: zombie.core.skinnedmodel.animation.AnimationPlayer): zombie.core.skinnedmodel.model.ModelInstance;
      newStaticInstance(arg0: zombie.core.skinnedmodel.ModelManager$ModelSlot, arg1: string, arg2: string, arg3: string, arg4: string): zombie.core.skinnedmodel.model.ModelInstance;
      notify(): void;
      notifyAll(): void;
      putLoadedModel(arg0: string, arg1: string, arg2: boolean, arg3: string, arg4: zombie.core.skinnedmodel.model.Model): void;
      reloadAllOutfits(): void;
      reloadModelsMatching(arg0: string): void;
      resetModelInstance(arg0: zombie.core.skinnedmodel.model.ModelInstance, arg1: any): void;
      resetModelInstanceRecurse(arg0: zombie.core.skinnedmodel.model.ModelInstance, arg1: any): void;
      resetModelInstancesRecurse(arg0: java.util.ArrayList<zombie.core.skinnedmodel.model.ModelInstance>, arg1: any): void;
      setModelMetaData(arg0: string, arg1: string, arg2: string, arg3: boolean): void;
      toString(): string;
      tryGetLoadedModel(arg0: string, arg1: string, arg2: boolean, arg3: string, arg4: boolean): zombie.core.skinnedmodel.model.Model;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.ModelManager$ModAnimations extends java.lang.Object
    export class ModelManager$ModAnimations {
      private constructor();
      readonly m_animationAssetList?: java.util.ArrayList<zombie.core.skinnedmodel.model.AnimationAsset>;
      readonly m_animationAssetMap?: java.util.HashMap<string, zombie.core.skinnedmodel.model.AnimationAsset>;
      readonly m_modID?: string;
      m_priority: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      isActive(): boolean;
      notify(): void;
      notifyAll(): void;
      setPriority(arg0: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.ModelManager$ModelSlot extends java.lang.Object
    export class ModelManager$ModelSlot {
      private constructor();
      ID: number;
      active: boolean;
      bRemove: boolean;
      character?: zombie.characters.IsoGameCharacter;
      framesSinceStart: number;
      model?: zombie.core.skinnedmodel.model.ModelInstance;
      renderRefCount: number;
      readonly sub?: java.util.ArrayList<zombie.core.skinnedmodel.model.ModelInstance>;
  
      Update(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      isRendering(): boolean;
      notify(): void;
      notifyAll(): void;
      reset(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.Vector3 extends java.lang.Object
    export class Vector3 {
      private constructor();
      add(arg0: zombie.core.skinnedmodel.Vector3): zombie.core.skinnedmodel.Vector3;
      cross(arg0: zombie.core.skinnedmodel.Vector3): zombie.core.skinnedmodel.Vector3;
      dot(arg0: zombie.core.skinnedmodel.Vector3): number;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      length(): number;
      mul(arg0: number, arg1: number, arg2: number): zombie.core.skinnedmodel.Vector3;
      normalize(): zombie.core.skinnedmodel.Vector3;
      notify(): void;
      notifyAll(): void;
      reset(): zombie.core.skinnedmodel.Vector3;
      set(arg0: zombie.core.skinnedmodel.Vector3): zombie.core.skinnedmodel.Vector3;
      sub(arg0: number, arg1: number, arg2: number): zombie.core.skinnedmodel.Vector3;
      toString(): string;
      wait(arg0: number): void;
      x(): number;
      y(arg0: number): zombie.core.skinnedmodel.Vector3;
      z(): number;
    }
    // zombie.core.skinnedmodel.Vector4 extends java.lang.Object
    export class Vector4 {
      private constructor();
      w: number;
      x: number;
      y: number;
      z: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      set(arg0: zombie.core.skinnedmodel.Vector4): zombie.core.skinnedmodel.Vector4;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.core.skinnedmodel.advancedanimation {
    // zombie.core.skinnedmodel.advancedanimation.AdvancedAnimator extends java.lang.Object
    export class AdvancedAnimator {
      private constructor();
      readonly animCallbackHandlers?: java.util.ArrayList<zombie.core.skinnedmodel.advancedanimation.IAnimEventCallback>;
      animSet?: zombie.core.skinnedmodel.advancedanimation.AnimationSet;
      static s_MotionScale: number;
      static s_RotationScale: number;
  
      GetDebug(): string;
      OnAnimDataChanged(arg0: boolean): void;
      OnAnimEvent(arg0: zombie.core.skinnedmodel.advancedanimation.AnimLayer, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      Reload(): void;
      SetAnimSet(arg0: zombie.core.skinnedmodel.advancedanimation.AnimationSet): void;
      SetState(arg0: string, arg1: java.util.List<string>): void;
      checkModifiedFiles(): void;
      containsAnyIdleNodes(): boolean;
      containsState(arg0: string): boolean;
      debugGetVariables(): java.util.ArrayList<string>;
      equals(arg0: any): boolean;
      getActiveSubLayerCount(): number;
      getCharacter(): zombie.core.skinnedmodel.advancedanimation.IAnimatable;
      getClass(): java.lang.Class<any>;
      getCurrentStateName(): string;
      getDebugMonitor(): zombie.core.skinnedmodel.advancedanimation.debug.AnimatorDebugMonitor;
      getRootLayer(): zombie.core.skinnedmodel.advancedanimation.AnimLayer;
      getSubLayerAt(arg0: number): zombie.core.skinnedmodel.advancedanimation.AnimLayer;
      getSubLayerCount(): number;
      hashCode(): number;
      init(arg0: zombie.core.skinnedmodel.advancedanimation.IAnimatable): void;
      isRecording(): boolean;
      notify(): void;
      notifyAll(): void;
      printDebugCharacterActions(arg0: string): void;
      render(): void;
      setDebugMonitor(arg0: zombie.core.skinnedmodel.advancedanimation.debug.AnimatorDebugMonitor): void;
      setRecorder(arg0: zombie.core.skinnedmodel.animation.debug.AnimationPlayerRecorder): void;
      systemInit(): void;
      toString(): string;
      update(): void;
      updateSpeedScale(arg0: string, arg1: number): void;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.advancedanimation.AdvancedAnimator$SubLayerSlot extends java.lang.Object
    export class AdvancedAnimator$SubLayerSlot {
      private constructor();
      readonly animLayer?: zombie.core.skinnedmodel.advancedanimation.AnimLayer;
      shouldBeActive: boolean;
  
      applyTransition(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      transitionTo(arg0: zombie.core.skinnedmodel.advancedanimation.AnimState, arg1: boolean): void;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.advancedanimation.Anim2DBlend extends java.lang.Object
    export class Anim2DBlend {
      private constructor();
      m_AnimName?: string;
      m_SpeedScale: number;
      m_XPos: number;
      m_YPos: number;
      m_referenceID?: string;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.advancedanimation.Anim2DBlendPicker extends java.lang.Object
    export class Anim2DBlendPicker {
      private constructor();
      Pick(arg0: number, arg1: number): zombie.core.skinnedmodel.advancedanimation.Anim2DBlendPicker$PickResults;
      SetPickTriangles(arg0: java.util.List<zombie.core.skinnedmodel.advancedanimation.Anim2DBlendTriangle>): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.advancedanimation.Anim2DBlendPicker$PickResults extends java.lang.Object
    export class Anim2DBlendPicker$PickResults {
      private constructor();
      node1?: zombie.core.skinnedmodel.advancedanimation.Anim2DBlend;
      node2?: zombie.core.skinnedmodel.advancedanimation.Anim2DBlend;
      node3?: zombie.core.skinnedmodel.advancedanimation.Anim2DBlend;
      numNodes: number;
      scale1: number;
      scale2: number;
      scale3: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.advancedanimation.Anim2DBlendTriangle extends java.lang.Object
    export class Anim2DBlendTriangle {
      private constructor();
      node1?: zombie.core.skinnedmodel.advancedanimation.Anim2DBlend;
      node2?: zombie.core.skinnedmodel.advancedanimation.Anim2DBlend;
      node3?: zombie.core.skinnedmodel.advancedanimation.Anim2DBlend;
  
      Contains(arg0: number, arg1: number): boolean;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      sign(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): number;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.advancedanimation.AnimBoneWeight extends java.lang.Object
    export class AnimBoneWeight {
      private constructor();
      boneName?: string;
      includeDescendants: boolean;
      weight: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.advancedanimation.AnimCondition extends java.lang.Object
    export class AnimCondition {
      private constructor();
      m_BoolValue: boolean;
      m_FloatValue: number;
      m_Name?: string;
      m_StringValue?: string;
      m_Type?: zombie.core.skinnedmodel.advancedanimation.AnimCondition$Type;
  
      check(arg0: zombie.core.skinnedmodel.advancedanimation.IAnimationVariableSource): boolean;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getConditionString(): string;
      getValueString(): string;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      pass(arg0: zombie.core.skinnedmodel.advancedanimation.IAnimationVariableSource, arg1: java.util.List<zombie.core.skinnedmodel.advancedanimation.AnimCondition>): boolean;
      toString(): string;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.core.skinnedmodel.advancedanimation.AnimCondition$Type */
    export class AnimCondition$Type {
      /* ENUM VALUES */
      static readonly BOOL: AnimCondition$Type; 
      static readonly EQU: AnimCondition$Type; 
      static readonly GTR: AnimCondition$Type; 
      static readonly LESS: AnimCondition$Type; 
      static readonly NEQ: AnimCondition$Type; 
      static readonly OR: AnimCondition$Type; 
      static readonly STRING: AnimCondition$Type; 
      static readonly STRNEQ: AnimCondition$Type; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.core.skinnedmodel.advancedanimation.AnimCondition$Type[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): AnimCondition$Type;
      valueOf(arg0: string): zombie.core.skinnedmodel.advancedanimation.AnimCondition$Type;
      values(): zombie.core.skinnedmodel.advancedanimation.AnimCondition$Type[];
    }
    // zombie.core.skinnedmodel.advancedanimation.AnimEvent extends java.lang.Object
    export class AnimEvent {
      private constructor();
      m_EventName?: string;
      m_ParameterValue?: string;
      m_SetVariable1?: string;
      m_SetVariable2?: string;
      m_Time?: zombie.core.skinnedmodel.advancedanimation.AnimEvent$AnimEventTime;
      m_TimePc: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toDetailsString(): string;
      toString(): string;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.core.skinnedmodel.advancedanimation.AnimEvent$AnimEventTime */
    export class AnimEvent$AnimEventTime {
      /* ENUM VALUES */
      static readonly End: AnimEvent$AnimEventTime; 
      static readonly Percentage: AnimEvent$AnimEventTime; 
      static readonly Start: AnimEvent$AnimEventTime; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.core.skinnedmodel.advancedanimation.AnimEvent$AnimEventTime[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): AnimEvent$AnimEventTime;
      valueOf(arg0: string): zombie.core.skinnedmodel.advancedanimation.AnimEvent$AnimEventTime;
      values(): zombie.core.skinnedmodel.advancedanimation.AnimEvent$AnimEventTime[];
    }
    // zombie.core.skinnedmodel.advancedanimation.AnimLayer extends java.lang.Object
    export class AnimLayer {
      private constructor();
      GetDebugString(): string;
      Reset(): void;
      TransitionTo(arg0: zombie.core.skinnedmodel.advancedanimation.AnimState, arg1: boolean): boolean;
      Update(): void;
      equals(arg0: any): boolean;
      findTransitionToNewNode(arg0: zombie.core.skinnedmodel.advancedanimation.LiveAnimNode, arg1: boolean): zombie.core.skinnedmodel.advancedanimation.LiveAnimNode;
      getAnimationTrack(): zombie.core.skinnedmodel.animation.AnimationMultiTrack;
      getClass(): java.lang.Class<any>;
      getCurrentStateName(): string;
      getCurrentSyncNode(): zombie.core.skinnedmodel.advancedanimation.LiveAnimNode;
      getCurrentSyncTrack(): zombie.core.skinnedmodel.animation.AnimationTrack;
      getDebugNodeName(): string;
      getDepth(): number;
      getLiveAnimNodes(): java.util.List<zombie.core.skinnedmodel.advancedanimation.LiveAnimNode>;
      getVariableSource(): zombie.core.skinnedmodel.advancedanimation.IAnimationVariableSource;
      hasState(): boolean;
      hashCode(): number;
      isCurrentState(arg0: string): boolean;
      isRecording(): boolean;
      isStateless(): boolean;
      isSubLayer(): boolean;
      notify(): void;
      notifyAll(): void;
      onAnimStarted(arg0: zombie.core.skinnedmodel.animation.AnimationTrack): void;
      onLoopedAnim(arg0: zombie.core.skinnedmodel.animation.AnimationTrack): void;
      onNonLoopedAnimFadeOut(arg0: zombie.core.skinnedmodel.animation.AnimationTrack): void;
      onNonLoopedAnimFinished(arg0: zombie.core.skinnedmodel.animation.AnimationTrack): void;
      onTrackDestroyed(arg0: zombie.core.skinnedmodel.animation.AnimationTrack): void;
      removeFadedOutNodes(): void;
      render(): void;
      toString(): string;
      updateNodeActiveFlags(): void;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.advancedanimation.AnimNode extends java.lang.Object
    export class AnimNode {
      private constructor();
      m_2DBlendTri?: java.util.List<zombie.core.skinnedmodel.advancedanimation.Anim2DBlendTriangle>;
      m_2DBlends?: java.util.List<zombie.core.skinnedmodel.advancedanimation.Anim2DBlend>;
      m_AnimName?: string;
      m_AnimReverse: boolean;
      m_BlendOutTime: number;
      m_BlendTime: number;
      m_Conditions?: java.util.List<zombie.core.skinnedmodel.advancedanimation.AnimCondition>;
      m_DeferredBoneName?: string;
      m_EarlyTransitionOut: boolean;
      m_Events?: java.util.List<zombie.core.skinnedmodel.advancedanimation.AnimEvent>;
      m_Looped: boolean;
      m_Name?: string;
      m_Priority: number;
      m_Scalar?: string;
      m_Scalar2?: string;
      m_SpeedScale?: string;
      m_SpeedScaleRandomMultiplierMax: number;
      m_SpeedScaleRandomMultiplierMin: number;
      m_SpeedScaleVariable?: string;
      m_State?: zombie.core.skinnedmodel.advancedanimation.AnimState;
      m_StopAnimOnExit: boolean;
      m_SubStateBoneWeights?: java.util.List<zombie.core.skinnedmodel.advancedanimation.AnimBoneWeight>;
      m_SyncTrackingEnabled: boolean;
      m_Transitions?: java.util.List<zombie.core.skinnedmodel.advancedanimation.AnimTransition>;
      m_deferredBoneAxis?: zombie.core.skinnedmodel.animation.BoneAxis;
      m_maxTorsoTwist: number;
      m_picker?: zombie.core.skinnedmodel.advancedanimation.Anim2DBlendPicker;
      m_randomAdvanceFraction: number;
      m_useDeferedRotation: boolean;
  
      Parse(arg0: string): zombie.core.skinnedmodel.advancedanimation.AnimNode;
      checkConditions(arg0: zombie.core.skinnedmodel.advancedanimation.IAnimationVariableSource): boolean;
      equals(arg0: any): boolean;
      findTransitionTo(arg0: zombie.core.skinnedmodel.advancedanimation.IAnimationVariableSource, arg1: string): zombie.core.skinnedmodel.advancedanimation.AnimTransition;
      getBlendOutTime(): number;
      getClass(): java.lang.Class<any>;
      getConditionsString(): string;
      getDeferredBoneAxis(): zombie.core.skinnedmodel.animation.BoneAxis;
      getDeferredBoneName(): string;
      getPriority(): number;
      getSpeedScale(arg0: zombie.core.skinnedmodel.advancedanimation.IAnimationVariableSource): number;
      hashCode(): number;
      isAbstract(): boolean;
      isIdleAnim(): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.advancedanimation.AnimState extends java.lang.Object
    export class AnimState {
      private constructor();
      m_DefaultIndex: number;
      m_Name?: string;
      readonly m_Nodes?: java.util.List<zombie.core.skinnedmodel.advancedanimation.AnimNode>;
      m_Set?: zombie.core.skinnedmodel.advancedanimation.AnimationSet;
  
      Parse(arg0: string, arg1: string): zombie.core.skinnedmodel.advancedanimation.AnimState;
      equals(arg0: any): boolean;
      getAnimNodes(arg0: zombie.core.skinnedmodel.advancedanimation.IAnimationVariableSource, arg1: java.util.List<zombie.core.skinnedmodel.advancedanimation.AnimNode>): java.util.List<zombie.core.skinnedmodel.advancedanimation.AnimNode>;
      getClass(): java.lang.Class<any>;
      getStateName(arg0: zombie.core.skinnedmodel.advancedanimation.AnimState): string;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.advancedanimation.AnimTransition extends java.lang.Object
    export class AnimTransition {
      private constructor();
      m_AnimName?: string;
      m_Conditions?: java.util.List<zombie.core.skinnedmodel.advancedanimation.AnimCondition>;
      m_SyncAdjustTime: number;
      m_Target?: string;
      m_blendInTime: number;
      m_blendOutTime: number;
      m_speedScale: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.advancedanimation.AnimationSet extends java.lang.Object
    export class AnimationSet {
      private constructor();
      m_Name?: string;
      readonly states?: java.util.HashMap<string, zombie.core.skinnedmodel.advancedanimation.AnimState>;
  
      GetAnimationSet(arg0: string, arg1: boolean): zombie.core.skinnedmodel.advancedanimation.AnimationSet;
      GetState(arg0: string): zombie.core.skinnedmodel.advancedanimation.AnimState;
      Load(arg0: string): boolean;
      Reset(): void;
      containsState(arg0: string): boolean;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.advancedanimation.AnimationVariableHandle extends java.lang.Object
    export class AnimationVariableHandle {
      private constructor();
      alloc(arg0: string): zombie.core.skinnedmodel.advancedanimation.AnimationVariableHandle;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getVariableIndex(): number;
      getVariableName(): string;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.advancedanimation.AnimationVariableSlotCallbackFloat extends zombie.core.skinnedmodel.advancedanimation.AnimationVariableSlotCallback<java.lang.Float>
    export class AnimationVariableSlotCallbackFloat {
      private constructor();
      canConvertFrom(arg0: string): boolean;
      clear(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDefaultValue(): any;
      getKey(): string;
      getType(): zombie.core.skinnedmodel.advancedanimation.AnimationVariableType;
      getValue(): number;
      getValueBool(): boolean;
      getValueFloat(): number;
      getValueString(): string;
      hashCode(): number;
      isReadOnly(): boolean;
      notify(): void;
      notifyAll(): void;
      setValue(arg0: string): void;
      toString(): string;
      trySetValue(arg0: number): boolean;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.advancedanimation.AnimationVariableSlotCallbackFloat$CallbackGetStrongTyped
    export class AnimationVariableSlotCallbackFloat$CallbackGetStrongTyped {
      private constructor();
      call(): any;
    }
    // zombie.core.skinnedmodel.advancedanimation.AnimationVariableSlotCallbackFloat$CallbackSetStrongTyped
    export class AnimationVariableSlotCallbackFloat$CallbackSetStrongTyped {
      private constructor();
      call(arg0: any): void;
    }
    // zombie.core.skinnedmodel.advancedanimation.AnimationVariableSource extends java.lang.Object
    export class AnimationVariableSource {
      private constructor();
      clearVariable(arg0: string): void;
      clearVariables(): void;
      containsVariable(arg0: string): boolean;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getGameVariables(): java.lang.Iterable<zombie.core.skinnedmodel.advancedanimation.IAnimationVariableSlot>;
      getOrCreateVariable(arg0: string): zombie.core.skinnedmodel.advancedanimation.IAnimationVariableSlot;
      getVariable(arg0: string): zombie.core.skinnedmodel.advancedanimation.IAnimationVariableSlot;
      getVariableBoolean(arg0: string): boolean;
      getVariableFloat(arg0: string, arg1: number): number;
      getVariableString(arg0: string): string;
      hashCode(): number;
      isVariable(arg0: string, arg1: string): boolean;
      notify(): void;
      notifyAll(): void;
      setVariable(arg0: string, arg1: zombie.core.skinnedmodel.advancedanimation.AnimationVariableSlotCallbackFloat$CallbackGetStrongTyped): void;
      toString(): string;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.core.skinnedmodel.advancedanimation.AnimationVariableType */
    export class AnimationVariableType {
      /* ENUM VALUES */
      static readonly Boolean: AnimationVariableType; 
      static readonly Float: AnimationVariableType; 
      static readonly String: AnimationVariableType; 
      static readonly Void: AnimationVariableType; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.core.skinnedmodel.advancedanimation.AnimationVariableType[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): AnimationVariableType;
      valueOf(arg0: string): zombie.core.skinnedmodel.advancedanimation.AnimationVariableType;
      values(): zombie.core.skinnedmodel.advancedanimation.AnimationVariableType[];
    }
    // zombie.core.skinnedmodel.advancedanimation.IAnimEventCallback
    export class IAnimEventCallback {
      private constructor();
      OnAnimEvent(arg0: zombie.core.skinnedmodel.advancedanimation.AnimLayer, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
    }
    // zombie.core.skinnedmodel.advancedanimation.IAnimatable
    export class IAnimatable {
      private constructor();
      GetAnimSetName(): string;
      containsVariable(arg0: string): boolean;
      getActionContext(): zombie.characters.action.ActionContext;
      getAdvancedAnimator(): zombie.core.skinnedmodel.advancedanimation.AdvancedAnimator;
      getAnimationPlayer(): zombie.core.skinnedmodel.animation.AnimationPlayer;
      getAnimationPlayerRecorder(): zombie.core.skinnedmodel.animation.debug.AnimationPlayerRecorder;
      getGameVariables(): java.lang.Iterable<zombie.core.skinnedmodel.advancedanimation.IAnimationVariableSlot>;
      getModelInstance(): zombie.core.skinnedmodel.model.ModelInstance;
      getOnlineID(): number;
      getUID(): string;
      getVariable(arg0: zombie.core.skinnedmodel.advancedanimation.AnimationVariableHandle): zombie.core.skinnedmodel.advancedanimation.IAnimationVariableSlot;
      getVariableBoolean(arg0: string): boolean;
      getVariableFloat(arg0: string, arg1: number): number;
      getVariableString(arg0: string): string;
      isAnimationRecorderActive(): boolean;
      isVariable(arg0: string, arg1: string): boolean;
    }
    // zombie.core.skinnedmodel.advancedanimation.IAnimationVariableSlot
    export class IAnimationVariableSlot {
      private constructor();
      canConvertFrom(arg0: string): boolean;
      clear(): void;
      getKey(): string;
      getType(): zombie.core.skinnedmodel.advancedanimation.AnimationVariableType;
      getValueBool(): boolean;
      getValueFloat(): number;
      getValueString(): string;
      isReadOnly(): boolean;
      setValue(arg0: boolean): void;
    }
    // zombie.core.skinnedmodel.advancedanimation.IAnimationVariableSource
    export class IAnimationVariableSource {
      private constructor();
      containsVariable(arg0: string): boolean;
      getGameVariables(): java.lang.Iterable<zombie.core.skinnedmodel.advancedanimation.IAnimationVariableSlot>;
      getVariable(arg0: zombie.core.skinnedmodel.advancedanimation.AnimationVariableHandle): zombie.core.skinnedmodel.advancedanimation.IAnimationVariableSlot;
      getVariableBoolean(arg0: string): boolean;
      getVariableFloat(arg0: string, arg1: number): number;
      getVariableString(arg0: string): string;
      isVariable(arg0: string, arg1: string): boolean;
    }
    // zombie.core.skinnedmodel.advancedanimation.LiveAnimNode extends zombie.util.PooledObject
    export class LiveAnimNode {
      private constructor();
      addMainTrack(arg0: zombie.core.skinnedmodel.animation.AnimationTrack): void;
      alloc(arg0: zombie.core.skinnedmodel.advancedanimation.AnimLayer, arg1: zombie.core.skinnedmodel.advancedanimation.AnimNode, arg2: number): zombie.core.skinnedmodel.advancedanimation.LiveAnimNode;
      equals(arg0: any): boolean;
      findTransitionTo(arg0: zombie.core.skinnedmodel.advancedanimation.IAnimationVariableSource, arg1: string): zombie.core.skinnedmodel.advancedanimation.AnimTransition;
      getBlendInTime(): number;
      getBlendOutTime(): number;
      getClass(): java.lang.Class<any>;
      getDeferredBoneAxis(): zombie.core.skinnedmodel.animation.BoneAxis;
      getDeferredBoneName(): string;
      getLayerIdx(): number;
      getMainInitialRewindTime(): number;
      getName(): string;
      getPlayingTrackAt(arg0: number): zombie.core.skinnedmodel.animation.AnimationTrack;
      getPlayingTrackCount(): number;
      getPool(): zombie.util.Pool<zombie.util.IPooledObject>;
      getPriority(): number;
      getSourceNode(): zombie.core.skinnedmodel.advancedanimation.AnimNode;
      getSpeedScale(arg0: zombie.core.skinnedmodel.advancedanimation.IAnimationVariableSource): number;
      getSubStateBoneWeights(): java.util.List<zombie.core.skinnedmodel.advancedanimation.AnimBoneWeight>;
      getTransitionFrom(): string;
      getTransitionInBlendInTime(): number;
      getTransitionInBlendOutTime(): number;
      getTransitionInTrack(): zombie.core.skinnedmodel.animation.AnimationTrack;
      getTransitionInWeight(): number;
      getTransitionLayerIdx(): number;
      getWeight(): number;
      hashCode(): number;
      isActive(): boolean;
      isFree(): boolean;
      isIdleAnimActive(): boolean;
      isLooped(): boolean;
      isMainAnimActive(): boolean;
      isNew(): boolean;
      isTransitioningIn(): boolean;
      notify(): void;
      notifyAll(): void;
      onAnimStarted(arg0: zombie.core.skinnedmodel.animation.AnimationTrack): void;
      onLoopedAnim(arg0: zombie.core.skinnedmodel.animation.AnimationTrack): void;
      onNonLoopedAnimFadeOut(arg0: zombie.core.skinnedmodel.animation.AnimationTrack): void;
      onNonLoopedAnimFinished(arg0: zombie.core.skinnedmodel.animation.AnimationTrack): void;
      onReleased(): void;
      onTrackDestroyed(arg0: zombie.core.skinnedmodel.animation.AnimationTrack): void;
      release(): void;
      setActive(arg0: boolean): void;
      setFree(arg0: boolean): void;
      setPool(arg0: zombie.util.Pool<zombie.util.IPooledObject>): void;
      setTransitionInBlendDelta(arg0: number): void;
      setTransitionOut(arg0: zombie.core.skinnedmodel.advancedanimation.AnimTransition): void;
      startTransitionIn(arg0: zombie.core.skinnedmodel.advancedanimation.LiveAnimNode, arg1: zombie.core.skinnedmodel.advancedanimation.AnimTransition, arg2: zombie.core.skinnedmodel.animation.AnimationTrack): void;
      toString(): string;
      update(arg0: number): void;
      wait(arg0: number): void;
      wasActivated(): boolean;
      wasDeactivated(): boolean;
    }
  }
  export namespace zombie.core.skinnedmodel.advancedanimation.debug {
    // zombie.core.skinnedmodel.advancedanimation.debug.AnimatorDebugMonitor extends java.lang.Object
    export class AnimatorDebugMonitor {
      private constructor();
      IsDirty(): boolean;
      IsDirtyFloatList(): boolean;
      addCustomVariable(arg0: string): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getFilter(arg0: number): boolean;
      getFloatNames(): java.util.ArrayList<string>;
      getKnownVariables(): java.util.List<string>;
      getLogString(): string;
      getSelectedVarFloatList(): java.util.ArrayList<number>;
      getSelectedVarMaxFloat(): string;
      getSelectedVarMinFloat(): string;
      getSelectedVariable(): string;
      getSelectedVariableFloat(): number;
      hashCode(): number;
      isDoTickStamps(): boolean;
      isKnownVarsDirty(): boolean;
      notify(): void;
      notifyAll(): void;
      registerVariable(arg0: string): void;
      removeCustomVariable(arg0: string): void;
      setDoTickStamps(arg0: boolean): void;
      setFilter(arg0: number, arg1: boolean): void;
      setSelectedVariable(arg0: string): void;
      toString(): string;
      update(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.core.skinnedmodel.advancedanimation.AnimLayer[]): void;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.core.skinnedmodel.animation {
    // zombie.core.skinnedmodel.animation.AnimTrackSampler
    export class AnimTrackSampler {
      private constructor();
      getBoneMatrix(arg0: number, arg1: org.lwjgl.util.vector.Matrix4f): void;
      getCurrentTime(): number;
      getNumBones(): number;
      getTotalTime(): number;
      isLooped(): boolean;
      moveToTime(arg0: number): void;
    }
    // zombie.core.skinnedmodel.animation.AnimationBoneBinding extends java.lang.Object
    export class AnimationBoneBinding {
      private constructor();
      readonly boneName?: string;
  
      equals(arg0: any): boolean;
      getBone(): zombie.core.skinnedmodel.model.SkinningBone;
      getClass(): java.lang.Class<any>;
      getSkinningData(): zombie.core.skinnedmodel.model.SkinningData;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      setSkinningData(arg0: zombie.core.skinnedmodel.model.SkinningData): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.animation.AnimationClip extends java.lang.Object
    export class AnimationClip {
      private constructor();
      Duration: number;
      readonly Name?: string;
      staticClip?: zombie.core.skinnedmodel.animation.StaticAnimation;
  
      equals(arg0: any): boolean;
      getBoneFramesAt(arg0: number): zombie.core.skinnedmodel.animation.Keyframe[];
      getClass(): java.lang.Class<any>;
      getKeyframes(): zombie.core.skinnedmodel.animation.Keyframe[];
      getRootMotionFrameAt(arg0: number): zombie.core.skinnedmodel.animation.Keyframe;
      getRootMotionFrameCount(): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.animation.AnimationMultiTrack extends java.lang.Object
    export class AnimationMultiTrack {
      private constructor();
      Update(arg0: number): void;
      addTrack(arg0: zombie.core.skinnedmodel.animation.AnimationTrack): void;
      equals(arg0: any): boolean;
      findTrack(arg0: string): zombie.core.skinnedmodel.animation.AnimationTrack;
      getClass(): java.lang.Class<any>;
      getDuration(): number;
      getIndexOfTrack(arg0: zombie.core.skinnedmodel.animation.AnimationTrack): number;
      getTrackAt(arg0: number): zombie.core.skinnedmodel.animation.AnimationTrack;
      getTrackCount(): number;
      getTracks(): java.util.List<zombie.core.skinnedmodel.animation.AnimationTrack>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      removeTrack(arg0: zombie.core.skinnedmodel.animation.AnimationTrack): void;
      removeTrackAt(arg0: number): void;
      removeTracks(arg0: java.util.List<zombie.core.skinnedmodel.animation.AnimationTrack>): void;
      reset(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.animation.AnimationPlayer extends zombie.util.PooledObject
    export class AnimationPlayer {
      private constructor();
      angleStepDelta: number;
      angleTwistDelta: number;
      bDoBlending: boolean;
      bUpdateBones: boolean;
      readonly dismembered?: java.util.ArrayList<number>;
      modelTransforms?: org.lwjgl.util.vector.Matrix4f[];
      parentPlayer?: zombie.core.skinnedmodel.animation.AnimationPlayer;
  
      DoAngles(): void;
      GetPropBoneMatrix(arg0: number): org.lwjgl.util.vector.Matrix4f;
      SetDir(arg0: zombie.iso.Vector2): void;
      SetForceDir(arg0: zombie.iso.Vector2): void;
      Update(): void;
      UpdateDir(arg0: zombie.characters.IsoGameCharacter): void;
      UpdateSkinTransforms(): void;
      addBoneReparent(arg0: string, arg1: string): void;
      alloc(arg0: zombie.core.skinnedmodel.model.Model): zombie.core.skinnedmodel.animation.AnimationPlayer;
      calculateAnimPlayerAngle(arg0: zombie.iso.Vector2): number;
      discardRecording(): void;
      dismember(arg0: number): void;
      equals(arg0: any): boolean;
      getAngle(): number;
      getBoneModelTransform(arg0: number, arg1: org.lwjgl.util.vector.Matrix4f): org.lwjgl.util.vector.Matrix4f;
      getBoneTransform(arg0: number, arg1: org.lwjgl.util.vector.Matrix4f): org.lwjgl.util.vector.Matrix4f;
      getClass(): java.lang.Class<any>;
      getCounterRotationBone(): zombie.core.skinnedmodel.animation.AnimationBoneBinding;
      getDeferredAngleDelta(): number;
      getDeferredMovement(arg0: zombie.iso.Vector2): void;
      getDeferredRotationWeight(): number;
      getExcessTwistAngle(): number;
      getMaxTwistAngle(): number;
      getModel(): zombie.core.skinnedmodel.model.Model;
      getMultiTrack(): zombie.core.skinnedmodel.animation.AnimationMultiTrack;
      getPool(): zombie.util.Pool<zombie.util.IPooledObject>;
      getRecorder(): zombie.core.skinnedmodel.animation.debug.AnimationPlayerRecorder;
      getRenderedAngle(): number;
      getShoulderTwistAngle(): number;
      getSkinTransforms(arg0: zombie.core.skinnedmodel.model.SkinningData): org.lwjgl.util.vector.Matrix4f[];
      getSkinningBoneIndex(arg0: string, arg1: number): number;
      getSkinningBoneIndices(): java.util.HashMap<string, number>;
      getSkinningData(): zombie.core.skinnedmodel.model.SkinningData;
      getTargetAngle(): number;
      getTargetTwistAngle(): number;
      getTwistAngle(): number;
      getUnweightedBoneTransform(arg0: zombie.core.skinnedmodel.animation.AnimationTrack, arg1: number, arg2: org.lwjgl.util.vector.Matrix4f): org.lwjgl.util.vector.Matrix4f;
      getUnweightedModelTransform(arg0: zombie.core.skinnedmodel.animation.AnimationTrack, arg1: number, arg2: org.lwjgl.util.vector.Matrix4f): org.lwjgl.util.vector.Matrix4f;
      hasSkinningData(): boolean;
      hashCode(): number;
      isBoneReparented(arg0: number): boolean;
      isBoneTransformsNeedFirstFrame(): boolean;
      isFree(): boolean;
      isReady(): boolean;
      isRecording(): boolean;
      lerpBlendWeight(arg0: number, arg1: number, arg2: number): number;
      notify(): void;
      notifyAll(): void;
      onReleased(): void;
      play(arg0: string, arg1: boolean): zombie.core.skinnedmodel.animation.AnimationTrack;
      release(): void;
      releaseTracks(arg0: java.util.List<zombie.core.skinnedmodel.animation.AnimationTrack>): void;
      reset(): void;
      resetBoneModelTransforms(): void;
      setAngle(arg0: number): void;
      setAngleToTarget(): void;
      setCounterRotationBone(arg0: string): void;
      setFree(arg0: boolean): void;
      setMaxTwistAngle(arg0: number): void;
      setModel(arg0: zombie.core.skinnedmodel.model.Model): void;
      setPool(arg0: zombie.util.Pool<zombie.util.IPooledObject>): void;
      setRecorder(arg0: zombie.core.skinnedmodel.animation.debug.AnimationPlayerRecorder): void;
      setRecording(arg0: boolean): void;
      setSharedAnimRepo(arg0: zombie.core.skinnedmodel.animation.sharedskele.SharedSkeleAnimationRepository): void;
      setTargetAngle(arg0: number): void;
      setTargetToAngle(): void;
      setTwistBones(arg0: string[]): void;
      toString(): string;
      updateMultiTrackBoneTransforms_DeferredMovementOnly(): void;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.animation.AnimationTrack extends zombie.util.PooledObject
    export class AnimationTrack {
      private constructor();
      BlendDelta: number;
      IsPlaying: boolean;
      SpeedDelta: number;
      SyncTrackingEnabled: boolean;
      blendFieldWeight: number;
      earlyBlendOutTime: number;
      name?: string;
      priority: number;
      reverse: boolean;
      triggerOnNonLoopedAnimFadeOutEvent: boolean;
  
      Update(arg0: number): void;
      UpdateKeyframes(arg0: number): void;
      addListener(arg0: zombie.core.skinnedmodel.animation.IAnimListener): void;
      advance(arg0: number): void;
      advanceFraction(arg0: number): void;
      alloc(): zombie.core.skinnedmodel.animation.AnimationTrack;
      createClone(arg0: zombie.core.skinnedmodel.animation.AnimationTrack, arg1: java.util._function.Supplier<zombie.core.skinnedmodel.animation.AnimationTrack>): zombie.core.skinnedmodel.animation.AnimationTrack;
      equals(arg0: any): boolean;
      get(arg0: number, arg1: org.lwjgl.util.vector.Vector3f, arg2: org.lwjgl.util.vector.Quaternion, arg3: org.lwjgl.util.vector.Vector3f): void;
      getBoneWeight(arg0: number): number;
      getClampedBlendDelta(): number;
      getClass(): java.lang.Class<any>;
      getClip(): zombie.core.skinnedmodel.animation.AnimationClip;
      getCurrentDeferredCounterPosition(arg0: org.lwjgl.util.vector.Vector3f): org.lwjgl.util.vector.Vector3f;
      getCurrentDeferredPosition(arg0: org.lwjgl.util.vector.Vector3f): org.lwjgl.util.vector.Vector3f;
      getCurrentDeferredRotation(): number;
      getCurrentTime(): number;
      getCurrentTimeFraction(): number;
      getCurrentTimeValue(): number;
      getDeferredBoneWeight(): number;
      getDeferredMovement(arg0: org.lwjgl.util.vector.Vector3f, arg1: zombie.iso.Vector2): zombie.iso.Vector2;
      getDeferredMovementBoneIdx(): number;
      getDeferredMovementDiff(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getDeferredRotationDiff(): number;
      getDeferredTwistRotation(arg0: org.lwjgl.util.vector.Quaternion): number;
      getDuration(): number;
      getLayerIdx(): number;
      getPool(): zombie.util.Pool<zombie.util.IPooledObject>;
      getPreviousTime(): number;
      getPreviousTimeValue(): number;
      getPriority(): number;
      getUseDeferredRotation(): boolean;
      hasBoneMask(): boolean;
      hasClip(): boolean;
      hashCode(): number;
      initBoneWeights(arg0: zombie.core.skinnedmodel.model.SkinningData): void;
      isFinished(): boolean;
      isFree(): boolean;
      isLooping(): boolean;
      moveCurrentTimeValueTo(arg0: number): void;
      moveCurrentTimeValueToFraction(arg0: number): void;
      notify(): void;
      notifyAll(): void;
      onReleased(): void;
      release(): void;
      removeListener(arg0: zombie.core.skinnedmodel.animation.IAnimListener): void;
      reset(): zombie.core.skinnedmodel.animation.AnimationTrack;
      rewind(arg0: number): void;
      scaledAdvance(arg0: number): void;
      scaledRewind(arg0: number): void;
      setBoneWeights(arg0: java.util.List<zombie.core.skinnedmodel.advancedanimation.AnimBoneWeight>): void;
      setCurrentTimeValue(arg0: number): void;
      setDeferredBone(arg0: zombie.core.skinnedmodel.model.SkinningBone, arg1: zombie.core.skinnedmodel.animation.BoneAxis): void;
      setFree(arg0: boolean): void;
      setLayerIdx(arg0: number): void;
      setPool(arg0: zombie.util.Pool<zombie.util.IPooledObject>): void;
      setPreviousTimeValue(arg0: number): void;
      setUseDeferredRotation(arg0: boolean): void;
      startClip(arg0: zombie.core.skinnedmodel.animation.AnimationClip, arg1: boolean): void;
      toString(): string;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.core.skinnedmodel.animation.BoneAxis */
    export class BoneAxis {
      /* ENUM VALUES */
      static readonly Y: BoneAxis; 
      static readonly Z: BoneAxis; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.core.skinnedmodel.animation.BoneAxis[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): BoneAxis;
      valueOf(arg0: string): zombie.core.skinnedmodel.animation.BoneAxis;
      values(): zombie.core.skinnedmodel.animation.BoneAxis[];
    }
    // zombie.core.skinnedmodel.animation.IAnimListener
    export class IAnimListener {
      private constructor();
      onAnimStarted(arg0: zombie.core.skinnedmodel.animation.AnimationTrack): void;
      onLoopedAnim(arg0: zombie.core.skinnedmodel.animation.AnimationTrack): void;
      onNonLoopedAnimFadeOut(arg0: zombie.core.skinnedmodel.animation.AnimationTrack): void;
      onNonLoopedAnimFinished(arg0: zombie.core.skinnedmodel.animation.AnimationTrack): void;
      onTrackDestroyed(arg0: zombie.core.skinnedmodel.animation.AnimationTrack): void;
    }
    // zombie.core.skinnedmodel.animation.Keyframe extends java.lang.Object
    export class Keyframe {
      private constructor();
      Bone: number;
      BoneName?: string;
      Position?: org.lwjgl.util.vector.Vector3f;
      Rotation?: org.lwjgl.util.vector.Quaternion;
      Scale?: org.lwjgl.util.vector.Vector3f;
      Time: number;
  
      clear(): void;
      equals(arg0: any): boolean;
      get(arg0: org.lwjgl.util.vector.Vector3f, arg1: org.lwjgl.util.vector.Quaternion, arg2: org.lwjgl.util.vector.Vector3f): void;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      lerp(arg0: zombie.core.skinnedmodel.animation.Keyframe, arg1: zombie.core.skinnedmodel.animation.Keyframe, arg2: number, arg3: zombie.core.skinnedmodel.animation.Keyframe): zombie.core.skinnedmodel.animation.Keyframe;
      notify(): void;
      notifyAll(): void;
      set(arg0: zombie.core.skinnedmodel.animation.Keyframe): void;
      setIdentity(arg0: org.lwjgl.util.vector.Vector3f, arg1: org.lwjgl.util.vector.Quaternion, arg2: org.lwjgl.util.vector.Vector3f): void;
      setIdentityIfNotNull(arg0: org.lwjgl.util.vector.Quaternion): void;
      setIfNotNull(arg0: org.lwjgl.util.vector.Vector3f, arg1: org.lwjgl.util.vector.Vector3f, arg2: number, arg3: number, arg4: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.animation.SoftwareSkinnedModelAnim extends java.lang.Object
    export class SoftwareSkinnedModelAnim {
      private constructor();
      AnimationLength?: java.util.HashMap<string, number>;
      AnimationOffset?: java.util.HashMap<string, number>;
      static boneTransforms?: org.lwjgl.util.vector.Matrix4f[];
      static skinTransforms?: org.lwjgl.util.vector.Matrix4f[];
      vertCount: number;
      static worldTransforms?: org.lwjgl.util.vector.Matrix4f[];
  
      Draw(arg0: number, arg1: number, arg2: string): void;
      UpdateSkinTransforms(arg0: zombie.core.skinnedmodel.model.SkinningData): void;
      UpdateWorldTransforms(arg0: org.lwjgl.util.vector.Matrix4f, arg1: number, arg2: zombie.core.skinnedmodel.model.SkinningData): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      updateSkin(arg0: org.lwjgl.util.vector.Matrix4f[], arg1: zombie.core.skinnedmodel.model.VertexPositionNormalTangentTextureSkin[], arg2: number): zombie.core.skinnedmodel.model.VertexPositionNormalTangentTextureSkin;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.animation.StaticAnimation extends java.lang.Object
    export class StaticAnimation {
      private constructor();
      Clip?: zombie.core.skinnedmodel.animation.AnimationClip;
      Matrices?: org.lwjgl.util.vector.Matrix4f[][];
      name?: string;
  
      Create(): void;
      doRootMotion(arg0: java.util.List<zombie.core.skinnedmodel.animation.Keyframe>): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getPose(): void;
      getPosition(arg0: org.lwjgl.util.vector.Vector3f, arg1: number): org.lwjgl.util.vector.Vector3f;
      getRotation(arg0: org.lwjgl.util.vector.Quaternion, arg1: number): org.lwjgl.util.vector.Quaternion;
      hashCode(): number;
      interpolate(arg0: java.util.List<zombie.core.skinnedmodel.animation.Keyframe>, arg1: number): zombie.core.skinnedmodel.animation.Keyframe;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.core.skinnedmodel.animation.debug {
    // zombie.core.skinnedmodel.animation.debug.AnimationPlayerRecorder extends java.lang.Object
    export class AnimationPlayerRecorder {
      private constructor();
      beginLine(arg0: number): void;
      discardRecording(): void;
      endLine(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getOwner(): zombie.characters.IsoGameCharacter;
      hashCode(): number;
      isRecording(): boolean;
      logAIState(arg0: zombie.ai.State, arg1: java.util.List<zombie.ai.StateMachine$SubstateSlot>): void;
      logActionState(arg0: zombie.characters.action.ActionState, arg1: java.util.List<zombie.characters.action.ActionState>): void;
      logAnimNode(arg0: zombie.core.skinnedmodel.advancedanimation.LiveAnimNode): void;
      logAnimState(arg0: zombie.core.skinnedmodel.advancedanimation.AnimState): void;
      logAnimWeights(arg0: java.util.List<zombie.core.skinnedmodel.animation.AnimationTrack>, arg1: number[], arg2: number[], arg3: zombie.iso.Vector2): void;
      logCharacterPos(): void;
      logVariables(arg0: zombie.core.skinnedmodel.advancedanimation.IAnimationVariableSource): void;
      notify(): void;
      notifyAll(): void;
      openFileStream(arg0: string, arg1: boolean, arg2: java.util._function.Consumer<string>): java.io.PrintStream;
      setRecording(arg0: boolean): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.core.skinnedmodel.animation.sharedskele {
    // zombie.core.skinnedmodel.animation.sharedskele.SharedSkeleAnimationRepository extends java.lang.Object
    export class SharedSkeleAnimationRepository {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getTrack(arg0: zombie.core.skinnedmodel.animation.AnimationClip): zombie.core.skinnedmodel.animation.sharedskele.SharedSkeleAnimationTrack;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      setTrack(arg0: zombie.core.skinnedmodel.animation.AnimationClip, arg1: zombie.core.skinnedmodel.animation.sharedskele.SharedSkeleAnimationTrack): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.animation.sharedskele.SharedSkeleAnimationTrack extends java.lang.Object
    export class SharedSkeleAnimationTrack {
      private constructor();
      equals(arg0: any): boolean;
      getBoneMatrix(arg0: number, arg1: org.lwjgl.util.vector.Matrix4f): void;
      getClass(): java.lang.Class<any>;
      getCurrentTime(): number;
      getNumBones(): number;
      getTotalTime(): number;
      hashCode(): number;
      isLooped(): boolean;
      moveToTime(arg0: number): void;
      notify(): void;
      notifyAll(): void;
      set(arg0: zombie.core.skinnedmodel.animation.AnimTrackSampler, arg1: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.core.skinnedmodel.model {
    // zombie.core.skinnedmodel.model.AnimationAsset extends zombie.asset.Asset
    export class AnimationAsset {
      private constructor();
      static readonly ASSET_TYPE?: zombie.asset.AssetType;
      AnimationClips?: java.util.HashMap<string, zombie.core.skinnedmodel.animation.AnimationClip>;
      assetParams?: zombie.core.skinnedmodel.model.AnimationAsset$AnimationAssetParams;
      modAnimations?: zombie.core.skinnedmodel.ModelManager$ModAnimations;
      modelManagerKey?: string;
      skinningData?: zombie.core.skinnedmodel.model.SkinningData;
  
      addDependency(arg0: zombie.asset.Asset): void;
      equals(arg0: any): boolean;
      getAssetManager(): zombie.asset.AssetManager;
      getClass(): java.lang.Class<any>;
      getObserverCb(): zombie.asset.Asset$ObserverCallback;
      getPath(): zombie.asset.AssetPath;
      getRefCount(): number;
      getState(): zombie.asset.Asset$State;
      getType(): zombie.asset.AssetType;
      hashCode(): number;
      isEmpty(): boolean;
      isFailure(): boolean;
      isReady(): boolean;
      notify(): void;
      notifyAll(): void;
      onBeforeReady(): void;
      onCreated(arg0: zombie.asset.Asset$State): void;
      removeDependency(arg0: zombie.asset.Asset): void;
      setAssetParams(arg0: zombie.asset.AssetManager$AssetParams): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.model.AnimationAsset$AnimationAssetParams extends zombie.asset.AssetManager$AssetParams
    export class AnimationAsset$AnimationAssetParams {
      private constructor();
      animationsMesh?: zombie.core.skinnedmodel.model.ModelMesh;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.model.CharacterMask extends java.lang.Object
    export class CharacterMask {
      private constructor();
      contentsToString(): string;
      copyFrom(arg0: zombie.core.skinnedmodel.model.CharacterMask): void;
      equals(arg0: any): boolean;
      forEachVisible(arg0: java.util._function.Consumer<zombie.core.skinnedmodel.model.CharacterMask$Part>): void;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      isAllVisible(): boolean;
      isBloodBodyPartVisible(arg0: zombie.characterTextures.BloodBodyPartType): boolean;
      isNothingVisible(): boolean;
      isPartVisible(arg0: zombie.core.skinnedmodel.model.CharacterMask$Part): boolean;
      isTorsoVisible(): boolean;
      notify(): void;
      notifyAll(): void;
      setAllVisible(arg0: boolean): void;
      setPartVisible(arg0: zombie.core.skinnedmodel.model.CharacterMask$Part, arg1: boolean): void;
      setPartsVisible(arg0: java.util.ArrayList<number>, arg1: boolean): void;
      toString(): string;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.core.skinnedmodel.model.CharacterMask$Part */
    export class CharacterMask$Part {
      /* ENUM VALUES */
      static readonly Belt: CharacterMask$Part; 
      static readonly Chest: CharacterMask$Part; 
      static readonly Crotch: CharacterMask$Part; 
      static readonly Dress: CharacterMask$Part; 
      static readonly Head: CharacterMask$Part; 
      static readonly LeftArm: CharacterMask$Part; 
      static readonly LeftFoot: CharacterMask$Part; 
      static readonly LeftHand: CharacterMask$Part; 
      static readonly LeftLeg: CharacterMask$Part; 
      static readonly Pelvis: CharacterMask$Part; 
      static readonly RightArm: CharacterMask$Part; 
      static readonly RightFoot: CharacterMask$Part; 
      static readonly RightHand: CharacterMask$Part; 
      static readonly RightLeg: CharacterMask$Part; 
      static readonly Torso: CharacterMask$Part; 
      static readonly Waist: CharacterMask$Part; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.core.skinnedmodel.model.CharacterMask$Part[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): CharacterMask$Part;
      count(): number;
      fromInt(arg0: number): zombie.core.skinnedmodel.model.CharacterMask$Part;
      getBloodBodyPartTypes(): zombie.characterTextures.BloodBodyPartType[];
      getParent(): zombie.core.skinnedmodel.model.CharacterMask$Part;
      getValue(): number;
      hasSubdivisions(): boolean;
      isSubdivision(): boolean;
      leaves(): zombie.core.skinnedmodel.model.CharacterMask$Part[];
      subDivisions(): zombie.core.skinnedmodel.model.CharacterMask$Part[];
      valueOf(arg0: string): zombie.core.skinnedmodel.model.CharacterMask$Part;
      values(): zombie.core.skinnedmodel.model.CharacterMask$Part[];
    }
    // zombie.core.skinnedmodel.model.Model extends zombie.asset.Asset
    export class Model {
      private constructor();
      static readonly ASSET_TYPE?: zombie.asset.AssetType;
      Effect?: zombie.core.skinnedmodel.shader.Shader;
      readonly Mesh?: zombie.core.skinnedmodel.model.ModelMesh;
      Name?: string;
      Tag?: any;
      assetParams?: zombie.core.skinnedmodel.model.Model$ModelAssetParams;
      bStatic: boolean;
      static readonly debugDrawColours?: zombie.core.Color[];
      static readonly m_staticReusableFloatBuffer?: java.nio.FloatBuffer;
      softwareMesh?: zombie.core.skinnedmodel.model.SoftwareModelMesh;
      tex?: zombie.core.textures.Texture;
  
      BoneToWorldCoords(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: zombie.iso.Vector3): void;
      BoneYDirectionToWorldCoords(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: zombie.iso.Vector3, arg3: number): void;
      CharacterModelCameraBegin(arg0: zombie.core.skinnedmodel.model.ModelSlotRenderData): void;
      CharacterModelCameraEnd(): void;
      CreateShader(arg0: string): void;
      DrawChar(arg0: zombie.core.skinnedmodel.model.ModelSlotRenderData, arg1: zombie.core.skinnedmodel.model.ModelInstanceRenderData): void;
      DrawVehicle(arg0: zombie.core.skinnedmodel.model.ModelSlotRenderData, arg1: zombie.core.skinnedmodel.model.ModelInstanceRenderData): void;
      VectorToWorldCoords(arg0: zombie.core.skinnedmodel.model.ModelSlotRenderData, arg1: zombie.iso.Vector3): void;
      addDependency(arg0: zombie.asset.Asset): void;
      debugDrawAxis(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      debugDrawLightSource(arg0: zombie.iso.IsoLightSource, arg1: number, arg2: number, arg3: number, arg4: number): void;
      drawBoneMtx(arg0: org.lwjgl.util.vector.Matrix4f): void;
      equals(arg0: any): boolean;
      getAssetManager(): zombie.asset.AssetManager;
      getClass(): java.lang.Class<any>;
      getObserverCb(): zombie.asset.Asset$ObserverCallback;
      getPath(): zombie.asset.AssetPath;
      getRefCount(): number;
      getState(): zombie.asset.Asset$State;
      getType(): zombie.asset.AssetType;
      hashCode(): number;
      isEmpty(): boolean;
      isFailure(): boolean;
      isReady(): boolean;
      notify(): void;
      notifyAll(): void;
      onCreated(arg0: zombie.asset.Asset$State): void;
      removeDependency(arg0: zombie.asset.Asset): void;
      setAssetParams(arg0: zombie.asset.AssetManager$AssetParams): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.model.Model$ModelAssetParams extends zombie.asset.AssetManager$AssetParams
    export class Model$ModelAssetParams {
      private constructor();
      animationsModel?: zombie.core.skinnedmodel.model.ModelMesh;
      bStatic: boolean;
      meshName?: string;
      shaderName?: string;
      textureFlags: number;
      textureName?: string;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.model.ModelInstance extends java.lang.Object
    export class ModelInstance {
      private constructor();
      AnimPlayer?: zombie.core.skinnedmodel.animation.AnimationPlayer;
      static MODEL_LIGHT_MULT_OUTSIDE: number;
      static MODEL_LIGHT_MULT_ROOM: number;
      attachmentNameParent?: string;
      attachmentNameSelf?: string;
      bResetAfterRender: boolean;
      character?: zombie.characters.IsoGameCharacter;
      data?: zombie.core.skinnedmodel.model.SkinningData;
      depthBias: number;
      hue: number;
      readonly m_lock?: any;
      m_modelScript?: zombie.scripting.objects.ModelScript;
      m_textureInitializer?: zombie.core.skinnedmodel.model.ModelInstanceTextureInitializer;
      maskVariableValue?: string;
      matrixModel?: zombie.core.skinnedmodel.model.ModelInstance;
      model?: zombie.core.skinnedmodel.model.Model;
      object?: zombie.iso.IsoMovingObject;
      parent?: zombie.core.skinnedmodel.model.ModelInstance;
      parentBone: number;
      parentBoneName?: string;
      playerData?: zombie.core.skinnedmodel.model.ModelInstance$PlayerData[];
      renderRefCount: number;
      scale: number;
      softwareMesh?: zombie.core.skinnedmodel.model.SoftwareModelMeshInstance;
      readonly sub?: java.util.ArrayList<zombie.core.skinnedmodel.model.ModelInstance>;
      tex?: zombie.core.textures.Texture;
      tintB: number;
      tintG: number;
      tintR: number;
  
      LoadTexture(arg0: string): void;
      SetForceDir(arg0: zombie.iso.Vector2): void;
      Update(): void;
      UpdateDir(): void;
      applyModelScriptScale(arg0: string): void;
      clearOwner(arg0: any): void;
      destroySmartTextures(): void;
      dismember(arg0: number): void;
      equals(arg0: any): boolean;
      getAttachment(arg0: number): zombie.scripting.objects.ModelAttachment;
      getAttachmentById(arg0: string): zombie.scripting.objects.ModelAttachment;
      getAttachmentMatrix(arg0: number, arg1: org.joml.Matrix4f): org.joml.Matrix4f;
      getAttachmentMatrixById(arg0: string, arg1: org.joml.Matrix4f): org.joml.Matrix4f;
      getClass(): java.lang.Class<any>;
      getItemVisual(): zombie.core.skinnedmodel.visual.ItemVisual;
      getOwner(): any;
      getTextureInitializer(): zombie.core.skinnedmodel.model.ModelInstanceTextureInitializer;
      hasTextureCreator(): boolean;
      hashCode(): number;
      init(arg0: zombie.core.skinnedmodel.model.Model, arg1: zombie.characters.IsoGameCharacter, arg2: zombie.core.skinnedmodel.animation.AnimationPlayer): zombie.core.skinnedmodel.model.ModelInstance;
      isRendering(): boolean;
      notify(): void;
      notifyAll(): void;
      reset(): void;
      setInstanceSkip(arg0: number): void;
      setItemVisual(arg0: zombie.core.skinnedmodel.visual.ItemVisual): void;
      setOwner(arg0: any): void;
      setTextureInitializer(arg0: zombie.core.skinnedmodel.model.ModelInstanceTextureInitializer): void;
      toString(): string;
      updateLights(): void;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.model.ModelInstance$EffectLight extends java.lang.Object
    export class ModelInstance$EffectLight {
      private constructor();
      b: number;
      g: number;
      r: number;
      radius: number;
      x: number;
      y: number;
      z: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      set(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.core.skinnedmodel.model.ModelInstance$FrameLightBlendStatus */
    export class ModelInstance$FrameLightBlendStatus {
      /* ENUM VALUES */
      static readonly During: ModelInstance$FrameLightBlendStatus; 
      static readonly In: ModelInstance$FrameLightBlendStatus; 
      static readonly Out: ModelInstance$FrameLightBlendStatus; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.core.skinnedmodel.model.ModelInstance$FrameLightBlendStatus[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): ModelInstance$FrameLightBlendStatus;
      valueOf(arg0: string): zombie.core.skinnedmodel.model.ModelInstance$FrameLightBlendStatus;
      values(): zombie.core.skinnedmodel.model.ModelInstance$FrameLightBlendStatus[];
    }
    // zombie.core.skinnedmodel.model.ModelInstance$FrameLightInfo extends java.lang.Object
    export class ModelInstance$FrameLightInfo {
      private constructor();
      Stage?: zombie.core.skinnedmodel.model.ModelInstance$FrameLightBlendStatus;
      active: boolean;
      b: number;
      readonly currentColor?: org.lwjgl.util.vector.Vector3f;
      distSq: number;
      flags: number;
      foundThisFrame: boolean;
      g: number;
      id: number;
      r: number;
      radius: number;
      readonly targetColor?: org.lwjgl.util.vector.Vector3f;
      x: number;
      y: number;
      z: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.model.ModelInstance$PlayerData extends java.lang.Object
    export class ModelInstance$PlayerData {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.model.ModelInstanceRenderData extends java.lang.Object
    export class ModelInstanceRenderData {
      private constructor();
      depthBias: number;
      hue: number;
      m_muzzleFlash: boolean;
      matrixPalette?: java.nio.FloatBuffer;
      model?: zombie.core.skinnedmodel.model.Model;
      modelInstance?: zombie.core.skinnedmodel.model.ModelInstance;
      parentBone: number;
      softwareMesh?: zombie.core.skinnedmodel.model.SoftwareModelMeshInstance;
      tex?: zombie.core.textures.Texture;
      tintB: number;
      tintG: number;
      tintR: number;
      readonly xfrm?: org.joml.Matrix4f;
  
      RenderCharacter(arg0: zombie.core.skinnedmodel.model.ModelSlotRenderData): void;
      RenderVehicle(arg0: zombie.core.skinnedmodel.model.ModelSlotRenderData): void;
      alloc(): zombie.core.skinnedmodel.model.ModelInstanceRenderData;
      applyBoneTransform(arg0: zombie.core.skinnedmodel.model.ModelInstance, arg1: string, arg2: org.joml.Matrix4f): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      init(arg0: zombie.core.skinnedmodel.model.ModelInstance): zombie.core.skinnedmodel.model.ModelInstanceRenderData;
      makeAttachmentTransform(arg0: zombie.scripting.objects.ModelAttachment, arg1: org.joml.Matrix4f): org.joml.Matrix4f;
      notify(): void;
      notifyAll(): void;
      release(arg0: java.util.ArrayList<zombie.core.skinnedmodel.model.ModelInstanceRenderData>): void;
      renderDebug(): void;
      toString(): string;
      transformToParent(arg0: zombie.core.skinnedmodel.model.ModelInstanceRenderData): zombie.core.skinnedmodel.model.ModelInstanceRenderData;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.model.ModelInstanceRenderDataList extends java.util.ArrayList<zombie.core.skinnedmodel.model.ModelInstanceRenderData>
    export class ModelInstanceRenderDataList {
      private constructor();
      add(arg0: number, arg1: zombie.core.skinnedmodel.model.ModelInstanceRenderData): void;
      addAll(arg0: number, arg1: java.util.Collection<zombie.core.skinnedmodel.model.ModelInstanceRenderData>): boolean;
      clear(): void;
      clone(): any;
      contains(arg0: any): boolean;
      containsAll(arg0: java.util.Collection<any>): boolean;
      ensureCapacity(arg0: number): void;
      equals(arg0: any): boolean;
      forEach(arg0: java.util._function.Consumer<zombie.core.skinnedmodel.model.ModelInstanceRenderData>): void;
      get(arg0: number): zombie.core.skinnedmodel.model.ModelInstanceRenderData;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      indexOf(arg0: any): number;
      isEmpty(): boolean;
      iterator(): java.util.Iterator<zombie.core.skinnedmodel.model.ModelInstanceRenderData>;
      lastIndexOf(arg0: any): number;
      listIterator(arg0: number): java.util.ListIterator<zombie.core.skinnedmodel.model.ModelInstanceRenderData>;
      notify(): void;
      notifyAll(): void;
      parallelStream(): java.util.stream.Stream<zombie.core.skinnedmodel.model.ModelInstanceRenderData>;
      remove(arg0: number): zombie.core.skinnedmodel.model.ModelInstanceRenderData;
      removeAll(arg0: java.util.Collection<any>): boolean;
      removeIf(arg0: java.util._function.Predicate<zombie.core.skinnedmodel.model.ModelInstanceRenderData>): boolean;
      replaceAll(arg0: java.util._function.UnaryOperator<zombie.core.skinnedmodel.model.ModelInstanceRenderData>): void;
      retainAll(arg0: java.util.Collection<any>): boolean;
      set(arg0: number, arg1: zombie.core.skinnedmodel.model.ModelInstanceRenderData): zombie.core.skinnedmodel.model.ModelInstanceRenderData;
      size(): number;
      sort(arg0: java.util.Comparator<zombie.core.skinnedmodel.model.ModelInstanceRenderData>): void;
      spliterator(): java.util.Spliterator<zombie.core.skinnedmodel.model.ModelInstanceRenderData>;
      stream(): java.util.stream.Stream<zombie.core.skinnedmodel.model.ModelInstanceRenderData>;
      subList(arg0: number, arg1: number): java.util.List<zombie.core.skinnedmodel.model.ModelInstanceRenderData>;
      toArray<T>(arg0: java.util._function.IntFunction<T[]>): T[];
      toString(): string;
      trimToSize(): void;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.model.ModelInstanceTextureCreator extends zombie.core.textures.TextureDraw$GenericDrawer
    export class ModelInstanceTextureCreator {
      private constructor();
      renderRefCount: number;
      testNotReady: number;
  
      alloc(): zombie.core.skinnedmodel.model.ModelInstanceTextureCreator;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      init(arg0: zombie.characters.IsoGameCharacter): void;
      isRendered(): boolean;
      notify(): void;
      notifyAll(): void;
      postRender(): void;
      render(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.model.ModelInstanceTextureInitializer extends java.lang.Object
    export class ModelInstanceTextureInitializer {
      private constructor();
      alloc(): zombie.core.skinnedmodel.model.ModelInstanceTextureInitializer;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      init(arg0: zombie.core.skinnedmodel.model.ModelInstance, arg1: number): void;
      isDirty(): boolean;
      isRendered(): boolean;
      notify(): void;
      notifyAll(): void;
      postRender(): void;
      release(): void;
      render(): void;
      renderMain(): void;
      setDirty(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.model.ModelMesh extends zombie.asset.Asset
    export class ModelMesh {
      private constructor();
      static readonly ASSET_TYPE?: zombie.asset.AssetType;
      assetParams?: zombie.core.skinnedmodel.model.ModelMesh$MeshAssetParams;
      m_animationsMesh?: zombie.core.skinnedmodel.model.ModelMesh;
      m_fullPath?: string;
      m_transform?: org.joml.Matrix4f;
      skinningData?: zombie.core.skinnedmodel.model.SkinningData;
      softwareMesh?: zombie.core.skinnedmodel.model.SoftwareModelMesh;
      vb?: zombie.core.skinnedmodel.model.VertexBufferObject;
  
      Draw(arg0: zombie.core.skinnedmodel.shader.Shader): void;
      SetVertexBuffer(arg0: zombie.core.skinnedmodel.model.VertexBufferObject): void;
      addDependency(arg0: zombie.asset.Asset): void;
      clear(): void;
      equals(arg0: any): boolean;
      getAssetManager(): zombie.asset.AssetManager;
      getClass(): java.lang.Class<any>;
      getObserverCb(): zombie.asset.Asset$ObserverCallback;
      getPath(): zombie.asset.AssetPath;
      getRefCount(): number;
      getState(): zombie.asset.Asset$State;
      getType(): zombie.asset.AssetType;
      hashCode(): number;
      isEmpty(): boolean;
      isFailure(): boolean;
      isReady(): boolean;
      notify(): void;
      notifyAll(): void;
      onBeforeReady(): void;
      onCreated(arg0: zombie.asset.Asset$State): void;
      removeDependency(arg0: zombie.asset.Asset): void;
      setAssetParams(arg0: zombie.asset.AssetManager$AssetParams): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.model.ModelMesh$MeshAssetParams extends zombie.asset.AssetManager$AssetParams
    export class ModelMesh$MeshAssetParams {
      private constructor();
      animationsMesh?: zombie.core.skinnedmodel.model.ModelMesh;
      bStatic: boolean;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.model.ModelSlotRenderData extends zombie.core.textures.TextureDraw$GenericDrawer
    export class ModelSlotRenderData {
      private constructor();
      RENDER_TO_TEXTURE: boolean;
      alpha: number;
      ambientB: number;
      ambientG: number;
      ambientR: number;
      animPlayer?: zombie.core.skinnedmodel.animation.AnimationPlayer;
      animPlayerAngle: number;
      bInVehicle: boolean;
      bOutside: boolean;
      centerOfMassY: number;
      character?: zombie.characters.IsoGameCharacter;
      readonly effectLights?: zombie.core.skinnedmodel.model.ModelInstance$EffectLight[];
      inVehicleX: number;
      inVehicleY: number;
      inVehicleZ: number;
      readonly modelData?: zombie.core.skinnedmodel.model.ModelInstanceRenderDataList;
      object?: zombie.iso.IsoMovingObject;
      textureCreator?: zombie.core.skinnedmodel.model.ModelInstanceTextureCreator;
      vehicleAngleX: number;
      vehicleAngleY: number;
      vehicleAngleZ: number;
      readonly vehicleTransform?: org.joml.Matrix4f;
      x: number;
      y: number;
      z: number;
  
      alloc(): zombie.core.skinnedmodel.model.ModelSlotRenderData;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      init(arg0: zombie.core.skinnedmodel.ModelManager$ModelSlot): zombie.core.skinnedmodel.model.ModelSlotRenderData;
      notify(): void;
      notifyAll(): void;
      postRender(): void;
      render(): void;
      renderDebug(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.model.SkinningBone extends java.lang.Object
    export class SkinningBone {
      private constructor();
      Children?: zombie.core.skinnedmodel.model.SkinningBone[];
      Index: number;
      Name?: string;
      Parent?: zombie.core.skinnedmodel.model.SkinningBone;
  
      equals(arg0: any): boolean;
      forEachDescendant(arg0: java.util._function.Consumer<zombie.core.skinnedmodel.model.SkinningBone>): void;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.model.SkinningBoneHierarchy extends java.lang.Object
    export class SkinningBoneHierarchy {
      private constructor();
      buildBoneHiearchy(arg0: zombie.core.skinnedmodel.model.SkinningData): void;
      equals(arg0: any): boolean;
      getBoneAt(arg0: number): zombie.core.skinnedmodel.model.SkinningBone;
      getClass(): java.lang.Class<any>;
      getRootBoneAt(arg0: number): zombie.core.skinnedmodel.model.SkinningBone;
      hashCode(): number;
      isValid(): boolean;
      notify(): void;
      notifyAll(): void;
      numRootBones(): number;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.model.SkinningData extends java.lang.Object
    export class SkinningData {
      private constructor();
      AnimationClips?: java.util.HashMap<string, zombie.core.skinnedmodel.animation.AnimationClip>;
      BindPose?: java.util.List<org.lwjgl.util.vector.Matrix4f>;
      BoneIndices?: java.util.HashMap<string, number>;
      BoneOffset?: java.util.List<org.lwjgl.util.vector.Matrix4f>;
      InverseBindPose?: java.util.List<org.lwjgl.util.vector.Matrix4f>;
      SkeletonHierarchy?: java.util.List<number>;
  
      equals(arg0: any): boolean;
      getBone(arg0: string): zombie.core.skinnedmodel.model.SkinningBone;
      getBoneAt(arg0: number): zombie.core.skinnedmodel.model.SkinningBone;
      getBoneHieararchy(): zombie.core.skinnedmodel.model.SkinningBoneHierarchy;
      getClass(): java.lang.Class<any>;
      getParentBoneIdx(arg0: number): number;
      getRootBoneAt(arg0: number): zombie.core.skinnedmodel.model.SkinningBone;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      numBones(): number;
      numRootBones(): number;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.model.SoftwareModelMesh extends java.lang.Object
    export class SoftwareModelMesh {
      private constructor();
      Texture?: string;
      indicesUnskinned?: number[];
      vb?: zombie.core.skinnedmodel.model.VertexBufferObject;
      verticesUnskinned?: zombie.core.skinnedmodel.model.VertexPositionNormalTangentTextureSkin[];
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.model.SoftwareModelMeshInstance extends java.lang.Object
    export class SoftwareModelMeshInstance {
      private constructor();
      name?: string;
      softwareMesh?: zombie.core.skinnedmodel.model.SoftwareModelMesh;
      vb?: zombie.core.skinnedmodel.model.VertexBufferObject;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.model.UInt4 extends java.lang.Object
    export class UInt4 {
      private constructor();
      W: number;
      X: number;
      Y: number;
      Z: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.model.VehicleSubModelInstance extends zombie.core.skinnedmodel.model.ModelInstance
    export class VehicleSubModelInstance {
      private constructor();
      AnimPlayer?: zombie.core.skinnedmodel.animation.AnimationPlayer;
      static MODEL_LIGHT_MULT_OUTSIDE: number;
      static MODEL_LIGHT_MULT_ROOM: number;
      attachmentNameParent?: string;
      attachmentNameSelf?: string;
      bResetAfterRender: boolean;
      character?: zombie.characters.IsoGameCharacter;
      data?: zombie.core.skinnedmodel.model.SkinningData;
      degrees: number;
      depthBias: number;
      hue: number;
      readonly m_lock?: any;
      m_modelScript?: zombie.scripting.objects.ModelScript;
      m_textureInitializer?: zombie.core.skinnedmodel.model.ModelInstanceTextureInitializer;
      maskVariableValue?: string;
      matrixModel?: zombie.core.skinnedmodel.model.ModelInstance;
      model?: zombie.core.skinnedmodel.model.Model;
      modelInfo?: zombie.vehicles.BaseVehicle$ModelInfo;
      object?: zombie.iso.IsoMovingObject;
      parent?: zombie.core.skinnedmodel.model.ModelInstance;
      parentBone: number;
      parentBoneName?: string;
      playerData?: zombie.core.skinnedmodel.model.ModelInstance$PlayerData[];
      renderRefCount: number;
      scale: number;
      softwareMesh?: zombie.core.skinnedmodel.model.SoftwareModelMeshInstance;
      readonly sub?: java.util.ArrayList<zombie.core.skinnedmodel.model.ModelInstance>;
      tex?: zombie.core.textures.Texture;
      tintB: number;
      tintG: number;
      tintR: number;
  
      LoadTexture(arg0: string): void;
      SetForceDir(arg0: zombie.iso.Vector2): void;
      Update(): void;
      UpdateDir(): void;
      applyModelScriptScale(arg0: string): void;
      clearOwner(arg0: any): void;
      destroySmartTextures(): void;
      dismember(arg0: number): void;
      equals(arg0: any): boolean;
      getAttachment(arg0: number): zombie.scripting.objects.ModelAttachment;
      getAttachmentById(arg0: string): zombie.scripting.objects.ModelAttachment;
      getAttachmentMatrix(arg0: number, arg1: org.joml.Matrix4f): org.joml.Matrix4f;
      getAttachmentMatrixById(arg0: string, arg1: org.joml.Matrix4f): org.joml.Matrix4f;
      getClass(): java.lang.Class<any>;
      getItemVisual(): zombie.core.skinnedmodel.visual.ItemVisual;
      getOwner(): any;
      getTextureInitializer(): zombie.core.skinnedmodel.model.ModelInstanceTextureInitializer;
      hasTextureCreator(): boolean;
      hashCode(): number;
      init(arg0: zombie.core.skinnedmodel.model.Model, arg1: zombie.characters.IsoGameCharacter, arg2: zombie.core.skinnedmodel.animation.AnimationPlayer): zombie.core.skinnedmodel.model.ModelInstance;
      isRendering(): boolean;
      notify(): void;
      notifyAll(): void;
      reset(): void;
      setInstanceSkip(arg0: number): void;
      setItemVisual(arg0: zombie.core.skinnedmodel.visual.ItemVisual): void;
      setOwner(arg0: any): void;
      setTextureInitializer(arg0: zombie.core.skinnedmodel.model.ModelInstanceTextureInitializer): void;
      toString(): string;
      updateLights(): void;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.model.VertexBufferObject extends java.lang.Object
    export class VertexBufferObject {
      private constructor();
      bStatic: boolean;
      static funcs?: zombie.core.VBO.IGLBufferObject;
  
      Draw(arg0: zombie.core.skinnedmodel.shader.Shader): void;
      DrawStrip(arg0: zombie.core.skinnedmodel.shader.Shader): void;
      LoadSoftwareVBO(arg0: java.nio.ByteBuffer, arg1: zombie.core.skinnedmodel.model.VertexBufferObject$Vbo, arg2: number[]): zombie.core.skinnedmodel.model.VertexBufferObject$Vbo;
      clear(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.core.skinnedmodel.model.VertexBufferObject$BeginMode */
    export class VertexBufferObject$BeginMode {
      /* ENUM VALUES */
      static readonly Triangles: VertexBufferObject$BeginMode; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.core.skinnedmodel.model.VertexBufferObject$BeginMode[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): VertexBufferObject$BeginMode;
      valueOf(arg0: string): zombie.core.skinnedmodel.model.VertexBufferObject$BeginMode;
      values(): zombie.core.skinnedmodel.model.VertexBufferObject$BeginMode[];
    }
    // zombie.core.skinnedmodel.model.VertexBufferObject$Vbo extends java.lang.Object
    export class VertexBufferObject$Vbo {
      private constructor();
      EboID: number;
      FaceDataOnly: boolean;
      NumElements: number;
      VboID: number;
      VertexStride: number;
      readonly b?: java.nio.IntBuffer;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.model.VertexBufferObject$VertexArray extends java.lang.Object
    export class VertexBufferObject$VertexArray {
      private constructor();
      readonly m_buffer?: java.nio.ByteBuffer;
      readonly m_format?: zombie.core.skinnedmodel.model.VertexBufferObject$VertexFormat;
      readonly m_numVertices: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      setElement(arg0: number, arg1: number, arg2: number, arg3: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.model.VertexBufferObject$VertexElement extends java.lang.Object
    export class VertexBufferObject$VertexElement {
      private constructor();
      m_byteOffset: number;
      m_byteSize: number;
      m_type?: zombie.core.skinnedmodel.model.VertexBufferObject$VertexType;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.model.VertexBufferObject$VertexFormat extends java.lang.Object
    export class VertexBufferObject$VertexFormat {
      private constructor();
      calculate(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      setElement(arg0: number, arg1: zombie.core.skinnedmodel.model.VertexBufferObject$VertexType, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.core.skinnedmodel.model.VertexBufferObject$VertexType */
    export class VertexBufferObject$VertexType {
      /* ENUM VALUES */
      static readonly BlendIndexArray: VertexBufferObject$VertexType; 
      static readonly BlendWeightArray: VertexBufferObject$VertexType; 
      static readonly ColorArray: VertexBufferObject$VertexType; 
      static readonly IndexArray: VertexBufferObject$VertexType; 
      static readonly NormalArray: VertexBufferObject$VertexType; 
      static readonly TangentArray: VertexBufferObject$VertexType; 
      static readonly TextureCoordArray: VertexBufferObject$VertexType; 
      static readonly VertexArray: VertexBufferObject$VertexType; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.core.skinnedmodel.model.VertexBufferObject$VertexType[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): VertexBufferObject$VertexType;
      valueOf(arg0: string): zombie.core.skinnedmodel.model.VertexBufferObject$VertexType;
      values(): zombie.core.skinnedmodel.model.VertexBufferObject$VertexType[];
    }
    // zombie.core.skinnedmodel.model.VertexPositionNormalTangentTextureSkin extends java.lang.Object
    export class VertexPositionNormalTangentTextureSkin {
      private constructor();
      BlendIndices?: zombie.core.skinnedmodel.model.UInt4;
      BlendWeights?: zombie.core.skinnedmodel.Vector4;
      Normal?: zombie.core.skinnedmodel.Vector3;
      Position?: zombie.core.skinnedmodel.Vector3;
      Tangent?: zombie.core.skinnedmodel.Vector3;
      TextureCoordinates?: zombie.iso.Vector2;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      put(arg0: java.nio.ByteBuffer): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.core.skinnedmodel.population {
    // zombie.core.skinnedmodel.population.BeardStyle extends java.lang.Object
    export class BeardStyle {
      private constructor();
      growReference: boolean;
      level: number;
      model?: string;
      name?: string;
      texture?: string;
      trimChoices?: java.util.ArrayList<string>;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getLevel(): number;
      getName(): string;
      getTrimChoices(): java.util.ArrayList<string>;
      hashCode(): number;
      isValid(): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.population.BeardStyles extends java.lang.Object
    export class BeardStyles {
      private constructor();
      static instance?: zombie.core.skinnedmodel.population.BeardStyles;
      readonly m_Styles?: java.util.ArrayList<zombie.core.skinnedmodel.population.BeardStyle>;
  
      FindStyle(arg0: string): zombie.core.skinnedmodel.population.BeardStyle;
      Parse(arg0: string): zombie.core.skinnedmodel.population.BeardStyles;
      Reset(): void;
      equals(arg0: any): boolean;
      getAllStyles(): java.util.ArrayList<zombie.core.skinnedmodel.population.BeardStyle>;
      getClass(): java.lang.Class<any>;
      getInstance(): zombie.core.skinnedmodel.population.BeardStyles;
      getRandomStyle(arg0: string): string;
      hashCode(): number;
      init(): void;
      notify(): void;
      notifyAll(): void;
      parse(arg0: string): zombie.core.skinnedmodel.population.BeardStyles;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.population.ClothingItem extends zombie.asset.Asset
    export class ClothingItem {
      private constructor();
      static readonly ASSET_TYPE?: zombie.asset.AssetType;
      m_AllowRandomHue: boolean;
      m_AllowRandomTint: boolean;
      m_AttachBone?: string;
      m_BaseTextures?: java.util.ArrayList<string>;
      m_DecalGroup?: string;
      m_FemaleModel?: string;
      m_GUID?: string;
      m_HatCategory?: string;
      m_MaleModel?: string;
      m_Masks?: java.util.ArrayList<number>;
      m_MasksFolder?: string;
      m_Name?: string;
      m_Shader?: string;
      m_Static: boolean;
      m_UnderlayMasksFolder?: string;
      static readonly s_masksFolderDefault?: string;
      textureChoices?: java.util.ArrayList<string>;
  
      GetATexture(): string;
      addDependency(arg0: zombie.asset.Asset): void;
      equals(arg0: any): boolean;
      getAllowRandomHue(): boolean;
      getAllowRandomTint(): boolean;
      getAssetManager(): zombie.asset.AssetManager;
      getBaseTextures(): java.util.ArrayList<string>;
      getClass(): java.lang.Class<any>;
      getCombinedMask(arg0: zombie.core.skinnedmodel.model.CharacterMask): void;
      getDecalGroup(): string;
      getFemaleModel(): string;
      getMaleModel(): string;
      getModel(arg0: boolean): string;
      getObserverCb(): zombie.asset.Asset$ObserverCallback;
      getPath(): zombie.asset.AssetPath;
      getRefCount(): number;
      getState(): zombie.asset.Asset$State;
      getTextureChoices(): java.util.ArrayList<string>;
      getType(): zombie.asset.AssetType;
      hasModel(): boolean;
      hashCode(): number;
      isEmpty(): boolean;
      isFailure(): boolean;
      isHat(): boolean;
      isMask(): boolean;
      isReady(): boolean;
      notify(): void;
      notifyAll(): void;
      onCreated(arg0: zombie.asset.Asset$State): void;
      removeDependency(arg0: zombie.asset.Asset): void;
      setAssetParams(arg0: zombie.asset.AssetManager$AssetParams): void;
      toString(): string;
      tryGetCombinedMask(arg0: zombie.core.skinnedmodel.population.ClothingItemReference, arg1: zombie.core.skinnedmodel.model.CharacterMask): void;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.population.ClothingItemReference extends java.lang.Object
    export class ClothingItemReference {
      private constructor();
      readonly RandomData?: zombie.core.skinnedmodel.population.ClothingItemReference$RandomData;
      bRandomized: boolean;
      itemGUID?: string;
      m_Immutable: boolean;
      probability: number;
      subItems?: java.util.ArrayList<zombie.core.skinnedmodel.population.ClothingItemReference>;
  
      clone(): any;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getClothingItem(): zombie.core.skinnedmodel.population.ClothingItem;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      randomize(): void;
      setModID(arg0: string): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.population.ClothingItemReference$RandomData extends java.lang.Object
    export class ClothingItemReference$RandomData {
      private constructor();
      m_Active: boolean;
      m_BaseTexture?: string;
      m_Decal?: string;
      m_Hue: number;
      m_PickedItemRef?: zombie.core.skinnedmodel.population.ClothingItemReference;
      m_TextureChoice?: string;
      m_Tint?: zombie.core.ImmutableColor;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      reset(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.population.HairStyle extends java.lang.Object
    export class HairStyle {
      private constructor();
      readonly alternate?: java.util.ArrayList<zombie.core.skinnedmodel.population.HairStyle$Alternate>;
      attachedHair: boolean;
      growReference: boolean;
      level: number;
      model?: string;
      name?: string;
      noChoose: boolean;
      texture?: string;
      readonly trimChoices?: java.util.ArrayList<string>;
  
      equals(arg0: any): boolean;
      getAlternate(arg0: string): string;
      getClass(): java.lang.Class<any>;
      getLevel(): number;
      getName(): string;
      getTrimChoices(): java.util.ArrayList<string>;
      hashCode(): number;
      isAttachedHair(): boolean;
      isGrowReference(): boolean;
      isNoChoose(): boolean;
      isValid(): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.population.HairStyle$Alternate extends java.lang.Object
    export class HairStyle$Alternate {
      private constructor();
      category?: string;
      style?: string;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.population.HairStyles extends java.lang.Object
    export class HairStyles {
      private constructor();
      static instance?: zombie.core.skinnedmodel.population.HairStyles;
      readonly m_FemaleStyles?: java.util.ArrayList<zombie.core.skinnedmodel.population.HairStyle>;
      readonly m_MaleStyles?: java.util.ArrayList<zombie.core.skinnedmodel.population.HairStyle>;
  
      FindFemaleStyle(arg0: string): zombie.core.skinnedmodel.population.HairStyle;
      FindMaleStyle(arg0: string): zombie.core.skinnedmodel.population.HairStyle;
      Parse(arg0: string): zombie.core.skinnedmodel.population.HairStyles;
      Reset(): void;
      equals(arg0: any): boolean;
      getAllFemaleStyles(): java.util.ArrayList<zombie.core.skinnedmodel.population.HairStyle>;
      getAllMaleStyles(): java.util.ArrayList<zombie.core.skinnedmodel.population.HairStyle>;
      getAlternateForHat(arg0: zombie.core.skinnedmodel.population.HairStyle, arg1: string): zombie.core.skinnedmodel.population.HairStyle;
      getClass(): java.lang.Class<any>;
      getRandomFemaleStyle(arg0: string): string;
      getRandomMaleStyle(arg0: string): string;
      hashCode(): number;
      init(): void;
      notify(): void;
      notifyAll(): void;
      parse(arg0: string): zombie.core.skinnedmodel.population.HairStyles;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.population.Outfit extends java.lang.Object
    export class Outfit {
      private constructor();
      readonly RandomData?: zombie.core.skinnedmodel.population.Outfit$RandomData;
      m_AllowPantsHue: boolean;
      m_AllowPantsTint: boolean;
      m_AllowTShirtDecal: boolean;
      m_AllowTopTint: boolean;
      m_Immutable: boolean;
      m_Name?: string;
      m_Pants: boolean;
      readonly m_PantsTextures?: java.util.ArrayList<string>;
      m_Top: boolean;
      readonly m_TopTextures?: java.util.ArrayList<string>;
      readonly m_items?: java.util.ArrayList<zombie.core.skinnedmodel.population.ClothingItemReference>;
      m_modID?: string;
  
      AddItem(arg0: zombie.core.skinnedmodel.population.ClothingItemReference): void;
      GetMask(): zombie.core.skinnedmodel.model.CharacterMask;
      Randomize(): void;
      clone(): zombie.core.skinnedmodel.population.Outfit;
      containsItemGuid(arg0: string): boolean;
      equals(arg0: any): boolean;
      findHat(): zombie.core.skinnedmodel.population.ClothingItemReference;
      findItemByGUID(arg0: string): zombie.core.skinnedmodel.population.ClothingItemReference;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      isEmpty(): boolean;
      loadItems(): void;
      notify(): void;
      notifyAll(): void;
      randomizeItem(arg0: string): void;
      setModID(arg0: string): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.population.Outfit$RandomData extends java.lang.Object
    export class Outfit$RandomData {
      private constructor();
      m_beardName?: string;
      m_femaleHairName?: string;
      m_hairColor?: zombie.core.ImmutableColor;
      m_hasTShirt: boolean;
      m_hasTShirtDecal: boolean;
      m_hasTop: boolean;
      m_maleHairName?: string;
      m_pantsHue: number;
      m_pantsTexture?: string;
      m_pantsTint?: zombie.core.ImmutableColor;
      m_topTexture?: string;
      m_topTint?: zombie.core.ImmutableColor;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.core.skinnedmodel.runtime {
    // zombie.core.skinnedmodel.runtime.RuntimeAnimationScript extends zombie.scripting.objects.BaseScriptObject
    export class RuntimeAnimationScript {
      private constructor();
      module?: zombie.scripting.objects.ScriptModule;
  
      Load(arg0: string, arg1: string[]): void;
      equals(arg0: any): boolean;
      exec(): void;
      getClass(): java.lang.Class<any>;
      getModule(): zombie.scripting.objects.ScriptModule;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      reset(): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.core.skinnedmodel.shader {
    // zombie.core.skinnedmodel.shader.Shader extends java.lang.Object
    export class Shader {
      private constructor();
      BoneIndicesAttrib: number;
      BoneWeightsAttrib: number;
  
      End(): void;
      Start(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getID(): number;
      getShaderProgram(): zombie.core.opengl.ShaderProgram;
      hashCode(): number;
      isStatic(): boolean;
      isVehicleShader(): boolean;
      notify(): void;
      notifyAll(): void;
      setAlpha(arg0: number): void;
      setAmbient(arg0: number): void;
      setDepthBias(arg0: number): void;
      setHueShift(arg0: number): void;
      setLight(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: zombie.core.skinnedmodel.model.ModelInstance): void;
      setLightingAmount(arg0: number): void;
      setMatrix(arg0: number, arg1: number[]): void;
      setMatrixBlood1(arg0: number[], arg1: number[]): void;
      setMatrixBlood2(arg0: number[], arg1: number[]): void;
      setMatrixPalette(arg0: org.lwjgl.util.vector.Matrix4f[]): void;
      setReflectionParam(arg0: number, arg1: number, arg2: number): void;
      setShaderAlpha(arg0: number): void;
      setTexture(arg0: zombie.core.textures.Texture, arg1: string, arg2: number): void;
      setTextureDamage1Enables1(arg0: number[]): void;
      setTextureDamage1Enables2(arg0: number[]): void;
      setTextureDamage2Enables1(arg0: number[]): void;
      setTextureDamage2Enables2(arg0: number[]): void;
      setTextureLightsEnables1(arg0: number[]): void;
      setTextureLightsEnables2(arg0: number[]): void;
      setTexturePainColor(arg0: org.joml.Vector3f, arg1: number): void;
      setTextureRustA(arg0: number): void;
      setTextureUninstall1(arg0: number[]): void;
      setTextureUninstall2(arg0: number[]): void;
      setTint(arg0: number, arg1: number, arg2: number): void;
      setTransformMatrix(arg0: org.lwjgl.util.vector.Matrix4f, arg1: boolean): void;
      startCharacter(arg0: zombie.core.skinnedmodel.model.ModelSlotRenderData, arg1: zombie.core.skinnedmodel.model.ModelInstanceRenderData): void;
      toString(): string;
      updateAlpha(arg0: zombie.characters.IsoGameCharacter, arg1: number): void;
      updateParams(): void;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.core.skinnedmodel.visual {
    // zombie.core.skinnedmodel.visual.BaseVisual extends java.lang.Object
    export class BaseVisual {
      private constructor();
      createModelInstance(): zombie.core.skinnedmodel.model.ModelInstance;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      notify(): void;
      notifyAll(): void;
      save(arg0: java.nio.ByteBuffer): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.visual.HumanVisual extends zombie.core.skinnedmodel.visual.BaseVisual
    export class HumanVisual {
      private constructor();
      zombieRotStage: number;
  
      GetMask(arg0: zombie.core.skinnedmodel.visual.ItemVisuals): zombie.core.skinnedmodel.model.CharacterMask;
      addBodyVisual(arg0: string): zombie.core.skinnedmodel.visual.ItemVisual;
      addClothingItem(arg0: zombie.core.skinnedmodel.visual.ItemVisuals, arg1: zombie.scripting.objects.Item): zombie.core.skinnedmodel.visual.ItemVisual;
      clear(): void;
      copyFrom(arg0: zombie.core.skinnedmodel.visual.HumanVisual): void;
      createModelInstance(): zombie.core.skinnedmodel.model.ModelInstance;
      dressInClothingItem(arg0: string, arg1: zombie.core.skinnedmodel.visual.ItemVisuals): void;
      dressInNamedOutfit(arg0: string, arg1: zombie.core.skinnedmodel.visual.ItemVisuals): void;
      equals(arg0: any): boolean;
      getBeardColor(): zombie.core.ImmutableColor;
      getBeardModel(): string;
      getBlood(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getBodyHairIndex(): number;
      getBodyVisuals(): zombie.core.skinnedmodel.visual.ItemVisuals;
      getClass(): java.lang.Class<any>;
      getDirt(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getHairColor(): zombie.core.ImmutableColor;
      getHairModel(): string;
      getHole(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getLastStandString(): string;
      getNonAttachedHair(): string;
      getOutfit(): zombie.core.skinnedmodel.population.Outfit;
      getSkinColor(): zombie.core.ImmutableColor;
      getSkinTexture(): string;
      getSkinTextureIndex(): number;
      getTotalBlood(): number;
      hashCode(): number;
      isFemale(): boolean;
      isSkeleton(): boolean;
      isZombie(): boolean;
      lerp(arg0: number, arg1: number, arg2: number): number;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadLastStandString(arg0: string): boolean;
      notify(): void;
      notifyAll(): void;
      pickRandomZombieRotStage(): number;
      randomBlood(): void;
      randomDirt(): void;
      removeBlood(): void;
      removeDirt(): void;
      save(arg0: java.nio.ByteBuffer): void;
      setBeardColor(arg0: zombie.core.ImmutableColor): void;
      setBeardModel(arg0: string): void;
      setBlood(arg0: zombie.characterTextures.BloodBodyPartType, arg1: number): void;
      setBodyHairIndex(arg0: number): void;
      setDirt(arg0: zombie.characterTextures.BloodBodyPartType, arg1: number): void;
      setHairColor(arg0: zombie.core.ImmutableColor): void;
      setHairModel(arg0: string): void;
      setHole(arg0: zombie.characterTextures.BloodBodyPartType): void;
      setNonAttachedHair(arg0: string): void;
      setOutfit(arg0: zombie.core.skinnedmodel.population.Outfit): void;
      setSkinColor(arg0: zombie.core.ImmutableColor): void;
      setSkinTextureIndex(arg0: number): void;
      setSkinTextureName(arg0: string): void;
      synchWithOutfit(arg0: zombie.core.skinnedmodel.population.Outfit): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.visual.ItemVisual extends zombie.core.skinnedmodel.visual.BaseVisual
    export class ItemVisual {
      private constructor();
      static readonly NULL_HUE: number;
      m_BaseTexture: number;
      m_Decal?: string;
      m_Hue: number;
      m_TextureChoice: number;
      m_Tint?: zombie.core.ImmutableColor;
  
      copyBlood(arg0: zombie.core.skinnedmodel.visual.ItemVisual): void;
      copyDirt(arg0: zombie.core.skinnedmodel.visual.ItemVisual): void;
      copyFrom(arg0: zombie.core.skinnedmodel.visual.ItemVisual): void;
      copyHoles(arg0: zombie.core.skinnedmodel.visual.ItemVisual): void;
      copyPatches(arg0: zombie.core.skinnedmodel.visual.ItemVisual): void;
      createLastStandItem(arg0: string): zombie.inventory.InventoryItem;
      createModelInstance(): zombie.core.skinnedmodel.model.ModelInstance;
      equals(arg0: any): boolean;
      getAlternateModelName(): string;
      getBaseTexture(): number;
      getBasicPatch(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getBasicPatchesNumber(): number;
      getBlood(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getClass(): java.lang.Class<any>;
      getClothingItem(): zombie.core.skinnedmodel.population.ClothingItem;
      getClothingItemCombinedMask(arg0: zombie.core.skinnedmodel.model.CharacterMask): void;
      getClothingItemName(): string;
      getDecal(arg0: zombie.core.skinnedmodel.population.ClothingItem): string;
      getDenimPatch(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getDirt(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getHole(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getHolesNumber(): number;
      getHue(arg0: zombie.core.skinnedmodel.population.ClothingItem): number;
      getInventoryItem(): zombie.inventory.InventoryItem;
      getItemType(): string;
      getLastStandString(): string;
      getLeatherPatch(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getScriptItem(): zombie.scripting.objects.Item;
      getTextureChoice(): number;
      getTint(arg0: zombie.core.skinnedmodel.population.ClothingItem): zombie.core.ImmutableColor;
      getTotalBlood(): number;
      hashCode(): number;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      notify(): void;
      notifyAll(): void;
      pickUninitializedValues(arg0: zombie.core.skinnedmodel.population.ClothingItem): void;
      removeBlood(): void;
      removeDirt(): void;
      removeHole(arg0: number): void;
      removePatch(arg0: number): void;
      save(arg0: java.nio.ByteBuffer): void;
      setAlternateModelName(arg0: string): void;
      setBaseTexture(arg0: number): void;
      setBasicPatch(arg0: zombie.characterTextures.BloodBodyPartType): void;
      setBlood(arg0: zombie.characterTextures.BloodBodyPartType, arg1: number): void;
      setClothingItemName(arg0: string): void;
      setDecal(arg0: string): void;
      setDenimPatch(arg0: zombie.characterTextures.BloodBodyPartType): void;
      setDirt(arg0: zombie.characterTextures.BloodBodyPartType, arg1: number): void;
      setHole(arg0: zombie.characterTextures.BloodBodyPartType): void;
      setHue(arg0: number): void;
      setInventoryItem(arg0: zombie.inventory.InventoryItem): void;
      setItemType(arg0: string): void;
      setLeatherPatch(arg0: zombie.characterTextures.BloodBodyPartType): void;
      setTextureChoice(arg0: number): void;
      setTint(arg0: zombie.core.ImmutableColor): void;
      synchWithOutfit(arg0: zombie.core.skinnedmodel.population.ClothingItemReference): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.skinnedmodel.visual.ItemVisuals extends java.util.ArrayList<zombie.core.skinnedmodel.visual.ItemVisual>
    export class ItemVisuals {
      private constructor();
      add(arg0: number, arg1: zombie.core.skinnedmodel.visual.ItemVisual): void;
      addAll(arg0: number, arg1: java.util.Collection<zombie.core.skinnedmodel.visual.ItemVisual>): boolean;
      clear(): void;
      clone(): any;
      contains(arg0: any): boolean;
      containsAll(arg0: java.util.Collection<any>): boolean;
      ensureCapacity(arg0: number): void;
      equals(arg0: any): boolean;
      findHat(): zombie.core.skinnedmodel.visual.ItemVisual;
      findMask(): zombie.core.skinnedmodel.visual.ItemVisual;
      forEach(arg0: java.util._function.Consumer<zombie.core.skinnedmodel.visual.ItemVisual>): void;
      get(arg0: number): zombie.core.skinnedmodel.visual.ItemVisual;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      indexOf(arg0: any): number;
      isEmpty(): boolean;
      iterator(): java.util.Iterator<zombie.core.skinnedmodel.visual.ItemVisual>;
      lastIndexOf(arg0: any): number;
      listIterator(arg0: number): java.util.ListIterator<zombie.core.skinnedmodel.visual.ItemVisual>;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      notify(): void;
      notifyAll(): void;
      parallelStream(): java.util.stream.Stream<zombie.core.skinnedmodel.visual.ItemVisual>;
      remove(arg0: number): zombie.core.skinnedmodel.visual.ItemVisual;
      removeAll(arg0: java.util.Collection<any>): boolean;
      removeIf(arg0: java.util._function.Predicate<zombie.core.skinnedmodel.visual.ItemVisual>): boolean;
      replaceAll(arg0: java.util._function.UnaryOperator<zombie.core.skinnedmodel.visual.ItemVisual>): void;
      retainAll(arg0: java.util.Collection<any>): boolean;
      save(arg0: java.nio.ByteBuffer): void;
      set(arg0: number, arg1: zombie.core.skinnedmodel.visual.ItemVisual): zombie.core.skinnedmodel.visual.ItemVisual;
      size(): number;
      sort(arg0: java.util.Comparator<zombie.core.skinnedmodel.visual.ItemVisual>): void;
      spliterator(): java.util.Spliterator<zombie.core.skinnedmodel.visual.ItemVisual>;
      stream(): java.util.stream.Stream<zombie.core.skinnedmodel.visual.ItemVisual>;
      subList(arg0: number, arg1: number): java.util.List<zombie.core.skinnedmodel.visual.ItemVisual>;
      toArray<T>(arg0: java.util._function.IntFunction<T[]>): T[];
      toString(): string;
      trimToSize(): void;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.core.sprite {
    // zombie.core.sprite.GenericSpriteRenderState extends java.lang.Object
    export class GenericSpriteRenderState {
      private constructor();
      static readonly UVCA_CIRCLE: number;
      static readonly UVCA_NOCIRCLE: number;
      static readonly UVCA_NONE: number;
      bCursorVisible: boolean;
      bRendered: boolean;
      defaultStyle?: zombie.core.Styles.AbstractStyle;
      fbo?: zombie.core.textures.TextureFBO;
      readonly index: number;
      numSprites: number;
      readonly postRender?: java.util.ArrayList<zombie.core.textures.TextureDraw>;
      sprite?: zombie.core.textures.TextureDraw[];
      style?: zombie.core.Styles.Style[];
  
      CheckSpriteSlots(): void;
      EndShader(): void;
      ShaderUpdate1f(arg0: number, arg1: number, arg2: number): void;
      ShaderUpdate1i(arg0: number, arg1: number, arg2: number): void;
      ShaderUpdate2f(arg0: number, arg1: number, arg2: number, arg3: number): void;
      ShaderUpdate3f(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      ShaderUpdate4f(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
      StartShader(arg0: number, arg1: number): void;
      clear(): void;
      clearCutawayTexture(): void;
      clearSprites(arg0: java.util.List<zombie.core.textures.TextureDraw>): void;
      clearUseVertColorsArray(): void;
      doCoreIntParam(arg0: number, arg1: number): void;
      drawGeneric(arg0: zombie.core.textures.TextureDraw$GenericDrawer): void;
      drawModel(arg0: zombie.core.skinnedmodel.ModelManager$ModelSlot): void;
      drawParticles(arg0: number, arg1: number, arg2: number): void;
      drawPuddles(arg0: zombie.core.opengl.Shader, arg1: number, arg2: number, arg3: number): void;
      drawSkyBox(arg0: zombie.core.opengl.Shader, arg1: number, arg2: number, arg3: number): void;
      drawWater(arg0: zombie.core.opengl.Shader, arg1: number, arg2: number, arg3: boolean): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      glAlphaFunc(arg0: number, arg1: number): void;
      glBind(arg0: number): void;
      glBlendEquation(arg0: number): void;
      glBlendFunc(arg0: number, arg1: number): void;
      glBlendFuncSeparate(arg0: number, arg1: number, arg2: number, arg3: number): void;
      glBuffer(arg0: number, arg1: number): void;
      glClear(arg0: number): void;
      glClearColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      glColorMask(arg0: number, arg1: number, arg2: number, arg3: number): void;
      glDepthMask(arg0: boolean): void;
      glDisable(arg0: number): void;
      glDoEndFrame(): void;
      glDoEndFrameFx(arg0: number): void;
      glDoStartFrame(arg0: number, arg1: number, arg2: number, arg3: number, arg4: boolean): void;
      glDoStartFrameFx(arg0: number, arg1: number, arg2: number): void;
      glEnable(arg0: number): void;
      glGenerateMipMaps(arg0: number): void;
      glIgnoreStyles(arg0: boolean): void;
      glLoadIdentity(): void;
      glStencilFunc(arg0: number, arg1: number, arg2: number): void;
      glStencilMask(arg0: number): void;
      glStencilOp(arg0: number, arg1: number, arg2: number): void;
      glTexParameteri(arg0: number, arg1: number, arg2: number): void;
      glViewport(arg0: number, arg1: number, arg2: number, arg3: number): void;
      hashCode(): number;
      isReady(): boolean;
      isRendered(): boolean;
      isRendering(): boolean;
      notify(): void;
      notifyAll(): void;
      onReady(): void;
      onRenderAcquired(): void;
      onRendered(): void;
      render(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number, arg12: number, arg13: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderPoly(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number, arg12: number, arg13: number, arg14: number, arg15: number, arg16: number, arg17: number, arg18: number, arg19: number, arg20: number): void;
      renderRect(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      renderdebug(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number, arg12: number, arg13: number, arg14: number, arg15: number, arg16: number, arg17: number, arg18: number, arg19: number, arg20: number, arg21: number, arg22: number, arg23: number, arg24: number, arg25: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderflipped(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderline(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number): void;
      setCutawayTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number): void;
      setExtraWallShaderParams(arg0: zombie.core.SpriteRenderer$WallShaderTexRender): void;
      setUseVertColorsArray(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.sprite.SpriteRenderState extends zombie.core.sprite.GenericSpriteRenderState
    export class SpriteRenderState {
      private constructor();
      static readonly UVCA_CIRCLE: number;
      static readonly UVCA_NOCIRCLE: number;
      static readonly UVCA_NONE: number;
      bCursorVisible: boolean;
      bRendered: boolean;
      defaultStyle?: zombie.core.Styles.AbstractStyle;
      fbo?: zombie.core.textures.TextureFBO;
      readonly index: number;
      maxZoomLevel: number;
      minZoomLevel: number;
      numSprites: number;
      readonly playerAmbient?: number[];
      readonly playerCamera?: zombie.iso.PlayerCamera[];
      playerIndex: number;
      readonly postRender?: java.util.ArrayList<zombie.core.textures.TextureDraw>;
      sprite?: zombie.core.textures.TextureDraw[];
      readonly stateUI?: zombie.core.sprite.SpriteRenderStateUI;
      style?: zombie.core.Styles.Style[];
      time: number;
      readonly zoomLevel?: number[];
  
      CheckSpriteSlots(): void;
      EndShader(): void;
      ShaderUpdate1f(arg0: number, arg1: number, arg2: number): void;
      ShaderUpdate1i(arg0: number, arg1: number, arg2: number): void;
      ShaderUpdate2f(arg0: number, arg1: number, arg2: number, arg3: number): void;
      ShaderUpdate3f(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      ShaderUpdate4f(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
      StartShader(arg0: number, arg1: number): void;
      clear(): void;
      clearCutawayTexture(): void;
      clearSprites(arg0: java.util.List<zombie.core.textures.TextureDraw>): void;
      clearUseVertColorsArray(): void;
      doCoreIntParam(arg0: number, arg1: number): void;
      drawGeneric(arg0: zombie.core.textures.TextureDraw$GenericDrawer): void;
      drawModel(arg0: zombie.core.skinnedmodel.ModelManager$ModelSlot): void;
      drawParticles(arg0: number, arg1: number, arg2: number): void;
      drawPuddles(arg0: zombie.core.opengl.Shader, arg1: number, arg2: number, arg3: number): void;
      drawSkyBox(arg0: zombie.core.opengl.Shader, arg1: number, arg2: number, arg3: number): void;
      drawWater(arg0: zombie.core.opengl.Shader, arg1: number, arg2: number, arg3: boolean): void;
      equals(arg0: any): boolean;
      getActiveState(): zombie.core.sprite.GenericSpriteRenderState;
      getClass(): java.lang.Class<any>;
      glAlphaFunc(arg0: number, arg1: number): void;
      glBind(arg0: number): void;
      glBlendEquation(arg0: number): void;
      glBlendFunc(arg0: number, arg1: number): void;
      glBlendFuncSeparate(arg0: number, arg1: number, arg2: number, arg3: number): void;
      glBuffer(arg0: number, arg1: number): void;
      glClear(arg0: number): void;
      glClearColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      glColorMask(arg0: number, arg1: number, arg2: number, arg3: number): void;
      glDepthMask(arg0: boolean): void;
      glDisable(arg0: number): void;
      glDoEndFrame(): void;
      glDoEndFrameFx(arg0: number): void;
      glDoStartFrame(arg0: number, arg1: number, arg2: number, arg3: number, arg4: boolean): void;
      glDoStartFrameFx(arg0: number, arg1: number, arg2: number): void;
      glEnable(arg0: number): void;
      glGenerateMipMaps(arg0: number): void;
      glIgnoreStyles(arg0: boolean): void;
      glLoadIdentity(): void;
      glStencilFunc(arg0: number, arg1: number, arg2: number): void;
      glStencilMask(arg0: number): void;
      glStencilOp(arg0: number, arg1: number, arg2: number): void;
      glTexParameteri(arg0: number, arg1: number, arg2: number): void;
      glViewport(arg0: number, arg1: number, arg2: number, arg3: number): void;
      hashCode(): number;
      isReady(): boolean;
      isRendered(): boolean;
      isRendering(): boolean;
      notify(): void;
      notifyAll(): void;
      onReady(): void;
      onRenderAcquired(): void;
      onRendered(): void;
      prePopulating(): void;
      render(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number, arg12: number, arg13: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderPoly(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number, arg12: number, arg13: number, arg14: number, arg15: number, arg16: number, arg17: number, arg18: number, arg19: number, arg20: number): void;
      renderRect(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      renderdebug(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number, arg12: number, arg13: number, arg14: number, arg15: number, arg16: number, arg17: number, arg18: number, arg19: number, arg20: number, arg21: number, arg22: number, arg23: number, arg24: number, arg25: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderflipped(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderline(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number): void;
      setCutawayTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number): void;
      setExtraWallShaderParams(arg0: zombie.core.SpriteRenderer$WallShaderTexRender): void;
      setUseVertColorsArray(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.sprite.SpriteRenderStateUI extends zombie.core.sprite.GenericSpriteRenderState
    export class SpriteRenderStateUI {
      private constructor();
      static readonly UVCA_CIRCLE: number;
      static readonly UVCA_NOCIRCLE: number;
      static readonly UVCA_NONE: number;
      bActive: boolean;
      bCursorVisible: boolean;
      bRendered: boolean;
      defaultStyle?: zombie.core.Styles.AbstractStyle;
      fbo?: zombie.core.textures.TextureFBO;
      readonly index: number;
      numSprites: number;
      readonly postRender?: java.util.ArrayList<zombie.core.textures.TextureDraw>;
      sprite?: zombie.core.textures.TextureDraw[];
      style?: zombie.core.Styles.Style[];
  
      CheckSpriteSlots(): void;
      EndShader(): void;
      ShaderUpdate1f(arg0: number, arg1: number, arg2: number): void;
      ShaderUpdate1i(arg0: number, arg1: number, arg2: number): void;
      ShaderUpdate2f(arg0: number, arg1: number, arg2: number, arg3: number): void;
      ShaderUpdate3f(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      ShaderUpdate4f(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
      StartShader(arg0: number, arg1: number): void;
      clear(): void;
      clearCutawayTexture(): void;
      clearSprites(arg0: java.util.List<zombie.core.textures.TextureDraw>): void;
      clearUseVertColorsArray(): void;
      doCoreIntParam(arg0: number, arg1: number): void;
      drawGeneric(arg0: zombie.core.textures.TextureDraw$GenericDrawer): void;
      drawModel(arg0: zombie.core.skinnedmodel.ModelManager$ModelSlot): void;
      drawParticles(arg0: number, arg1: number, arg2: number): void;
      drawPuddles(arg0: zombie.core.opengl.Shader, arg1: number, arg2: number, arg3: number): void;
      drawSkyBox(arg0: zombie.core.opengl.Shader, arg1: number, arg2: number, arg3: number): void;
      drawWater(arg0: zombie.core.opengl.Shader, arg1: number, arg2: number, arg3: boolean): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      glAlphaFunc(arg0: number, arg1: number): void;
      glBind(arg0: number): void;
      glBlendEquation(arg0: number): void;
      glBlendFunc(arg0: number, arg1: number): void;
      glBlendFuncSeparate(arg0: number, arg1: number, arg2: number, arg3: number): void;
      glBuffer(arg0: number, arg1: number): void;
      glClear(arg0: number): void;
      glClearColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      glColorMask(arg0: number, arg1: number, arg2: number, arg3: number): void;
      glDepthMask(arg0: boolean): void;
      glDisable(arg0: number): void;
      glDoEndFrame(): void;
      glDoEndFrameFx(arg0: number): void;
      glDoStartFrame(arg0: number, arg1: number, arg2: number, arg3: number, arg4: boolean): void;
      glDoStartFrameFx(arg0: number, arg1: number, arg2: number): void;
      glEnable(arg0: number): void;
      glGenerateMipMaps(arg0: number): void;
      glIgnoreStyles(arg0: boolean): void;
      glLoadIdentity(): void;
      glStencilFunc(arg0: number, arg1: number, arg2: number): void;
      glStencilMask(arg0: number): void;
      glStencilOp(arg0: number, arg1: number, arg2: number): void;
      glTexParameteri(arg0: number, arg1: number, arg2: number): void;
      glViewport(arg0: number, arg1: number, arg2: number, arg3: number): void;
      hashCode(): number;
      isReady(): boolean;
      isRendered(): boolean;
      isRendering(): boolean;
      notify(): void;
      notifyAll(): void;
      onReady(): void;
      onRenderAcquired(): void;
      onRendered(): void;
      render(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number, arg12: number, arg13: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderPoly(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number, arg12: number, arg13: number, arg14: number, arg15: number, arg16: number, arg17: number, arg18: number, arg19: number, arg20: number): void;
      renderRect(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      renderdebug(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number, arg12: number, arg13: number, arg14: number, arg15: number, arg16: number, arg17: number, arg18: number, arg19: number, arg20: number, arg21: number, arg22: number, arg23: number, arg24: number, arg25: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderflipped(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderline(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number): void;
      setCutawayTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number): void;
      setExtraWallShaderParams(arg0: zombie.core.SpriteRenderer$WallShaderTexRender): void;
      setUseVertColorsArray(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.sprite.SpriteRendererStates extends java.lang.Object
    export class SpriteRendererStates {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getPopulating(): zombie.core.sprite.SpriteRenderState;
      getPopulatingActiveState(): zombie.core.sprite.GenericSpriteRenderState;
      getReady(): zombie.core.sprite.SpriteRenderState;
      getRendered(): zombie.core.sprite.SpriteRenderState;
      getRendering(): zombie.core.sprite.SpriteRenderState;
      getRenderingActiveState(): zombie.core.sprite.GenericSpriteRenderState;
      hashCode(): number;
      movePopulatingToReady(): void;
      moveReadyToRendering(): void;
      notify(): void;
      notifyAll(): void;
      setPopulating(arg0: zombie.core.sprite.SpriteRenderState): void;
      setReady(arg0: zombie.core.sprite.SpriteRenderState): void;
      setRendered(arg0: zombie.core.sprite.SpriteRenderState): void;
      setRendering(arg0: zombie.core.sprite.SpriteRenderState): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.core.stash {
    // zombie.core.stash.Stash extends java.lang.Object
    export class Stash {
      private constructor();
      annotations?: java.util.ArrayList<zombie.core.stash.StashAnnotation>;
      barricades: number;
      buildingX: number;
      buildingY: number;
      containers?: java.util.ArrayList<zombie.core.stash.StashContainer>;
      customName?: string;
      item?: string;
      maxDayToSpawn: number;
      maxTrapToSpawn: number;
      minDayToSpawn: number;
      minTrapToSpawn: number;
      name?: string;
      spawnOnlyOnZed: boolean;
      spawnTable?: string;
      type?: string;
      zombies: number;
  
      equals(arg0: any): boolean;
      getBuildingX(): number;
      getBuildingY(): number;
      getClass(): java.lang.Class<any>;
      getItem(): string;
      getName(): string;
      hashCode(): number;
      load(arg0: se.krka.kahlua.j2se.KahluaTableImpl): void;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.stash.StashAnnotation extends java.lang.Object
    export class StashAnnotation {
      private constructor();
      b: number;
      g: number;
      r: number;
      symbol?: string;
      text?: string;
      x: number;
      y: number;
  
      equals(arg0: any): boolean;
      fromLua(arg0: se.krka.kahlua.vm.KahluaTable): void;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.stash.StashBuilding extends java.lang.Object
    export class StashBuilding {
      private constructor();
      buildingX: number;
      buildingY: number;
      stashName?: string;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getName(): string;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.stash.StashContainer extends java.lang.Object
    export class StashContainer {
      private constructor();
      contX: number;
      contY: number;
      contZ: number;
      containerItem?: string;
      containerSprite?: string;
      containerType?: string;
      room?: string;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.stash.StashSystem extends java.lang.Object
    export class StashSystem {
      private constructor();
      static allStashes?: java.util.ArrayList<zombie.core.stash.Stash>;
      static buildingsToDo?: java.util.ArrayList<zombie.core.stash.StashBuilding>;
      static possibleStashes?: java.util.ArrayList<zombie.core.stash.StashBuilding>;
  
      Reset(): void;
      checkStashItem(arg0: zombie.inventory.InventoryItem): void;
      doBuildingStash(arg0: zombie.iso.BuildingDef): void;
      doStashItem(arg0: zombie.core.stash.Stash, arg1: zombie.inventory.InventoryItem): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getPossibleStashes(): java.util.ArrayList<zombie.core.stash.StashBuilding>;
      getStash(arg0: string): zombie.core.stash.Stash;
      hashCode(): number;
      init(): void;
      initAllStashes(): void;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      notify(): void;
      notifyAll(): void;
      prepareBuildingStash(arg0: string): void;
      reinit(): void;
      save(arg0: java.nio.ByteBuffer): void;
      toString(): string;
      visitedBuilding(arg0: zombie.iso.BuildingDef): void;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.core.textures {
    // zombie.core.textures.ColorInfo extends java.lang.Object
    export class ColorInfo {
      private constructor();
      a: number;
      b: number;
      g: number;
      r: number;
  
      desaturate(arg0: number): void;
      equals(arg0: any): boolean;
      getA(): number;
      getB(): number;
      getClass(): java.lang.Class<any>;
      getG(): number;
      getR(): number;
      hashCode(): number;
      interp(arg0: zombie.core.textures.ColorInfo, arg1: number, arg2: zombie.core.textures.ColorInfo): void;
      notify(): void;
      notifyAll(): void;
      set(arg0: number, arg1: number, arg2: number, arg3: number): zombie.core.textures.ColorInfo;
      toColor(): zombie.core.Color;
      toImmutableColor(): zombie.core.ImmutableColor;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.textures.IGLFramebufferObject
    export class IGLFramebufferObject {
      private constructor();
      GL_COLOR_ATTACHMENT0(): number;
      GL_DEPTH24_STENCIL8(): number;
      GL_DEPTH_ATTACHMENT(): number;
      GL_DEPTH_STENCIL(): number;
      GL_FRAMEBUFFER(): number;
      GL_FRAMEBUFFER_COMPLETE(): number;
      GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT(): number;
      GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS(): number;
      GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER(): number;
      GL_FRAMEBUFFER_INCOMPLETE_FORMATS(): number;
      GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT(): number;
      GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE(): number;
      GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER(): number;
      GL_FRAMEBUFFER_UNDEFINED(): number;
      GL_FRAMEBUFFER_UNSUPPORTED(): number;
      GL_RENDERBUFFER(): number;
      GL_STENCIL_ATTACHMENT(): number;
      glBindFramebuffer(arg0: number, arg1: number): void;
      glBindRenderbuffer(arg0: number, arg1: number): void;
      glCheckFramebufferStatus(arg0: number): number;
      glDeleteFramebuffers(arg0: number): void;
      glDeleteRenderbuffers(arg0: number): void;
      glFramebufferRenderbuffer(arg0: number, arg1: number, arg2: number, arg3: number): void;
      glFramebufferTexture2D(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      glGenFramebuffers(): number;
      glGenRenderbuffers(): number;
      glRenderbufferStorage(arg0: number, arg1: number, arg2: number, arg3: number): void;
    }
    // zombie.core.textures.ImageData extends java.lang.Object
    export class ImageData {
      private constructor();
      static readonly MIP_LEVEL_IDX_OFFSET: number;
      data?: zombie.core.textures.MipMapLevel;
      id: number;
      mask?: zombie.core.utils.BooleanGrid;
  
      calculateNumMips(arg0: number, arg1: number): number;
      createSteamAvatar(arg0: number): zombie.core.textures.ImageData;
      dispose(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getData(): zombie.core.textures.MipMapLevel;
      getHeight(): number;
      getHeightHW(): number;
      getMipMapCount(): number;
      getMipMapData(arg0: number): zombie.core.textures.MipMapLevel;
      getNextMipDimension(arg0: number): number;
      getPixelClamped(arg0: java.nio.ByteBuffer, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number[]): number[];
      getPixelDiscard(arg0: java.nio.ByteBuffer, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number[]): number;
      getWidth(): number;
      getWidthHW(): number;
      hashCode(): number;
      initMipMaps(): void;
      isSolid(): boolean;
      makeTransp(arg0: number, arg1: number, arg2: number, arg3: number): void;
      notify(): void;
      notifyAll(): void;
      setData(arg0: java.awt.image.BufferedImage): void;
      setPixel(arg0: java.nio.ByteBuffer, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number[]): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.textures.Mask extends java.lang.Object
    export class Mask {
      private constructor();
      clone(): any;
      equals(arg0: any): boolean;
      full(): void;
      get(arg0: number, arg1: number): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      save(arg0: string): void;
      set(arg0: number, arg1: number, arg2: boolean): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.textures.MipMapLevel extends java.lang.Object
    export class MipMapLevel {
      private constructor();
      readonly data?: zombie.core.utils.WrappedBuffer;
      readonly height: number;
      readonly width: number;
  
      dispose(): void;
      equals(arg0: any): boolean;
      getBuffer(): java.nio.ByteBuffer;
      getClass(): java.lang.Class<any>;
      getDataSize(): number;
      hashCode(): number;
      isDisposed(): boolean;
      notify(): void;
      notifyAll(): void;
      rewind(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.textures.MultiTextureFBO2 extends java.lang.Object
    export class MultiTextureFBO2 {
      private constructor();
      Current?: zombie.core.textures.TextureFBO;
      FBOrendered?: zombie.core.textures.TextureFBO;
      readonly bAutoZoom?: boolean[];
      bZoomEnabled: boolean;
      readonly startZoom?: number[];
      readonly targetZoom?: number[];
      readonly zoom?: number[];
  
      create(arg0: number, arg1: number): void;
      destroy(): void;
      doZoomScroll(arg0: number, arg1: number): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getCurrent(arg0: number): zombie.core.textures.TextureFBO;
      getDefaultZoomLevels(): java.util.ArrayList<number>;
      getHeight(arg0: number): number;
      getMaxZoom(): number;
      getMinZoom(): number;
      getNextZoom(arg0: number, arg1: number): number;
      getTexture(arg0: number): zombie.core.textures.Texture;
      getWidth(arg0: number): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      render(): void;
      setTargetZoom(arg0: number, arg1: number): void;
      setZoomLevelsFromOption(arg0: string): void;
      test(): boolean;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.core.textures.Texture extends zombie.asset.Asset
    export class Texture {
      private constructor();
      static readonly ASSET_TYPE?: zombie.asset.AssetType;
      static BindCount: number;
      static WarnFailFindTexture: boolean;
      assetParams?: zombie.core.textures.Texture$TextureAssetParams;
      static bDoingQuad: boolean;
      bindAlways: boolean;
      flip: boolean;
      static la: number;
      static lastTextureID: number;
      static lastlastTextureID: number;
      static lb: number;
      static lg: number;
      static lr: number;
      static readonly nullTextures?: java.util.HashSet<string>;
      offsetX: number;
      offsetY: number;
      static totalTextureID: number;
      xEnd: number;
      xStart: number;
      yEnd: number;
      yStart: number;
  
      addDependency(arg0: zombie.asset.Asset): void;
      bind(arg0: number): void;
      bindNone(): void;
      clearTextures(): void;
      collectAllIcons(arg0: java.util.HashMap<string, string>, arg1: java.util.HashMap<string, string>): void;
      copyMaskRegion(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number): void;
      createMask(arg0: zombie.core.utils.BooleanGrid): void;
      destroy(): void;
      equals(arg0: any): boolean;
      flipPixels(arg0: number[], arg1: number, arg2: number): number[];
      forgetTexture(arg0: string): void;
      getAssetManager(): zombie.asset.AssetManager;
      getClass(): java.lang.Class<any>;
      getData(): zombie.core.utils.WrappedBuffer;
      getEngineMipmapTexture(): zombie.core.textures.Texture;
      getErrorTexture(): zombie.core.textures.Texture;
      getHeight(): number;
      getHeightHW(): number;
      getHeightOrig(): number;
      getID(): number;
      getMask(): zombie.core.textures.Mask;
      getName(): string;
      getObserverCb(): zombie.asset.Asset$ObserverCallback;
      getOffsetX(): number;
      getOffsetY(): number;
      getPath(): zombie.asset.AssetPath;
      getRealHeight(): number;
      getRealWidth(): number;
      getRefCount(): number;
      getSharedTexture(arg0: string, arg1: number): zombie.core.textures.Texture;
      getState(): zombie.asset.Asset$State;
      getSteamAvatar(arg0: number): zombie.core.textures.Texture;
      getTexture(arg0: string): zombie.core.textures.Texture;
      getTextureId(): zombie.core.textures.TextureID;
      getType(): zombie.asset.AssetType;
      getUVScale(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getUseAlphaChannel(): boolean;
      getWhite(): zombie.core.textures.Texture;
      getWidth(): number;
      getWidthHW(): number;
      getWidthOrig(): number;
      getXEnd(): number;
      getXStart(): number;
      getYEnd(): number;
      getYStart(): number;
      hashCode(): number;
      isCollisionable(): boolean;
      isDestroyed(): boolean;
      isEmpty(): boolean;
      isFailure(): boolean;
      isReady(): boolean;
      isSolid(): boolean;
      isValid(): boolean;
      loadMaskRegion(arg0: java.nio.ByteBuffer): void;
      makeTransp(arg0: number, arg1: number, arg2: number): void;
      notify(): void;
      notifyAll(): void;
      onBeforeReady(): void;
      onCreated(arg0: zombie.asset.Asset$State): void;
      onTexturePacksChanged(): void;
      processFilePath(arg0: string): string;
      reload(arg0: string): void;
      reloadFromFile(arg0: string): void;
      removeDependency(arg0: zombie.asset.Asset): void;
      render(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderdiamond(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      rendershader2(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number): void;
      renderstrip(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderwalln(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      renderwallnw(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number): void;
      renderwallw(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      save(arg0: string): void;
      saveMask(arg0: string): void;
      saveMaskRegion(arg0: java.nio.ByteBuffer): void;
      setAlphaForeach(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setAssetParams(arg0: zombie.asset.AssetManager$AssetParams): void;
      setCustomizedTexture(): void;
      setData(arg0: java.nio.ByteBuffer): void;
      setHeight(arg0: number): void;
      setMask(arg0: zombie.core.textures.Mask): void;
      setName(arg0: string): void;
      setNameOnly(arg0: string): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setRealHeight(arg0: number): void;
      setRealWidth(arg0: number): void;
      setRegion(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setUseAlphaChannel(arg0: boolean): void;
      setWidth(arg0: number): void;
      split(arg0: number, arg1: number, arg2: number, arg3: number): zombie.core.textures.Texture;
      split2D(arg0: number[], arg1: number[]): zombie.core.textures.Texture[][];
      splitIcon(): zombie.core.textures.Texture;
      steamAvatarChanged(arg0: number): void;
      toString(): string;
      trygetTexture(arg0: string): zombie.core.textures.Texture;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.core.textures.Texture$PZFileformat */
    export class Texture$PZFileformat {
      /* ENUM VALUES */
      static readonly DDS: Texture$PZFileformat; 
      static readonly PNG: Texture$PZFileformat; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.core.textures.Texture$PZFileformat[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): Texture$PZFileformat;
      valueOf(arg0: string): zombie.core.textures.Texture$PZFileformat;
      values(): zombie.core.textures.Texture$PZFileformat[];
    }
    // zombie.core.textures.Texture$TextureAssetParams extends zombie.asset.AssetManager$AssetParams
    export class Texture$TextureAssetParams {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.textures.TextureDraw extends java.lang.Object
    export class TextureDraw {
      private constructor();
      a: number;
      b: number;
      bSingleCol: boolean;
      c: number;
      col0: number;
      col1: number;
      col2: number;
      col3: number;
      d: number;
      drawer?: zombie.core.textures.TextureDraw$GenericDrawer;
      f1: number;
      flipped: boolean;
      tex?: zombie.core.textures.Texture;
      tex1?: zombie.core.textures.Texture;
      tex1_col0: number;
      tex1_col1: number;
      tex1_col2: number;
      tex1_col3: number;
      tex1_u0: number;
      tex1_u1: number;
      tex1_u2: number;
      tex1_u3: number;
      tex1_v0: number;
      tex1_v1: number;
      tex1_v2: number;
      tex1_v3: number;
      type?: zombie.core.textures.TextureDraw$Type;
      u0: number;
      u1: number;
      u2: number;
      u3: number;
      useAttribArray: number;
      v0: number;
      v1: number;
      v2: number;
      v3: number;
      vars?: number[];
      x0: number;
      x1: number;
      x2: number;
      x3: number;
      y0: number;
      y1: number;
      y2: number;
      y3: number;
  
      Create(arg0: zombie.core.textures.TextureDraw, arg1: zombie.core.textures.Texture, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number, arg12: number, arg13: number): void;
      ShaderUpdate1f(arg0: zombie.core.textures.TextureDraw, arg1: number, arg2: number, arg3: number): void;
      ShaderUpdate1i(arg0: zombie.core.textures.TextureDraw, arg1: number, arg2: number, arg3: number): void;
      ShaderUpdate2f(arg0: zombie.core.textures.TextureDraw, arg1: number, arg2: number, arg3: number, arg4: number): void;
      ShaderUpdate3f(arg0: zombie.core.textures.TextureDraw, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
      ShaderUpdate4f(arg0: zombie.core.textures.TextureDraw, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      StartShader(arg0: zombie.core.textures.TextureDraw, arg1: number): void;
      doCoreIntParam(arg0: zombie.core.textures.TextureDraw, arg1: number, arg2: number): void;
      drawModel(arg0: zombie.core.textures.TextureDraw, arg1: zombie.core.skinnedmodel.ModelManager$ModelSlot): void;
      drawParticles(arg0: zombie.core.textures.TextureDraw, arg1: number, arg2: number, arg3: number): void;
      drawPuddles(arg0: zombie.core.textures.TextureDraw, arg1: zombie.core.opengl.Shader, arg2: number, arg3: number, arg4: number): void;
      drawSkyBox(arg0: zombie.core.textures.TextureDraw, arg1: zombie.core.opengl.Shader, arg2: number, arg3: number, arg4: number): void;
      drawWater(arg0: zombie.core.textures.TextureDraw, arg1: zombie.core.opengl.Shader, arg2: number, arg3: number, arg4: boolean): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getColor(arg0: number): number;
      glAlphaFunc(arg0: zombie.core.textures.TextureDraw, arg1: number, arg2: number): void;
      glBind(arg0: zombie.core.textures.TextureDraw, arg1: number): void;
      glBlendEquation(arg0: zombie.core.textures.TextureDraw, arg1: number): void;
      glBlendFunc(arg0: zombie.core.textures.TextureDraw, arg1: number, arg2: number): void;
      glBlendFuncSeparate(arg0: zombie.core.textures.TextureDraw, arg1: number, arg2: number, arg3: number, arg4: number): void;
      glBuffer(arg0: zombie.core.textures.TextureDraw, arg1: number, arg2: number): void;
      glClear(arg0: zombie.core.textures.TextureDraw, arg1: number): void;
      glClearColor(arg0: zombie.core.textures.TextureDraw, arg1: number, arg2: number, arg3: number, arg4: number): void;
      glColorMask(arg0: zombie.core.textures.TextureDraw, arg1: number, arg2: number, arg3: number, arg4: number): void;
      glDepthMask(arg0: zombie.core.textures.TextureDraw, arg1: boolean): void;
      glDisable(arg0: zombie.core.textures.TextureDraw, arg1: number): void;
      glDoEndFrame(arg0: zombie.core.textures.TextureDraw): void;
      glDoEndFrameFx(arg0: zombie.core.textures.TextureDraw, arg1: number): void;
      glDoStartFrame(arg0: zombie.core.textures.TextureDraw, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): void;
      glDoStartFrameFx(arg0: zombie.core.textures.TextureDraw, arg1: number, arg2: number, arg3: number): void;
      glEnable(arg0: zombie.core.textures.TextureDraw, arg1: number): void;
      glGenerateMipMaps(arg0: zombie.core.textures.TextureDraw, arg1: number): void;
      glIgnoreStyles(arg0: zombie.core.textures.TextureDraw, arg1: boolean): void;
      glLoadIdentity(arg0: zombie.core.textures.TextureDraw): void;
      glStencilFunc(arg0: zombie.core.textures.TextureDraw, arg1: number, arg2: number, arg3: number): void;
      glStencilMask(arg0: zombie.core.textures.TextureDraw, arg1: number): void;
      glStencilOp(arg0: zombie.core.textures.TextureDraw, arg1: number, arg2: number, arg3: number): void;
      glTexParameteri(arg0: zombie.core.textures.TextureDraw, arg1: number, arg2: number, arg3: number): void;
      glViewport(arg0: zombie.core.textures.TextureDraw, arg1: number, arg2: number, arg3: number, arg4: number): void;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      postRender(): void;
      reset(): void;
      run(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.textures.TextureDraw$GenericDrawer extends java.lang.Object
    export class TextureDraw$GenericDrawer {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      postRender(): void;
      render(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.core.textures.TextureDraw$Type */
    export class TextureDraw$Type {
      /* ENUM VALUES */
      static readonly BindActiveTexture: TextureDraw$Type; 
      static readonly DrawModel: TextureDraw$Type; 
      static readonly DrawParticles: TextureDraw$Type; 
      static readonly DrawPuddles: TextureDraw$Type; 
      static readonly DrawSkyBox: TextureDraw$Type; 
      static readonly DrawWater: TextureDraw$Type; 
      static readonly ShaderUpdate: TextureDraw$Type; 
      static readonly StartShader: TextureDraw$Type; 
      static readonly doCoreIntParam: TextureDraw$Type; 
      static readonly drawTerrain: TextureDraw$Type; 
      static readonly glAlphaFunc: TextureDraw$Type; 
      static readonly glBind: TextureDraw$Type; 
      static readonly glBlendEquation: TextureDraw$Type; 
      static readonly glBlendFunc: TextureDraw$Type; 
      static readonly glBlendFuncSeparate: TextureDraw$Type; 
      static readonly glBuffer: TextureDraw$Type; 
      static readonly glClear: TextureDraw$Type; 
      static readonly glClearColor: TextureDraw$Type; 
      static readonly glColorMask: TextureDraw$Type; 
      static readonly glDepthMask: TextureDraw$Type; 
      static readonly glDisable: TextureDraw$Type; 
      static readonly glDoEndFrame: TextureDraw$Type; 
      static readonly glDoEndFrameFx: TextureDraw$Type; 
      static readonly glDoStartFrame: TextureDraw$Type; 
      static readonly glDoStartFrameFx: TextureDraw$Type; 
      static readonly glDoStartFrameText: TextureDraw$Type; 
      static readonly glDraw: TextureDraw$Type; 
      static readonly glEnable: TextureDraw$Type; 
      static readonly glGenerateMipMaps: TextureDraw$Type; 
      static readonly glIgnoreStyles: TextureDraw$Type; 
      static readonly glLoadIdentity: TextureDraw$Type; 
      static readonly glStencilFunc: TextureDraw$Type; 
      static readonly glStencilMask: TextureDraw$Type; 
      static readonly glStencilOp: TextureDraw$Type; 
      static readonly glTexParameteri: TextureDraw$Type; 
      static readonly glViewport: TextureDraw$Type; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.core.textures.TextureDraw$Type[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): TextureDraw$Type;
      valueOf(arg0: string): zombie.core.textures.TextureDraw$Type;
      values(): zombie.core.textures.TextureDraw$Type[];
    }
    // zombie.core.textures.TextureFBO extends java.lang.Object
    export class TextureFBO {
      private constructor();
      checkFBOSupport(): boolean;
      destroy(): void;
      destroyLeaveTexture(): void;
      endDrawing(): void;
      equals(arg0: any): boolean;
      getBufferId(): number;
      getClass(): java.lang.Class<any>;
      getCurrentID(): number;
      getFuncs(): zombie.core.textures.IGLFramebufferObject;
      getHeight(): number;
      getTexture(): zombie.interfaces.ITexture;
      getWidth(): number;
      hashCode(): number;
      isDestroyed(): boolean;
      notify(): void;
      notifyAll(): void;
      releaseTexture(): void;
      reset(): void;
      setTexture(arg0: zombie.core.textures.Texture): void;
      startDrawing(): void;
      swapTexture(arg0: zombie.interfaces.ITexture): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.textures.TextureID extends zombie.asset.Asset
    export class TextureID {
      private constructor();
      static readonly ASSET_TYPE?: zombie.asset.AssetType;
      static UseFiltering: boolean;
      assetParams?: zombie.core.textures.TextureID$TextureIDAssetParams;
      static bUseCompression: boolean;
      static bUseCompressionOption: boolean;
      static readonly deleteTextureIDS?: java.nio.IntBuffer;
      static totalGraphicMemory: number;
      static totalMemUsed: number;
  
      addDependency(arg0: zombie.asset.Asset): void;
      bind(): boolean;
      bindalways(): boolean;
      createSteamAvatar(arg0: number): zombie.core.textures.TextureID;
      destroy(): void;
      equals(arg0: any): boolean;
      freeMemory(): void;
      getAssetManager(): zombie.asset.AssetManager;
      getClass(): java.lang.Class<any>;
      getData(): zombie.core.utils.WrappedBuffer;
      getID(): number;
      getImageData(): zombie.core.textures.ImageData;
      getObserverCb(): zombie.asset.Asset$ObserverCallback;
      getPath(): zombie.asset.AssetPath;
      getPathFileName(): string;
      getRefCount(): number;
      getState(): zombie.asset.Asset$State;
      getType(): zombie.asset.AssetType;
      hasMipMaps(): boolean;
      hashCode(): number;
      isDestroyed(): boolean;
      isEmpty(): boolean;
      isFailure(): boolean;
      isReady(): boolean;
      isSolid(): boolean;
      notify(): void;
      notifyAll(): void;
      onCreated(arg0: zombie.asset.Asset$State): void;
      removeDependency(arg0: zombie.asset.Asset): void;
      setAssetParams(arg0: zombie.asset.AssetManager$AssetParams): void;
      setData(arg0: java.nio.ByteBuffer): void;
      setImageData(arg0: zombie.core.textures.ImageData): void;
      setMagFilter(arg0: number): void;
      setMinFilter(arg0: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.textures.TextureID$TextureIDAssetParams extends zombie.asset.AssetManager$AssetParams
    export class TextureID$TextureIDAssetParams {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.textures.TexturePackPage extends java.lang.Object
    export class TexturePackPage {
      private constructor();
      static FoundTextures?: java.util.HashMap<string, java.util.Stack<string>>;
      static TempSubTextureInfo?: java.util.ArrayList<zombie.core.textures.TexturePackPage$SubTextureInfo>;
      static readonly TexturePackPageNameMap?: java.util.HashMap<string, string>;
      static bIgnoreWorldItemTextures: boolean;
      static chl1: number;
      static chl2: number;
      static chl3: number;
      static chl4: number;
      static readonly subTextureMap?: java.util.HashMap<string, zombie.core.textures.Texture>;
      static readonly subTextureMap2?: java.util.HashMap<string, zombie.core.textures.Texture>;
      readonly subTextures?: java.util.HashMap<string, zombie.core.textures.Texture>;
      static tempFilenameCheck?: java.util.ArrayList<string>;
      tex?: zombie.core.textures.Texture;
      static readonly texturePackPageMap?: java.util.HashMap<string, zombie.core.textures.TexturePackPage>;
  
      LoadDir(arg0: string): void;
      ReadString(arg0: java.io.InputStream): string;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getTexture(arg0: string): zombie.core.textures.Texture;
      hashCode(): number;
      loadFromPackFile(arg0: java.io.BufferedInputStream): void;
      loadFromPackFileDDS(arg0: java.io.BufferedInputStream): void;
      notify(): void;
      notifyAll(): void;
      readInt(arg0: java.nio.ByteBuffer): number;
      readIntByte(arg0: java.io.InputStream): number;
      searchFolders(arg0: java.io.File): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.textures.TexturePackPage$SubTextureInfo extends java.lang.Object
    export class TexturePackPage$SubTextureInfo {
      private constructor();
      fx: number;
      fy: number;
      h: number;
      name?: string;
      ox: number;
      oy: number;
      w: number;
      x: number;
      y: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.core.utils {
    // zombie.core.utils.BooleanGrid extends java.lang.Object
    export class BooleanGrid {
      private constructor();
      LoadFromByteBuffer(arg0: java.nio.ByteBuffer): void;
      PutToByteBuffer(arg0: java.nio.ByteBuffer): void;
      clear(): void;
      clone(): zombie.core.utils.BooleanGrid;
      copy(arg0: zombie.core.utils.BooleanGrid): void;
      equals(arg0: any): boolean;
      fill(): void;
      getClass(): java.lang.Class<any>;
      getHeight(): number;
      getValue(arg0: number, arg1: number): boolean;
      getWidth(): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      setValue(arg0: number, arg1: number, arg2: boolean): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.utils.BoundedQueue extends java.lang.Object
    export class BoundedQueue<E> {
      private constructor();
      add(arg0: E): void;
      capacity(): number;
      clear(): void;
      equals(arg0: any): boolean;
      get(arg0: number): E;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      isEmpty(): boolean;
      isFull(): boolean;
      notify(): void;
      notifyAll(): void;
      remove(arg0: number): E;
      removeFirst(): E;
      size(): number;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.utils.IntGrid extends java.lang.Object
    export class IntGrid {
      private constructor();
      clear(): void;
      clone(): zombie.core.utils.IntGrid;
      equals(arg0: any): boolean;
      fill(arg0: number): void;
      getClass(): java.lang.Class<any>;
      getHeight(): number;
      getValue(arg0: number, arg1: number): number;
      getWidth(): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      setValue(arg0: number, arg1: number, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.utils.OnceEvery extends java.lang.Object
    export class OnceEvery {
      private constructor();
      Check(): boolean;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getElapsedMillis(): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.core.utils.UpdateLimit extends java.lang.Object
    export class UpdateLimit {
      private constructor();
      BlockCheck(): void;
      Check(): boolean;
      Reset(arg0: number): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDelay(): number;
      getLast(): number;
      getTimePeriod(): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      setUpdatePeriod(arg0: number): void;
      toString(): string;
      updateTimePeriod(): void;
      wait(arg0: number): void;
    }
    // zombie.core.utils.UpdateTimer extends java.lang.Object
    export class UpdateTimer {
      private constructor();
      check(): boolean;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getTime(): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      reset(arg0: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.utils.WrappedBuffer extends java.lang.Object
    export class WrappedBuffer {
      private constructor();
      capacity(): number;
      dispose(): void;
      equals(arg0: any): boolean;
      getBuffer(): java.nio.ByteBuffer;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      isDisposed(): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.core.znet {
    // zombie.core.znet.SteamFriend extends java.lang.Object
    export class SteamFriend {
      private constructor();
      equals(arg0: any): boolean;
      getAvatar(): zombie.core.textures.Texture;
      getClass(): java.lang.Class<any>;
      getName(): string;
      getState(): string;
      getSteamID(): string;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.znet.SteamUGCDetails extends java.lang.Object
    export class SteamUGCDetails {
      private constructor();
      equals(arg0: any): boolean;
      getChildID(arg0: number): number;
      getChildren(): number[];
      getClass(): java.lang.Class<any>;
      getFileSize(): number;
      getID(): number;
      getIDString(): string;
      getNumChildren(): number;
      getState(): string;
      getTimeCreated(): number;
      getTimeUpdated(): number;
      getTitle(): string;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.znet.SteamWorkshopItem extends java.lang.Object
    export class SteamWorkshopItem {
      private constructor();
      create(): boolean;
      equals(arg0: any): boolean;
      getAllowedTags(): java.util.ArrayList<string>;
      getChangeNote(): string;
      getClass(): java.lang.Class<any>;
      getContentFolder(): string;
      getDescription(): string;
      getExtendedErrorInfo(arg0: string): string;
      getFolderName(): string;
      getID(): string;
      getPreviewImage(): string;
      getSubmitDescription(): string;
      getSubmitTags(): string[];
      getTags(): java.util.ArrayList<string>;
      getTitle(): string;
      getUpdateProgress(arg0: se.krka.kahlua.vm.KahluaTable): boolean;
      getUpdateProgressTotal(): number;
      getVisibility(): string;
      getVisibilityInteger(): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      readWorkshopTxt(): boolean;
      setChangeNote(arg0: string): void;
      setDescription(arg0: string): void;
      setID(arg0: string): void;
      setTags(arg0: java.util.ArrayList<string>): void;
      setTitle(arg0: string): void;
      setVisibility(arg0: string): void;
      setVisibilityInteger(arg0: number): void;
      submitUpdate(): boolean;
      toString(): string;
      validateContents(): string;
      validatePreviewImage(arg0: java.nio.file.Path): string;
      wait(arg0: number): void;
      writeWorkshopTxt(): boolean;
    }
    /** [ENUM] zombie.core.znet.SteamWorkshopItem$ItemState */
    export class SteamWorkshopItem$ItemState {
      /* ENUM VALUES */
      static readonly DownloadPending: SteamWorkshopItem$ItemState; 
      static readonly Downloading: SteamWorkshopItem$ItemState; 
      static readonly Installed: SteamWorkshopItem$ItemState; 
      static readonly LegacyItem: SteamWorkshopItem$ItemState; 
      static readonly NeedsUpdate: SteamWorkshopItem$ItemState; 
      static readonly None: SteamWorkshopItem$ItemState; 
      static readonly Subscribed: SteamWorkshopItem$ItemState; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.core.znet.SteamWorkshopItem$ItemState[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): SteamWorkshopItem$ItemState;
      and(arg0: zombie.core.znet.SteamWorkshopItem$ItemState): boolean;
      getValue(): number;
      not(arg0: number): boolean;
      toString(arg0: number): string;
      valueOf(arg0: string): zombie.core.znet.SteamWorkshopItem$ItemState;
      values(): zombie.core.znet.SteamWorkshopItem$ItemState[];
    }
    // zombie.core.znet.ZNetFileAnnounce extends java.lang.Object
    export class ZNetFileAnnounce {
      private constructor();
      fileId: number;
      fileName?: string;
      fileSize: number;
      numChunks: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.znet.ZNetFileChunk extends java.lang.Object
    export class ZNetFileChunk {
      private constructor();
      data?: number[];
      fileId: number;
      offset: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.znet.ZNetSessionState extends java.lang.Object
    export class ZNetSessionState {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDescription(): string;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.core.znet.ZNetStatistics extends java.lang.Object
    export class ZNetStatistics {
      private constructor();
      BPSLimitByCongestionControl: number;
      BPSLimitByOutgoingBandwidthLimit: number;
      bytesInResendBuffer: number;
      bytesInSendBufferHigh: number;
      bytesInSendBufferImmediate: number;
      bytesInSendBufferLow: number;
      bytesInSendBufferMedium: number;
      connectionStartTime: number;
      isLimitedByCongestionControl: boolean;
      isLimitedByOutgoingBandwidthLimit: boolean;
      lastActualBytesReceived: number;
      lastActualBytesSent: number;
      lastUserMessageBytesPushed: number;
      lastUserMessageBytesReceivedIgnored: number;
      lastUserMessageBytesReceivedProcessed: number;
      lastUserMessageBytesResent: number;
      lastUserMessageBytesSent: number;
      messageInSendBufferHigh: number;
      messageInSendBufferImmediate: number;
      messageInSendBufferLow: number;
      messageInSendBufferMedium: number;
      messagesInResendBuffer: number;
      packetlossLastSecond: number;
      packetlossTotal: number;
      totalActualBytesReceived: number;
      totalActualBytesSent: number;
      totalUserMessageBytesPushed: number;
      totalUserMessageBytesReceivedIgnored: number;
      totalUserMessageBytesReceivedProcessed: number;
      totalUserMessageBytesResent: number;
      totalUserMessageBytesSent: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.debug {
    // zombie.debug.BooleanDebugOption extends zombie.config.BooleanConfigOption
    export class BooleanDebugOption {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDefaultValue(): boolean;
      getName(): string;
      getParent(): zombie.debug.options.IDebugOptionGroup;
      getTooltip(): string;
      getType(): string;
      getValue(): boolean;
      getValueAsLuaString(): string;
      getValueAsObject(): any;
      getValueAsString(): string;
      hashCode(): number;
      isDebugOnly(): boolean;
      isValidString(arg0: string): boolean;
      notify(): void;
      notifyAll(): void;
      parse(arg0: string): void;
      resetToDefault(): void;
      setDefaultToCurrentValue(): void;
      setParent(arg0: zombie.debug.options.IDebugOptionGroup): void;
      setValue(arg0: boolean): void;
      setValueFromObject(arg0: any): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.debug.DebugLog extends java.lang.Object
    export class DebugLog {
      private constructor();
      static readonly ActionSystem?: zombie.debug.DebugLogStream;
      static readonly Animation?: zombie.debug.DebugLogStream;
      static readonly Asset?: zombie.debug.DebugLogStream;
      static readonly Clothing?: zombie.debug.DebugLogStream;
      static readonly Combat?: zombie.debug.DebugLogStream;
      static readonly FileIO?: zombie.debug.DebugLogStream;
      static readonly Fireplace?: zombie.debug.DebugLogStream;
      static readonly General?: zombie.debug.DebugLogStream;
      static readonly Input?: zombie.debug.DebugLogStream;
      static readonly IsoRegion?: zombie.debug.DebugLogStream;
      static readonly Lua?: zombie.debug.DebugLogStream;
      static readonly MapLoading?: zombie.debug.DebugLogStream;
      static readonly Mod?: zombie.debug.DebugLogStream;
      static readonly Multiplayer?: zombie.debug.DebugLogStream;
      static readonly Network?: zombie.debug.DebugLogStream;
      static readonly NetworkFileDebug?: zombie.debug.DebugLogStream;
      static readonly NetworkPacketDebug?: zombie.debug.DebugLogStream;
      static readonly Objects?: zombie.debug.DebugLogStream;
      static readonly Radio?: zombie.debug.DebugLogStream;
      static readonly Recipe?: zombie.debug.DebugLogStream;
      static readonly Script?: zombie.debug.DebugLogStream;
      static readonly Shader?: zombie.debug.DebugLogStream;
      static readonly Sound?: zombie.debug.DebugLogStream;
      static readonly Statistic?: zombie.debug.DebugLogStream;
      static readonly UnitTests?: zombie.debug.DebugLogStream;
      static readonly VERSION: number;
      static readonly Vehicle?: zombie.debug.DebugLogStream;
      static readonly Voice?: zombie.debug.DebugLogStream;
      static readonly Zombie?: zombie.debug.DebugLogStream;
      static printServerTime: boolean;
  
      disableLog(arg0: zombie.debug.DebugType): void;
      enableLog(arg0: zombie.debug.DebugType): void;
      equals(arg0: any): boolean;
      formatString(arg0: zombie.debug.DebugType, arg1: zombie.debug.LogSeverity, arg2: string, arg3: any, arg4: string, arg5: any, arg6: any, arg7: any, arg8: any, arg9: any): string;
      formatStringVarArgs(arg0: zombie.debug.DebugType, arg1: zombie.debug.LogSeverity, arg2: string, arg3: any, arg4: string, arg5: any[]): string;
      getClass(): java.lang.Class<any>;
      getDebugTypes(): java.util.ArrayList<zombie.debug.DebugType>;
      hashCode(): number;
      init(): void;
      isEnabled(arg0: zombie.debug.DebugType): boolean;
      isLogEnabled(arg0: zombie.debug.LogSeverity, arg1: zombie.debug.DebugType): boolean;
      load(): void;
      log(arg0: zombie.debug.DebugType, arg1: string): void;
      notify(): void;
      notifyAll(): void;
      save(): void;
      setLogEnabled(arg0: zombie.debug.DebugType, arg1: boolean): void;
      setStdErr(arg0: java.io.OutputStream): void;
      setStdOut(arg0: java.io.OutputStream): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.debug.DebugLogStream extends java.io.PrintStream
    export class DebugLogStream {
      private constructor();
      static readonly s_prefixDebug?: string;
      static readonly s_prefixErr?: string;
      static readonly s_prefixOut?: string;
      static readonly s_prefixWarn?: string;
  
      append(arg0: string): java.io.PrintStream;
      checkError(): boolean;
      close(): void;
      debugln(arg0: string, arg1: any, arg2: any): void;
      equals(arg0: any): boolean;
      error(arg0: string, arg1: any[]): void;
      flush(): void;
      format(arg0: java.util.Locale, arg1: string, arg2: any[]): java.io.PrintStream;
      generateCallerPrefix(): string;
      getClass(): java.lang.Class<any>;
      getStackTraceElementString(arg0: java.lang.StackTraceElement, arg1: boolean): string;
      getTopStackTraceString(arg0: java.lang.Throwable): string;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      nullOutputStream(): java.io.OutputStream;
      print(arg0: string[]): void;
      printException(arg0: java.lang.Throwable, arg1: string, arg2: string, arg3: zombie.debug.LogSeverity): void;
      printStackTrace(): void;
      printUnitTest(arg0: string, arg1: boolean, arg2: any[]): void;
      printf(arg0: java.util.Locale, arg1: string, arg2: any[]): java.io.PrintStream;
      println(arg0: string, arg1: any, arg2: any, arg3: any): void;
      toString(): string;
      tryGetCallerTraceElement(arg0: number): java.lang.StackTraceElement;
      wait(arg0: number): void;
      warn(arg0: string, arg1: any[]): void;
      write(arg0: number[]): void;
      writeBytes(arg0: number[]): void;
    }
    // zombie.debug.DebugOptions extends java.lang.Object
    export class DebugOptions {
      private constructor();
      readonly Animation?: zombie.debug.options.Animation;
      readonly AssetSlowLoad?: zombie.debug.BooleanDebugOption;
      readonly Character?: zombie.debug.options.Character;
      readonly CheatClockVisible?: zombie.debug.BooleanDebugOption;
      readonly CheatDoorUnlock?: zombie.debug.BooleanDebugOption;
      readonly CheatPlayerInvisibleSprint?: zombie.debug.BooleanDebugOption;
      readonly CheatPlayerSeeEveryone?: zombie.debug.BooleanDebugOption;
      readonly CheatPlayerStartInvisible?: zombie.debug.BooleanDebugOption;
      readonly CheatRecipeKnowAll?: zombie.debug.BooleanDebugOption;
      readonly CheatTimedActionInstant?: zombie.debug.BooleanDebugOption;
      readonly CheatUnlimitedAmmo?: zombie.debug.BooleanDebugOption;
      readonly CheatVehicleMechanicsAnywhere?: zombie.debug.BooleanDebugOption;
      readonly CheatVehicleStartWithoutKey?: zombie.debug.BooleanDebugOption;
      readonly CheatWindowUnlock?: zombie.debug.BooleanDebugOption;
      readonly Checks?: zombie.debug.DebugOptions$Checks;
      readonly CollideWithObstaclesRenderNormals?: zombie.debug.BooleanDebugOption;
      readonly CollideWithObstaclesRenderObstacles?: zombie.debug.BooleanDebugOption;
      readonly CollideWithObstaclesRenderRadius?: zombie.debug.BooleanDebugOption;
      readonly DeadBodyAtlasRender?: zombie.debug.BooleanDebugOption;
      readonly DebugDraw_SkipDrawNonSkinnedModel?: zombie.debug.BooleanDebugOption;
      readonly DebugDraw_SkipVBODraw?: zombie.debug.BooleanDebugOption;
      readonly DebugDraw_SkipWorldShading?: zombie.debug.BooleanDebugOption;
      readonly DebugScenarioForceLaunch?: zombie.debug.BooleanDebugOption;
      readonly GameProfilerEnabled?: zombie.debug.BooleanDebugOption;
      readonly GameTimeSpeedHalf?: zombie.debug.BooleanDebugOption;
      readonly GameTimeSpeedQuarter?: zombie.debug.BooleanDebugOption;
      readonly IsoSprite?: zombie.debug.options.IsoSprite;
      readonly JoypadRenderUI?: zombie.debug.BooleanDebugOption;
      readonly LightingRender?: zombie.debug.BooleanDebugOption;
      readonly MechanicsRenderHitbox?: zombie.debug.BooleanDebugOption;
      readonly ModRenderLoaded?: zombie.debug.BooleanDebugOption;
      readonly ModelRenderAttachments?: zombie.debug.BooleanDebugOption;
      readonly ModelRenderAxis?: zombie.debug.BooleanDebugOption;
      readonly ModelRenderBones?: zombie.debug.BooleanDebugOption;
      readonly ModelRenderBounds?: zombie.debug.BooleanDebugOption;
      readonly ModelRenderLights?: zombie.debug.BooleanDebugOption;
      readonly ModelRenderMuzzleflash?: zombie.debug.BooleanDebugOption;
      readonly ModelRenderSkipVehicles?: zombie.debug.BooleanDebugOption;
      readonly ModelRenderWeaponHitPoint?: zombie.debug.BooleanDebugOption;
      readonly ModelRenderWireframe?: zombie.debug.BooleanDebugOption;
      readonly ModelSkeleton?: zombie.debug.BooleanDebugOption;
      readonly MultiplayerAttackPlayer?: zombie.debug.BooleanDebugOption;
      readonly MultiplayerAutoEquip?: zombie.debug.BooleanDebugOption;
      readonly MultiplayerCriticalHit?: zombie.debug.BooleanDebugOption;
      readonly MultiplayerFollowPlayer?: zombie.debug.BooleanDebugOption;
      readonly MultiplayerHotKey?: zombie.debug.BooleanDebugOption;
      readonly MultiplayerLightAmbient?: zombie.debug.BooleanDebugOption;
      readonly MultiplayerLogPrediction?: zombie.debug.BooleanDebugOption;
      readonly MultiplayerPing?: zombie.debug.BooleanDebugOption;
      readonly MultiplayerPlayerZombie?: zombie.debug.BooleanDebugOption;
      readonly MultiplayerShowHit?: zombie.debug.BooleanDebugOption;
      readonly MultiplayerShowPlayerPrediction?: zombie.debug.BooleanDebugOption;
      readonly MultiplayerShowPlayerStatus?: zombie.debug.BooleanDebugOption;
      readonly MultiplayerShowPosition?: zombie.debug.BooleanDebugOption;
      readonly MultiplayerShowTeleport?: zombie.debug.BooleanDebugOption;
      readonly MultiplayerShowZombieDesync?: zombie.debug.BooleanDebugOption;
      readonly MultiplayerShowZombieMultiplier?: zombie.debug.BooleanDebugOption;
      readonly MultiplayerShowZombieOwner?: zombie.debug.BooleanDebugOption;
      readonly MultiplayerShowZombiePrediction?: zombie.debug.BooleanDebugOption;
      readonly MultiplayerShowZombieStatus?: zombie.debug.BooleanDebugOption;
      readonly MultiplayerTorsoHit?: zombie.debug.BooleanDebugOption;
      readonly MultiplayerZombieCrawler?: zombie.debug.BooleanDebugOption;
      readonly Network?: zombie.debug.options.Network;
      readonly OffscreenBuffer?: zombie.debug.options.OffscreenBuffer;
      readonly PathfindPathToMouseAllowCrawl?: zombie.debug.BooleanDebugOption;
      readonly PathfindPathToMouseAllowThump?: zombie.debug.BooleanDebugOption;
      readonly PathfindPathToMouseEnable?: zombie.debug.BooleanDebugOption;
      readonly PathfindPathToMouseIgnoreCrawlCost?: zombie.debug.BooleanDebugOption;
      readonly PathfindRenderPath?: zombie.debug.BooleanDebugOption;
      readonly PathfindRenderWaiting?: zombie.debug.BooleanDebugOption;
      readonly PhysicsRender?: zombie.debug.BooleanDebugOption;
      readonly PolymapRenderClusters?: zombie.debug.BooleanDebugOption;
      readonly PolymapRenderConnections?: zombie.debug.BooleanDebugOption;
      readonly PolymapRenderCrawling?: zombie.debug.BooleanDebugOption;
      readonly PolymapRenderLineClearCollide?: zombie.debug.BooleanDebugOption;
      readonly PolymapRenderNodes?: zombie.debug.BooleanDebugOption;
      readonly SkyboxShow?: zombie.debug.BooleanDebugOption;
      readonly Terrain?: zombie.debug.options.Terrain;
      readonly ThreadCrash_Enabled?: zombie.debug.BooleanDebugOption;
      readonly ThreadCrash_GameLoadingThread?: zombie.debug.BooleanDebugOption[];
      readonly ThreadCrash_GameThread?: zombie.debug.BooleanDebugOption[];
      readonly ThreadCrash_RenderThread?: zombie.debug.BooleanDebugOption[];
      readonly TooltipInfo?: zombie.debug.BooleanDebugOption;
      readonly TooltipModName?: zombie.debug.BooleanDebugOption;
      readonly TranslationPrefix?: zombie.debug.BooleanDebugOption;
      readonly UIDebugConsoleDebugLog?: zombie.debug.BooleanDebugOption;
      readonly UIDebugConsoleEchoCommand?: zombie.debug.BooleanDebugOption;
      readonly UIDebugConsoleStartVisible?: zombie.debug.BooleanDebugOption;
      readonly UIRenderOutline?: zombie.debug.BooleanDebugOption;
      static readonly VERSION: number;
      readonly VehicleCycleColor?: zombie.debug.BooleanDebugOption;
      readonly VehicleRenderArea?: zombie.debug.BooleanDebugOption;
      readonly VehicleRenderAttackPositions?: zombie.debug.BooleanDebugOption;
      readonly VehicleRenderAuthorizations?: zombie.debug.BooleanDebugOption;
      readonly VehicleRenderBlood0?: zombie.debug.BooleanDebugOption;
      readonly VehicleRenderBlood100?: zombie.debug.BooleanDebugOption;
      readonly VehicleRenderBlood50?: zombie.debug.BooleanDebugOption;
      readonly VehicleRenderDamage0?: zombie.debug.BooleanDebugOption;
      readonly VehicleRenderDamage1?: zombie.debug.BooleanDebugOption;
      readonly VehicleRenderDamage2?: zombie.debug.BooleanDebugOption;
      readonly VehicleRenderExit?: zombie.debug.BooleanDebugOption;
      readonly VehicleRenderIntersectedSquares?: zombie.debug.BooleanDebugOption;
      readonly VehicleRenderOutline?: zombie.debug.BooleanDebugOption;
      readonly VehicleRenderRust0?: zombie.debug.BooleanDebugOption;
      readonly VehicleRenderRust100?: zombie.debug.BooleanDebugOption;
      readonly VehicleRenderRust50?: zombie.debug.BooleanDebugOption;
      readonly VehicleRenderTrailerPositions?: zombie.debug.BooleanDebugOption;
      readonly VehicleSpawnEverywhere?: zombie.debug.BooleanDebugOption;
      readonly Weather?: zombie.debug.options.Weather;
      readonly WorldChunkMap5x5?: zombie.debug.BooleanDebugOption;
      readonly WorldSoundRender?: zombie.debug.BooleanDebugOption;
      readonly WorldStreamerSlowLoad?: zombie.debug.BooleanDebugOption;
      readonly ZombieOutfitRandom?: zombie.debug.BooleanDebugOption;
      readonly ZombieRenderCanCrawlUnderVehicle?: zombie.debug.BooleanDebugOption;
      readonly ZombieRenderFakeDead?: zombie.debug.BooleanDebugOption;
      readonly ZombieRenderMemory?: zombie.debug.BooleanDebugOption;
      static readonly instance?: zombie.debug.DebugOptions;
  
      addChild(arg0: zombie.debug.options.IDebugOption): void;
      equals(arg0: any): boolean;
      getBoolean(arg0: string): boolean;
      getChildren(): java.lang.Iterable<zombie.debug.options.IDebugOption>;
      getClass(): java.lang.Class<any>;
      getName(): string;
      getOptionByIndex(arg0: number): zombie.debug.BooleanDebugOption;
      getOptionByName(arg0: string): zombie.debug.BooleanDebugOption;
      getOptionCount(): number;
      getParent(): zombie.debug.options.IDebugOptionGroup;
      hashCode(): number;
      init(): void;
      load(): void;
      notify(): void;
      notifyAll(): void;
      onChildAdded(arg0: zombie.debug.options.IDebugOption): void;
      onDescendantAdded(arg0: zombie.debug.options.IDebugOption): void;
      save(): void;
      setBoolean(arg0: string, arg1: boolean): void;
      setParent(arg0: zombie.debug.options.IDebugOptionGroup): void;
      testThreadCrash(arg0: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.debug.DebugOptions$Checks extends zombie.debug.options.OptionGroup
    export class DebugOptions$Checks {
      private constructor();
      readonly BoundTextures?: zombie.debug.BooleanDebugOption;
      readonly Group?: zombie.debug.options.IDebugOptionGroup;
      readonly SlowLuaEvents?: zombie.debug.BooleanDebugOption;
  
      addChild(arg0: zombie.debug.options.IDebugOption): void;
      equals(arg0: any): boolean;
      getChildren(): java.lang.Iterable<zombie.debug.options.IDebugOption>;
      getClass(): java.lang.Class<any>;
      getName(): string;
      getParent(): zombie.debug.options.IDebugOptionGroup;
      hashCode(): number;
      newDebugOnlyOption(arg0: string, arg1: boolean): zombie.debug.BooleanDebugOption;
      newOption(arg0: zombie.debug.options.IDebugOptionGroup, arg1: string, arg2: boolean): zombie.debug.BooleanDebugOption;
      notify(): void;
      notifyAll(): void;
      onChildAdded(arg0: zombie.debug.options.IDebugOption): void;
      onDescendantAdded(arg0: zombie.debug.options.IDebugOption): void;
      setParent(arg0: zombie.debug.options.IDebugOptionGroup): void;
      toString(): string;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.debug.DebugType */
    export class DebugType {
      /* ENUM VALUES */
      static readonly ActionSystem: DebugType; 
      static readonly Animation: DebugType; 
      static readonly Asset: DebugType; 
      static readonly Clothing: DebugType; 
      static readonly Combat: DebugType; 
      static readonly Damage: DebugType; 
      static readonly Death: DebugType; 
      static readonly FileIO: DebugType; 
      static readonly Fireplace: DebugType; 
      static readonly General: DebugType; 
      static readonly Input: DebugType; 
      static readonly IsoRegion: DebugType; 
      static readonly Lua: DebugType; 
      static readonly MapLoading: DebugType; 
      static readonly Mod: DebugType; 
      static readonly Multiplayer: DebugType; 
      static readonly Network: DebugType; 
      static readonly NetworkFileDebug: DebugType; 
      static readonly NetworkPacketDebug: DebugType; 
      static readonly Objects: DebugType; 
      static readonly Ownership: DebugType; 
      static readonly Radio: DebugType; 
      static readonly Recipe: DebugType; 
      static readonly Script: DebugType; 
      static readonly Shader: DebugType; 
      static readonly Sound: DebugType; 
      static readonly Statistic: DebugType; 
      static readonly UnitTests: DebugType; 
      static readonly Vehicle: DebugType; 
      static readonly Voice: DebugType; 
      static readonly Zombie: DebugType; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.debug.DebugType[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): DebugType;
      Do(arg0: zombie.debug.DebugType): boolean;
      valueOf(arg0: string): zombie.debug.DebugType;
      values(): zombie.debug.DebugType[];
    }
    /** [ENUM] zombie.debug.LogSeverity */
    export class LogSeverity {
      /* ENUM VALUES */
      static readonly Error: LogSeverity; 
      static readonly General: LogSeverity; 
      static readonly Trace: LogSeverity; 
      static readonly Warning: LogSeverity; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.debug.LogSeverity[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): LogSeverity;
      valueOf(arg0: string): zombie.debug.LogSeverity;
      values(): zombie.debug.LogSeverity[];
    }
  }
  export namespace zombie.debug.options {
    // zombie.debug.options.Animation extends zombie.debug.options.OptionGroup
    export class Animation {
      private constructor();
      readonly AllowEarlyTransitionOut?: zombie.debug.BooleanDebugOption;
      readonly AnimLayer?: zombie.debug.options.Animation$AnimLayerOG;
      readonly AnimRenderPicker?: zombie.debug.BooleanDebugOption;
      readonly BlendUseFbx?: zombie.debug.BooleanDebugOption;
      readonly Debug?: zombie.debug.BooleanDebugOption;
      readonly Group?: zombie.debug.options.IDebugOptionGroup;
      readonly SharedSkeles?: zombie.debug.options.Animation$SharedSkelesOG;
  
      addChild(arg0: zombie.debug.options.IDebugOption): void;
      equals(arg0: any): boolean;
      getChildren(): java.lang.Iterable<zombie.debug.options.IDebugOption>;
      getClass(): java.lang.Class<any>;
      getName(): string;
      getParent(): zombie.debug.options.IDebugOptionGroup;
      hashCode(): number;
      newDebugOnlyOption(arg0: string, arg1: boolean): zombie.debug.BooleanDebugOption;
      newOption(arg0: zombie.debug.options.IDebugOptionGroup, arg1: string, arg2: boolean): zombie.debug.BooleanDebugOption;
      notify(): void;
      notifyAll(): void;
      onChildAdded(arg0: zombie.debug.options.IDebugOption): void;
      onDescendantAdded(arg0: zombie.debug.options.IDebugOption): void;
      setParent(arg0: zombie.debug.options.IDebugOptionGroup): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.debug.options.Animation$AnimLayerOG extends zombie.debug.options.OptionGroup
    export class Animation$AnimLayerOG {
      private constructor();
      readonly AllowAnimNodeOverride?: zombie.debug.BooleanDebugOption;
      readonly Group?: zombie.debug.options.IDebugOptionGroup;
      readonly LogStateChanges?: zombie.debug.BooleanDebugOption;
  
      addChild(arg0: zombie.debug.options.IDebugOption): void;
      equals(arg0: any): boolean;
      getChildren(): java.lang.Iterable<zombie.debug.options.IDebugOption>;
      getClass(): java.lang.Class<any>;
      getName(): string;
      getParent(): zombie.debug.options.IDebugOptionGroup;
      hashCode(): number;
      newDebugOnlyOption(arg0: string, arg1: boolean): zombie.debug.BooleanDebugOption;
      newOption(arg0: zombie.debug.options.IDebugOptionGroup, arg1: string, arg2: boolean): zombie.debug.BooleanDebugOption;
      notify(): void;
      notifyAll(): void;
      onChildAdded(arg0: zombie.debug.options.IDebugOption): void;
      onDescendantAdded(arg0: zombie.debug.options.IDebugOption): void;
      setParent(arg0: zombie.debug.options.IDebugOptionGroup): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.debug.options.Animation$SharedSkelesOG extends zombie.debug.options.OptionGroup
    export class Animation$SharedSkelesOG {
      private constructor();
      readonly AllowLerping?: zombie.debug.BooleanDebugOption;
      readonly Enabled?: zombie.debug.BooleanDebugOption;
      readonly Group?: zombie.debug.options.IDebugOptionGroup;
  
      addChild(arg0: zombie.debug.options.IDebugOption): void;
      equals(arg0: any): boolean;
      getChildren(): java.lang.Iterable<zombie.debug.options.IDebugOption>;
      getClass(): java.lang.Class<any>;
      getName(): string;
      getParent(): zombie.debug.options.IDebugOptionGroup;
      hashCode(): number;
      newDebugOnlyOption(arg0: string, arg1: boolean): zombie.debug.BooleanDebugOption;
      newOption(arg0: zombie.debug.options.IDebugOptionGroup, arg1: string, arg2: boolean): zombie.debug.BooleanDebugOption;
      notify(): void;
      notifyAll(): void;
      onChildAdded(arg0: zombie.debug.options.IDebugOption): void;
      onDescendantAdded(arg0: zombie.debug.options.IDebugOption): void;
      setParent(arg0: zombie.debug.options.IDebugOptionGroup): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.debug.options.Character extends zombie.debug.options.OptionGroup
    export class Character {
      private constructor();
      readonly CreateAllOutfits?: zombie.debug.BooleanDebugOption;
      readonly Debug?: zombie.debug.options.Character$DebugOG;
      readonly Group?: zombie.debug.options.IDebugOptionGroup;
  
      addChild(arg0: zombie.debug.options.IDebugOption): void;
      equals(arg0: any): boolean;
      getChildren(): java.lang.Iterable<zombie.debug.options.IDebugOption>;
      getClass(): java.lang.Class<any>;
      getName(): string;
      getParent(): zombie.debug.options.IDebugOptionGroup;
      hashCode(): number;
      newDebugOnlyOption(arg0: string, arg1: boolean): zombie.debug.BooleanDebugOption;
      newOption(arg0: zombie.debug.options.IDebugOptionGroup, arg1: string, arg2: boolean): zombie.debug.BooleanDebugOption;
      notify(): void;
      notifyAll(): void;
      onChildAdded(arg0: zombie.debug.options.IDebugOption): void;
      onDescendantAdded(arg0: zombie.debug.options.IDebugOption): void;
      setParent(arg0: zombie.debug.options.IDebugOptionGroup): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.debug.options.Character$DebugOG extends zombie.debug.options.OptionGroup
    export class Character$DebugOG {
      private constructor();
      readonly AlwaysTripOverFence?: zombie.debug.BooleanDebugOption;
      readonly Animate?: zombie.debug.options.Character$DebugOG$AnimateOG;
      readonly Group?: zombie.debug.options.IDebugOptionGroup;
      readonly PlaySoundWhenInvisible?: zombie.debug.BooleanDebugOption;
      readonly RegisterDebugVariables?: zombie.debug.BooleanDebugOption;
      readonly Render?: zombie.debug.options.Character$DebugOG$RenderOG;
      readonly UpdateAlpha?: zombie.debug.BooleanDebugOption;
      readonly UpdateAlphaEighthSpeed?: zombie.debug.BooleanDebugOption;
  
      addChild(arg0: zombie.debug.options.IDebugOption): void;
      equals(arg0: any): boolean;
      getChildren(): java.lang.Iterable<zombie.debug.options.IDebugOption>;
      getClass(): java.lang.Class<any>;
      getName(): string;
      getParent(): zombie.debug.options.IDebugOptionGroup;
      hashCode(): number;
      newDebugOnlyOption(arg0: string, arg1: boolean): zombie.debug.BooleanDebugOption;
      newOption(arg0: zombie.debug.options.IDebugOptionGroup, arg1: string, arg2: boolean): zombie.debug.BooleanDebugOption;
      notify(): void;
      notifyAll(): void;
      onChildAdded(arg0: zombie.debug.options.IDebugOption): void;
      onDescendantAdded(arg0: zombie.debug.options.IDebugOption): void;
      setParent(arg0: zombie.debug.options.IDebugOptionGroup): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.debug.options.Character$DebugOG$AnimateOG extends zombie.debug.options.OptionGroup
    export class Character$DebugOG$AnimateOG {
      private constructor();
      readonly DeferredRotationOnly?: zombie.debug.BooleanDebugOption;
      readonly Group?: zombie.debug.options.IDebugOptionGroup;
      readonly NoBoneMasks?: zombie.debug.BooleanDebugOption;
      readonly NoBoneTwists?: zombie.debug.BooleanDebugOption;
      readonly ZeroCounterRotationBone?: zombie.debug.BooleanDebugOption;
  
      addChild(arg0: zombie.debug.options.IDebugOption): void;
      equals(arg0: any): boolean;
      getChildren(): java.lang.Iterable<zombie.debug.options.IDebugOption>;
      getClass(): java.lang.Class<any>;
      getName(): string;
      getParent(): zombie.debug.options.IDebugOptionGroup;
      hashCode(): number;
      newDebugOnlyOption(arg0: string, arg1: boolean): zombie.debug.BooleanDebugOption;
      newOption(arg0: zombie.debug.options.IDebugOptionGroup, arg1: string, arg2: boolean): zombie.debug.BooleanDebugOption;
      notify(): void;
      notifyAll(): void;
      onChildAdded(arg0: zombie.debug.options.IDebugOption): void;
      onDescendantAdded(arg0: zombie.debug.options.IDebugOption): void;
      setParent(arg0: zombie.debug.options.IDebugOptionGroup): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.debug.options.Character$DebugOG$RenderOG extends zombie.debug.options.OptionGroup
    export class Character$DebugOG$RenderOG {
      private constructor();
      readonly AimCone?: zombie.debug.BooleanDebugOption;
      readonly Angle?: zombie.debug.BooleanDebugOption;
      readonly Bip01?: zombie.debug.BooleanDebugOption;
      readonly DeferredAngles?: zombie.debug.BooleanDebugOption;
      readonly DeferredMovement?: zombie.debug.BooleanDebugOption;
      readonly DisplayRoomAndZombiesZone?: zombie.debug.BooleanDebugOption;
      readonly Group?: zombie.debug.options.IDebugOptionGroup;
      readonly PrimaryHandBone?: zombie.debug.BooleanDebugOption;
      readonly SecondaryHandBone?: zombie.debug.BooleanDebugOption;
      readonly SkipCharacters?: zombie.debug.BooleanDebugOption;
      readonly TestDotSide?: zombie.debug.BooleanDebugOption;
      readonly TranslationData?: zombie.debug.BooleanDebugOption;
      readonly Vision?: zombie.debug.BooleanDebugOption;
  
      addChild(arg0: zombie.debug.options.IDebugOption): void;
      equals(arg0: any): boolean;
      getChildren(): java.lang.Iterable<zombie.debug.options.IDebugOption>;
      getClass(): java.lang.Class<any>;
      getName(): string;
      getParent(): zombie.debug.options.IDebugOptionGroup;
      hashCode(): number;
      newDebugOnlyOption(arg0: string, arg1: boolean): zombie.debug.BooleanDebugOption;
      newOption(arg0: zombie.debug.options.IDebugOptionGroup, arg1: string, arg2: boolean): zombie.debug.BooleanDebugOption;
      notify(): void;
      notifyAll(): void;
      onChildAdded(arg0: zombie.debug.options.IDebugOption): void;
      onDescendantAdded(arg0: zombie.debug.options.IDebugOption): void;
      setParent(arg0: zombie.debug.options.IDebugOptionGroup): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.debug.options.IDebugOption
    export class IDebugOption {
      private constructor();
      getName(): string;
      getParent(): zombie.debug.options.IDebugOptionGroup;
      setParent(arg0: zombie.debug.options.IDebugOptionGroup): void;
    }
    // zombie.debug.options.IDebugOptionGroup
    export class IDebugOptionGroup {
      private constructor();
      addChild(arg0: zombie.debug.options.IDebugOption): void;
      getChildren(): java.lang.Iterable<zombie.debug.options.IDebugOption>;
      getName(): string;
      getParent(): zombie.debug.options.IDebugOptionGroup;
      onChildAdded(arg0: zombie.debug.options.IDebugOption): void;
      onDescendantAdded(arg0: zombie.debug.options.IDebugOption): void;
      setParent(arg0: zombie.debug.options.IDebugOptionGroup): void;
    }
    // zombie.debug.options.IsoSprite extends zombie.debug.options.OptionGroup
    export class IsoSprite {
      private constructor();
      readonly CharacterMipmapColors?: zombie.debug.BooleanDebugOption;
      readonly DropShadowEdges?: zombie.debug.BooleanDebugOption;
      readonly ForceLinearMagFilter?: zombie.debug.BooleanDebugOption;
      readonly ForceNearestMagFilter?: zombie.debug.BooleanDebugOption;
      readonly ForceNearestMipMapping?: zombie.debug.BooleanDebugOption;
      readonly Group?: zombie.debug.options.IDebugOptionGroup;
      readonly MovingObjectEdges?: zombie.debug.BooleanDebugOption;
      readonly NearestMagFilterAtMinZoom?: zombie.debug.BooleanDebugOption;
      readonly RenderModels?: zombie.debug.BooleanDebugOption;
      readonly RenderSprites?: zombie.debug.BooleanDebugOption;
      readonly TextureWrapClampToEdge?: zombie.debug.BooleanDebugOption;
      readonly TextureWrapRepeat?: zombie.debug.BooleanDebugOption;
      readonly WorldMipmapColors?: zombie.debug.BooleanDebugOption;
  
      addChild(arg0: zombie.debug.options.IDebugOption): void;
      equals(arg0: any): boolean;
      getChildren(): java.lang.Iterable<zombie.debug.options.IDebugOption>;
      getClass(): java.lang.Class<any>;
      getName(): string;
      getParent(): zombie.debug.options.IDebugOptionGroup;
      hashCode(): number;
      newDebugOnlyOption(arg0: string, arg1: boolean): zombie.debug.BooleanDebugOption;
      newOption(arg0: zombie.debug.options.IDebugOptionGroup, arg1: string, arg2: boolean): zombie.debug.BooleanDebugOption;
      notify(): void;
      notifyAll(): void;
      onChildAdded(arg0: zombie.debug.options.IDebugOption): void;
      onDescendantAdded(arg0: zombie.debug.options.IDebugOption): void;
      setParent(arg0: zombie.debug.options.IDebugOptionGroup): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.debug.options.Network extends zombie.debug.options.OptionGroup
    export class Network {
      private constructor();
      readonly Client?: zombie.debug.options.Network$Client;
      readonly Group?: zombie.debug.options.IDebugOptionGroup;
      readonly PublicServerUtil?: zombie.debug.options.Network$PublicServerUtil;
      readonly Server?: zombie.debug.options.Network$Server;
  
      addChild(arg0: zombie.debug.options.IDebugOption): void;
      equals(arg0: any): boolean;
      getChildren(): java.lang.Iterable<zombie.debug.options.IDebugOption>;
      getClass(): java.lang.Class<any>;
      getName(): string;
      getParent(): zombie.debug.options.IDebugOptionGroup;
      hashCode(): number;
      newDebugOnlyOption(arg0: string, arg1: boolean): zombie.debug.BooleanDebugOption;
      newOption(arg0: zombie.debug.options.IDebugOptionGroup, arg1: string, arg2: boolean): zombie.debug.BooleanDebugOption;
      notify(): void;
      notifyAll(): void;
      onChildAdded(arg0: zombie.debug.options.IDebugOption): void;
      onDescendantAdded(arg0: zombie.debug.options.IDebugOption): void;
      setParent(arg0: zombie.debug.options.IDebugOptionGroup): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.debug.options.Network$Client extends zombie.debug.options.OptionGroup
    export class Network$Client {
      private constructor();
      readonly Group?: zombie.debug.options.IDebugOptionGroup;
      readonly MainLoop?: zombie.debug.BooleanDebugOption;
      readonly SyncIsoObject?: zombie.debug.BooleanDebugOption;
      readonly UpdateZombiesFromPacket?: zombie.debug.BooleanDebugOption;
  
      addChild(arg0: zombie.debug.options.IDebugOption): void;
      equals(arg0: any): boolean;
      getChildren(): java.lang.Iterable<zombie.debug.options.IDebugOption>;
      getClass(): java.lang.Class<any>;
      getName(): string;
      getParent(): zombie.debug.options.IDebugOptionGroup;
      hashCode(): number;
      newDebugOnlyOption(arg0: string, arg1: boolean): zombie.debug.BooleanDebugOption;
      newOption(arg0: zombie.debug.options.IDebugOptionGroup, arg1: string, arg2: boolean): zombie.debug.BooleanDebugOption;
      notify(): void;
      notifyAll(): void;
      onChildAdded(arg0: zombie.debug.options.IDebugOption): void;
      onDescendantAdded(arg0: zombie.debug.options.IDebugOption): void;
      setParent(arg0: zombie.debug.options.IDebugOptionGroup): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.debug.options.Network$PublicServerUtil extends zombie.debug.options.OptionGroup
    export class Network$PublicServerUtil {
      private constructor();
      readonly Enabled?: zombie.debug.BooleanDebugOption;
      readonly Group?: zombie.debug.options.IDebugOptionGroup;
  
      addChild(arg0: zombie.debug.options.IDebugOption): void;
      equals(arg0: any): boolean;
      getChildren(): java.lang.Iterable<zombie.debug.options.IDebugOption>;
      getClass(): java.lang.Class<any>;
      getName(): string;
      getParent(): zombie.debug.options.IDebugOptionGroup;
      hashCode(): number;
      newDebugOnlyOption(arg0: string, arg1: boolean): zombie.debug.BooleanDebugOption;
      newOption(arg0: zombie.debug.options.IDebugOptionGroup, arg1: string, arg2: boolean): zombie.debug.BooleanDebugOption;
      notify(): void;
      notifyAll(): void;
      onChildAdded(arg0: zombie.debug.options.IDebugOption): void;
      onDescendantAdded(arg0: zombie.debug.options.IDebugOption): void;
      setParent(arg0: zombie.debug.options.IDebugOptionGroup): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.debug.options.Network$Server extends zombie.debug.options.OptionGroup
    export class Network$Server {
      private constructor();
      readonly Group?: zombie.debug.options.IDebugOptionGroup;
      readonly SyncIsoObject?: zombie.debug.BooleanDebugOption;
  
      addChild(arg0: zombie.debug.options.IDebugOption): void;
      equals(arg0: any): boolean;
      getChildren(): java.lang.Iterable<zombie.debug.options.IDebugOption>;
      getClass(): java.lang.Class<any>;
      getName(): string;
      getParent(): zombie.debug.options.IDebugOptionGroup;
      hashCode(): number;
      newDebugOnlyOption(arg0: string, arg1: boolean): zombie.debug.BooleanDebugOption;
      newOption(arg0: zombie.debug.options.IDebugOptionGroup, arg1: string, arg2: boolean): zombie.debug.BooleanDebugOption;
      notify(): void;
      notifyAll(): void;
      onChildAdded(arg0: zombie.debug.options.IDebugOption): void;
      onDescendantAdded(arg0: zombie.debug.options.IDebugOption): void;
      setParent(arg0: zombie.debug.options.IDebugOptionGroup): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.debug.options.OffscreenBuffer extends zombie.debug.options.OptionGroup
    export class OffscreenBuffer {
      private constructor();
      readonly Group?: zombie.debug.options.IDebugOptionGroup;
      readonly Render?: zombie.debug.BooleanDebugOption;
  
      addChild(arg0: zombie.debug.options.IDebugOption): void;
      equals(arg0: any): boolean;
      getChildren(): java.lang.Iterable<zombie.debug.options.IDebugOption>;
      getClass(): java.lang.Class<any>;
      getName(): string;
      getParent(): zombie.debug.options.IDebugOptionGroup;
      hashCode(): number;
      newDebugOnlyOption(arg0: string, arg1: boolean): zombie.debug.BooleanDebugOption;
      newOption(arg0: zombie.debug.options.IDebugOptionGroup, arg1: string, arg2: boolean): zombie.debug.BooleanDebugOption;
      notify(): void;
      notifyAll(): void;
      onChildAdded(arg0: zombie.debug.options.IDebugOption): void;
      onDescendantAdded(arg0: zombie.debug.options.IDebugOption): void;
      setParent(arg0: zombie.debug.options.IDebugOptionGroup): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.debug.options.Terrain extends zombie.debug.options.OptionGroup
    export class Terrain {
      private constructor();
      readonly Group?: zombie.debug.options.IDebugOptionGroup;
      readonly RenderTiles?: zombie.debug.options.Terrain$RenderTiles;
  
      addChild(arg0: zombie.debug.options.IDebugOption): void;
      equals(arg0: any): boolean;
      getChildren(): java.lang.Iterable<zombie.debug.options.IDebugOption>;
      getClass(): java.lang.Class<any>;
      getName(): string;
      getParent(): zombie.debug.options.IDebugOptionGroup;
      hashCode(): number;
      newDebugOnlyOption(arg0: string, arg1: boolean): zombie.debug.BooleanDebugOption;
      newOption(arg0: zombie.debug.options.IDebugOptionGroup, arg1: string, arg2: boolean): zombie.debug.BooleanDebugOption;
      notify(): void;
      notifyAll(): void;
      onChildAdded(arg0: zombie.debug.options.IDebugOption): void;
      onDescendantAdded(arg0: zombie.debug.options.IDebugOption): void;
      setParent(arg0: zombie.debug.options.IDebugOptionGroup): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.debug.options.Terrain$RenderTiles extends zombie.debug.options.OptionGroup
    export class Terrain$RenderTiles {
      private constructor();
      readonly AttachedAnimSprites?: zombie.debug.BooleanDebugOption;
      readonly AttachedChildren?: zombie.debug.BooleanDebugOption;
      readonly AttachedWallBloodSplats?: zombie.debug.BooleanDebugOption;
      readonly BloodDecals?: zombie.debug.BooleanDebugOption;
      readonly Enable?: zombie.debug.BooleanDebugOption;
      readonly Group?: zombie.debug.options.IDebugOptionGroup;
      readonly HighContrastBg?: zombie.debug.BooleanDebugOption;
      readonly IsoGridSquare?: zombie.debug.options.Terrain$RenderTiles$IsoGridSquare;
      readonly Lua?: zombie.debug.BooleanDebugOption;
      readonly MinusFloorCharacters?: zombie.debug.BooleanDebugOption;
      readonly NewRender?: zombie.debug.BooleanDebugOption;
      readonly OverlaySprites?: zombie.debug.BooleanDebugOption;
      readonly RenderGridSquares?: zombie.debug.BooleanDebugOption;
      readonly RenderSprites?: zombie.debug.BooleanDebugOption;
      readonly Shadows?: zombie.debug.BooleanDebugOption;
      readonly UseShaders?: zombie.debug.BooleanDebugOption;
      readonly VegetationCorpses?: zombie.debug.BooleanDebugOption;
      readonly Water?: zombie.debug.BooleanDebugOption;
      readonly WaterBody?: zombie.debug.BooleanDebugOption;
      readonly WaterShore?: zombie.debug.BooleanDebugOption;
  
      addChild(arg0: zombie.debug.options.IDebugOption): void;
      equals(arg0: any): boolean;
      getChildren(): java.lang.Iterable<zombie.debug.options.IDebugOption>;
      getClass(): java.lang.Class<any>;
      getName(): string;
      getParent(): zombie.debug.options.IDebugOptionGroup;
      hashCode(): number;
      newDebugOnlyOption(arg0: string, arg1: boolean): zombie.debug.BooleanDebugOption;
      newOption(arg0: zombie.debug.options.IDebugOptionGroup, arg1: string, arg2: boolean): zombie.debug.BooleanDebugOption;
      notify(): void;
      notifyAll(): void;
      onChildAdded(arg0: zombie.debug.options.IDebugOption): void;
      onDescendantAdded(arg0: zombie.debug.options.IDebugOption): void;
      setParent(arg0: zombie.debug.options.IDebugOptionGroup): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.debug.options.Terrain$RenderTiles$IsoGridSquare extends zombie.debug.options.OptionGroup
    export class Terrain$RenderTiles$IsoGridSquare {
      private constructor();
      readonly DoorsAndWalls?: zombie.debug.BooleanDebugOption;
      readonly DoorsAndWalls_SimpleLighting?: zombie.debug.BooleanDebugOption;
      readonly Floor?: zombie.debug.options.Terrain$RenderTiles$IsoGridSquare$Floor;
      readonly Group?: zombie.debug.options.IDebugOptionGroup;
      readonly IsoPadding?: zombie.debug.BooleanDebugOption;
      readonly IsoPaddingAttached?: zombie.debug.BooleanDebugOption;
      readonly IsoPaddingDeDiamond?: zombie.debug.BooleanDebugOption;
      readonly MeshCutdown?: zombie.debug.BooleanDebugOption;
      readonly Objects?: zombie.debug.BooleanDebugOption;
      readonly RenderMinusFloor?: zombie.debug.BooleanDebugOption;
      readonly ShoreFade?: zombie.debug.BooleanDebugOption;
      readonly Walls?: zombie.debug.options.Terrain$RenderTiles$IsoGridSquare$Walls;
  
      addChild(arg0: zombie.debug.options.IDebugOption): void;
      equals(arg0: any): boolean;
      getChildren(): java.lang.Iterable<zombie.debug.options.IDebugOption>;
      getClass(): java.lang.Class<any>;
      getName(): string;
      getParent(): zombie.debug.options.IDebugOptionGroup;
      hashCode(): number;
      newDebugOnlyOption(arg0: string, arg1: boolean): zombie.debug.BooleanDebugOption;
      newOption(arg0: zombie.debug.options.IDebugOptionGroup, arg1: string, arg2: boolean): zombie.debug.BooleanDebugOption;
      notify(): void;
      notifyAll(): void;
      onChildAdded(arg0: zombie.debug.options.IDebugOption): void;
      onDescendantAdded(arg0: zombie.debug.options.IDebugOption): void;
      setParent(arg0: zombie.debug.options.IDebugOptionGroup): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.debug.options.Terrain$RenderTiles$IsoGridSquare$Floor extends zombie.debug.options.OptionGroup
    export class Terrain$RenderTiles$IsoGridSquare$Floor {
      private constructor();
      readonly Group?: zombie.debug.options.IDebugOptionGroup;
      readonly Lighting?: zombie.debug.BooleanDebugOption;
      readonly LightingDebug?: zombie.debug.BooleanDebugOption;
      readonly LightingOld?: zombie.debug.BooleanDebugOption;
  
      addChild(arg0: zombie.debug.options.IDebugOption): void;
      equals(arg0: any): boolean;
      getChildren(): java.lang.Iterable<zombie.debug.options.IDebugOption>;
      getClass(): java.lang.Class<any>;
      getName(): string;
      getParent(): zombie.debug.options.IDebugOptionGroup;
      hashCode(): number;
      newDebugOnlyOption(arg0: string, arg1: boolean): zombie.debug.BooleanDebugOption;
      newOption(arg0: zombie.debug.options.IDebugOptionGroup, arg1: string, arg2: boolean): zombie.debug.BooleanDebugOption;
      notify(): void;
      notifyAll(): void;
      onChildAdded(arg0: zombie.debug.options.IDebugOption): void;
      onDescendantAdded(arg0: zombie.debug.options.IDebugOption): void;
      setParent(arg0: zombie.debug.options.IDebugOptionGroup): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.debug.options.Terrain$RenderTiles$IsoGridSquare$Walls extends zombie.debug.options.OptionGroup
    export class Terrain$RenderTiles$IsoGridSquare$Walls {
      private constructor();
      readonly AttachedSprites?: zombie.debug.BooleanDebugOption;
      readonly Group?: zombie.debug.options.IDebugOptionGroup;
      readonly Lighting?: zombie.debug.BooleanDebugOption;
      readonly LightingDebug?: zombie.debug.BooleanDebugOption;
      readonly LightingOldDebug?: zombie.debug.BooleanDebugOption;
      readonly N?: zombie.debug.BooleanDebugOption;
      readonly NW?: zombie.debug.BooleanDebugOption;
      readonly Render?: zombie.debug.BooleanDebugOption;
      readonly W?: zombie.debug.BooleanDebugOption;
  
      addChild(arg0: zombie.debug.options.IDebugOption): void;
      equals(arg0: any): boolean;
      getChildren(): java.lang.Iterable<zombie.debug.options.IDebugOption>;
      getClass(): java.lang.Class<any>;
      getName(): string;
      getParent(): zombie.debug.options.IDebugOptionGroup;
      hashCode(): number;
      newDebugOnlyOption(arg0: string, arg1: boolean): zombie.debug.BooleanDebugOption;
      newOption(arg0: zombie.debug.options.IDebugOptionGroup, arg1: string, arg2: boolean): zombie.debug.BooleanDebugOption;
      notify(): void;
      notifyAll(): void;
      onChildAdded(arg0: zombie.debug.options.IDebugOption): void;
      onDescendantAdded(arg0: zombie.debug.options.IDebugOption): void;
      setParent(arg0: zombie.debug.options.IDebugOptionGroup): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.debug.options.Weather extends zombie.debug.options.OptionGroup
    export class Weather {
      private constructor();
      readonly Fx?: zombie.debug.BooleanDebugOption;
      readonly Group?: zombie.debug.options.IDebugOptionGroup;
      readonly Snow?: zombie.debug.BooleanDebugOption;
      readonly WaterPuddles?: zombie.debug.BooleanDebugOption;
  
      addChild(arg0: zombie.debug.options.IDebugOption): void;
      equals(arg0: any): boolean;
      getChildren(): java.lang.Iterable<zombie.debug.options.IDebugOption>;
      getClass(): java.lang.Class<any>;
      getName(): string;
      getParent(): zombie.debug.options.IDebugOptionGroup;
      hashCode(): number;
      newDebugOnlyOption(arg0: string, arg1: boolean): zombie.debug.BooleanDebugOption;
      newOption(arg0: zombie.debug.options.IDebugOptionGroup, arg1: string, arg2: boolean): zombie.debug.BooleanDebugOption;
      notify(): void;
      notifyAll(): void;
      onChildAdded(arg0: zombie.debug.options.IDebugOption): void;
      onDescendantAdded(arg0: zombie.debug.options.IDebugOption): void;
      setParent(arg0: zombie.debug.options.IDebugOptionGroup): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.erosion {
    // zombie.erosion.ErosionConfig extends java.lang.Object
    export class ErosionConfig {
      private constructor();
      readonly debug?: zombie.erosion.ErosionConfig$Debug;
      readonly season?: zombie.erosion.ErosionConfig$Season;
      readonly seeds?: zombie.erosion.ErosionConfig$Seeds;
      readonly time?: zombie.erosion.ErosionConfig$Time;
  
      consolePrint(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDebug(): zombie.erosion.ErosionConfig$Debug;
      hashCode(): number;
      load(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      readFile(arg0: string): boolean;
      save(arg0: java.nio.ByteBuffer): void;
      toString(): string;
      wait(arg0: number): void;
      writeFile(arg0: string): void;
    }
    // zombie.erosion.ErosionConfig$Debug extends java.lang.Object
    export class ErosionConfig$Debug {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getEnabled(): boolean;
      getStartDay(): number;
      getStartMonth(): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.erosion.ErosionConfig$Season extends java.lang.Object
    export class ErosionConfig$Season {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.erosion.ErosionConfig$Seeds extends java.lang.Object
    export class ErosionConfig$Seeds {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.erosion.ErosionConfig$Time extends java.lang.Object
    export class ErosionConfig$Time {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.erosion.ErosionData extends java.lang.Object
    export class ErosionData {
      private constructor();
      static staticRand: boolean;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.erosion.ErosionData$Chunk extends java.lang.Object
    export class ErosionData$Chunk {
      private constructor();
      eTickStamp: number;
      epoch: number;
      init: boolean;
      minerals: number;
      moisture: number;
      soil: number;
      x: number;
      y: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      notify(): void;
      notifyAll(): void;
      save(arg0: java.nio.ByteBuffer): void;
      set(arg0: zombie.iso.IsoChunk): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.erosion.ErosionData$Square extends java.lang.Object
    export class ErosionData$Square {
      private constructor();
      doNothing: boolean;
      init: boolean;
      magicNum: number;
      magicNumByte: number;
      noiseKudzu: number;
      noiseMain: number;
      noiseMainByte: number;
      noiseMainInt: number;
      readonly regions?: java.util.ArrayList<zombie.erosion.categories.ErosionCategory$Data>;
      soil: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      notify(): void;
      notifyAll(): void;
      rand(arg0: number, arg1: number, arg2: number): number;
      reset(): void;
      save(arg0: java.nio.ByteBuffer): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.erosion.ErosionMain extends java.lang.Object
    export class ErosionMain {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.IsoChunk): void;
      DebugUpdateMapNow(): void;
      EveryTenMinutes(): void;
      LoadGridsquare(arg0: zombie.iso.IsoGridSquare): void;
      Reset(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getConfig(): zombie.erosion.ErosionConfig;
      getEtick(): number;
      getInstance(): zombie.erosion.ErosionMain;
      getSeasons(): zombie.erosion.season.ErosionSeason;
      getSnowFraction(): number;
      getSnowFractionYesterday(): number;
      getSpriteManager(): zombie.iso.sprite.IsoSpriteManager;
      hashCode(): number;
      isSnow(): boolean;
      mainTimer(): void;
      notify(): void;
      notifyAll(): void;
      receiveState(arg0: java.nio.ByteBuffer): void;
      sendState(arg0: java.nio.ByteBuffer): void;
      snowCheck(): void;
      start(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.erosion.ErosionRegions extends java.lang.Object
    export class ErosionRegions {
      private constructor();
      static readonly CATEGORY_BUSH: number;
      static readonly CATEGORY_FLOWERBED: number;
      static readonly CATEGORY_GENERIC: number;
      static readonly CATEGORY_PLANTS: number;
      static readonly CATEGORY_STREET_CRACKS: number;
      static readonly CATEGORY_TREES: number;
      static readonly CATEGORY_WALL_CRACKS: number;
      static readonly CATEGORY_WALL_VINES: number;
      static readonly REGION_FLOWERBED: number;
      static readonly REGION_NATURE: number;
      static readonly REGION_STREET: number;
      static readonly REGION_WALL: number;
      static readonly regions?: java.util.ArrayList<zombie.erosion.ErosionRegions$Region>;
  
      Reset(): void;
      equals(arg0: any): boolean;
      getCategory(arg0: number, arg1: number): zombie.erosion.categories.ErosionCategory;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      init(): void;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.erosion.ErosionRegions$Region extends java.lang.Object
    export class ErosionRegions$Region {
      private constructor();
      ID: number;
      readonly categories?: java.util.ArrayList<zombie.erosion.categories.ErosionCategory>;
      checkExterior: boolean;
      hasWall: boolean;
      isExterior: boolean;
      tileNameMatch?: string;
  
      Reset(): void;
      addCategory(arg0: number, arg1: zombie.erosion.categories.ErosionCategory): zombie.erosion.ErosionRegions$Region;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      init(): void;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.erosion.categories {
    // zombie.erosion.categories.ErosionCategory extends java.lang.Object
    export class ErosionCategory {
      private constructor();
      ID: number;
      region?: zombie.erosion.ErosionRegions$Region;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getObjectNames(arg0: java.util.ArrayList<string>): void;
      hashCode(): number;
      init(): void;
      loadCategoryData(arg0: java.nio.ByteBuffer, arg1: number): zombie.erosion.categories.ErosionCategory$Data;
      notify(): void;
      notifyAll(): void;
      replaceExistingObject(arg0: zombie.iso.IsoGridSquare, arg1: zombie.erosion.ErosionData$Square, arg2: zombie.erosion.ErosionData$Chunk, arg3: boolean, arg4: boolean): boolean;
      toString(): string;
      update(arg0: zombie.iso.IsoGridSquare, arg1: zombie.erosion.ErosionData$Square, arg2: zombie.erosion.categories.ErosionCategory$Data, arg3: zombie.erosion.ErosionData$Chunk, arg4: number): void;
      updateObj(arg0: zombie.erosion.ErosionData$Square, arg1: zombie.erosion.categories.ErosionCategory$Data, arg2: zombie.iso.IsoGridSquare, arg3: zombie.erosion.obj.ErosionObj, arg4: boolean, arg5: number, arg6: number, arg7: boolean): void;
      validateSpawn(arg0: zombie.iso.IsoGridSquare, arg1: zombie.erosion.ErosionData$Square, arg2: zombie.erosion.ErosionData$Chunk, arg3: boolean, arg4: boolean, arg5: boolean): boolean;
      wait(arg0: number): void;
    }
    // zombie.erosion.categories.ErosionCategory$Data extends java.lang.Object
    export class ErosionCategory$Data {
      private constructor();
      categoryID: number;
      dispBloom: boolean;
      dispSeason: number;
      doNothing: boolean;
      hasSpawned: boolean;
      regionID: number;
      stage: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      notify(): void;
      notifyAll(): void;
      save(arg0: java.nio.ByteBuffer): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.erosion.obj {
    // zombie.erosion.obj.ErosionObj extends java.lang.Object
    export class ErosionObj {
      private constructor();
      bloomEnd: number;
      bloomStart: number;
      cycleTime: number;
      hasChildSprite: boolean;
      hasFlower: boolean;
      hasSnow: boolean;
      name?: string;
      noSeasonBase: boolean;
      stages: number;
  
      createObject(arg0: zombie.iso.IsoGridSquare, arg1: number, arg2: boolean, arg3: number): zombie.iso.IsoObject;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getObject(arg0: zombie.iso.IsoGridSquare, arg1: boolean): zombie.iso.IsoObject;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      placeObject(arg0: zombie.iso.IsoGridSquare, arg1: number, arg2: boolean, arg3: number, arg4: boolean): boolean;
      removeObject(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      setStage(arg0: zombie.iso.IsoGridSquare, arg1: number, arg2: number, arg3: boolean): boolean;
      setStageObject(arg0: number, arg1: zombie.iso.IsoObject, arg2: number, arg3: boolean): boolean;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.erosion.season {
    // zombie.erosion.season.ErosionSeason extends java.lang.Object
    export class ErosionSeason {
      private constructor();
      static readonly NUM_SEASONS: number;
      static readonly SEASON_AUTUMN: number;
      static readonly SEASON_DEFAULT: number;
      static readonly SEASON_SPRING: number;
      static readonly SEASON_SUMMER: number;
      static readonly SEASON_SUMMER2: number;
      static readonly SEASON_WINTER: number;
  
      Reset(): void;
      clone(): zombie.erosion.season.ErosionSeason;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getCurDayPercent(): number;
      getDawn(): number;
      getDayHighNoon(): number;
      getDayMeanTemperature(): number;
      getDayNoiseVal(): number;
      getDayTemperature(): number;
      getDaylight(): number;
      getDusk(): number;
      getHighNoon(): number;
      getLat(): number;
      getMaxDaylightSummer(): number;
      getMaxDaylightWinter(): number;
      getRainDayStrength(): number;
      getRainYearAverage(): number;
      getSeason(): number;
      getSeasonDay(): number;
      getSeasonDays(): number;
      getSeasonLag(): number;
      getSeasonName(): string;
      getSeasonProgression(): number;
      getSeasonStrength(): number;
      getSeedA(): number;
      getSeedB(): number;
      getSeedC(): number;
      getTempDiff(): number;
      getTempMax(): number;
      getTempMin(): number;
      getWinterStartDay(arg0: number, arg1: number, arg2: number): java.util.GregorianCalendar;
      hashCode(): number;
      init(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      isRainDay(): boolean;
      isSeason(arg0: number): boolean;
      isSunnyDay(): boolean;
      isThunderDay(): boolean;
      notify(): void;
      notifyAll(): void;
      setCurSeason(arg0: number): void;
      setDay(arg0: number, arg1: number, arg2: number): void;
      setRain(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.fileSystem {
    // zombie.fileSystem.DeviceList extends java.lang.Object
    export class DeviceList {
      private constructor();
      add(arg0: zombie.fileSystem.IFileDevice): void;
      createFile(): zombie.fileSystem.IFile;
      createStream(arg0: string): java.io.InputStream;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.fileSystem.FileSeekMode */
    export class FileSeekMode {
      /* ENUM VALUES */
      static readonly BEGIN: FileSeekMode; 
      static readonly CURRENT: FileSeekMode; 
      static readonly END: FileSeekMode; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.fileSystem.FileSeekMode[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): FileSeekMode;
      valueOf(arg0: string): zombie.fileSystem.FileSeekMode;
      values(): zombie.fileSystem.FileSeekMode[];
    }
    // zombie.fileSystem.FileSystem extends java.lang.Object
    export class FileSystem {
      private constructor();
      static readonly INVALID_ASYNC: number;
  
      cancelAsync(arg0: number): void;
      close(arg0: zombie.fileSystem.IFile): void;
      closeAsync(arg0: zombie.fileSystem.IFile, arg1: zombie.fileSystem.IFileTask2Callback): void;
      closeStream(arg0: java.io.InputStream): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDefaultDevice(): zombie.fileSystem.DeviceList;
      getTexturePackAlpha(arg0: string, arg1: string): boolean;
      getTexturePackDevice(arg0: string): zombie.fileSystem.DeviceList;
      getTexturePackFlags(arg0: string): number;
      hasWork(): boolean;
      hashCode(): number;
      mount(arg0: zombie.fileSystem.IFileDevice): boolean;
      mountTexturePack(arg0: string, arg1: zombie.fileSystem.FileSystem$TexturePackTextures, arg2: number): void;
      notify(): void;
      notifyAll(): void;
      open(arg0: zombie.fileSystem.DeviceList, arg1: string, arg2: number): zombie.fileSystem.IFile;
      openAsync(arg0: zombie.fileSystem.DeviceList, arg1: string, arg2: number, arg3: zombie.fileSystem.IFileTask2Callback): number;
      openStream(arg0: zombie.fileSystem.DeviceList, arg1: string): java.io.InputStream;
      runAsync(arg0: zombie.fileSystem.FileTask): number;
      toString(): string;
      unMount(arg0: zombie.fileSystem.IFileDevice): boolean;
      updateAsyncTransactions(): void;
      wait(arg0: number): void;
    }
    // zombie.fileSystem.FileSystem$SubTexture extends java.lang.Object
    export class FileSystem$SubTexture {
      private constructor();
      m_info?: zombie.core.textures.TexturePackPage$SubTextureInfo;
      m_pack_name?: string;
      m_page_name?: string;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.fileSystem.FileSystem$TexturePackTextures extends java.util.HashMap<java.lang.String, zombie.fileSystem.FileSystem$SubTexture>
    export class FileSystem$TexturePackTextures {
      private constructor();
      clear(): void;
      clone(): any;
      compute(arg0: string, arg1: java.util._function.BiFunction<string, zombie.fileSystem.FileSystem$SubTexture, zombie.fileSystem.FileSystem$SubTexture>): zombie.fileSystem.FileSystem$SubTexture;
      computeIfAbsent(arg0: string, arg1: java.util._function.Function<string, zombie.fileSystem.FileSystem$SubTexture>): zombie.fileSystem.FileSystem$SubTexture;
      computeIfPresent(arg0: string, arg1: java.util._function.BiFunction<string, zombie.fileSystem.FileSystem$SubTexture, zombie.fileSystem.FileSystem$SubTexture>): zombie.fileSystem.FileSystem$SubTexture;
      containsKey(arg0: any): boolean;
      containsValue(arg0: any): boolean;
      entrySet(): java.util.Set<java.util.Map$Entry<string, zombie.fileSystem.FileSystem$SubTexture>>;
      equals(arg0: any): boolean;
      forEach(arg0: java.util._function.BiConsumer<string, zombie.fileSystem.FileSystem$SubTexture>): void;
      get(arg0: any): zombie.fileSystem.FileSystem$SubTexture;
      getClass(): java.lang.Class<any>;
      getOrDefault(arg0: any, arg1: zombie.fileSystem.FileSystem$SubTexture): zombie.fileSystem.FileSystem$SubTexture;
      hashCode(): number;
      isEmpty(): boolean;
      keySet(): java.util.Set<string>;
      merge(arg0: string, arg1: zombie.fileSystem.FileSystem$SubTexture, arg2: java.util._function.BiFunction<zombie.fileSystem.FileSystem$SubTexture, zombie.fileSystem.FileSystem$SubTexture, zombie.fileSystem.FileSystem$SubTexture>): zombie.fileSystem.FileSystem$SubTexture;
      notify(): void;
      notifyAll(): void;
      put(arg0: string, arg1: zombie.fileSystem.FileSystem$SubTexture): zombie.fileSystem.FileSystem$SubTexture;
      putAll(arg0: java.util.Map<string, zombie.fileSystem.FileSystem$SubTexture>): void;
      putIfAbsent(arg0: string, arg1: zombie.fileSystem.FileSystem$SubTexture): zombie.fileSystem.FileSystem$SubTexture;
      remove(arg0: any): zombie.fileSystem.FileSystem$SubTexture;
      replace(arg0: string, arg1: zombie.fileSystem.FileSystem$SubTexture, arg2: zombie.fileSystem.FileSystem$SubTexture): boolean;
      replaceAll(arg0: java.util._function.BiFunction<string, zombie.fileSystem.FileSystem$SubTexture, zombie.fileSystem.FileSystem$SubTexture>): void;
      size(): number;
      toString(): string;
      values(): java.util.Collection<zombie.fileSystem.FileSystem$SubTexture>;
      wait(arg0: number): void;
    }
    // zombie.fileSystem.FileTask extends java.lang.Object
    export class FileTask {
      private constructor();
      call(): any;
      done(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getErrorMessage(): string;
      handleResult(arg0: any): void;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      setPriority(arg0: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.fileSystem.IFile
    export class IFile {
      private constructor();
      close(): void;
      getBuffer(): number[];
      getDevice(): zombie.fileSystem.IFileDevice;
      getInputStream(): java.io.InputStream;
      open(arg0: string, arg1: number): boolean;
      pos(): number;
      read(arg0: number[], arg1: number): boolean;
      release(): void;
      seek(arg0: zombie.fileSystem.FileSeekMode, arg1: number): boolean;
      size(): number;
      write(arg0: number[], arg1: number): boolean;
    }
    // zombie.fileSystem.IFileDevice
    export class IFileDevice {
      private constructor();
      createFile(arg0: zombie.fileSystem.IFile): zombie.fileSystem.IFile;
      createStream(arg0: string, arg1: java.io.InputStream): java.io.InputStream;
      destroyFile(arg0: zombie.fileSystem.IFile): void;
      destroyStream(arg0: java.io.InputStream): void;
      name(): string;
    }
    // zombie.fileSystem.IFileTask2Callback
    export class IFileTask2Callback {
      private constructor();
      onFileTaskFinished(arg0: zombie.fileSystem.IFile, arg1: any): void;
    }
  }
  export namespace zombie.gameStates {
    // zombie.gameStates.AnimationViewerState extends zombie.gameStates.GameState
    export class AnimationViewerState {
      private constructor();
      static instance?: zombie.gameStates.AnimationViewerState;
  
      checkInstance(): zombie.gameStates.AnimationViewerState;
      enter(): void;
      equals(arg0: any): boolean;
      exit(): void;
      fromLua0(arg0: string): any;
      fromLua1(arg0: string, arg1: any): any;
      getBoolean(arg0: string): boolean;
      getClass(): java.lang.Class<any>;
      getOptionByIndex(arg0: number): zombie.config.ConfigOption;
      getOptionByName(arg0: string): zombie.config.ConfigOption;
      getOptionCount(): number;
      hashCode(): number;
      load(): void;
      notify(): void;
      notifyAll(): void;
      redirectState(): zombie.gameStates.GameState;
      reenter(): void;
      render(): void;
      save(): void;
      setBoolean(arg0: string, arg1: boolean): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      toString(): string;
      update(): zombie.gameStates.GameStateMachine$StateAction;
      wait(arg0: number): void;
      yield(): void;
    }
    // zombie.gameStates.AnimationViewerState$BooleanDebugOption extends zombie.config.BooleanConfigOption
    export class AnimationViewerState$BooleanDebugOption {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDefaultValue(): boolean;
      getName(): string;
      getTooltip(): string;
      getType(): string;
      getValue(): boolean;
      getValueAsLuaString(): string;
      getValueAsObject(): any;
      getValueAsString(): string;
      hashCode(): number;
      isValidString(arg0: string): boolean;
      notify(): void;
      notifyAll(): void;
      parse(arg0: string): void;
      resetToDefault(): void;
      setDefaultToCurrentValue(): void;
      setValue(arg0: boolean): void;
      setValueFromObject(arg0: any): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.gameStates.AttachmentEditorState extends zombie.gameStates.GameState
    export class AttachmentEditorState {
      private constructor();
      static instance?: zombie.gameStates.AttachmentEditorState;
  
      checkInstance(): zombie.gameStates.AttachmentEditorState;
      enter(): void;
      equals(arg0: any): boolean;
      exit(): void;
      fromLua0(arg0: string): any;
      fromLua1(arg0: string, arg1: any): any;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      redirectState(): zombie.gameStates.GameState;
      reenter(): void;
      render(): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      toString(): string;
      update(): zombie.gameStates.GameStateMachine$StateAction;
      wait(arg0: number): void;
      yield(): void;
    }
    // zombie.gameStates.ChooseGameInfo extends java.lang.Object
    export class ChooseGameInfo {
      private constructor();
      Reset(): void;
      equals(arg0: any): boolean;
      getAvailableModDetails(arg0: string): zombie.gameStates.ChooseGameInfo$Mod;
      getClass(): java.lang.Class<any>;
      getMapDetails(arg0: string): zombie.gameStates.ChooseGameInfo$Map;
      getModDetails(arg0: string): zombie.gameStates.ChooseGameInfo$Mod;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      readModInfo(arg0: string): zombie.gameStates.ChooseGameInfo$Mod;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.gameStates.ChooseGameInfo$Map extends java.lang.Object
    export class ChooseGameInfo$Map {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDescription(): string;
      getDirectory(): string;
      getLotDirectories(): java.util.ArrayList<string>;
      getThumbnail(): zombie.core.textures.Texture;
      getTitle(): string;
      hashCode(): number;
      isFixed2x(): boolean;
      notify(): void;
      notifyAll(): void;
      setDescription(arg0: string): void;
      setDirectory(arg0: string): void;
      setFixed2x(arg0: boolean): void;
      setThumbnail(arg0: zombie.core.textures.Texture): void;
      setTitle(arg0: string): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.gameStates.ChooseGameInfo$Mod extends java.lang.Object
    export class ChooseGameInfo$Mod {
      private constructor();
      readonly actionGroupsFile?: java.io.File;
      readonly animSetsFile?: java.io.File;
      readonly animsXFile?: java.io.File;
      readonly baseFile?: java.io.File;
      dir?: string;
      readonly mediaFile?: java.io.File;
      tex?: zombie.core.textures.Texture;
  
      addPack(arg0: string, arg1: number): void;
      addTileDef(arg0: string, arg1: number): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDescription(): string;
      getDir(): string;
      getId(): string;
      getName(): string;
      getPacks(): java.util.ArrayList<zombie.gameStates.ChooseGameInfo$PackFile>;
      getPoster(arg0: number): string;
      getPosterCount(): number;
      getRequire(): java.util.ArrayList<string>;
      getTexture(): zombie.core.textures.Texture;
      getTileDefs(): java.util.ArrayList<zombie.gameStates.ChooseGameInfo$TileDef>;
      getUrl(): string;
      getVersionMax(): zombie.core.GameVersion;
      getVersionMin(): zombie.core.GameVersion;
      getWorkshopID(): string;
      hashCode(): number;
      isAvailable(): boolean;
      notify(): void;
      notifyAll(): void;
      setAvailable(arg0: boolean): void;
      setId(arg0: string): void;
      setName(arg0: string): void;
      setRequire(arg0: java.util.ArrayList<string>): void;
      setTexture(arg0: zombie.core.textures.Texture): void;
      setUrl(arg0: string): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.gameStates.ChooseGameInfo$PackFile extends java.lang.Object
    export class ChooseGameInfo$PackFile {
      private constructor();
      readonly flags: number;
      readonly name?: string;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.gameStates.ChooseGameInfo$SpawnOrigin extends java.lang.Object
    export class ChooseGameInfo$SpawnOrigin {
      private constructor();
      h: number;
      w: number;
      x: number;
      y: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.gameStates.ChooseGameInfo$TileDef extends java.lang.Object
    export class ChooseGameInfo$TileDef {
      private constructor();
      fileNumber: number;
      name?: string;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.gameStates.ConnectToServerState extends zombie.gameStates.GameState
    export class ConnectToServerState {
      private constructor();
      static instance?: zombie.gameStates.ConnectToServerState;
  
      FromLua(arg0: string): void;
      enter(): void;
      equals(arg0: any): boolean;
      exit(): void;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      redirectState(): zombie.gameStates.GameState;
      reenter(): void;
      render(): void;
      toString(): string;
      update(): zombie.gameStates.GameStateMachine$StateAction;
      wait(arg0: number): void;
      yield(): void;
    }
    // zombie.gameStates.DebugChunkState extends zombie.gameStates.GameState
    export class DebugChunkState {
      private constructor();
      static instance?: zombie.gameStates.DebugChunkState;
  
      checkInstance(): zombie.gameStates.DebugChunkState;
      enter(): void;
      equals(arg0: any): boolean;
      exit(): void;
      fromLua0(arg0: string): any;
      fromLua1(arg0: string, arg1: any): any;
      fromLua2(arg0: string, arg1: any, arg2: any): any;
      getBoolean(arg0: string): boolean;
      getClass(): java.lang.Class<any>;
      getOptionByIndex(arg0: number): zombie.config.ConfigOption;
      getOptionByName(arg0: string): zombie.config.ConfigOption;
      getOptionCount(): number;
      hashCode(): number;
      lineClearCached(arg0: zombie.iso.IsoCell, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: boolean): zombie.iso.LosUtil$TestResults;
      load(): void;
      notify(): void;
      notifyAll(): void;
      redirectState(): zombie.gameStates.GameState;
      reenter(): void;
      render(): void;
      renderScene(): void;
      save(): void;
      setBoolean(arg0: string, arg1: boolean): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      toString(): string;
      update(): zombie.gameStates.GameStateMachine$StateAction;
      updateScene(): zombie.gameStates.GameStateMachine$StateAction;
      wait(arg0: number): void;
      yield(): void;
    }
    // zombie.gameStates.DebugChunkState$BooleanDebugOption extends zombie.config.BooleanConfigOption
    export class DebugChunkState$BooleanDebugOption {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDefaultValue(): boolean;
      getName(): string;
      getTooltip(): string;
      getType(): string;
      getValue(): boolean;
      getValueAsLuaString(): string;
      getValueAsObject(): any;
      getValueAsString(): string;
      hashCode(): number;
      isValidString(arg0: string): boolean;
      notify(): void;
      notifyAll(): void;
      parse(arg0: string): void;
      resetToDefault(): void;
      setDefaultToCurrentValue(): void;
      setValue(arg0: boolean): void;
      setValueFromObject(arg0: any): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.gameStates.DebugGlobalObjectState extends zombie.gameStates.GameState
    export class DebugGlobalObjectState {
      private constructor();
      static instance?: zombie.gameStates.DebugGlobalObjectState;
  
      enter(): void;
      equals(arg0: any): boolean;
      exit(): void;
      fromLua0(arg0: string): any;
      fromLua1(arg0: string, arg1: any): any;
      fromLua2(arg0: string, arg1: any, arg2: any): any;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      redirectState(): zombie.gameStates.GameState;
      reenter(): void;
      render(): void;
      renderScene(): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      toString(): string;
      update(): zombie.gameStates.GameStateMachine$StateAction;
      updateScene(): zombie.gameStates.GameStateMachine$StateAction;
      wait(arg0: number): void;
      yield(): void;
    }
    // zombie.gameStates.GameLoadingState extends zombie.gameStates.GameState
    export class GameLoadingState {
      private constructor();
      static GameLoadingString?: string;
      Stage: number;
      Time: number;
      static bDone: boolean;
      bForceDone: boolean;
      static build23Stop: boolean;
      static convertingFileCount: number;
      static convertingFileMax: number;
      static convertingWorld: boolean;
      static loader?: java.lang.Thread;
      static mapDownloadFailed: boolean;
      static newGame: boolean;
      static playerCreated: boolean;
      static playerWrongIP: boolean;
      static unexpectedError: boolean;
  
      Done(): void;
      enter(): void;
      equals(arg0: any): boolean;
      exit(): void;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      redirectState(): zombie.gameStates.GameState;
      reenter(): void;
      render(): void;
      toString(): string;
      update(): zombie.gameStates.GameStateMachine$StateAction;
      wait(arg0: number): void;
      yield(): void;
    }
    // zombie.gameStates.GameState extends java.lang.Object
    export class GameState {
      private constructor();
      enter(): void;
      equals(arg0: any): boolean;
      exit(): void;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      redirectState(): zombie.gameStates.GameState;
      reenter(): void;
      render(): void;
      toString(): string;
      update(): zombie.gameStates.GameStateMachine$StateAction;
      wait(arg0: number): void;
      yield(): void;
    }
    // zombie.gameStates.GameStateMachine extends java.lang.Object
    export class GameStateMachine {
      private constructor();
      Loop: boolean;
      LoopToState: number;
      StateIndex: number;
      readonly States?: java.util.ArrayList<zombie.gameStates.GameState>;
      current?: zombie.gameStates.GameState;
      firstrun: boolean;
      forceNext?: zombie.gameStates.GameState;
  
      equals(arg0: any): boolean;
      forceNextState(arg0: zombie.gameStates.GameState): void;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      render(): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.gameStates.GameStateMachine$StateAction */
    export class GameStateMachine$StateAction {
      /* ENUM VALUES */
      static readonly Continue: GameStateMachine$StateAction; 
      static readonly Remain: GameStateMachine$StateAction; 
      static readonly Yield: GameStateMachine$StateAction; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.gameStates.GameStateMachine$StateAction[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): GameStateMachine$StateAction;
      valueOf(arg0: string): zombie.gameStates.GameStateMachine$StateAction;
      values(): zombie.gameStates.GameStateMachine$StateAction[];
    }
    // zombie.gameStates.LoadingQueueState extends zombie.gameStates.GameState
    export class LoadingQueueState {
      private constructor();
      enter(): void;
      equals(arg0: any): boolean;
      exit(): void;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      onConnectionImmediate(): void;
      onPlaceInQueue(arg0: number): void;
      redirectState(): zombie.gameStates.GameState;
      reenter(): void;
      render(): void;
      toString(): string;
      update(): zombie.gameStates.GameStateMachine$StateAction;
      wait(arg0: number): void;
      yield(): void;
    }
    // zombie.gameStates.MainScreenState extends zombie.gameStates.GameState
    export class MainScreenState {
      private constructor();
      readonly Elements?: java.util.ArrayList<zombie.gameStates.MainScreenState$ScreenElement>;
      static Version?: string;
      alpha: number;
      alphaStep: number;
      static ambient?: fmod.fmod.Audio;
      static instance?: zombie.gameStates.MainScreenState;
      lightOffCount: number;
      lightningCount: number;
      lightningDelta: number;
      lightningFullTimer: number;
      lightningTargetDelta: number;
      lightningTimelineMarker: boolean;
      m_worldMap?: zombie.worldMap.UIWorldMap;
      showLogo: boolean;
      targetAlpha: number;
      static totalScale: number;
  
      DrawTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
      ShouldShowLogo(): boolean;
      convertToByteBuffer(arg0: java.awt.image.BufferedImage): java.nio.ByteBuffer;
      enter(): void;
      equals(arg0: any): boolean;
      exit(): void;
      getClass(): java.lang.Class<any>;
      getInstance(): zombie.gameStates.MainScreenState;
      hashCode(): number;
      loadIcons(): org.lwjgl.glfw.GLFWImage$Buffer;
      main(arg0: string[]): void;
      notify(): void;
      notifyAll(): void;
      redirectState(): zombie.gameStates.GameState;
      reenter(): void;
      render(): void;
      renderBackground(): void;
      setConnectToServerState(arg0: zombie.gameStates.ConnectToServerState): void;
      toString(): string;
      update(): zombie.gameStates.GameStateMachine$StateAction;
      wait(arg0: number): void;
      yield(): void;
    }
    // zombie.gameStates.MainScreenState$Credit extends java.lang.Object
    export class MainScreenState$Credit {
      private constructor();
      disappearDelay: number;
      name?: zombie.core.textures.Texture;
      nameAlpha: number;
      nameAppearDelay: number;
      nameTargetAlpha: number;
      title?: zombie.core.textures.Texture;
      titleAlpha: number;
      titleTargetAlpha: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.gameStates.MainScreenState$ScreenElement extends java.lang.Object
    export class MainScreenState$ScreenElement {
      private constructor();
      TicksTillTargetAlpha: number;
      alpha: number;
      alphaStep: number;
      jumpBack: boolean;
      sx: number;
      sy: number;
      targetAlpha: number;
      tex?: zombie.core.textures.Texture;
      x: number;
      xCount: number;
      xVel: number;
      xVelO: number;
      y: number;
      yVel: number;
      yVelO: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      render(): void;
      setY(arg0: number): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.globalObjects {
    // zombie.globalObjects.CGlobalObject extends zombie.globalObjects.GlobalObject
    export class CGlobalObject {
      private constructor();
      Reset(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getSystem(): zombie.globalObjects.GlobalObjectSystem;
      getX(): number;
      getY(): number;
      getZ(): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      setLocation(arg0: number, arg1: number, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.globalObjects.CGlobalObjectSystem extends zombie.globalObjects.GlobalObjectSystem
    export class CGlobalObjectSystem {
      private constructor();
      Reset(): void;
      allocList(): java.util.ArrayList<zombie.globalObjects.GlobalObject>;
      equals(arg0: any): boolean;
      finishedWithList(arg0: java.util.ArrayList<zombie.globalObjects.GlobalObject>): void;
      getClass(): java.lang.Class<any>;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getName(): string;
      getObjectAt(arg0: number, arg1: number, arg2: number): zombie.globalObjects.GlobalObject;
      getObjectByIndex(arg0: number): zombie.globalObjects.GlobalObject;
      getObjectCount(): number;
      getObjectsAdjacentTo(arg0: number, arg1: number, arg2: number): java.util.ArrayList<zombie.globalObjects.GlobalObject>;
      getObjectsInChunk(arg0: number, arg1: number): java.util.ArrayList<zombie.globalObjects.GlobalObject>;
      hasObjectsInChunk(arg0: number, arg1: number): boolean;
      hashCode(): number;
      newObject(arg0: number, arg1: number, arg2: number): zombie.globalObjects.GlobalObject;
      notify(): void;
      notifyAll(): void;
      receiveNewLuaObjectAt(arg0: number, arg1: number, arg2: number, arg3: se.krka.kahlua.vm.KahluaTable): void;
      receiveRemoveLuaObjectAt(arg0: number, arg1: number, arg2: number): void;
      receiveServerCommand(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      receiveUpdateLuaObjectAt(arg0: number, arg1: number, arg2: number, arg3: se.krka.kahlua.vm.KahluaTable): void;
      removeObject(arg0: zombie.globalObjects.GlobalObject): void;
      sendCommand(arg0: string, arg1: zombie.characters.IsoPlayer, arg2: se.krka.kahlua.vm.KahluaTable): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.globalObjects.CGlobalObjects extends java.lang.Object
    export class CGlobalObjects {
      private constructor();
      Reset(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getSystemByIndex(arg0: number): zombie.globalObjects.CGlobalObjectSystem;
      getSystemByName(arg0: string): zombie.globalObjects.CGlobalObjectSystem;
      getSystemCount(): number;
      hashCode(): number;
      initSystems(): void;
      loadInitialState(arg0: java.nio.ByteBuffer): void;
      newSystem(arg0: string): zombie.globalObjects.CGlobalObjectSystem;
      noise(arg0: string): void;
      notify(): void;
      notifyAll(): void;
      receiveServerCommand(arg0: string, arg1: string, arg2: se.krka.kahlua.vm.KahluaTable): boolean;
      registerSystem(arg0: string): zombie.globalObjects.CGlobalObjectSystem;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.globalObjects.GlobalObject extends java.lang.Object
    export class GlobalObject {
      private constructor();
      Reset(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getSystem(): zombie.globalObjects.GlobalObjectSystem;
      getX(): number;
      getY(): number;
      getZ(): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      setLocation(arg0: number, arg1: number, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.globalObjects.GlobalObjectSystem extends java.lang.Object
    export class GlobalObjectSystem {
      private constructor();
      Reset(): void;
      allocList(): java.util.ArrayList<zombie.globalObjects.GlobalObject>;
      equals(arg0: any): boolean;
      finishedWithList(arg0: java.util.ArrayList<zombie.globalObjects.GlobalObject>): void;
      getClass(): java.lang.Class<any>;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getName(): string;
      getObjectAt(arg0: number, arg1: number, arg2: number): zombie.globalObjects.GlobalObject;
      getObjectByIndex(arg0: number): zombie.globalObjects.GlobalObject;
      getObjectCount(): number;
      getObjectsAdjacentTo(arg0: number, arg1: number, arg2: number): java.util.ArrayList<zombie.globalObjects.GlobalObject>;
      getObjectsInChunk(arg0: number, arg1: number): java.util.ArrayList<zombie.globalObjects.GlobalObject>;
      hasObjectsInChunk(arg0: number, arg1: number): boolean;
      hashCode(): number;
      newObject(arg0: number, arg1: number, arg2: number): zombie.globalObjects.GlobalObject;
      notify(): void;
      notifyAll(): void;
      removeObject(arg0: zombie.globalObjects.GlobalObject): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.globalObjects.SGlobalObject extends zombie.globalObjects.GlobalObject
    export class SGlobalObject {
      private constructor();
      Reset(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getSystem(): zombie.globalObjects.GlobalObjectSystem;
      getX(): number;
      getY(): number;
      getZ(): number;
      hashCode(): number;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      notify(): void;
      notifyAll(): void;
      save(arg0: java.nio.ByteBuffer): void;
      setLocation(arg0: number, arg1: number, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.globalObjects.SGlobalObjectSystem extends zombie.globalObjects.GlobalObjectSystem
    export class SGlobalObjectSystem {
      private constructor();
      OnIsoObjectChangedItself(arg0: zombie.iso.IsoObject): void;
      Reset(): void;
      addGlobalObjectOnClient(arg0: zombie.globalObjects.SGlobalObject): void;
      allocList(): java.util.ArrayList<zombie.globalObjects.GlobalObject>;
      chunkLoaded(arg0: number, arg1: number): void;
      equals(arg0: any): boolean;
      finishedWithList(arg0: java.util.ArrayList<zombie.globalObjects.GlobalObject>): void;
      getClass(): java.lang.Class<any>;
      getInitialStateForClient(): se.krka.kahlua.vm.KahluaTable;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getName(): string;
      getObjectAt(arg0: number, arg1: number, arg2: number): zombie.globalObjects.GlobalObject;
      getObjectByIndex(arg0: number): zombie.globalObjects.GlobalObject;
      getObjectCount(): number;
      getObjectsAdjacentTo(arg0: number, arg1: number, arg2: number): java.util.ArrayList<zombie.globalObjects.GlobalObject>;
      getObjectsInChunk(arg0: number, arg1: number): java.util.ArrayList<zombie.globalObjects.GlobalObject>;
      hasObjectsInChunk(arg0: number, arg1: number): boolean;
      hashCode(): number;
      load(): void;
      loadedWorldVersion(): number;
      newObject(arg0: number, arg1: number, arg2: number): zombie.globalObjects.GlobalObject;
      notify(): void;
      notifyAll(): void;
      receiveClientCommand(arg0: string, arg1: zombie.characters.IsoPlayer, arg2: se.krka.kahlua.vm.KahluaTable): void;
      removeGlobalObjectOnClient(arg0: zombie.globalObjects.SGlobalObject): void;
      removeObject(arg0: zombie.globalObjects.GlobalObject): void;
      save(arg0: java.nio.ByteBuffer): void;
      sendCommand(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      setModDataKeys(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setObjectModDataKeys(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setObjectSyncKeys(arg0: se.krka.kahlua.vm.KahluaTable): void;
      toString(): string;
      update(): void;
      updateGlobalObjectOnClient(arg0: zombie.globalObjects.SGlobalObject): void;
      wait(arg0: number): void;
    }
    // zombie.globalObjects.SGlobalObjects extends java.lang.Object
    export class SGlobalObjects {
      private constructor();
      OnIsoObjectChangedItself(arg0: string, arg1: zombie.iso.IsoObject): void;
      Reset(): void;
      chunkLoaded(arg0: number, arg1: number): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getSystemByIndex(arg0: number): zombie.globalObjects.SGlobalObjectSystem;
      getSystemByName(arg0: string): zombie.globalObjects.SGlobalObjectSystem;
      getSystemCount(): number;
      hashCode(): number;
      initSystems(): void;
      load(): void;
      newSystem(arg0: string): zombie.globalObjects.SGlobalObjectSystem;
      noise(arg0: string): void;
      notify(): void;
      notifyAll(): void;
      receiveClientCommand(arg0: string, arg1: string, arg2: zombie.characters.IsoPlayer, arg3: se.krka.kahlua.vm.KahluaTable): boolean;
      registerSystem(arg0: string): zombie.globalObjects.SGlobalObjectSystem;
      save(): void;
      saveInitialStateForClient(arg0: java.nio.ByteBuffer): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.input {
    // zombie.input.GameKeyboard extends java.lang.Object
    export class GameKeyboard {
      private constructor();
      static bNoEventsWhileLoading: boolean;
      static doLuaKeyPressed: boolean;
  
      eatKeyPress(arg0: number): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getEventQueue(): org.lwjglx.input.KeyEventQueue;
      getEventQueuePolling(): org.lwjglx.input.KeyEventQueue;
      hashCode(): number;
      isKeyDown(arg0: number): boolean;
      isKeyPressed(arg0: number): boolean;
      notify(): void;
      notifyAll(): void;
      poll(): void;
      setDoLuaKeyPressed(arg0: boolean): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
      wasKeyDown(arg0: number): boolean;
    }
    // zombie.input.JoypadManager extends java.lang.Object
    export class JoypadManager {
      private constructor();
      readonly ActiveControllerGUIDs?: java.util.HashSet<string>;
      readonly JoypadList?: java.util.ArrayList<zombie.input.JoypadManager$Joypad>;
      readonly Joypads?: zombie.input.JoypadManager$Joypad[];
      readonly JoypadsController?: zombie.input.JoypadManager$Joypad[];
      static readonly instance?: zombie.input.JoypadManager;
  
      Reset(): void;
      addJoypad(arg0: number, arg1: string, arg2: string): zombie.input.JoypadManager$Joypad;
      assignJoypad(arg0: number, arg1: number): void;
      equals(arg0: any): boolean;
      getAimingAxisX(arg0: number): number;
      getAimingAxisY(arg0: number): number;
      getClass(): java.lang.Class<any>;
      getDeadZone(arg0: number, arg1: number): number;
      getFromControllerID(arg0: number): zombie.input.JoypadManager$Joypad;
      getFromPlayer(arg0: number): zombie.input.JoypadManager$Joypad;
      getLastActivity(arg0: number): number;
      getMovementAxisX(arg0: number): number;
      getMovementAxisY(arg0: number): number;
      hashCode(): number;
      isAButtonReleasePress(arg0: number): boolean;
      isAButtonStartPress(arg0: number): boolean;
      isAPressed(arg0: number): boolean;
      isBButtonReleasePress(arg0: number): boolean;
      isBButtonStartPress(arg0: number): boolean;
      isBPressed(arg0: number): boolean;
      isButtonReleasePress(arg0: number, arg1: number): boolean;
      isButtonStartPress(arg0: number, arg1: number): boolean;
      isDownPressed(arg0: number): boolean;
      isJoypadConnected(arg0: number): boolean;
      isL3Pressed(arg0: number): boolean;
      isLBPressed(arg0: number): boolean;
      isLTPressed(arg0: number): boolean;
      isLeftPressed(arg0: number): boolean;
      isR3Pressed(arg0: number): boolean;
      isRBPressed(arg0: number): boolean;
      isRTPressed(arg0: number): boolean;
      isRightPressed(arg0: number): boolean;
      isUpPressed(arg0: number): boolean;
      isXButtonReleasePress(arg0: number): boolean;
      isXButtonStartPress(arg0: number): boolean;
      isXPressed(arg0: number): boolean;
      isYButtonReleasePress(arg0: number): boolean;
      isYButtonStartPress(arg0: number): boolean;
      isYPressed(arg0: number): boolean;
      notify(): void;
      notifyAll(): void;
      onControllerConnected(arg0: org.lwjglx.input.Controller): void;
      onControllerDisconnected(arg0: org.lwjglx.input.Controller): void;
      onPressed(arg0: number, arg1: number): void;
      onPressedAxis(arg0: number, arg1: number): void;
      onPressedAxisNeg(arg0: number, arg1: number): void;
      onPressedPov(arg0: number): void;
      onPressedTrigger(arg0: number, arg1: number): void;
      reloadControllerFiles(): void;
      renderUI(): void;
      revertToKeyboardAndMouse(): void;
      saveControllerSettings(arg0: number): void;
      setControllerActive(arg0: string, arg1: boolean): void;
      setDeadZone(arg0: number, arg1: number, arg2: number): void;
      syncActiveControllers(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.input.JoypadManager$Joypad extends java.lang.Object
    export class JoypadManager$Joypad {
      private constructor();
      equals(arg0: any): boolean;
      getAButton(): number;
      getAimingAxisX(): number;
      getAimingAxisY(): number;
      getBButton(): number;
      getBackButton(): number;
      getClass(): java.lang.Class<any>;
      getDeadZone(arg0: number): number;
      getID(): number;
      getL3(): number;
      getLBumper(): number;
      getMovementAxisX(): number;
      getMovementAxisY(): number;
      getR3(): number;
      getRBumper(): number;
      getStartButton(): number;
      getXButton(): number;
      getYButton(): number;
      hashCode(): number;
      isAPressed(): boolean;
      isBPressed(): boolean;
      isButtonPressed(arg0: number): boolean;
      isButtonReleasePress(arg0: number): boolean;
      isButtonStartPress(arg0: number): boolean;
      isDisabled(): boolean;
      isDownPressed(): boolean;
      isL3Pressed(): boolean;
      isLBPressed(): boolean;
      isLTPressed(): boolean;
      isLeftPressed(): boolean;
      isR3Pressed(): boolean;
      isRBPressed(): boolean;
      isRTPressed(): boolean;
      isRightPressed(): boolean;
      isUpPressed(): boolean;
      isXPressed(): boolean;
      isYPressed(): boolean;
      notify(): void;
      notifyAll(): void;
      onPressed(arg0: number): void;
      onPressedAxis(arg0: number): void;
      onPressedAxisNeg(arg0: number): void;
      onPressedPov(): void;
      onPressedTrigger(arg0: number): void;
      setDeadZone(arg0: number, arg1: number): void;
      toString(): string;
      wait(arg0: number): void;
      wasButtonPressed(arg0: number): boolean;
    }
    // zombie.input.Mouse extends java.lang.Object
    export class Mouse {
      private constructor();
      static UICaptured?: boolean[];
      static bLeftDown: boolean;
      static bLeftWasDown: boolean;
      static bMiddleDown: boolean;
      static bMiddleWasDown: boolean;
      static bRightDown: boolean;
      static bRightWasDown: boolean;
      static lastActivity: number;
      static m_buttonDownStates?: boolean[];
      static wheelDelta: number;
  
      UIBlockButtonDown(arg0: number): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getWheelState(): number;
      getX(): number;
      getXA(): number;
      getY(): number;
      getYA(): number;
      hashCode(): number;
      initCustomCursor(): void;
      isButtonDown(arg0: number): boolean;
      isButtonDownUICheck(arg0: number): boolean;
      isCursorVisible(): boolean;
      isLeftDown(): boolean;
      isLeftPressed(): boolean;
      isLeftReleased(): boolean;
      isLeftUp(): boolean;
      isMiddleDown(): boolean;
      isMiddlePressed(): boolean;
      isMiddleReleased(): boolean;
      isMiddleUp(): boolean;
      isRightDown(): boolean;
      isRightPressed(): boolean;
      isRightReleased(): boolean;
      isRightUp(): boolean;
      loadCursor(arg0: string): org.lwjglx.input.Cursor;
      notify(): void;
      notifyAll(): void;
      poll(): void;
      renderCursorTexture(): void;
      setCursorVisible(arg0: boolean): void;
      setXY(arg0: number, arg1: number): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.interfaces {
    // zombie.interfaces.ITexture
    export class ITexture {
      private constructor();
      bind(arg0: number): void;
      destroy(): void;
      getData(): zombie.core.utils.WrappedBuffer;
      getHeight(): number;
      getHeightHW(): number;
      getID(): number;
      getMask(): zombie.core.textures.Mask;
      getWidth(): number;
      getWidthHW(): number;
      getXEnd(): number;
      getXStart(): number;
      getYEnd(): number;
      getYStart(): number;
      isDestroyed(): boolean;
      isSolid(): boolean;
      makeTransp(arg0: number, arg1: number, arg2: number): void;
      setAlphaForeach(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setData(arg0: java.nio.ByteBuffer): void;
      setMask(arg0: zombie.core.textures.Mask): void;
      setRegion(arg0: number, arg1: number, arg2: number, arg3: number): void;
    }
  }
  export namespace zombie.inventory {
    // zombie.inventory.FixingManager extends java.lang.Object
    export class FixingManager {
      private constructor();
      equals(arg0: any): boolean;
      fixItem(arg0: zombie.inventory.InventoryItem, arg1: zombie.characters.IsoGameCharacter, arg2: zombie.scripting.objects.Fixing, arg3: zombie.scripting.objects.Fixing$Fixer): zombie.inventory.InventoryItem;
      getChanceOfFail(arg0: zombie.inventory.InventoryItem, arg1: zombie.characters.IsoGameCharacter, arg2: zombie.scripting.objects.Fixing, arg3: zombie.scripting.objects.Fixing$Fixer): number;
      getClass(): java.lang.Class<any>;
      getCondRepaired(arg0: zombie.inventory.InventoryItem, arg1: zombie.characters.IsoGameCharacter, arg2: zombie.scripting.objects.Fixing, arg3: zombie.scripting.objects.Fixing$Fixer): number;
      getFixes(arg0: zombie.inventory.InventoryItem): java.util.ArrayList<zombie.scripting.objects.Fixing>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      useFixer(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.scripting.objects.Fixing$Fixer, arg2: zombie.inventory.InventoryItem): void;
      wait(arg0: number): void;
    }
    // zombie.inventory.InventoryItem extends java.lang.Object
    export class InventoryItem {
      private constructor();
      CanStoreWater: boolean;
      CloseKillMove?: string;
      Cooked: boolean;
      IsWaterSource: boolean;
      ReplaceOnUseOn?: string;
      RequiresEquippedBothHands: boolean;
      byteData?: java.nio.ByteBuffer;
      col?: zombie.core.Color;
      extraItems?: java.util.ArrayList<string>;
      fatigueChange: number;
      id: number;
      jobDelta: number;
      jobType?: string;
      keepOnDeplete: boolean;
      mainCategory?: string;
      worldItem?: zombie.iso.objects.IsoWorldInventoryObject;
      worldScale: number;
      worldZRotation: number;
  
      CanStack(arg0: zombie.inventory.InventoryItem): boolean;
      CopyModData(arg0: se.krka.kahlua.vm.KahluaTable): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      HowRotten(): number;
      IsClothing(): boolean;
      IsDrainable(): boolean;
      IsFood(): boolean;
      IsInventoryContainer(): boolean;
      IsLiterature(): boolean;
      IsMap(): boolean;
      IsRotten(): boolean;
      IsWeapon(): boolean;
      ModDataMatches(arg0: zombie.inventory.InventoryItem): boolean;
      SetContainerPosition(arg0: number, arg1: number): void;
      Use(arg0: boolean, arg1: boolean): void;
      UseItem(): void;
      addExtraItem(arg0: string): void;
      allowRandomTint(): boolean;
      canBeActivated(): boolean;
      canBeRemote(): boolean;
      canEmitLight(): boolean;
      canStoreWater(): boolean;
      copyConditionModData(arg0: zombie.inventory.InventoryItem): void;
      copyModData(arg0: se.krka.kahlua.vm.KahluaTable): void;
      doBuildingStash(): void;
      equals(arg0: any): boolean;
      finishupdate(): boolean;
      getA(): number;
      getActualWeight(): number;
      getAge(): number;
      getAlcoholPower(): number;
      getAlternateModelName(): string;
      getAmmoType(): string;
      getAttachedSlot(): number;
      getAttachedSlotType(): string;
      getAttachedToModel(): string;
      getAttachmentReplacement(): string;
      getAttachmentType(): string;
      getAttachmentsProvided(): java.util.ArrayList<string>;
      getB(): number;
      getBandagePower(): number;
      getBlood(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getBloodClothingType(): java.util.ArrayList<zombie.characterTextures.BloodClothingType>;
      getBodyLocation(): string;
      getBoredomChange(): number;
      getBrakeForce(): number;
      getBreakSound(): string;
      getBringToBearSound(): string;
      getBurntString(): string;
      getByteData(): java.nio.ByteBuffer;
      getCat(): zombie.inventory.ItemType;
      getCategory(): string;
      getChanceToSpawnDamaged(): number;
      getClass(): java.lang.Class<any>;
      getCleanString(arg0: number): string;
      getClothingItem(): zombie.core.skinnedmodel.population.ClothingItem;
      getClothingItemExtra(): java.util.ArrayList<string>;
      getClothingItemExtraOption(): java.util.ArrayList<string>;
      getClothingItemName(): string;
      getColor(): zombie.core.Color;
      getColorBlue(): number;
      getColorGreen(): number;
      getColorInfo(): zombie.core.textures.ColorInfo;
      getColorRed(): number;
      getCondition(): number;
      getConditionLowerNormal(): number;
      getConditionLowerOffroad(): number;
      getConditionMax(): number;
      getConsolidateOption(): string;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerX(): number;
      getContainerY(): number;
      getContentsWeight(): number;
      getCookedString(): string;
      getCookingTime(): number;
      getCount(): number;
      getCountDownSound(): string;
      getCurrentAmmoCount(): number;
      getCurrentCondition(): number;
      getCurrentUses(): number;
      getCustomMenuOption(): string;
      getDescription(): string;
      getDirt(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getDisplayCategory(): string;
      getDisplayName(): string;
      getEatType(): string;
      getEngineLoudness(): number;
      getEquipParent(): zombie.characters.IsoGameCharacter;
      getEquipSound(): string;
      getEquippedWeight(): number;
      getEvolvedRecipeName(): string;
      getExplosionSound(): string;
      getExtraItems(): java.util.ArrayList<string>;
      getExtraItemsWeight(): number;
      getFabricType(): string;
      getFatigueChange(): number;
      getFillFromDispenserSound(): string;
      getFillFromTapSound(): string;
      getFullType(): string;
      getG(): number;
      getGunType(): string;
      getHaveBeenRepaired(): number;
      getHotbarEquippedWeight(): number;
      getID(): number;
      getIconsForTexture(): java.util.ArrayList<string>;
      getInvHeat(): number;
      getItemCapacity(): number;
      getItemHeat(): number;
      getItemReplacementPrimaryHand(): zombie.scripting.objects.ItemReplacement;
      getItemReplacementSecondHand(): zombie.scripting.objects.ItemReplacement;
      getItemWhenDry(): string;
      getJobDelta(): number;
      getJobType(): string;
      getKeyId(): number;
      getLastAged(): number;
      getLightDistance(): number;
      getLightStrength(): number;
      getLuaCreate(): string;
      getMakeUpType(): string;
      getMaxAmmo(): number;
      getMaxCapacity(): number;
      getMechanicType(): number;
      getMediaData(): zombie.radio.media.MediaData;
      getMediaType(): number;
      getMeltingTime(): number;
      getMetalValue(): number;
      getMinutesToBurn(): number;
      getMinutesToCook(): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getModID(): string;
      getModName(): string;
      getModule(): string;
      getName(): string;
      getNewPlaceDir(): zombie.iso.IsoDirections;
      getOffAge(): number;
      getOffAgeMax(): number;
      getOffString(): string;
      getOutermostContainer(): zombie.inventory.ItemContainer;
      getPlaceDir(): zombie.iso.IsoDirections;
      getPreviousOwner(): zombie.characters.IsoGameCharacter;
      getR(): number;
      getRecordedMediaIndex(): number;
      getReduceInfectionPower(): number;
      getRegistry_id(): number;
      getRemoteControlID(): number;
      getRemoteRange(): number;
      getReplaceOnUse(): string;
      getReplaceOnUseFullType(): string;
      getReplaceOnUseOn(): string;
      getReplaceOnUseOnString(): string;
      getRequireInHandOrInventory(): java.util.ArrayList<string>;
      getRightClickContainer(): zombie.inventory.ItemContainer;
      getSaveType(): number;
      getScore(arg0: zombie.characters.SurvivorDesc): number;
      getScriptItem(): zombie.scripting.objects.Item;
      getStashChance(): number;
      getStaticModel(): string;
      getStressChange(): number;
      getStringItemType(): string;
      getSuspensionCompression(): number;
      getSuspensionDamping(): number;
      getSwingAnim(): string;
      getTags(): java.util.ArrayList<string>;
      getTaken(): java.util.ArrayList<zombie.iso.IsoObject>;
      getTex(): zombie.core.textures.Texture;
      getTexture(): zombie.core.textures.Texture;
      getTextureBurnt(): zombie.core.textures.Texture;
      getTextureCooked(): zombie.core.textures.Texture;
      getTexturerotten(): zombie.core.textures.Texture;
      getTooltip(): string;
      getTorchDot(): number;
      getType(): string;
      getUnCookedString(): string;
      getUnequipSound(): string;
      getUnequippedWeight(): number;
      getUnhappyChange(): number;
      getUses(): number;
      getVisual(): zombie.core.skinnedmodel.visual.ItemVisual;
      getWeight(): number;
      getWetCooldown(): number;
      getWheelFriction(): number;
      getWorker(): string;
      getWorldItem(): zombie.iso.objects.IsoWorldInventoryObject;
      getWorldStaticItem(): string;
      getWorldTexture(): string;
      hasBlood(): boolean;
      hasDirt(): boolean;
      hasModData(): boolean;
      hasTag(arg0: string): boolean;
      hashCode(): number;
      haveExtraItems(): boolean;
      initialiseItem(): void;
      isActivated(): boolean;
      isAlcoholic(): boolean;
      isAlwaysWelcomeGift(): boolean;
      isBeingFilled(): boolean;
      isBroken(): boolean;
      isBurnt(): boolean;
      isCanBandage(): boolean;
      isConditionAffectsCapacity(): boolean;
      isCookable(): boolean;
      isCooked(): boolean;
      isCustomColor(): boolean;
      isCustomName(): boolean;
      isCustomWeight(): boolean;
      isDisappearOnUse(): boolean;
      isEmittingLight(): boolean;
      isEquipped(): boolean;
      isEquippedNoSprint(): boolean;
      isFavorite(): boolean;
      isFishingLure(): boolean;
      isHairDye(): boolean;
      isHidden(): boolean;
      isInLocalPlayerInventory(): boolean;
      isInPlayerInventory(): boolean;
      isInfected(): boolean;
      isInitialised(): boolean;
      isIsCookable(): boolean;
      isProtectFromRainWhileEquipped(): boolean;
      isRecordedMedia(): boolean;
      isRemoteController(): boolean;
      isRequiresEquippedBothHands(): boolean;
      isTaintedWater(): boolean;
      isTorchCone(): boolean;
      isTrap(): boolean;
      isTwoHandWeapon(): boolean;
      isUseWorldItem(): boolean;
      isVanilla(): boolean;
      isWaterSource(): boolean;
      isWet(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadItem(arg0: java.nio.ByteBuffer, arg1: number, arg2: boolean): zombie.inventory.InventoryItem;
      notify(): void;
      notifyAll(): void;
      save(arg0: java.nio.ByteBuffer, arg1: boolean): void;
      saveWithSize(arg0: java.nio.ByteBuffer, arg1: boolean): void;
      setActivated(arg0: boolean): void;
      setActivatedRemote(arg0: boolean): void;
      setActualWeight(arg0: number): void;
      setAge(arg0: number): void;
      setAlcoholPower(arg0: number): void;
      setAlcoholic(arg0: boolean): void;
      setAmmoType(arg0: string): void;
      setAttachedSlot(arg0: number): void;
      setAttachedSlotType(arg0: string): void;
      setAttachedToModel(arg0: string): void;
      setAttachmentReplacement(arg0: string): void;
      setAttachmentType(arg0: string): void;
      setAttachmentsProvided(arg0: java.util.ArrayList<string>): void;
      setAutoAge(): void;
      setBandagePower(arg0: number): void;
      setBeingFilled(arg0: boolean): void;
      setBlood(arg0: zombie.characterTextures.BloodBodyPartType, arg1: number): void;
      setBloodClothingType(arg0: java.util.ArrayList<zombie.characterTextures.BloodClothingType>): void;
      setBoredomChange(arg0: number): void;
      setBrakeForce(arg0: number): void;
      setBreakSound(arg0: string): void;
      setBroken(arg0: boolean): void;
      setBurnt(arg0: boolean): void;
      setBurntString(arg0: string): void;
      setCanBeActivated(arg0: boolean): void;
      setCanBeRemote(arg0: boolean): void;
      setCat(arg0: zombie.inventory.ItemType): void;
      setChanceToSpawnDamaged(arg0: number): void;
      setColor(arg0: zombie.core.Color): void;
      setColorBlue(arg0: number): void;
      setColorGreen(arg0: number): void;
      setColorRed(arg0: number): void;
      setCondition(arg0: number, arg1: boolean): void;
      setConditionFromModData(arg0: zombie.inventory.InventoryItem): void;
      setConditionLowerNormal(arg0: number): void;
      setConditionLowerOffroad(arg0: number): void;
      setConditionMax(arg0: number): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setContainerX(arg0: number): void;
      setContainerY(arg0: number): void;
      setCooked(arg0: boolean): void;
      setCookedString(arg0: string): void;
      setCookingTime(arg0: number): void;
      setCount(arg0: number): void;
      setCountDownSound(arg0: string): void;
      setCurrentAmmoCount(arg0: number): void;
      setCustomColor(arg0: boolean): void;
      setCustomMenuOption(arg0: string): void;
      setCustomName(arg0: boolean): void;
      setCustomWeight(arg0: boolean): void;
      setDescription(arg0: string): void;
      setDirt(arg0: zombie.characterTextures.BloodBodyPartType, arg1: number): void;
      setDisplayCategory(arg0: string): void;
      setEngineLoudness(arg0: number): void;
      setEquipParent(arg0: zombie.characters.IsoGameCharacter): void;
      setEvolvedRecipeName(arg0: string): void;
      setExplosionSound(arg0: string): void;
      setFatigueChange(arg0: number): void;
      setFavorite(arg0: boolean): void;
      setGunType(arg0: string): void;
      setHaveBeenRepaired(arg0: number): void;
      setID(arg0: number): void;
      setIconsForTexture(arg0: java.util.ArrayList<string>): void;
      setInfected(arg0: boolean): void;
      setInitialised(arg0: boolean): void;
      setIsCookable(arg0: boolean): void;
      setIsWaterSource(arg0: boolean): void;
      setItemCapacity(arg0: number): void;
      setItemHeat(arg0: number): void;
      setItemWhenDry(arg0: string): void;
      setJobDelta(arg0: number): void;
      setJobType(arg0: string): void;
      setKeyId(arg0: number): void;
      setLastAged(arg0: number): void;
      setLightDistance(arg0: number): void;
      setLightStrength(arg0: number): void;
      setMaxAmmo(arg0: number): void;
      setMaxCapacity(arg0: number): void;
      setMediaType(arg0: number): void;
      setMeltingTime(arg0: number): void;
      setMetalValue(arg0: number): void;
      setMinutesToBurn(arg0: number): void;
      setMinutesToCook(arg0: number): void;
      setModule(arg0: string): void;
      setName(arg0: string): void;
      setNewPlaceDir(arg0: zombie.iso.IsoDirections): void;
      setOffAge(arg0: number): void;
      setOffAgeMax(arg0: number): void;
      setOffString(arg0: string): void;
      setPlaceDir(arg0: zombie.iso.IsoDirections): void;
      setPreviousOwner(arg0: zombie.characters.IsoGameCharacter): void;
      setRecordedMediaData(arg0: zombie.radio.media.MediaData): void;
      setRecordedMediaIndex(arg0: number): void;
      setRecordedMediaIndexInteger(arg0: number): void;
      setReduceInfectionPower(arg0: number): void;
      setRegistry_id(arg0: zombie.scripting.objects.Item): void;
      setRemoteControlID(arg0: number): void;
      setRemoteController(arg0: boolean): void;
      setRemoteRange(arg0: number): void;
      setReplaceOnUse(arg0: string): void;
      setReplaceOnUseOn(arg0: string): void;
      setRequireInHandOrInventory(arg0: java.util.ArrayList<string>): void;
      setRightClickContainer(arg0: zombie.inventory.ItemContainer): void;
      setScriptItem(arg0: zombie.scripting.objects.Item): void;
      setStashChance(arg0: number): void;
      setStashMap(arg0: string): void;
      setStressChange(arg0: number): void;
      setSuspensionCompression(arg0: number): void;
      setSuspensionDamping(arg0: number): void;
      setTaintedWater(arg0: boolean): void;
      setTaken(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      setTexture(arg0: zombie.core.textures.Texture): void;
      setTextureBurnt(arg0: zombie.core.textures.Texture): void;
      setTextureCooked(arg0: zombie.core.textures.Texture): void;
      setTexturerotten(arg0: zombie.core.textures.Texture): void;
      setTooltip(arg0: string): void;
      setTorchCone(arg0: boolean): void;
      setType(arg0: string): void;
      setUnCookedString(arg0: string): void;
      setUnhappyChange(arg0: number): void;
      setUses(arg0: number): void;
      setWeight(arg0: number): void;
      setWet(arg0: boolean): void;
      setWetCooldown(arg0: number): void;
      setWheelFriction(arg0: number): void;
      setWorker(arg0: string): void;
      setWorldItem(arg0: zombie.iso.objects.IsoWorldInventoryObject): void;
      setWorldScale(arg0: number): void;
      setWorldTexture(arg0: string): void;
      setWorldZRotation(arg0: number): void;
      shouldUpdateInWorld(): boolean;
      storeInByteData(arg0: zombie.iso.IsoObject): void;
      synchWithVisual(): void;
      toString(): string;
      update(): void;
      updateAge(): void;
      updateSound(arg0: zombie.audio.BaseSoundEmitter): void;
      wait(arg0: number): void;
    }
    // zombie.inventory.InventoryItemFactory extends java.lang.Object
    export class InventoryItemFactory {
      private constructor();
      CreateItem(arg0: string): zombie.inventory.InventoryItem;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.inventory.ItemContainer extends java.lang.Object
    export class ItemContainer {
      private constructor();
      Capacity: number;
      CookingFactor: number;
      ID: number;
      IncludingObsoleteItems?: java.util.ArrayList<zombie.inventory.InventoryItem>;
      IsDevice: boolean;
      Items?: java.util.ArrayList<zombie.inventory.InventoryItem>;
      SourceGrid?: zombie.iso.IsoGridSquare;
      active: boolean;
      ageFactor: number;
      bExplored: boolean;
      containingItem?: zombie.inventory.InventoryItem;
      inventoryContainer?: zombie.inventory.types.InventoryContainer;
      parent?: zombie.iso.IsoObject;
      type?: string;
      vehiclePart?: zombie.vehicles.VehiclePart;
  
      AddItem(arg0: string): zombie.inventory.InventoryItem;
      AddItemBlind(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      AddItems(arg0: zombie.inventory.InventoryItem, arg1: number): void;
      DoAddItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      DoAddItemBlind(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      DoRemoveItem(arg0: zombie.inventory.InventoryItem): void;
      Find(arg0: zombie.inventory.ItemType): zombie.inventory.InventoryItem;
      FindAll(arg0: string): java.util.ArrayList<zombie.inventory.InventoryItem>;
      FindAndReturn(arg0: string, arg1: number): java.util.ArrayList<zombie.inventory.InventoryItem>;
      FindAndReturnCategory(arg0: string): zombie.inventory.InventoryItem;
      FindAndReturnStack(arg0: string): zombie.inventory.InventoryItem;
      FindAndReturnWaterItem(arg0: number): zombie.inventory.InventoryItem;
      FindWaterSource(): zombie.inventory.InventoryItem;
      HasType(arg0: zombie.inventory.ItemType): boolean;
      Remove(arg0: zombie.inventory.InventoryItem): void;
      RemoveAll(arg0: string): void;
      RemoveOneOf(arg0: string, arg1: boolean): boolean;
      addItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addItemOnServer(arg0: zombie.inventory.InventoryItem): void;
      addItemsToProcessItems(): void;
      clear(): void;
      contains(arg0: string, arg1: boolean): boolean;
      containsEval(arg0: se.krka.kahlua.vm.LuaClosure): boolean;
      containsEvalArg(arg0: se.krka.kahlua.vm.LuaClosure, arg1: any): boolean;
      containsEvalArgRecurse(arg0: se.krka.kahlua.vm.LuaClosure, arg1: any): boolean;
      containsEvalRecurse(arg0: se.krka.kahlua.vm.LuaClosure): boolean;
      containsID(arg0: number): boolean;
      containsRecursive(arg0: zombie.inventory.InventoryItem): boolean;
      containsTag(arg0: string): boolean;
      containsTagEval(arg0: string, arg1: se.krka.kahlua.vm.LuaClosure): boolean;
      containsTagEvalArgRecurse(arg0: string, arg1: se.krka.kahlua.vm.LuaClosure, arg2: any): boolean;
      containsTagEvalRecurse(arg0: string, arg1: se.krka.kahlua.vm.LuaClosure): boolean;
      containsTagRecurse(arg0: string): boolean;
      containsType(arg0: string): boolean;
      containsTypeEvalArgRecurse(arg0: string, arg1: se.krka.kahlua.vm.LuaClosure, arg2: any): boolean;
      containsTypeEvalRecurse(arg0: string, arg1: se.krka.kahlua.vm.LuaClosure): boolean;
      containsTypeRecurse(arg0: string): boolean;
      containsWithModule(arg0: string): boolean;
      emptyIt(): void;
      equals(arg0: any): boolean;
      floatingPointCorrection(arg0: number): number;
      getAcceptItemFunction(): string;
      getAgeFactor(): number;
      getAll(arg0: java.util._function.Predicate<zombie.inventory.InventoryItem>, arg1: java.util.ArrayList<zombie.inventory.InventoryItem>): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getAllCategory(arg0: string): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getAllCategoryRecurse(arg0: string, arg1: java.util.ArrayList<zombie.inventory.InventoryItem>): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getAllEval(arg0: se.krka.kahlua.vm.LuaClosure): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getAllEvalArg(arg0: se.krka.kahlua.vm.LuaClosure, arg1: any): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getAllEvalArgRecurse(arg0: se.krka.kahlua.vm.LuaClosure, arg1: any): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getAllEvalRecurse(arg0: se.krka.kahlua.vm.LuaClosure): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getAllItems(arg0: java.util.LinkedHashMap<string, zombie.inventory.InventoryItem>, arg1: boolean): java.util.LinkedHashMap<string, zombie.inventory.InventoryItem>;
      getAllRecurse(arg0: java.util._function.Predicate<zombie.inventory.InventoryItem>, arg1: java.util.ArrayList<zombie.inventory.InventoryItem>): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getAllTag(arg0: string, arg1: java.util.ArrayList<zombie.inventory.InventoryItem>): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getAllTagEval(arg0: string, arg1: se.krka.kahlua.vm.LuaClosure, arg2: java.util.ArrayList<zombie.inventory.InventoryItem>): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getAllTagEvalArg(arg0: string, arg1: se.krka.kahlua.vm.LuaClosure, arg2: any): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getAllTagEvalArgRecurse(arg0: string, arg1: se.krka.kahlua.vm.LuaClosure, arg2: any, arg3: java.util.ArrayList<zombie.inventory.InventoryItem>): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getAllTagEvalRecurse(arg0: string, arg1: se.krka.kahlua.vm.LuaClosure, arg2: java.util.ArrayList<zombie.inventory.InventoryItem>): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getAllTagRecurse(arg0: string, arg1: java.util.ArrayList<zombie.inventory.InventoryItem>): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getAllType(arg0: string, arg1: java.util.ArrayList<zombie.inventory.InventoryItem>): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getAllTypeEval(arg0: string, arg1: se.krka.kahlua.vm.LuaClosure): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getAllTypeEvalArg(arg0: string, arg1: se.krka.kahlua.vm.LuaClosure, arg2: any, arg3: java.util.ArrayList<zombie.inventory.InventoryItem>): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getAllTypeEvalArgRecurse(arg0: string, arg1: se.krka.kahlua.vm.LuaClosure, arg2: any, arg3: java.util.ArrayList<zombie.inventory.InventoryItem>): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getAllTypeEvalRecurse(arg0: string, arg1: se.krka.kahlua.vm.LuaClosure): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getAllTypeRecurse(arg0: string): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getAllWaterFillables(): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getBest(arg0: java.util._function.Predicate<zombie.inventory.InventoryItem>, arg1: java.util.Comparator<zombie.inventory.InventoryItem>): zombie.inventory.InventoryItem;
      getBestBandage(arg0: zombie.characters.SurvivorDesc): zombie.inventory.InventoryItem;
      getBestCondition(arg0: java.util._function.Predicate<zombie.inventory.InventoryItem>): zombie.inventory.InventoryItem;
      getBestConditionEval(arg0: se.krka.kahlua.vm.LuaClosure): zombie.inventory.InventoryItem;
      getBestConditionEvalRecurse(arg0: se.krka.kahlua.vm.LuaClosure): zombie.inventory.InventoryItem;
      getBestConditionRecurse(arg0: string): zombie.inventory.InventoryItem;
      getBestEval(arg0: se.krka.kahlua.vm.LuaClosure, arg1: se.krka.kahlua.vm.LuaClosure): zombie.inventory.InventoryItem;
      getBestEvalArg(arg0: se.krka.kahlua.vm.LuaClosure, arg1: se.krka.kahlua.vm.LuaClosure, arg2: any): zombie.inventory.InventoryItem;
      getBestEvalArgRecurse(arg0: se.krka.kahlua.vm.LuaClosure, arg1: se.krka.kahlua.vm.LuaClosure, arg2: any): zombie.inventory.InventoryItem;
      getBestEvalRecurse(arg0: se.krka.kahlua.vm.LuaClosure, arg1: se.krka.kahlua.vm.LuaClosure): zombie.inventory.InventoryItem;
      getBestFood(arg0: zombie.characters.SurvivorDesc): zombie.inventory.InventoryItem;
      getBestRecurse(arg0: java.util._function.Predicate<zombie.inventory.InventoryItem>, arg1: java.util.Comparator<zombie.inventory.InventoryItem>): zombie.inventory.InventoryItem;
      getBestType(arg0: string, arg1: java.util.Comparator<zombie.inventory.InventoryItem>): zombie.inventory.InventoryItem;
      getBestTypeEval(arg0: string, arg1: se.krka.kahlua.vm.LuaClosure): zombie.inventory.InventoryItem;
      getBestTypeEvalArg(arg0: string, arg1: se.krka.kahlua.vm.LuaClosure, arg2: any): zombie.inventory.InventoryItem;
      getBestTypeEvalArgRecurse(arg0: string, arg1: se.krka.kahlua.vm.LuaClosure, arg2: any): zombie.inventory.InventoryItem;
      getBestTypeEvalRecurse(arg0: string, arg1: se.krka.kahlua.vm.LuaClosure): zombie.inventory.InventoryItem;
      getBestTypeRecurse(arg0: string, arg1: java.util.Comparator<zombie.inventory.InventoryItem>): zombie.inventory.InventoryItem;
      getBestWeapon(arg0: zombie.characters.SurvivorDesc): zombie.inventory.InventoryItem;
      getCapacity(): number;
      getCapacityWeight(): number;
      getCharacter(): zombie.characters.IsoGameCharacter;
      getClass(): java.lang.Class<any>;
      getCloseSound(): string;
      getContainerPosition(): string;
      getContainingItem(): zombie.inventory.InventoryItem;
      getContentsWeight(): number;
      getCookingFactor(): number;
      getCount(arg0: java.util._function.Predicate<zombie.inventory.InventoryItem>): number;
      getCountEval(arg0: se.krka.kahlua.vm.LuaClosure): number;
      getCountEvalArg(arg0: se.krka.kahlua.vm.LuaClosure, arg1: any): number;
      getCountEvalArgRecurse(arg0: se.krka.kahlua.vm.LuaClosure, arg1: any): number;
      getCountEvalRecurse(arg0: se.krka.kahlua.vm.LuaClosure): number;
      getCountRecurse(arg0: java.util._function.Predicate<zombie.inventory.InventoryItem>): number;
      getCountTag(arg0: string): number;
      getCountTagEval(arg0: string, arg1: se.krka.kahlua.vm.LuaClosure): number;
      getCountTagEvalArg(arg0: string, arg1: se.krka.kahlua.vm.LuaClosure, arg2: any): number;
      getCountTagEvalArgRecurse(arg0: string, arg1: se.krka.kahlua.vm.LuaClosure, arg2: any): number;
      getCountTagEvalRecurse(arg0: string, arg1: se.krka.kahlua.vm.LuaClosure): number;
      getCountTagRecurse(arg0: string): number;
      getCountType(arg0: string): number;
      getCountTypeEval(arg0: string, arg1: se.krka.kahlua.vm.LuaClosure): number;
      getCountTypeEvalArg(arg0: string, arg1: se.krka.kahlua.vm.LuaClosure, arg2: any): number;
      getCountTypeEvalArgRecurse(arg0: string, arg1: se.krka.kahlua.vm.LuaClosure, arg2: any): number;
      getCountTypeEvalRecurse(arg0: string, arg1: se.krka.kahlua.vm.LuaClosure): number;
      getCountTypeRecurse(arg0: string): number;
      getCustomTemperature(): number;
      getEffectiveCapacity(arg0: zombie.characters.IsoGameCharacter): number;
      getFirst(arg0: java.util._function.Predicate<zombie.inventory.InventoryItem>): zombie.inventory.InventoryItem;
      getFirstCategory(arg0: string): zombie.inventory.InventoryItem;
      getFirstCategoryRecurse(arg0: string): zombie.inventory.InventoryItem;
      getFirstEval(arg0: se.krka.kahlua.vm.LuaClosure): zombie.inventory.InventoryItem;
      getFirstEvalArg(arg0: se.krka.kahlua.vm.LuaClosure, arg1: any): zombie.inventory.InventoryItem;
      getFirstEvalArgRecurse(arg0: se.krka.kahlua.vm.LuaClosure, arg1: any): zombie.inventory.InventoryItem;
      getFirstEvalRecurse(arg0: se.krka.kahlua.vm.LuaClosure): zombie.inventory.InventoryItem;
      getFirstRecurse(arg0: java.util._function.Predicate<zombie.inventory.InventoryItem>): zombie.inventory.InventoryItem;
      getFirstTag(arg0: string): zombie.inventory.InventoryItem;
      getFirstTagEval(arg0: string, arg1: se.krka.kahlua.vm.LuaClosure): zombie.inventory.InventoryItem;
      getFirstTagEvalArgRecurse(arg0: string, arg1: se.krka.kahlua.vm.LuaClosure, arg2: any): zombie.inventory.InventoryItem;
      getFirstTagEvalRecurse(arg0: string, arg1: se.krka.kahlua.vm.LuaClosure): zombie.inventory.InventoryItem;
      getFirstTagRecurse(arg0: string): zombie.inventory.InventoryItem;
      getFirstType(arg0: string): zombie.inventory.InventoryItem;
      getFirstTypeEval(arg0: string, arg1: se.krka.kahlua.vm.LuaClosure): zombie.inventory.InventoryItem;
      getFirstTypeEvalArgRecurse(arg0: string, arg1: se.krka.kahlua.vm.LuaClosure, arg2: any): zombie.inventory.InventoryItem;
      getFirstTypeEvalRecurse(arg0: string, arg1: se.krka.kahlua.vm.LuaClosure): zombie.inventory.InventoryItem;
      getFirstTypeRecurse(arg0: string): zombie.inventory.InventoryItem;
      getFreezerPosition(): string;
      getItemById(arg0: number): zombie.inventory.InventoryItem;
      getItemCount(arg0: string, arg1: boolean): number;
      getItemCountFromTypeRecurse(arg0: string): number;
      getItemCountRecurse(arg0: string): number;
      getItemFromType(arg0: string): zombie.inventory.InventoryItem;
      getItemFromTypeRecurse(arg0: string): zombie.inventory.InventoryItem;
      getItemWithID(arg0: number): zombie.inventory.InventoryItem;
      getItemWithIDRecursiv(arg0: number): zombie.inventory.InventoryItem;
      getItems(): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getItems4Admin(): java.util.LinkedHashMap<string, zombie.inventory.InventoryItem>;
      getItemsFromCategory(arg0: string): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getItemsFromFullType(arg0: string): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getItemsFromType(arg0: string, arg1: boolean): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getMaxWeight(): number;
      getNumItems(arg0: string): number;
      getNumberOfItem(arg0: string, arg1: boolean): number;
      getOnlyAcceptCategory(): string;
      getOpenSound(): string;
      getParent(): zombie.iso.IsoObject;
      getPutSound(): string;
      getSome(arg0: java.util._function.Predicate<zombie.inventory.InventoryItem>, arg1: number, arg2: java.util.ArrayList<zombie.inventory.InventoryItem>): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getSomeCategory(arg0: string, arg1: number, arg2: java.util.ArrayList<zombie.inventory.InventoryItem>): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getSomeCategoryRecurse(arg0: string, arg1: number, arg2: java.util.ArrayList<zombie.inventory.InventoryItem>): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getSomeEval(arg0: se.krka.kahlua.vm.LuaClosure, arg1: number, arg2: java.util.ArrayList<zombie.inventory.InventoryItem>): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getSomeEvalArg(arg0: se.krka.kahlua.vm.LuaClosure, arg1: any, arg2: number): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getSomeEvalArgRecurse(arg0: se.krka.kahlua.vm.LuaClosure, arg1: any, arg2: number): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getSomeEvalRecurse(arg0: se.krka.kahlua.vm.LuaClosure, arg1: number, arg2: java.util.ArrayList<zombie.inventory.InventoryItem>): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getSomeRecurse(arg0: java.util._function.Predicate<zombie.inventory.InventoryItem>, arg1: number, arg2: java.util.ArrayList<zombie.inventory.InventoryItem>): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getSomeTag(arg0: string, arg1: number, arg2: java.util.ArrayList<zombie.inventory.InventoryItem>): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getSomeTagEval(arg0: string, arg1: se.krka.kahlua.vm.LuaClosure, arg2: number, arg3: java.util.ArrayList<zombie.inventory.InventoryItem>): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getSomeTagEvalArg(arg0: string, arg1: se.krka.kahlua.vm.LuaClosure, arg2: any, arg3: number, arg4: java.util.ArrayList<zombie.inventory.InventoryItem>): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getSomeTagEvalArgRecurse(arg0: string, arg1: se.krka.kahlua.vm.LuaClosure, arg2: any, arg3: number): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getSomeTagEvalRecurse(arg0: string, arg1: se.krka.kahlua.vm.LuaClosure, arg2: number, arg3: java.util.ArrayList<zombie.inventory.InventoryItem>): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getSomeTagRecurse(arg0: string, arg1: number): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getSomeType(arg0: string, arg1: number, arg2: java.util.ArrayList<zombie.inventory.InventoryItem>): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getSomeTypeEval(arg0: string, arg1: se.krka.kahlua.vm.LuaClosure, arg2: number, arg3: java.util.ArrayList<zombie.inventory.InventoryItem>): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getSomeTypeEvalArg(arg0: string, arg1: se.krka.kahlua.vm.LuaClosure, arg2: any, arg3: number, arg4: java.util.ArrayList<zombie.inventory.InventoryItem>): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getSomeTypeEvalArgRecurse(arg0: string, arg1: se.krka.kahlua.vm.LuaClosure, arg2: any, arg3: number, arg4: java.util.ArrayList<zombie.inventory.InventoryItem>): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getSomeTypeEvalRecurse(arg0: string, arg1: se.krka.kahlua.vm.LuaClosure, arg2: number, arg3: java.util.ArrayList<zombie.inventory.InventoryItem>): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getSomeTypeRecurse(arg0: string, arg1: number, arg2: java.util.ArrayList<zombie.inventory.InventoryItem>): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getSourceGrid(): zombie.iso.IsoGridSquare;
      getTemprature(): number;
      getTotalFoodScore(arg0: zombie.characters.SurvivorDesc): number;
      getTotalWeaponScore(arg0: zombie.characters.SurvivorDesc): number;
      getType(): string;
      getUsesRecurse(arg0: java.util._function.Predicate<zombie.inventory.InventoryItem>): number;
      getUsesType(arg0: string): number;
      getUsesTypeRecurse(arg0: string): number;
      getVehiclePart(): zombie.vehicles.VehiclePart;
      getWaterContainerCount(): number;
      getWeight(): number;
      getWeightReduction(): number;
      hasRoomFor(arg0: zombie.characters.IsoGameCharacter, arg1: number): boolean;
      hashCode(): number;
      haveThisKeyId(arg0: number): zombie.inventory.InventoryItem;
      isActive(): boolean;
      isDirty(): boolean;
      isDrawDirty(): boolean;
      isEmpty(): boolean;
      isExistYet(): boolean;
      isExplored(): boolean;
      isHasBeenLooted(): boolean;
      isInCharacterInventory(arg0: zombie.characters.IsoGameCharacter): boolean;
      isInside(arg0: zombie.inventory.InventoryItem): boolean;
      isIsDevice(): boolean;
      isItemAllowed(arg0: zombie.inventory.InventoryItem): boolean;
      isMicrowave(): boolean;
      isPowered(): boolean;
      isRemoveItemAllowed(arg0: zombie.inventory.InventoryItem): boolean;
      isTemperatureChanging(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): java.util.ArrayList<zombie.inventory.InventoryItem>;
      notify(): void;
      notifyAll(): void;
      removeAllItems(): void;
      removeItemOnServer(arg0: zombie.inventory.InventoryItem): void;
      removeItemWithID(arg0: number): boolean;
      removeItemWithIDRecurse(arg0: number): boolean;
      removeItemsFromProcessItems(): void;
      requestServerItemsForContainer(): void;
      requestSync(): void;
      save(arg0: java.nio.ByteBuffer, arg1: zombie.characters.IsoGameCharacter): java.util.ArrayList<zombie.inventory.InventoryItem>;
      sendContentsToRemoteContainer(arg0: zombie.core.raknet.UdpConnection): void;
      setAcceptItemFunction(arg0: string): void;
      setActive(arg0: boolean): void;
      setAgeFactor(arg0: number): void;
      setCloseSound(arg0: string): void;
      setContainerPosition(arg0: string): void;
      setCookingFactor(arg0: number): void;
      setCustomTemperature(arg0: number): void;
      setDirty(arg0: boolean): void;
      setDrawDirty(arg0: boolean): void;
      setExplored(arg0: boolean): void;
      setFreezerPosition(arg0: string): void;
      setHasBeenLooted(arg0: boolean): void;
      setIsDevice(arg0: boolean): void;
      setItems(arg0: java.util.ArrayList<zombie.inventory.InventoryItem>): void;
      setOnlyAcceptCategory(arg0: string): void;
      setOpenSound(arg0: string): void;
      setParent(arg0: zombie.iso.IsoObject): void;
      setPutSound(arg0: string): void;
      setSourceGrid(arg0: zombie.iso.IsoGridSquare): void;
      setType(arg0: string): void;
      setWeightReduction(arg0: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.inventory.ItemPickerJava extends java.lang.Object
    export class ItemPickerJava {
      private constructor();
      static readonly NoContainerFillRooms?: java.util.ArrayList<string>;
      static readonly ProceduralDistributions?: gnu.trove.map.hash.THashMap<string, zombie.inventory.ItemPickerJava$ItemPickerContainer>;
      static readonly VehicleDistributions?: gnu.trove.map.hash.THashMap<string, zombie.inventory.ItemPickerJava$VehicleDistribution>;
      static readonly WeaponUpgradeMap?: java.util.HashMap<string, zombie.inventory.ItemPickerJava$ItemPickerUpgradeWeapons>;
      static readonly WeaponUpgrades?: java.util.ArrayList<zombie.inventory.ItemPickerJava$ItemPickerUpgradeWeapons>;
      static readonly containers?: gnu.trove.map.hash.THashMap<string, zombie.inventory.ItemPickerJava$ItemPickerContainer>;
      static readonly rooms?: gnu.trove.map.hash.THashMap<string, zombie.inventory.ItemPickerJava$ItemPickerRoom>;
      static zombieDensityCap: number;
  
      InitSandboxLootSettings(): void;
      Parse(): void;
      doOverlaySprite(arg0: zombie.iso.IsoGridSquare): void;
      doRollItem(arg0: zombie.inventory.ItemPickerJava$ItemPickerContainer, arg1: zombie.inventory.ItemContainer, arg2: number, arg3: zombie.characters.IsoGameCharacter, arg4: boolean, arg5: boolean, arg6: zombie.inventory.ItemPickerJava$ItemPickerRoom): void;
      equals(arg0: any): boolean;
      fillContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.characters.IsoPlayer): void;
      fillContainerType(arg0: zombie.inventory.ItemPickerJava$ItemPickerRoom, arg1: zombie.inventory.ItemContainer, arg2: string, arg3: zombie.characters.IsoGameCharacter): void;
      getClass(): java.lang.Class<any>;
      getItemContainer(arg0: string, arg1: string, arg2: string, arg3: boolean): zombie.inventory.ItemPickerJava$ItemPickerContainer;
      getLootModifier(arg0: string): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      rollContainerItem(arg0: zombie.inventory.types.InventoryContainer, arg1: zombie.characters.IsoGameCharacter, arg2: zombie.inventory.ItemPickerJava$ItemPickerContainer): void;
      rollItem(arg0: zombie.inventory.ItemPickerJava$ItemPickerContainer, arg1: zombie.inventory.ItemContainer, arg2: boolean, arg3: zombie.characters.IsoGameCharacter, arg4: zombie.inventory.ItemPickerJava$ItemPickerRoom): void;
      toString(): string;
      tryAddItemToContainer(arg0: zombie.inventory.ItemContainer, arg1: string, arg2: zombie.inventory.ItemPickerJava$ItemPickerContainer): zombie.inventory.InventoryItem;
      updateOverlaySprite(arg0: zombie.iso.IsoObject): void;
      wait(arg0: number): void;
    }
    // zombie.inventory.ItemPickerJava$ItemPickerContainer extends java.lang.Object
    export class ItemPickerJava$ItemPickerContainer {
      private constructor();
      Items?: zombie.inventory.ItemPickerJava$ItemPickerItem[];
      dontSpawnAmmo: boolean;
      fillRand: number;
      ignoreZombieDensity: boolean;
      junk?: zombie.inventory.ItemPickerJava$ItemPickerContainer;
      maxMap: number;
      noAutoAge: boolean;
      procedural: boolean;
      proceduralItems?: java.util.ArrayList<zombie.inventory.ItemPickerJava$ProceduralItem>;
      rolls: number;
      stashChance: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.inventory.ItemPickerJava$ItemPickerItem extends java.lang.Object
    export class ItemPickerJava$ItemPickerItem {
      private constructor();
      chance: number;
      itemName?: string;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.inventory.ItemPickerJava$ItemPickerRoom extends java.lang.Object
    export class ItemPickerJava$ItemPickerRoom {
      private constructor();
      Containers?: gnu.trove.map.hash.THashMap<string, zombie.inventory.ItemPickerJava$ItemPickerContainer>;
      fillRand: number;
      isShop: boolean;
      specificId?: string;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.inventory.ItemPickerJava$ItemPickerUpgradeWeapons extends java.lang.Object
    export class ItemPickerJava$ItemPickerUpgradeWeapons {
      private constructor();
      Upgrades?: java.util.ArrayList<string>;
      name?: string;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.inventory.ItemPickerJava$ProceduralItem extends java.lang.Object
    export class ItemPickerJava$ProceduralItem {
      private constructor();
      forceForItems?: java.util.List<string>;
      forceForRooms?: java.util.List<string>;
      forceForTiles?: java.util.List<string>;
      forceForZones?: java.util.List<string>;
      max: number;
      min: number;
      name?: string;
      weightChance: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.inventory.ItemPickerJava$VehicleDistribution extends java.lang.Object
    export class ItemPickerJava$VehicleDistribution {
      private constructor();
      Normal?: zombie.inventory.ItemPickerJava$ItemPickerRoom;
      readonly Specific?: java.util.ArrayList<zombie.inventory.ItemPickerJava$ItemPickerRoom>;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.inventory.ItemType */
    export class ItemType {
      /* ENUM VALUES */
      static readonly AlarmClock: ItemType; 
      static readonly AlarmClockClothing: ItemType; 
      static readonly Clothing: ItemType; 
      static readonly Drainable: ItemType; 
      static readonly Food: ItemType; 
      static readonly Key: ItemType; 
      static readonly KeyRing: ItemType; 
      static readonly Literature: ItemType; 
      static readonly Moveable: ItemType; 
      static readonly None: ItemType; 
      static readonly Weapon: ItemType; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.inventory.ItemType[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): ItemType;
      fromIndex(arg0: number): zombie.inventory.ItemType;
      index(): number;
      valueOf(arg0: string): zombie.inventory.ItemType;
      values(): zombie.inventory.ItemType[];
    }
    // zombie.inventory.RecipeManager extends java.lang.Object
    export class RecipeManager {
      private constructor();
      DoesUseItemUp(arg0: string, arg1: zombie.scripting.objects.Recipe): boolean;
      DoesWipeUseDelta(arg0: string, arg1: string): boolean;
      GetMovableRecipeTool(arg0: boolean, arg1: zombie.scripting.objects.Recipe, arg2: zombie.inventory.InventoryItem, arg3: zombie.characters.IsoGameCharacter, arg4: java.util.ArrayList<zombie.inventory.ItemContainer>): zombie.inventory.InventoryItem;
      HasAllRequiredItems(arg0: zombie.scripting.objects.Recipe, arg1: zombie.characters.IsoGameCharacter, arg2: zombie.inventory.InventoryItem, arg3: java.util.ArrayList<zombie.inventory.ItemContainer>): boolean;
      IsItemDestroyed(arg0: string, arg1: zombie.scripting.objects.Recipe): boolean;
      IsRecipeValid(arg0: zombie.scripting.objects.Recipe, arg1: zombie.characters.IsoGameCharacter, arg2: zombie.inventory.InventoryItem, arg3: java.util.ArrayList<zombie.inventory.ItemContainer>): boolean;
      Loaded(): void;
      LoadedAfterLua(): void;
      PerformMakeItem(arg0: zombie.scripting.objects.Recipe, arg1: zombie.inventory.InventoryItem, arg2: zombie.characters.IsoGameCharacter, arg3: java.util.ArrayList<zombie.inventory.ItemContainer>): zombie.inventory.InventoryItem;
      UseAmount(arg0: string, arg1: zombie.scripting.objects.Recipe, arg2: zombie.characters.IsoGameCharacter): number;
      equals(arg0: any): boolean;
      getAllEvolvedRecipes(): java.util.ArrayList<zombie.scripting.objects.EvolvedRecipe>;
      getAvailableItemsAll(arg0: zombie.scripting.objects.Recipe, arg1: zombie.characters.IsoGameCharacter, arg2: java.util.ArrayList<zombie.inventory.ItemContainer>, arg3: zombie.inventory.InventoryItem, arg4: java.util.ArrayList<zombie.inventory.InventoryItem>): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getAvailableItemsNeeded(arg0: zombie.scripting.objects.Recipe, arg1: zombie.characters.IsoGameCharacter, arg2: java.util.ArrayList<zombie.inventory.ItemContainer>, arg3: zombie.inventory.InventoryItem, arg4: java.util.ArrayList<zombie.inventory.InventoryItem>): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getClass(): java.lang.Class<any>;
      getDismantleRecipeFor(arg0: string): zombie.scripting.objects.Recipe;
      getEvolvedRecipe(arg0: zombie.inventory.InventoryItem, arg1: zombie.characters.IsoGameCharacter, arg2: java.util.ArrayList<zombie.inventory.ItemContainer>, arg3: boolean): java.util.ArrayList<zombie.scripting.objects.EvolvedRecipe>;
      getKnownRecipesNumber(arg0: zombie.characters.IsoGameCharacter): number;
      getNumberOfTimesRecipeCanBeDone(arg0: zombie.scripting.objects.Recipe, arg1: zombie.characters.IsoGameCharacter, arg2: java.util.ArrayList<zombie.inventory.ItemContainer>, arg3: zombie.inventory.InventoryItem): number;
      getSourceItemsAll(arg0: zombie.scripting.objects.Recipe, arg1: number, arg2: zombie.characters.IsoGameCharacter, arg3: java.util.ArrayList<zombie.inventory.ItemContainer>, arg4: zombie.inventory.InventoryItem, arg5: java.util.ArrayList<zombie.inventory.InventoryItem>): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getSourceItemsNeeded(arg0: zombie.scripting.objects.Recipe, arg1: number, arg2: zombie.characters.IsoGameCharacter, arg3: java.util.ArrayList<zombie.inventory.ItemContainer>, arg4: zombie.inventory.InventoryItem, arg5: java.util.ArrayList<zombie.inventory.InventoryItem>): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getUniqueRecipeItems(arg0: zombie.inventory.InventoryItem, arg1: zombie.characters.IsoGameCharacter, arg2: java.util.ArrayList<zombie.inventory.ItemContainer>): java.util.ArrayList<zombie.scripting.objects.Recipe>;
      hasHeat(arg0: zombie.scripting.objects.Recipe, arg1: zombie.inventory.InventoryItem, arg2: java.util.ArrayList<zombie.inventory.ItemContainer>, arg3: zombie.characters.IsoGameCharacter): boolean;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.inventory.types {
    // zombie.inventory.types.AlarmClock extends zombie.inventory.InventoryItem
    export class AlarmClock {
      private constructor();
      CanStoreWater: boolean;
      CloseKillMove?: string;
      Cooked: boolean;
      IsWaterSource: boolean;
      static PacketPlayer: number;
      static PacketWorld: number;
      ReplaceOnUseOn?: string;
      RequiresEquippedBothHands: boolean;
      byteData?: java.nio.ByteBuffer;
      col?: zombie.core.Color;
      extraItems?: java.util.ArrayList<string>;
      fatigueChange: number;
      id: number;
      jobDelta: number;
      jobType?: string;
      keepOnDeplete: boolean;
      mainCategory?: string;
      worldItem?: zombie.iso.objects.IsoWorldInventoryObject;
      worldScale: number;
      worldZRotation: number;
  
      CanStack(arg0: zombie.inventory.InventoryItem): boolean;
      CopyModData(arg0: se.krka.kahlua.vm.KahluaTable): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      HowRotten(): number;
      IsClothing(): boolean;
      IsDrainable(): boolean;
      IsFood(): boolean;
      IsInventoryContainer(): boolean;
      IsLiterature(): boolean;
      IsMap(): boolean;
      IsRotten(): boolean;
      IsWeapon(): boolean;
      ModDataMatches(arg0: zombie.inventory.InventoryItem): boolean;
      SetContainerPosition(arg0: number, arg1: number): void;
      Use(arg0: boolean, arg1: boolean): void;
      UseItem(): void;
      addExtraItem(arg0: string): void;
      allowRandomTint(): boolean;
      canBeActivated(): boolean;
      canBeRemote(): boolean;
      canEmitLight(): boolean;
      canStoreWater(): boolean;
      copyConditionModData(arg0: zombie.inventory.InventoryItem): void;
      copyModData(arg0: se.krka.kahlua.vm.KahluaTable): void;
      doBuildingStash(): void;
      equals(arg0: any): boolean;
      finishupdate(): boolean;
      getA(): number;
      getActualWeight(): number;
      getAge(): number;
      getAlarmSound(): string;
      getAlarmSquare(): zombie.iso.IsoGridSquare;
      getAlcoholPower(): number;
      getAlternateModelName(): string;
      getAmmoType(): string;
      getAttachedSlot(): number;
      getAttachedSlotType(): string;
      getAttachedToModel(): string;
      getAttachmentReplacement(): string;
      getAttachmentType(): string;
      getAttachmentsProvided(): java.util.ArrayList<string>;
      getB(): number;
      getBandagePower(): number;
      getBlood(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getBloodClothingType(): java.util.ArrayList<zombie.characterTextures.BloodClothingType>;
      getBodyLocation(): string;
      getBoredomChange(): number;
      getBrakeForce(): number;
      getBreakSound(): string;
      getBringToBearSound(): string;
      getBurntString(): string;
      getByteData(): java.nio.ByteBuffer;
      getCat(): zombie.inventory.ItemType;
      getCategory(): string;
      getChanceToSpawnDamaged(): number;
      getClass(): java.lang.Class<any>;
      getCleanString(arg0: number): string;
      getClothingItem(): zombie.core.skinnedmodel.population.ClothingItem;
      getClothingItemExtra(): java.util.ArrayList<string>;
      getClothingItemExtraOption(): java.util.ArrayList<string>;
      getClothingItemName(): string;
      getColor(): zombie.core.Color;
      getColorBlue(): number;
      getColorGreen(): number;
      getColorInfo(): zombie.core.textures.ColorInfo;
      getColorRed(): number;
      getCondition(): number;
      getConditionLowerNormal(): number;
      getConditionLowerOffroad(): number;
      getConditionMax(): number;
      getConsolidateOption(): string;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerX(): number;
      getContainerY(): number;
      getContentsWeight(): number;
      getCookedString(): string;
      getCookingTime(): number;
      getCount(): number;
      getCountDownSound(): string;
      getCurrentAmmoCount(): number;
      getCurrentCondition(): number;
      getCurrentUses(): number;
      getCustomMenuOption(): string;
      getDescription(): string;
      getDirt(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getDisplayCategory(): string;
      getDisplayName(): string;
      getEatType(): string;
      getEngineLoudness(): number;
      getEquipParent(): zombie.characters.IsoGameCharacter;
      getEquipSound(): string;
      getEquippedWeight(): number;
      getEvolvedRecipeName(): string;
      getExplosionSound(): string;
      getExtraItems(): java.util.ArrayList<string>;
      getExtraItemsWeight(): number;
      getFabricType(): string;
      getFatigueChange(): number;
      getFillFromDispenserSound(): string;
      getFillFromTapSound(): string;
      getFullType(): string;
      getG(): number;
      getGunType(): string;
      getHaveBeenRepaired(): number;
      getHotbarEquippedWeight(): number;
      getHour(): number;
      getID(): number;
      getIconsForTexture(): java.util.ArrayList<string>;
      getInvHeat(): number;
      getItemCapacity(): number;
      getItemHeat(): number;
      getItemReplacementPrimaryHand(): zombie.scripting.objects.ItemReplacement;
      getItemReplacementSecondHand(): zombie.scripting.objects.ItemReplacement;
      getItemWhenDry(): string;
      getJobDelta(): number;
      getJobType(): string;
      getKeyId(): number;
      getLastAged(): number;
      getLightDistance(): number;
      getLightStrength(): number;
      getLuaCreate(): string;
      getMakeUpType(): string;
      getMaxAmmo(): number;
      getMaxCapacity(): number;
      getMechanicType(): number;
      getMediaData(): zombie.radio.media.MediaData;
      getMediaType(): number;
      getMeltingTime(): number;
      getMetalValue(): number;
      getMinute(): number;
      getMinutesToBurn(): number;
      getMinutesToCook(): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getModID(): string;
      getModName(): string;
      getModule(): string;
      getName(): string;
      getNewPlaceDir(): zombie.iso.IsoDirections;
      getOffAge(): number;
      getOffAgeMax(): number;
      getOffString(): string;
      getOutermostContainer(): zombie.inventory.ItemContainer;
      getPlaceDir(): zombie.iso.IsoDirections;
      getPreviousOwner(): zombie.characters.IsoGameCharacter;
      getR(): number;
      getRecordedMediaIndex(): number;
      getReduceInfectionPower(): number;
      getRegistry_id(): number;
      getRemoteControlID(): number;
      getRemoteRange(): number;
      getReplaceOnUse(): string;
      getReplaceOnUseFullType(): string;
      getReplaceOnUseOn(): string;
      getReplaceOnUseOnString(): string;
      getRequireInHandOrInventory(): java.util.ArrayList<string>;
      getRightClickContainer(): zombie.inventory.ItemContainer;
      getSaveType(): number;
      getScore(arg0: zombie.characters.SurvivorDesc): number;
      getScriptItem(): zombie.scripting.objects.Item;
      getSoundRadius(): number;
      getStashChance(): number;
      getStaticModel(): string;
      getStressChange(): number;
      getStringItemType(): string;
      getSuspensionCompression(): number;
      getSuspensionDamping(): number;
      getSwingAnim(): string;
      getTags(): java.util.ArrayList<string>;
      getTaken(): java.util.ArrayList<zombie.iso.IsoObject>;
      getTex(): zombie.core.textures.Texture;
      getTexture(): zombie.core.textures.Texture;
      getTextureBurnt(): zombie.core.textures.Texture;
      getTextureCooked(): zombie.core.textures.Texture;
      getTexturerotten(): zombie.core.textures.Texture;
      getTooltip(): string;
      getTorchDot(): number;
      getType(): string;
      getUnCookedString(): string;
      getUnequipSound(): string;
      getUnequippedWeight(): number;
      getUnhappyChange(): number;
      getUses(): number;
      getVisual(): zombie.core.skinnedmodel.visual.ItemVisual;
      getWeight(): number;
      getWetCooldown(): number;
      getWheelFriction(): number;
      getWorker(): string;
      getWorldItem(): zombie.iso.objects.IsoWorldInventoryObject;
      getWorldStaticItem(): string;
      getWorldTexture(): string;
      hasBlood(): boolean;
      hasDirt(): boolean;
      hasModData(): boolean;
      hasTag(arg0: string): boolean;
      hashCode(): number;
      haveExtraItems(): boolean;
      initialiseItem(): void;
      isActivated(): boolean;
      isAlarmSet(): boolean;
      isAlcoholic(): boolean;
      isAlwaysWelcomeGift(): boolean;
      isBeingFilled(): boolean;
      isBroken(): boolean;
      isBurnt(): boolean;
      isCanBandage(): boolean;
      isConditionAffectsCapacity(): boolean;
      isCookable(): boolean;
      isCooked(): boolean;
      isCustomColor(): boolean;
      isCustomName(): boolean;
      isCustomWeight(): boolean;
      isDigital(): boolean;
      isDisappearOnUse(): boolean;
      isEmittingLight(): boolean;
      isEquipped(): boolean;
      isEquippedNoSprint(): boolean;
      isFavorite(): boolean;
      isFishingLure(): boolean;
      isHairDye(): boolean;
      isHidden(): boolean;
      isInLocalPlayerInventory(): boolean;
      isInPlayerInventory(): boolean;
      isInfected(): boolean;
      isInitialised(): boolean;
      isIsCookable(): boolean;
      isProtectFromRainWhileEquipped(): boolean;
      isRecordedMedia(): boolean;
      isRemoteController(): boolean;
      isRequiresEquippedBothHands(): boolean;
      isRinging(): boolean;
      isTaintedWater(): boolean;
      isTorchCone(): boolean;
      isTrap(): boolean;
      isTwoHandWeapon(): boolean;
      isUseWorldItem(): boolean;
      isVanilla(): boolean;
      isWaterSource(): boolean;
      isWet(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadItem(arg0: java.nio.ByteBuffer, arg1: number, arg2: boolean): zombie.inventory.InventoryItem;
      notify(): void;
      notifyAll(): void;
      save(arg0: java.nio.ByteBuffer, arg1: boolean): void;
      saveWithSize(arg0: java.nio.ByteBuffer, arg1: boolean): void;
      setActivated(arg0: boolean): void;
      setActivatedRemote(arg0: boolean): void;
      setActualWeight(arg0: number): void;
      setAge(arg0: number): void;
      setAlarmSet(arg0: boolean): void;
      setAlarmSound(arg0: string): void;
      setAlcoholPower(arg0: number): void;
      setAlcoholic(arg0: boolean): void;
      setAmmoType(arg0: string): void;
      setAttachedSlot(arg0: number): void;
      setAttachedSlotType(arg0: string): void;
      setAttachedToModel(arg0: string): void;
      setAttachmentReplacement(arg0: string): void;
      setAttachmentType(arg0: string): void;
      setAttachmentsProvided(arg0: java.util.ArrayList<string>): void;
      setAutoAge(): void;
      setBandagePower(arg0: number): void;
      setBeingFilled(arg0: boolean): void;
      setBlood(arg0: zombie.characterTextures.BloodBodyPartType, arg1: number): void;
      setBloodClothingType(arg0: java.util.ArrayList<zombie.characterTextures.BloodClothingType>): void;
      setBoredomChange(arg0: number): void;
      setBrakeForce(arg0: number): void;
      setBreakSound(arg0: string): void;
      setBroken(arg0: boolean): void;
      setBurnt(arg0: boolean): void;
      setBurntString(arg0: string): void;
      setCanBeActivated(arg0: boolean): void;
      setCanBeRemote(arg0: boolean): void;
      setCat(arg0: zombie.inventory.ItemType): void;
      setChanceToSpawnDamaged(arg0: number): void;
      setColor(arg0: zombie.core.Color): void;
      setColorBlue(arg0: number): void;
      setColorGreen(arg0: number): void;
      setColorRed(arg0: number): void;
      setCondition(arg0: number, arg1: boolean): void;
      setConditionFromModData(arg0: zombie.inventory.InventoryItem): void;
      setConditionLowerNormal(arg0: number): void;
      setConditionLowerOffroad(arg0: number): void;
      setConditionMax(arg0: number): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setContainerX(arg0: number): void;
      setContainerY(arg0: number): void;
      setCooked(arg0: boolean): void;
      setCookedString(arg0: string): void;
      setCookingTime(arg0: number): void;
      setCount(arg0: number): void;
      setCountDownSound(arg0: string): void;
      setCurrentAmmoCount(arg0: number): void;
      setCustomColor(arg0: boolean): void;
      setCustomMenuOption(arg0: string): void;
      setCustomName(arg0: boolean): void;
      setCustomWeight(arg0: boolean): void;
      setDescription(arg0: string): void;
      setDirt(arg0: zombie.characterTextures.BloodBodyPartType, arg1: number): void;
      setDisplayCategory(arg0: string): void;
      setEngineLoudness(arg0: number): void;
      setEquipParent(arg0: zombie.characters.IsoGameCharacter): void;
      setEvolvedRecipeName(arg0: string): void;
      setExplosionSound(arg0: string): void;
      setFatigueChange(arg0: number): void;
      setFavorite(arg0: boolean): void;
      setGunType(arg0: string): void;
      setHaveBeenRepaired(arg0: number): void;
      setHour(arg0: number): void;
      setID(arg0: number): void;
      setIconsForTexture(arg0: java.util.ArrayList<string>): void;
      setInfected(arg0: boolean): void;
      setInitialised(arg0: boolean): void;
      setIsCookable(arg0: boolean): void;
      setIsWaterSource(arg0: boolean): void;
      setItemCapacity(arg0: number): void;
      setItemHeat(arg0: number): void;
      setItemWhenDry(arg0: string): void;
      setJobDelta(arg0: number): void;
      setJobType(arg0: string): void;
      setKeyId(arg0: number): void;
      setLastAged(arg0: number): void;
      setLightDistance(arg0: number): void;
      setLightStrength(arg0: number): void;
      setMaxAmmo(arg0: number): void;
      setMaxCapacity(arg0: number): void;
      setMediaType(arg0: number): void;
      setMeltingTime(arg0: number): void;
      setMetalValue(arg0: number): void;
      setMinute(arg0: number): void;
      setMinutesToBurn(arg0: number): void;
      setMinutesToCook(arg0: number): void;
      setModule(arg0: string): void;
      setName(arg0: string): void;
      setNewPlaceDir(arg0: zombie.iso.IsoDirections): void;
      setOffAge(arg0: number): void;
      setOffAgeMax(arg0: number): void;
      setOffString(arg0: string): void;
      setPlaceDir(arg0: zombie.iso.IsoDirections): void;
      setPreviousOwner(arg0: zombie.characters.IsoGameCharacter): void;
      setRecordedMediaData(arg0: zombie.radio.media.MediaData): void;
      setRecordedMediaIndex(arg0: number): void;
      setRecordedMediaIndexInteger(arg0: number): void;
      setReduceInfectionPower(arg0: number): void;
      setRegistry_id(arg0: zombie.scripting.objects.Item): void;
      setRemoteControlID(arg0: number): void;
      setRemoteController(arg0: boolean): void;
      setRemoteRange(arg0: number): void;
      setReplaceOnUse(arg0: string): void;
      setReplaceOnUseOn(arg0: string): void;
      setRequireInHandOrInventory(arg0: java.util.ArrayList<string>): void;
      setRightClickContainer(arg0: zombie.inventory.ItemContainer): void;
      setScriptItem(arg0: zombie.scripting.objects.Item): void;
      setSoundRadius(arg0: number): void;
      setStashChance(arg0: number): void;
      setStashMap(arg0: string): void;
      setStressChange(arg0: number): void;
      setSuspensionCompression(arg0: number): void;
      setSuspensionDamping(arg0: number): void;
      setTaintedWater(arg0: boolean): void;
      setTaken(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      setTexture(arg0: zombie.core.textures.Texture): void;
      setTextureBurnt(arg0: zombie.core.textures.Texture): void;
      setTextureCooked(arg0: zombie.core.textures.Texture): void;
      setTexturerotten(arg0: zombie.core.textures.Texture): void;
      setTooltip(arg0: string): void;
      setTorchCone(arg0: boolean): void;
      setType(arg0: string): void;
      setUnCookedString(arg0: string): void;
      setUnhappyChange(arg0: number): void;
      setUses(arg0: number): void;
      setWeight(arg0: number): void;
      setWet(arg0: boolean): void;
      setWetCooldown(arg0: number): void;
      setWheelFriction(arg0: number): void;
      setWorker(arg0: string): void;
      setWorldItem(arg0: zombie.iso.objects.IsoWorldInventoryObject): void;
      setWorldScale(arg0: number): void;
      setWorldTexture(arg0: string): void;
      setWorldZRotation(arg0: number): void;
      shouldUpdateInWorld(): boolean;
      stopRinging(): void;
      storeInByteData(arg0: zombie.iso.IsoObject): void;
      syncAlarmClock(): void;
      syncAlarmClock_Player(arg0: zombie.characters.IsoPlayer): void;
      syncAlarmClock_World(): void;
      syncStopRinging(): void;
      synchWithVisual(): void;
      toString(): string;
      update(): void;
      updateAge(): void;
      updateSound(arg0: zombie.audio.BaseSoundEmitter): void;
      wait(arg0: number): void;
    }
    // zombie.inventory.types.AlarmClockClothing extends zombie.inventory.types.Clothing
    export class AlarmClockClothing {
      private constructor();
      static readonly CONDITION_PER_HOLES: number;
      CanStoreWater: boolean;
      CloseKillMove?: string;
      Cooked: boolean;
      IsWaterSource: boolean;
      static PacketPlayer: number;
      static PacketWorld: number;
      ReplaceOnUseOn?: string;
      RequiresEquippedBothHands: boolean;
      bloodLevel: number;
      byteData?: java.nio.ByteBuffer;
      col?: zombie.core.Color;
      extraItems?: java.util.ArrayList<string>;
      fatigueChange: number;
      id: number;
      jobDelta: number;
      jobType?: string;
      keepOnDeplete: boolean;
      mainCategory?: string;
      worldItem?: zombie.iso.objects.IsoWorldInventoryObject;
      worldScale: number;
      worldZRotation: number;
  
      CanStack(arg0: zombie.inventory.InventoryItem): boolean;
      CopyModData(arg0: se.krka.kahlua.vm.KahluaTable): void;
      CreateFromSprite(arg0: string): zombie.inventory.types.Clothing;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      HowRotten(): number;
      IsClothing(): boolean;
      IsDrainable(): boolean;
      IsFood(): boolean;
      IsInventoryContainer(): boolean;
      IsLiterature(): boolean;
      IsMap(): boolean;
      IsRotten(): boolean;
      IsWeapon(): boolean;
      ModDataMatches(arg0: zombie.inventory.InventoryItem): boolean;
      SetContainerPosition(arg0: number, arg1: number): void;
      Unwear(): void;
      Use(arg0: boolean): void;
      UseItem(): void;
      addExtraItem(arg0: string): void;
      addPatch(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characterTextures.BloodBodyPartType, arg2: zombie.inventory.InventoryItem): void;
      allowRandomTint(): boolean;
      canBe3DRender(): boolean;
      canBeActivated(): boolean;
      canBeRemote(): boolean;
      canEmitLight(): boolean;
      canFullyRestore(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characterTextures.BloodBodyPartType, arg2: zombie.inventory.InventoryItem): boolean;
      canStoreWater(): boolean;
      copyConditionModData(arg0: zombie.inventory.InventoryItem): void;
      copyModData(arg0: se.krka.kahlua.vm.KahluaTable): void;
      copyPatchesTo(arg0: zombie.inventory.types.Clothing): void;
      doBuildingStash(): void;
      equals(arg0: any): boolean;
      finishupdate(): boolean;
      flushWetness(): void;
      getA(): number;
      getActualWeight(): number;
      getAge(): number;
      getAlarmSound(): string;
      getAlarmSquare(): zombie.iso.IsoGridSquare;
      getAlcoholPower(): number;
      getAlternateModelName(): string;
      getAmmoType(): string;
      getAttachedSlot(): number;
      getAttachedSlotType(): string;
      getAttachedToModel(): string;
      getAttachmentReplacement(): string;
      getAttachmentType(): string;
      getAttachmentsProvided(): java.util.ArrayList<string>;
      getB(): number;
      getBandagePower(): number;
      getBiteDefense(): number;
      getBiteDefenseFromItem(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.InventoryItem): number;
      getBlood(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getBloodClothingType(): java.util.ArrayList<zombie.characterTextures.BloodClothingType>;
      getBloodLevel(): number;
      getBloodLevelForPart(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getBloodlevel(): number;
      getBloodlevelForPart(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getBodyLocation(): string;
      getBoredomChange(): number;
      getBrakeForce(): number;
      getBreakSound(): string;
      getBringToBearSound(): string;
      getBulletDefense(): number;
      getBurntString(): string;
      getByteData(): java.nio.ByteBuffer;
      getCanHaveHoles(): boolean;
      getCat(): zombie.inventory.ItemType;
      getCategory(): string;
      getChanceToFall(): number;
      getChanceToSpawnDamaged(): number;
      getClass(): java.lang.Class<any>;
      getCleanString(arg0: number): string;
      getClothingDirtynessIncreaseLevel(): number;
      getClothingExtraSubmenu(): string;
      getClothingItem(): zombie.core.skinnedmodel.population.ClothingItem;
      getClothingItemExtra(): java.util.ArrayList<string>;
      getClothingItemExtraOption(): java.util.ArrayList<string>;
      getClothingItemName(): string;
      getColor(): zombie.core.Color;
      getColorBlue(): number;
      getColorGreen(): number;
      getColorInfo(): zombie.core.textures.ColorInfo;
      getColorRed(): number;
      getCombatSpeedModifier(): number;
      getCondLossPerHole(): number;
      getCondition(): number;
      getConditionLowerChance(): number;
      getConditionLowerNormal(): number;
      getConditionLowerOffroad(): number;
      getConditionMax(): number;
      getConsolidateOption(): string;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerX(): number;
      getContainerY(): number;
      getContentsWeight(): number;
      getCookedString(): string;
      getCookingTime(): number;
      getCount(): number;
      getCountDownSound(): string;
      getCoveredParts(): java.util.ArrayList<zombie.characterTextures.BloodBodyPartType>;
      getCurrentAmmoCount(): number;
      getCurrentCondition(): number;
      getCurrentUses(): number;
      getCustomMenuOption(): string;
      getDefForPart(arg0: zombie.characterTextures.BloodBodyPartType, arg1: boolean, arg2: boolean): number;
      getDescription(): string;
      getDirt(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getDirtyness(): number;
      getDisplayCategory(): string;
      getDisplayName(): string;
      getEatType(): string;
      getEngineLoudness(): number;
      getEquipParent(): zombie.characters.IsoGameCharacter;
      getEquipSound(): string;
      getEquippedWeight(): number;
      getEvolvedRecipeName(): string;
      getExplosionSound(): string;
      getExtraItems(): java.util.ArrayList<string>;
      getExtraItemsWeight(): number;
      getFabricType(): string;
      getFatigueChange(): number;
      getFillFromDispenserSound(): string;
      getFillFromTapSound(): string;
      getFullType(): string;
      getG(): number;
      getGunType(): string;
      getHaveBeenRepaired(): number;
      getHolesNumber(): number;
      getHotbarEquippedWeight(): number;
      getHour(): number;
      getID(): number;
      getIconsForTexture(): java.util.ArrayList<string>;
      getInsulation(): number;
      getInvHeat(): number;
      getItemCapacity(): number;
      getItemHeat(): number;
      getItemReplacementPrimaryHand(): zombie.scripting.objects.ItemReplacement;
      getItemReplacementSecondHand(): zombie.scripting.objects.ItemReplacement;
      getItemWhenDry(): string;
      getJobDelta(): number;
      getJobType(): string;
      getKeyId(): number;
      getLastAged(): number;
      getLightDistance(): number;
      getLightStrength(): number;
      getLuaCreate(): string;
      getMakeUpType(): string;
      getMaxAmmo(): number;
      getMaxCapacity(): number;
      getMechanicType(): number;
      getMediaData(): zombie.radio.media.MediaData;
      getMediaType(): number;
      getMeltingTime(): number;
      getMetalValue(): number;
      getMinute(): number;
      getMinutesToBurn(): number;
      getMinutesToCook(): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getModID(): string;
      getModName(): string;
      getModule(): string;
      getName(): string;
      getNbrOfCoveredParts(): number;
      getNeckProtectionModifier(): number;
      getNewPlaceDir(): zombie.iso.IsoDirections;
      getOffAge(): number;
      getOffAgeMax(): number;
      getOffString(): string;
      getOutermostContainer(): zombie.inventory.ItemContainer;
      getPalette(): string;
      getPatchType(arg0: zombie.characterTextures.BloodBodyPartType): zombie.inventory.types.Clothing$ClothingPatch;
      getPatchesNumber(): number;
      getPlaceDir(): zombie.iso.IsoDirections;
      getPreviousOwner(): zombie.characters.IsoGameCharacter;
      getR(): number;
      getRecordedMediaIndex(): number;
      getReduceInfectionPower(): number;
      getRegistry_id(): number;
      getRemoteControlID(): number;
      getRemoteRange(): number;
      getReplaceOnUse(): string;
      getReplaceOnUseFullType(): string;
      getReplaceOnUseOn(): string;
      getReplaceOnUseOnString(): string;
      getRequireInHandOrInventory(): java.util.ArrayList<string>;
      getRightClickContainer(): zombie.inventory.ItemContainer;
      getRunSpeedModifier(): number;
      getSaveType(): number;
      getScore(arg0: zombie.characters.SurvivorDesc): number;
      getScratchDefense(): number;
      getScratchDefenseFromItem(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.InventoryItem): number;
      getScriptItem(): zombie.scripting.objects.Item;
      getSoundRadius(): number;
      getSpriteName(): string;
      getStashChance(): number;
      getStaticModel(): string;
      getStompPower(): number;
      getStressChange(): number;
      getStringItemType(): string;
      getSuspensionCompression(): number;
      getSuspensionDamping(): number;
      getSwingAnim(): string;
      getTags(): java.util.ArrayList<string>;
      getTaken(): java.util.ArrayList<zombie.iso.IsoObject>;
      getTemperature(): number;
      getTex(): zombie.core.textures.Texture;
      getTexture(): zombie.core.textures.Texture;
      getTextureBurnt(): zombie.core.textures.Texture;
      getTextureCooked(): zombie.core.textures.Texture;
      getTexturerotten(): zombie.core.textures.Texture;
      getTooltip(): string;
      getTorchDot(): number;
      getType(): string;
      getUnCookedString(): string;
      getUnequipSound(): string;
      getUnequippedWeight(): number;
      getUnhappyChange(): number;
      getUses(): number;
      getVisual(): zombie.core.skinnedmodel.visual.ItemVisual;
      getWaterResistance(): number;
      getWeight(): number;
      getWeightWet(): number;
      getWetCooldown(): number;
      getWetness(): number;
      getWheelFriction(): number;
      getWindresistance(): number;
      getWorker(): string;
      getWorldItem(): zombie.iso.objects.IsoWorldInventoryObject;
      getWorldStaticItem(): string;
      getWorldTexture(): string;
      hasBlood(): boolean;
      hasDirt(): boolean;
      hasModData(): boolean;
      hasTag(arg0: string): boolean;
      hashCode(): number;
      haveExtraItems(): boolean;
      initialiseItem(): void;
      isActivated(): boolean;
      isAlarmSet(): boolean;
      isAlcoholic(): boolean;
      isAlwaysWelcomeGift(): boolean;
      isBeingFilled(): boolean;
      isBloody(): boolean;
      isBroken(): boolean;
      isBurnt(): boolean;
      isCanBandage(): boolean;
      isConditionAffectsCapacity(): boolean;
      isCookable(): boolean;
      isCooked(): boolean;
      isCosmetic(): boolean;
      isCustomColor(): boolean;
      isCustomName(): boolean;
      isCustomWeight(): boolean;
      isDigital(): boolean;
      isDirty(): boolean;
      isDisappearOnUse(): boolean;
      isEmittingLight(): boolean;
      isEquipped(): boolean;
      isEquippedNoSprint(): boolean;
      isFavorite(): boolean;
      isFishingLure(): boolean;
      isHairDye(): boolean;
      isHidden(): boolean;
      isInLocalPlayerInventory(): boolean;
      isInPlayerInventory(): boolean;
      isInfected(): boolean;
      isInitialised(): boolean;
      isIsCookable(): boolean;
      isProtectFromRainWhileEquipped(): boolean;
      isRecordedMedia(): boolean;
      isRemoteController(): boolean;
      isRemoveOnBroken(): boolean;
      isRequiresEquippedBothHands(): boolean;
      isRinging(): boolean;
      isTaintedWater(): boolean;
      isTorchCone(): boolean;
      isTrap(): boolean;
      isTwoHandWeapon(): boolean;
      isUseWorldItem(): boolean;
      isVanilla(): boolean;
      isWaterSource(): boolean;
      isWet(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadItem(arg0: java.nio.ByteBuffer, arg1: number, arg2: boolean): zombie.inventory.InventoryItem;
      notify(): void;
      notifyAll(): void;
      removePatch(arg0: zombie.characterTextures.BloodBodyPartType): void;
      save(arg0: java.nio.ByteBuffer, arg1: boolean): void;
      saveWithSize(arg0: java.nio.ByteBuffer, arg1: boolean): void;
      setActivated(arg0: boolean): void;
      setActivatedRemote(arg0: boolean): void;
      setActualWeight(arg0: number): void;
      setAge(arg0: number): void;
      setAlarmSet(arg0: boolean): void;
      setAlarmSound(arg0: string): void;
      setAlcoholPower(arg0: number): void;
      setAlcoholic(arg0: boolean): void;
      setAmmoType(arg0: string): void;
      setAttachedSlot(arg0: number): void;
      setAttachedSlotType(arg0: string): void;
      setAttachedToModel(arg0: string): void;
      setAttachmentReplacement(arg0: string): void;
      setAttachmentType(arg0: string): void;
      setAttachmentsProvided(arg0: java.util.ArrayList<string>): void;
      setAutoAge(): void;
      setBandagePower(arg0: number): void;
      setBeingFilled(arg0: boolean): void;
      setBiteDefense(arg0: number): void;
      setBlood(arg0: zombie.characterTextures.BloodBodyPartType, arg1: number): void;
      setBloodClothingType(arg0: java.util.ArrayList<zombie.characterTextures.BloodClothingType>): void;
      setBloodLevel(arg0: number): void;
      setBoredomChange(arg0: number): void;
      setBrakeForce(arg0: number): void;
      setBreakSound(arg0: string): void;
      setBroken(arg0: boolean): void;
      setBulletDefense(arg0: number): void;
      setBurnt(arg0: boolean): void;
      setBurntString(arg0: string): void;
      setCanBeActivated(arg0: boolean): void;
      setCanBeRemote(arg0: boolean): void;
      setCanHaveHoles(arg0: boolean): void;
      setCat(arg0: zombie.inventory.ItemType): void;
      setChanceToFall(arg0: number): void;
      setChanceToSpawnDamaged(arg0: number): void;
      setColor(arg0: zombie.core.Color): void;
      setColorBlue(arg0: number): void;
      setColorGreen(arg0: number): void;
      setColorRed(arg0: number): void;
      setCombatSpeedModifier(arg0: number): void;
      setCondition(arg0: number, arg1: boolean): void;
      setConditionFromModData(arg0: zombie.inventory.InventoryItem): void;
      setConditionLowerChance(arg0: number): void;
      setConditionLowerNormal(arg0: number): void;
      setConditionLowerOffroad(arg0: number): void;
      setConditionMax(arg0: number): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setContainerX(arg0: number): void;
      setContainerY(arg0: number): void;
      setCooked(arg0: boolean): void;
      setCookedString(arg0: string): void;
      setCookingTime(arg0: number): void;
      setCount(arg0: number): void;
      setCountDownSound(arg0: string): void;
      setCurrentAmmoCount(arg0: number): void;
      setCustomColor(arg0: boolean): void;
      setCustomMenuOption(arg0: string): void;
      setCustomName(arg0: boolean): void;
      setCustomWeight(arg0: boolean): void;
      setDescription(arg0: string): void;
      setDirt(arg0: zombie.characterTextures.BloodBodyPartType, arg1: number): void;
      setDirtyness(arg0: number): void;
      setDisplayCategory(arg0: string): void;
      setEngineLoudness(arg0: number): void;
      setEquipParent(arg0: zombie.characters.IsoGameCharacter): void;
      setEvolvedRecipeName(arg0: string): void;
      setExplosionSound(arg0: string): void;
      setFatigueChange(arg0: number): void;
      setFavorite(arg0: boolean): void;
      setGunType(arg0: string): void;
      setHaveBeenRepaired(arg0: number): void;
      setHour(arg0: number): void;
      setID(arg0: number): void;
      setIconsForTexture(arg0: java.util.ArrayList<string>): void;
      setInfected(arg0: boolean): void;
      setInitialised(arg0: boolean): void;
      setInsulation(arg0: number): void;
      setIsCookable(arg0: boolean): void;
      setIsWaterSource(arg0: boolean): void;
      setItemCapacity(arg0: number): void;
      setItemHeat(arg0: number): void;
      setItemWhenDry(arg0: string): void;
      setJobDelta(arg0: number): void;
      setJobType(arg0: string): void;
      setKeyId(arg0: number): void;
      setLastAged(arg0: number): void;
      setLightDistance(arg0: number): void;
      setLightStrength(arg0: number): void;
      setMaxAmmo(arg0: number): void;
      setMaxCapacity(arg0: number): void;
      setMediaType(arg0: number): void;
      setMeltingTime(arg0: number): void;
      setMetalValue(arg0: number): void;
      setMinute(arg0: number): void;
      setMinutesToBurn(arg0: number): void;
      setMinutesToCook(arg0: number): void;
      setModule(arg0: string): void;
      setName(arg0: string): void;
      setNeckProtectionModifier(arg0: number): void;
      setNewPlaceDir(arg0: zombie.iso.IsoDirections): void;
      setOffAge(arg0: number): void;
      setOffAgeMax(arg0: number): void;
      setOffString(arg0: string): void;
      setPalette(arg0: string): void;
      setPlaceDir(arg0: zombie.iso.IsoDirections): void;
      setPreviousOwner(arg0: zombie.characters.IsoGameCharacter): void;
      setRecordedMediaData(arg0: zombie.radio.media.MediaData): void;
      setRecordedMediaIndex(arg0: number): void;
      setRecordedMediaIndexInteger(arg0: number): void;
      setReduceInfectionPower(arg0: number): void;
      setRegistry_id(arg0: zombie.scripting.objects.Item): void;
      setRemoteControlID(arg0: number): void;
      setRemoteController(arg0: boolean): void;
      setRemoteRange(arg0: number): void;
      setRemoveOnBroken(arg0: boolean): void;
      setReplaceOnUse(arg0: string): void;
      setReplaceOnUseOn(arg0: string): void;
      setRequireInHandOrInventory(arg0: java.util.ArrayList<string>): void;
      setRightClickContainer(arg0: zombie.inventory.ItemContainer): void;
      setRunSpeedModifier(arg0: number): void;
      setScratchDefense(arg0: number): void;
      setScriptItem(arg0: zombie.scripting.objects.Item): void;
      setSoundRadius(arg0: number): void;
      setSpriteName(arg0: string): void;
      setStashChance(arg0: number): void;
      setStashMap(arg0: string): void;
      setStompPower(arg0: number): void;
      setStressChange(arg0: number): void;
      setSuspensionCompression(arg0: number): void;
      setSuspensionDamping(arg0: number): void;
      setTaintedWater(arg0: boolean): void;
      setTaken(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      setTemperature(arg0: number): void;
      setTexture(arg0: zombie.core.textures.Texture): void;
      setTextureBurnt(arg0: zombie.core.textures.Texture): void;
      setTextureCooked(arg0: zombie.core.textures.Texture): void;
      setTexturerotten(arg0: zombie.core.textures.Texture): void;
      setTooltip(arg0: string): void;
      setTorchCone(arg0: boolean): void;
      setType(arg0: string): void;
      setUnCookedString(arg0: string): void;
      setUnhappyChange(arg0: number): void;
      setUses(arg0: number): void;
      setWaterResistance(arg0: number): void;
      setWeight(arg0: number): void;
      setWeightWet(arg0: number): void;
      setWet(arg0: boolean): void;
      setWetCooldown(arg0: number): void;
      setWetness(arg0: number): void;
      setWheelFriction(arg0: number): void;
      setWindresistance(arg0: number): void;
      setWorker(arg0: string): void;
      setWorldItem(arg0: zombie.iso.objects.IsoWorldInventoryObject): void;
      setWorldScale(arg0: number): void;
      setWorldTexture(arg0: string): void;
      setWorldZRotation(arg0: number): void;
      shouldUpdateInWorld(): boolean;
      stopRinging(): void;
      storeInByteData(arg0: zombie.iso.IsoObject): void;
      syncAlarmClock(): void;
      syncAlarmClock_Player(arg0: zombie.characters.IsoPlayer): void;
      syncAlarmClock_World(): void;
      syncStopRinging(): void;
      synchWithVisual(): void;
      toString(): string;
      update(): void;
      updateAge(): void;
      updateSound(arg0: zombie.audio.BaseSoundEmitter): void;
      updateWetness(arg0: boolean): void;
      wait(arg0: number): void;
    }
    // zombie.inventory.types.Clothing extends zombie.inventory.InventoryItem
    export class Clothing {
      private constructor();
      static readonly CONDITION_PER_HOLES: number;
      CanStoreWater: boolean;
      CloseKillMove?: string;
      Cooked: boolean;
      IsWaterSource: boolean;
      ReplaceOnUseOn?: string;
      RequiresEquippedBothHands: boolean;
      bloodLevel: number;
      byteData?: java.nio.ByteBuffer;
      col?: zombie.core.Color;
      extraItems?: java.util.ArrayList<string>;
      fatigueChange: number;
      id: number;
      jobDelta: number;
      jobType?: string;
      keepOnDeplete: boolean;
      mainCategory?: string;
      worldItem?: zombie.iso.objects.IsoWorldInventoryObject;
      worldScale: number;
      worldZRotation: number;
  
      CanStack(arg0: zombie.inventory.InventoryItem): boolean;
      CopyModData(arg0: se.krka.kahlua.vm.KahluaTable): void;
      CreateFromSprite(arg0: string): zombie.inventory.types.Clothing;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      HowRotten(): number;
      IsClothing(): boolean;
      IsDrainable(): boolean;
      IsFood(): boolean;
      IsInventoryContainer(): boolean;
      IsLiterature(): boolean;
      IsMap(): boolean;
      IsRotten(): boolean;
      IsWeapon(): boolean;
      ModDataMatches(arg0: zombie.inventory.InventoryItem): boolean;
      SetContainerPosition(arg0: number, arg1: number): void;
      Unwear(): void;
      Use(arg0: boolean): void;
      UseItem(): void;
      addExtraItem(arg0: string): void;
      addPatch(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characterTextures.BloodBodyPartType, arg2: zombie.inventory.InventoryItem): void;
      allowRandomTint(): boolean;
      canBe3DRender(): boolean;
      canBeActivated(): boolean;
      canBeRemote(): boolean;
      canEmitLight(): boolean;
      canFullyRestore(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characterTextures.BloodBodyPartType, arg2: zombie.inventory.InventoryItem): boolean;
      canStoreWater(): boolean;
      copyConditionModData(arg0: zombie.inventory.InventoryItem): void;
      copyModData(arg0: se.krka.kahlua.vm.KahluaTable): void;
      copyPatchesTo(arg0: zombie.inventory.types.Clothing): void;
      doBuildingStash(): void;
      equals(arg0: any): boolean;
      finishupdate(): boolean;
      flushWetness(): void;
      getA(): number;
      getActualWeight(): number;
      getAge(): number;
      getAlcoholPower(): number;
      getAlternateModelName(): string;
      getAmmoType(): string;
      getAttachedSlot(): number;
      getAttachedSlotType(): string;
      getAttachedToModel(): string;
      getAttachmentReplacement(): string;
      getAttachmentType(): string;
      getAttachmentsProvided(): java.util.ArrayList<string>;
      getB(): number;
      getBandagePower(): number;
      getBiteDefense(): number;
      getBiteDefenseFromItem(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.InventoryItem): number;
      getBlood(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getBloodClothingType(): java.util.ArrayList<zombie.characterTextures.BloodClothingType>;
      getBloodLevel(): number;
      getBloodLevelForPart(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getBloodlevel(): number;
      getBloodlevelForPart(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getBodyLocation(): string;
      getBoredomChange(): number;
      getBrakeForce(): number;
      getBreakSound(): string;
      getBringToBearSound(): string;
      getBulletDefense(): number;
      getBurntString(): string;
      getByteData(): java.nio.ByteBuffer;
      getCanHaveHoles(): boolean;
      getCat(): zombie.inventory.ItemType;
      getCategory(): string;
      getChanceToFall(): number;
      getChanceToSpawnDamaged(): number;
      getClass(): java.lang.Class<any>;
      getCleanString(arg0: number): string;
      getClothingDirtynessIncreaseLevel(): number;
      getClothingExtraSubmenu(): string;
      getClothingItem(): zombie.core.skinnedmodel.population.ClothingItem;
      getClothingItemExtra(): java.util.ArrayList<string>;
      getClothingItemExtraOption(): java.util.ArrayList<string>;
      getClothingItemName(): string;
      getColor(): zombie.core.Color;
      getColorBlue(): number;
      getColorGreen(): number;
      getColorInfo(): zombie.core.textures.ColorInfo;
      getColorRed(): number;
      getCombatSpeedModifier(): number;
      getCondLossPerHole(): number;
      getCondition(): number;
      getConditionLowerChance(): number;
      getConditionLowerNormal(): number;
      getConditionLowerOffroad(): number;
      getConditionMax(): number;
      getConsolidateOption(): string;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerX(): number;
      getContainerY(): number;
      getContentsWeight(): number;
      getCookedString(): string;
      getCookingTime(): number;
      getCount(): number;
      getCountDownSound(): string;
      getCoveredParts(): java.util.ArrayList<zombie.characterTextures.BloodBodyPartType>;
      getCurrentAmmoCount(): number;
      getCurrentCondition(): number;
      getCurrentUses(): number;
      getCustomMenuOption(): string;
      getDefForPart(arg0: zombie.characterTextures.BloodBodyPartType, arg1: boolean, arg2: boolean): number;
      getDescription(): string;
      getDirt(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getDirtyness(): number;
      getDisplayCategory(): string;
      getDisplayName(): string;
      getEatType(): string;
      getEngineLoudness(): number;
      getEquipParent(): zombie.characters.IsoGameCharacter;
      getEquipSound(): string;
      getEquippedWeight(): number;
      getEvolvedRecipeName(): string;
      getExplosionSound(): string;
      getExtraItems(): java.util.ArrayList<string>;
      getExtraItemsWeight(): number;
      getFabricType(): string;
      getFatigueChange(): number;
      getFillFromDispenserSound(): string;
      getFillFromTapSound(): string;
      getFullType(): string;
      getG(): number;
      getGunType(): string;
      getHaveBeenRepaired(): number;
      getHolesNumber(): number;
      getHotbarEquippedWeight(): number;
      getID(): number;
      getIconsForTexture(): java.util.ArrayList<string>;
      getInsulation(): number;
      getInvHeat(): number;
      getItemCapacity(): number;
      getItemHeat(): number;
      getItemReplacementPrimaryHand(): zombie.scripting.objects.ItemReplacement;
      getItemReplacementSecondHand(): zombie.scripting.objects.ItemReplacement;
      getItemWhenDry(): string;
      getJobDelta(): number;
      getJobType(): string;
      getKeyId(): number;
      getLastAged(): number;
      getLightDistance(): number;
      getLightStrength(): number;
      getLuaCreate(): string;
      getMakeUpType(): string;
      getMaxAmmo(): number;
      getMaxCapacity(): number;
      getMechanicType(): number;
      getMediaData(): zombie.radio.media.MediaData;
      getMediaType(): number;
      getMeltingTime(): number;
      getMetalValue(): number;
      getMinutesToBurn(): number;
      getMinutesToCook(): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getModID(): string;
      getModName(): string;
      getModule(): string;
      getName(): string;
      getNbrOfCoveredParts(): number;
      getNeckProtectionModifier(): number;
      getNewPlaceDir(): zombie.iso.IsoDirections;
      getOffAge(): number;
      getOffAgeMax(): number;
      getOffString(): string;
      getOutermostContainer(): zombie.inventory.ItemContainer;
      getPalette(): string;
      getPatchType(arg0: zombie.characterTextures.BloodBodyPartType): zombie.inventory.types.Clothing$ClothingPatch;
      getPatchesNumber(): number;
      getPlaceDir(): zombie.iso.IsoDirections;
      getPreviousOwner(): zombie.characters.IsoGameCharacter;
      getR(): number;
      getRecordedMediaIndex(): number;
      getReduceInfectionPower(): number;
      getRegistry_id(): number;
      getRemoteControlID(): number;
      getRemoteRange(): number;
      getReplaceOnUse(): string;
      getReplaceOnUseFullType(): string;
      getReplaceOnUseOn(): string;
      getReplaceOnUseOnString(): string;
      getRequireInHandOrInventory(): java.util.ArrayList<string>;
      getRightClickContainer(): zombie.inventory.ItemContainer;
      getRunSpeedModifier(): number;
      getSaveType(): number;
      getScore(arg0: zombie.characters.SurvivorDesc): number;
      getScratchDefense(): number;
      getScratchDefenseFromItem(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.InventoryItem): number;
      getScriptItem(): zombie.scripting.objects.Item;
      getSpriteName(): string;
      getStashChance(): number;
      getStaticModel(): string;
      getStompPower(): number;
      getStressChange(): number;
      getStringItemType(): string;
      getSuspensionCompression(): number;
      getSuspensionDamping(): number;
      getSwingAnim(): string;
      getTags(): java.util.ArrayList<string>;
      getTaken(): java.util.ArrayList<zombie.iso.IsoObject>;
      getTemperature(): number;
      getTex(): zombie.core.textures.Texture;
      getTexture(): zombie.core.textures.Texture;
      getTextureBurnt(): zombie.core.textures.Texture;
      getTextureCooked(): zombie.core.textures.Texture;
      getTexturerotten(): zombie.core.textures.Texture;
      getTooltip(): string;
      getTorchDot(): number;
      getType(): string;
      getUnCookedString(): string;
      getUnequipSound(): string;
      getUnequippedWeight(): number;
      getUnhappyChange(): number;
      getUses(): number;
      getVisual(): zombie.core.skinnedmodel.visual.ItemVisual;
      getWaterResistance(): number;
      getWeight(): number;
      getWeightWet(): number;
      getWetCooldown(): number;
      getWetness(): number;
      getWheelFriction(): number;
      getWindresistance(): number;
      getWorker(): string;
      getWorldItem(): zombie.iso.objects.IsoWorldInventoryObject;
      getWorldStaticItem(): string;
      getWorldTexture(): string;
      hasBlood(): boolean;
      hasDirt(): boolean;
      hasModData(): boolean;
      hasTag(arg0: string): boolean;
      hashCode(): number;
      haveExtraItems(): boolean;
      initialiseItem(): void;
      isActivated(): boolean;
      isAlcoholic(): boolean;
      isAlwaysWelcomeGift(): boolean;
      isBeingFilled(): boolean;
      isBloody(): boolean;
      isBroken(): boolean;
      isBurnt(): boolean;
      isCanBandage(): boolean;
      isConditionAffectsCapacity(): boolean;
      isCookable(): boolean;
      isCooked(): boolean;
      isCosmetic(): boolean;
      isCustomColor(): boolean;
      isCustomName(): boolean;
      isCustomWeight(): boolean;
      isDirty(): boolean;
      isDisappearOnUse(): boolean;
      isEmittingLight(): boolean;
      isEquipped(): boolean;
      isEquippedNoSprint(): boolean;
      isFavorite(): boolean;
      isFishingLure(): boolean;
      isHairDye(): boolean;
      isHidden(): boolean;
      isInLocalPlayerInventory(): boolean;
      isInPlayerInventory(): boolean;
      isInfected(): boolean;
      isInitialised(): boolean;
      isIsCookable(): boolean;
      isProtectFromRainWhileEquipped(): boolean;
      isRecordedMedia(): boolean;
      isRemoteController(): boolean;
      isRemoveOnBroken(): boolean;
      isRequiresEquippedBothHands(): boolean;
      isTaintedWater(): boolean;
      isTorchCone(): boolean;
      isTrap(): boolean;
      isTwoHandWeapon(): boolean;
      isUseWorldItem(): boolean;
      isVanilla(): boolean;
      isWaterSource(): boolean;
      isWet(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadItem(arg0: java.nio.ByteBuffer, arg1: number, arg2: boolean): zombie.inventory.InventoryItem;
      notify(): void;
      notifyAll(): void;
      removePatch(arg0: zombie.characterTextures.BloodBodyPartType): void;
      save(arg0: java.nio.ByteBuffer, arg1: boolean): void;
      saveWithSize(arg0: java.nio.ByteBuffer, arg1: boolean): void;
      setActivated(arg0: boolean): void;
      setActivatedRemote(arg0: boolean): void;
      setActualWeight(arg0: number): void;
      setAge(arg0: number): void;
      setAlcoholPower(arg0: number): void;
      setAlcoholic(arg0: boolean): void;
      setAmmoType(arg0: string): void;
      setAttachedSlot(arg0: number): void;
      setAttachedSlotType(arg0: string): void;
      setAttachedToModel(arg0: string): void;
      setAttachmentReplacement(arg0: string): void;
      setAttachmentType(arg0: string): void;
      setAttachmentsProvided(arg0: java.util.ArrayList<string>): void;
      setAutoAge(): void;
      setBandagePower(arg0: number): void;
      setBeingFilled(arg0: boolean): void;
      setBiteDefense(arg0: number): void;
      setBlood(arg0: zombie.characterTextures.BloodBodyPartType, arg1: number): void;
      setBloodClothingType(arg0: java.util.ArrayList<zombie.characterTextures.BloodClothingType>): void;
      setBloodLevel(arg0: number): void;
      setBoredomChange(arg0: number): void;
      setBrakeForce(arg0: number): void;
      setBreakSound(arg0: string): void;
      setBroken(arg0: boolean): void;
      setBulletDefense(arg0: number): void;
      setBurnt(arg0: boolean): void;
      setBurntString(arg0: string): void;
      setCanBeActivated(arg0: boolean): void;
      setCanBeRemote(arg0: boolean): void;
      setCanHaveHoles(arg0: boolean): void;
      setCat(arg0: zombie.inventory.ItemType): void;
      setChanceToFall(arg0: number): void;
      setChanceToSpawnDamaged(arg0: number): void;
      setColor(arg0: zombie.core.Color): void;
      setColorBlue(arg0: number): void;
      setColorGreen(arg0: number): void;
      setColorRed(arg0: number): void;
      setCombatSpeedModifier(arg0: number): void;
      setCondition(arg0: number, arg1: boolean): void;
      setConditionFromModData(arg0: zombie.inventory.InventoryItem): void;
      setConditionLowerChance(arg0: number): void;
      setConditionLowerNormal(arg0: number): void;
      setConditionLowerOffroad(arg0: number): void;
      setConditionMax(arg0: number): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setContainerX(arg0: number): void;
      setContainerY(arg0: number): void;
      setCooked(arg0: boolean): void;
      setCookedString(arg0: string): void;
      setCookingTime(arg0: number): void;
      setCount(arg0: number): void;
      setCountDownSound(arg0: string): void;
      setCurrentAmmoCount(arg0: number): void;
      setCustomColor(arg0: boolean): void;
      setCustomMenuOption(arg0: string): void;
      setCustomName(arg0: boolean): void;
      setCustomWeight(arg0: boolean): void;
      setDescription(arg0: string): void;
      setDirt(arg0: zombie.characterTextures.BloodBodyPartType, arg1: number): void;
      setDirtyness(arg0: number): void;
      setDisplayCategory(arg0: string): void;
      setEngineLoudness(arg0: number): void;
      setEquipParent(arg0: zombie.characters.IsoGameCharacter): void;
      setEvolvedRecipeName(arg0: string): void;
      setExplosionSound(arg0: string): void;
      setFatigueChange(arg0: number): void;
      setFavorite(arg0: boolean): void;
      setGunType(arg0: string): void;
      setHaveBeenRepaired(arg0: number): void;
      setID(arg0: number): void;
      setIconsForTexture(arg0: java.util.ArrayList<string>): void;
      setInfected(arg0: boolean): void;
      setInitialised(arg0: boolean): void;
      setInsulation(arg0: number): void;
      setIsCookable(arg0: boolean): void;
      setIsWaterSource(arg0: boolean): void;
      setItemCapacity(arg0: number): void;
      setItemHeat(arg0: number): void;
      setItemWhenDry(arg0: string): void;
      setJobDelta(arg0: number): void;
      setJobType(arg0: string): void;
      setKeyId(arg0: number): void;
      setLastAged(arg0: number): void;
      setLightDistance(arg0: number): void;
      setLightStrength(arg0: number): void;
      setMaxAmmo(arg0: number): void;
      setMaxCapacity(arg0: number): void;
      setMediaType(arg0: number): void;
      setMeltingTime(arg0: number): void;
      setMetalValue(arg0: number): void;
      setMinutesToBurn(arg0: number): void;
      setMinutesToCook(arg0: number): void;
      setModule(arg0: string): void;
      setName(arg0: string): void;
      setNeckProtectionModifier(arg0: number): void;
      setNewPlaceDir(arg0: zombie.iso.IsoDirections): void;
      setOffAge(arg0: number): void;
      setOffAgeMax(arg0: number): void;
      setOffString(arg0: string): void;
      setPalette(arg0: string): void;
      setPlaceDir(arg0: zombie.iso.IsoDirections): void;
      setPreviousOwner(arg0: zombie.characters.IsoGameCharacter): void;
      setRecordedMediaData(arg0: zombie.radio.media.MediaData): void;
      setRecordedMediaIndex(arg0: number): void;
      setRecordedMediaIndexInteger(arg0: number): void;
      setReduceInfectionPower(arg0: number): void;
      setRegistry_id(arg0: zombie.scripting.objects.Item): void;
      setRemoteControlID(arg0: number): void;
      setRemoteController(arg0: boolean): void;
      setRemoteRange(arg0: number): void;
      setRemoveOnBroken(arg0: boolean): void;
      setReplaceOnUse(arg0: string): void;
      setReplaceOnUseOn(arg0: string): void;
      setRequireInHandOrInventory(arg0: java.util.ArrayList<string>): void;
      setRightClickContainer(arg0: zombie.inventory.ItemContainer): void;
      setRunSpeedModifier(arg0: number): void;
      setScratchDefense(arg0: number): void;
      setScriptItem(arg0: zombie.scripting.objects.Item): void;
      setSpriteName(arg0: string): void;
      setStashChance(arg0: number): void;
      setStashMap(arg0: string): void;
      setStompPower(arg0: number): void;
      setStressChange(arg0: number): void;
      setSuspensionCompression(arg0: number): void;
      setSuspensionDamping(arg0: number): void;
      setTaintedWater(arg0: boolean): void;
      setTaken(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      setTemperature(arg0: number): void;
      setTexture(arg0: zombie.core.textures.Texture): void;
      setTextureBurnt(arg0: zombie.core.textures.Texture): void;
      setTextureCooked(arg0: zombie.core.textures.Texture): void;
      setTexturerotten(arg0: zombie.core.textures.Texture): void;
      setTooltip(arg0: string): void;
      setTorchCone(arg0: boolean): void;
      setType(arg0: string): void;
      setUnCookedString(arg0: string): void;
      setUnhappyChange(arg0: number): void;
      setUses(arg0: number): void;
      setWaterResistance(arg0: number): void;
      setWeight(arg0: number): void;
      setWeightWet(arg0: number): void;
      setWet(arg0: boolean): void;
      setWetCooldown(arg0: number): void;
      setWetness(arg0: number): void;
      setWheelFriction(arg0: number): void;
      setWindresistance(arg0: number): void;
      setWorker(arg0: string): void;
      setWorldItem(arg0: zombie.iso.objects.IsoWorldInventoryObject): void;
      setWorldScale(arg0: number): void;
      setWorldTexture(arg0: string): void;
      setWorldZRotation(arg0: number): void;
      shouldUpdateInWorld(): boolean;
      storeInByteData(arg0: zombie.iso.IsoObject): void;
      synchWithVisual(): void;
      toString(): string;
      update(): void;
      updateAge(): void;
      updateSound(arg0: zombie.audio.BaseSoundEmitter): void;
      updateWetness(arg0: boolean): void;
      wait(arg0: number): void;
    }
    // zombie.inventory.types.Clothing$ClothingPatch extends java.lang.Object
    export class Clothing$ClothingPatch {
      private constructor();
      biteDefense: number;
      conditionGain: number;
      fabricType: number;
      hasHole: boolean;
      scratchDefense: number;
      tailorLvl: number;
  
      equals(arg0: any): boolean;
      getBiteDefense(): number;
      getClass(): java.lang.Class<any>;
      getFabricType(): number;
      getFabricTypeName(): string;
      getScratchDefense(): number;
      hashCode(): number;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      load_old(arg0: java.nio.ByteBuffer, arg1: number, arg2: boolean): void;
      notify(): void;
      notifyAll(): void;
      save(arg0: java.nio.ByteBuffer, arg1: boolean): void;
      save_old(arg0: java.nio.ByteBuffer, arg1: boolean): void;
      toString(): string;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.inventory.types.Clothing$ClothingPatchFabricType */
    export class Clothing$ClothingPatchFabricType {
      /* ENUM VALUES */
      static readonly Cotton: Clothing$ClothingPatchFabricType; 
      static readonly Denim: Clothing$ClothingPatchFabricType; 
      static readonly Leather: Clothing$ClothingPatchFabricType; 
  
      /* FIELDS */
      index: number;
      maxBiteDef: number;
      maxScratchDef: number;
      type?: string;
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.inventory.types.Clothing$ClothingPatchFabricType[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): Clothing$ClothingPatchFabricType;
      fromIndex(arg0: number): zombie.inventory.types.Clothing$ClothingPatchFabricType;
      fromType(arg0: string): zombie.inventory.types.Clothing$ClothingPatchFabricType;
      getType(): string;
      valueOf(arg0: string): zombie.inventory.types.Clothing$ClothingPatchFabricType;
      values(): zombie.inventory.types.Clothing$ClothingPatchFabricType[];
    }
    // zombie.inventory.types.ComboItem extends zombie.inventory.InventoryItem
    export class ComboItem {
      private constructor();
      CanStoreWater: boolean;
      CloseKillMove?: string;
      Cooked: boolean;
      IsWaterSource: boolean;
      ReplaceOnUseOn?: string;
      RequiresEquippedBothHands: boolean;
      byteData?: java.nio.ByteBuffer;
      col?: zombie.core.Color;
      extraItems?: java.util.ArrayList<string>;
      fatigueChange: number;
      id: number;
      jobDelta: number;
      jobType?: string;
      keepOnDeplete: boolean;
      mainCategory?: string;
      worldItem?: zombie.iso.objects.IsoWorldInventoryObject;
      worldScale: number;
      worldZRotation: number;
  
      CanStack(arg0: zombie.inventory.InventoryItem): boolean;
      CopyModData(arg0: se.krka.kahlua.vm.KahluaTable): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      HowRotten(): number;
      IsClothing(): boolean;
      IsDrainable(): boolean;
      IsFood(): boolean;
      IsInventoryContainer(): boolean;
      IsLiterature(): boolean;
      IsMap(): boolean;
      IsRotten(): boolean;
      IsWeapon(): boolean;
      ModDataMatches(arg0: zombie.inventory.InventoryItem): boolean;
      SetContainerPosition(arg0: number, arg1: number): void;
      Use(arg0: boolean, arg1: boolean): void;
      UseItem(): void;
      addExtraItem(arg0: string): void;
      allowRandomTint(): boolean;
      canBeActivated(): boolean;
      canBeRemote(): boolean;
      canEmitLight(): boolean;
      canStoreWater(): boolean;
      copyConditionModData(arg0: zombie.inventory.InventoryItem): void;
      copyModData(arg0: se.krka.kahlua.vm.KahluaTable): void;
      doBuildingStash(): void;
      equals(arg0: any): boolean;
      finishupdate(): boolean;
      getA(): number;
      getActualWeight(): number;
      getAge(): number;
      getAlcoholPower(): number;
      getAlternateModelName(): string;
      getAmmoType(): string;
      getAttachedSlot(): number;
      getAttachedSlotType(): string;
      getAttachedToModel(): string;
      getAttachmentReplacement(): string;
      getAttachmentType(): string;
      getAttachmentsProvided(): java.util.ArrayList<string>;
      getB(): number;
      getBandagePower(): number;
      getBlood(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getBloodClothingType(): java.util.ArrayList<zombie.characterTextures.BloodClothingType>;
      getBodyLocation(): string;
      getBoredomChange(): number;
      getBrakeForce(): number;
      getBreakSound(): string;
      getBringToBearSound(): string;
      getBurntString(): string;
      getByteData(): java.nio.ByteBuffer;
      getCat(): zombie.inventory.ItemType;
      getCategory(): string;
      getChanceToSpawnDamaged(): number;
      getClass(): java.lang.Class<any>;
      getCleanString(arg0: number): string;
      getClothingItem(): zombie.core.skinnedmodel.population.ClothingItem;
      getClothingItemExtra(): java.util.ArrayList<string>;
      getClothingItemExtraOption(): java.util.ArrayList<string>;
      getClothingItemName(): string;
      getColor(): zombie.core.Color;
      getColorBlue(): number;
      getColorGreen(): number;
      getColorInfo(): zombie.core.textures.ColorInfo;
      getColorRed(): number;
      getCondition(): number;
      getConditionLowerNormal(): number;
      getConditionLowerOffroad(): number;
      getConditionMax(): number;
      getConsolidateOption(): string;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerX(): number;
      getContainerY(): number;
      getContentsWeight(): number;
      getCookedString(): string;
      getCookingTime(): number;
      getCount(): number;
      getCountDownSound(): string;
      getCurrentAmmoCount(): number;
      getCurrentCondition(): number;
      getCurrentUses(): number;
      getCustomMenuOption(): string;
      getDescription(): string;
      getDirt(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getDisplayCategory(): string;
      getDisplayName(): string;
      getEatType(): string;
      getEngineLoudness(): number;
      getEquipParent(): zombie.characters.IsoGameCharacter;
      getEquipSound(): string;
      getEquippedWeight(): number;
      getEvolvedRecipeName(): string;
      getExplosionSound(): string;
      getExtraItems(): java.util.ArrayList<string>;
      getExtraItemsWeight(): number;
      getFabricType(): string;
      getFatigueChange(): number;
      getFillFromDispenserSound(): string;
      getFillFromTapSound(): string;
      getFullType(): string;
      getG(): number;
      getGunType(): string;
      getHaveBeenRepaired(): number;
      getHotbarEquippedWeight(): number;
      getID(): number;
      getIconsForTexture(): java.util.ArrayList<string>;
      getInvHeat(): number;
      getItemCapacity(): number;
      getItemHeat(): number;
      getItemReplacementPrimaryHand(): zombie.scripting.objects.ItemReplacement;
      getItemReplacementSecondHand(): zombie.scripting.objects.ItemReplacement;
      getItemWhenDry(): string;
      getJobDelta(): number;
      getJobType(): string;
      getKeyId(): number;
      getLastAged(): number;
      getLightDistance(): number;
      getLightStrength(): number;
      getLuaCreate(): string;
      getMakeUpType(): string;
      getMaxAmmo(): number;
      getMaxCapacity(): number;
      getMechanicType(): number;
      getMediaData(): zombie.radio.media.MediaData;
      getMediaType(): number;
      getMeltingTime(): number;
      getMetalValue(): number;
      getMinutesToBurn(): number;
      getMinutesToCook(): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getModID(): string;
      getModName(): string;
      getModule(): string;
      getName(): string;
      getNewPlaceDir(): zombie.iso.IsoDirections;
      getOffAge(): number;
      getOffAgeMax(): number;
      getOffString(): string;
      getOutermostContainer(): zombie.inventory.ItemContainer;
      getPlaceDir(): zombie.iso.IsoDirections;
      getPreviousOwner(): zombie.characters.IsoGameCharacter;
      getR(): number;
      getRecordedMediaIndex(): number;
      getReduceInfectionPower(): number;
      getRegistry_id(): number;
      getRemoteControlID(): number;
      getRemoteRange(): number;
      getReplaceOnUse(): string;
      getReplaceOnUseFullType(): string;
      getReplaceOnUseOn(): string;
      getReplaceOnUseOnString(): string;
      getRequireInHandOrInventory(): java.util.ArrayList<string>;
      getRightClickContainer(): zombie.inventory.ItemContainer;
      getSaveType(): number;
      getScore(arg0: zombie.characters.SurvivorDesc): number;
      getScriptItem(): zombie.scripting.objects.Item;
      getStashChance(): number;
      getStaticModel(): string;
      getStressChange(): number;
      getStringItemType(): string;
      getSuspensionCompression(): number;
      getSuspensionDamping(): number;
      getSwingAnim(): string;
      getTags(): java.util.ArrayList<string>;
      getTaken(): java.util.ArrayList<zombie.iso.IsoObject>;
      getTex(): zombie.core.textures.Texture;
      getTexture(): zombie.core.textures.Texture;
      getTextureBurnt(): zombie.core.textures.Texture;
      getTextureCooked(): zombie.core.textures.Texture;
      getTexturerotten(): zombie.core.textures.Texture;
      getTooltip(): string;
      getTorchDot(): number;
      getType(): string;
      getUnCookedString(): string;
      getUnequipSound(): string;
      getUnequippedWeight(): number;
      getUnhappyChange(): number;
      getUses(): number;
      getVisual(): zombie.core.skinnedmodel.visual.ItemVisual;
      getWeight(): number;
      getWetCooldown(): number;
      getWheelFriction(): number;
      getWorker(): string;
      getWorldItem(): zombie.iso.objects.IsoWorldInventoryObject;
      getWorldStaticItem(): string;
      getWorldTexture(): string;
      hasBlood(): boolean;
      hasDirt(): boolean;
      hasModData(): boolean;
      hasTag(arg0: string): boolean;
      hashCode(): number;
      haveExtraItems(): boolean;
      initialiseItem(): void;
      isActivated(): boolean;
      isAlcoholic(): boolean;
      isAlwaysWelcomeGift(): boolean;
      isBeingFilled(): boolean;
      isBroken(): boolean;
      isBurnt(): boolean;
      isCanBandage(): boolean;
      isConditionAffectsCapacity(): boolean;
      isCookable(): boolean;
      isCooked(): boolean;
      isCustomColor(): boolean;
      isCustomName(): boolean;
      isCustomWeight(): boolean;
      isDisappearOnUse(): boolean;
      isEmittingLight(): boolean;
      isEquipped(): boolean;
      isEquippedNoSprint(): boolean;
      isFavorite(): boolean;
      isFishingLure(): boolean;
      isHairDye(): boolean;
      isHidden(): boolean;
      isInLocalPlayerInventory(): boolean;
      isInPlayerInventory(): boolean;
      isInfected(): boolean;
      isInitialised(): boolean;
      isIsCookable(): boolean;
      isProtectFromRainWhileEquipped(): boolean;
      isRecordedMedia(): boolean;
      isRemoteController(): boolean;
      isRequiresEquippedBothHands(): boolean;
      isTaintedWater(): boolean;
      isTorchCone(): boolean;
      isTrap(): boolean;
      isTwoHandWeapon(): boolean;
      isUseWorldItem(): boolean;
      isVanilla(): boolean;
      isWaterSource(): boolean;
      isWet(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadItem(arg0: java.nio.ByteBuffer, arg1: number, arg2: boolean): zombie.inventory.InventoryItem;
      notify(): void;
      notifyAll(): void;
      save(arg0: java.nio.ByteBuffer, arg1: boolean): void;
      saveWithSize(arg0: java.nio.ByteBuffer, arg1: boolean): void;
      setActivated(arg0: boolean): void;
      setActivatedRemote(arg0: boolean): void;
      setActualWeight(arg0: number): void;
      setAge(arg0: number): void;
      setAlcoholPower(arg0: number): void;
      setAlcoholic(arg0: boolean): void;
      setAmmoType(arg0: string): void;
      setAttachedSlot(arg0: number): void;
      setAttachedSlotType(arg0: string): void;
      setAttachedToModel(arg0: string): void;
      setAttachmentReplacement(arg0: string): void;
      setAttachmentType(arg0: string): void;
      setAttachmentsProvided(arg0: java.util.ArrayList<string>): void;
      setAutoAge(): void;
      setBandagePower(arg0: number): void;
      setBeingFilled(arg0: boolean): void;
      setBlood(arg0: zombie.characterTextures.BloodBodyPartType, arg1: number): void;
      setBloodClothingType(arg0: java.util.ArrayList<zombie.characterTextures.BloodClothingType>): void;
      setBoredomChange(arg0: number): void;
      setBrakeForce(arg0: number): void;
      setBreakSound(arg0: string): void;
      setBroken(arg0: boolean): void;
      setBurnt(arg0: boolean): void;
      setBurntString(arg0: string): void;
      setCanBeActivated(arg0: boolean): void;
      setCanBeRemote(arg0: boolean): void;
      setCat(arg0: zombie.inventory.ItemType): void;
      setChanceToSpawnDamaged(arg0: number): void;
      setColor(arg0: zombie.core.Color): void;
      setColorBlue(arg0: number): void;
      setColorGreen(arg0: number): void;
      setColorRed(arg0: number): void;
      setCondition(arg0: number, arg1: boolean): void;
      setConditionFromModData(arg0: zombie.inventory.InventoryItem): void;
      setConditionLowerNormal(arg0: number): void;
      setConditionLowerOffroad(arg0: number): void;
      setConditionMax(arg0: number): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setContainerX(arg0: number): void;
      setContainerY(arg0: number): void;
      setCooked(arg0: boolean): void;
      setCookedString(arg0: string): void;
      setCookingTime(arg0: number): void;
      setCount(arg0: number): void;
      setCountDownSound(arg0: string): void;
      setCurrentAmmoCount(arg0: number): void;
      setCustomColor(arg0: boolean): void;
      setCustomMenuOption(arg0: string): void;
      setCustomName(arg0: boolean): void;
      setCustomWeight(arg0: boolean): void;
      setDescription(arg0: string): void;
      setDirt(arg0: zombie.characterTextures.BloodBodyPartType, arg1: number): void;
      setDisplayCategory(arg0: string): void;
      setEngineLoudness(arg0: number): void;
      setEquipParent(arg0: zombie.characters.IsoGameCharacter): void;
      setEvolvedRecipeName(arg0: string): void;
      setExplosionSound(arg0: string): void;
      setFatigueChange(arg0: number): void;
      setFavorite(arg0: boolean): void;
      setGunType(arg0: string): void;
      setHaveBeenRepaired(arg0: number): void;
      setID(arg0: number): void;
      setIconsForTexture(arg0: java.util.ArrayList<string>): void;
      setInfected(arg0: boolean): void;
      setInitialised(arg0: boolean): void;
      setIsCookable(arg0: boolean): void;
      setIsWaterSource(arg0: boolean): void;
      setItemCapacity(arg0: number): void;
      setItemHeat(arg0: number): void;
      setItemWhenDry(arg0: string): void;
      setJobDelta(arg0: number): void;
      setJobType(arg0: string): void;
      setKeyId(arg0: number): void;
      setLastAged(arg0: number): void;
      setLightDistance(arg0: number): void;
      setLightStrength(arg0: number): void;
      setMaxAmmo(arg0: number): void;
      setMaxCapacity(arg0: number): void;
      setMediaType(arg0: number): void;
      setMeltingTime(arg0: number): void;
      setMetalValue(arg0: number): void;
      setMinutesToBurn(arg0: number): void;
      setMinutesToCook(arg0: number): void;
      setModule(arg0: string): void;
      setName(arg0: string): void;
      setNewPlaceDir(arg0: zombie.iso.IsoDirections): void;
      setOffAge(arg0: number): void;
      setOffAgeMax(arg0: number): void;
      setOffString(arg0: string): void;
      setPlaceDir(arg0: zombie.iso.IsoDirections): void;
      setPreviousOwner(arg0: zombie.characters.IsoGameCharacter): void;
      setRecordedMediaData(arg0: zombie.radio.media.MediaData): void;
      setRecordedMediaIndex(arg0: number): void;
      setRecordedMediaIndexInteger(arg0: number): void;
      setReduceInfectionPower(arg0: number): void;
      setRegistry_id(arg0: zombie.scripting.objects.Item): void;
      setRemoteControlID(arg0: number): void;
      setRemoteController(arg0: boolean): void;
      setRemoteRange(arg0: number): void;
      setReplaceOnUse(arg0: string): void;
      setReplaceOnUseOn(arg0: string): void;
      setRequireInHandOrInventory(arg0: java.util.ArrayList<string>): void;
      setRightClickContainer(arg0: zombie.inventory.ItemContainer): void;
      setScriptItem(arg0: zombie.scripting.objects.Item): void;
      setStashChance(arg0: number): void;
      setStashMap(arg0: string): void;
      setStressChange(arg0: number): void;
      setSuspensionCompression(arg0: number): void;
      setSuspensionDamping(arg0: number): void;
      setTaintedWater(arg0: boolean): void;
      setTaken(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      setTexture(arg0: zombie.core.textures.Texture): void;
      setTextureBurnt(arg0: zombie.core.textures.Texture): void;
      setTextureCooked(arg0: zombie.core.textures.Texture): void;
      setTexturerotten(arg0: zombie.core.textures.Texture): void;
      setTooltip(arg0: string): void;
      setTorchCone(arg0: boolean): void;
      setType(arg0: string): void;
      setUnCookedString(arg0: string): void;
      setUnhappyChange(arg0: number): void;
      setUses(arg0: number): void;
      setWeight(arg0: number): void;
      setWet(arg0: boolean): void;
      setWetCooldown(arg0: number): void;
      setWheelFriction(arg0: number): void;
      setWorker(arg0: string): void;
      setWorldItem(arg0: zombie.iso.objects.IsoWorldInventoryObject): void;
      setWorldScale(arg0: number): void;
      setWorldTexture(arg0: string): void;
      setWorldZRotation(arg0: number): void;
      shouldUpdateInWorld(): boolean;
      storeInByteData(arg0: zombie.iso.IsoObject): void;
      synchWithVisual(): void;
      toString(): string;
      update(): void;
      updateAge(): void;
      updateSound(arg0: zombie.audio.BaseSoundEmitter): void;
      wait(arg0: number): void;
    }
    // zombie.inventory.types.Drainable
    export class Drainable {
      private constructor();
      getUsedDelta(): number;
      setUsedDelta(arg0: number): void;
    }
    // zombie.inventory.types.DrainableComboItem extends zombie.inventory.InventoryItem
    export class DrainableComboItem {
      private constructor();
      CanStoreWater: boolean;
      CloseKillMove?: string;
      Cooked: boolean;
      IsWaterSource: boolean;
      ReplaceOnCooked?: java.util.List<string>;
      ReplaceOnUseOn?: string;
      RequiresEquippedBothHands: boolean;
      byteData?: java.nio.ByteBuffer;
      col?: zombie.core.Color;
      extraItems?: java.util.ArrayList<string>;
      fatigueChange: number;
      id: number;
      jobDelta: number;
      jobType?: string;
      keepOnDeplete: boolean;
      mainCategory?: string;
      worldItem?: zombie.iso.objects.IsoWorldInventoryObject;
      worldScale: number;
      worldZRotation: number;
  
      CanStack(arg0: zombie.inventory.InventoryItem): boolean;
      CopyModData(arg0: se.krka.kahlua.vm.KahluaTable): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      HowRotten(): number;
      IsClothing(): boolean;
      IsDrainable(): boolean;
      IsFood(): boolean;
      IsInventoryContainer(): boolean;
      IsLiterature(): boolean;
      IsMap(): boolean;
      IsRotten(): boolean;
      IsWeapon(): boolean;
      ModDataMatches(arg0: zombie.inventory.InventoryItem): boolean;
      SetContainerPosition(arg0: number, arg1: number): void;
      Use(arg0: boolean, arg1: boolean): void;
      UseItem(): void;
      addExtraItem(arg0: string): void;
      allowRandomTint(): boolean;
      canBeActivated(): boolean;
      canBeRemote(): boolean;
      canConsolidate(): boolean;
      canEmitLight(): boolean;
      canStoreWater(): boolean;
      copyConditionModData(arg0: zombie.inventory.InventoryItem): void;
      copyModData(arg0: se.krka.kahlua.vm.KahluaTable): void;
      doBuildingStash(): void;
      equals(arg0: any): boolean;
      finishupdate(): boolean;
      getA(): number;
      getActualWeight(): number;
      getAge(): number;
      getAlcoholPower(): number;
      getAlternateModelName(): string;
      getAmmoType(): string;
      getAttachedSlot(): number;
      getAttachedSlotType(): string;
      getAttachedToModel(): string;
      getAttachmentReplacement(): string;
      getAttachmentType(): string;
      getAttachmentsProvided(): java.util.ArrayList<string>;
      getB(): number;
      getBandagePower(): number;
      getBlood(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getBloodClothingType(): java.util.ArrayList<zombie.characterTextures.BloodClothingType>;
      getBodyLocation(): string;
      getBoredomChange(): number;
      getBrakeForce(): number;
      getBreakSound(): string;
      getBringToBearSound(): string;
      getBurntString(): string;
      getByteData(): java.nio.ByteBuffer;
      getCat(): zombie.inventory.ItemType;
      getCategory(): string;
      getChanceToSpawnDamaged(): number;
      getClass(): java.lang.Class<any>;
      getCleanString(arg0: number): string;
      getClothingItem(): zombie.core.skinnedmodel.population.ClothingItem;
      getClothingItemExtra(): java.util.ArrayList<string>;
      getClothingItemExtraOption(): java.util.ArrayList<string>;
      getClothingItemName(): string;
      getColor(): zombie.core.Color;
      getColorBlue(): number;
      getColorGreen(): number;
      getColorInfo(): zombie.core.textures.ColorInfo;
      getColorRed(): number;
      getCondition(): number;
      getConditionLowerNormal(): number;
      getConditionLowerOffroad(): number;
      getConditionMax(): number;
      getConsolidateOption(): string;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerX(): number;
      getContainerY(): number;
      getContentsWeight(): number;
      getCookedString(): string;
      getCookingTime(): number;
      getCount(): number;
      getCountDownSound(): string;
      getCurrentAmmoCount(): number;
      getCurrentCondition(): number;
      getCurrentUses(): number;
      getCustomMenuOption(): string;
      getDelta(): number;
      getDescription(): string;
      getDirt(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getDisplayCategory(): string;
      getDisplayName(): string;
      getDrainableUsesFloat(): number;
      getDrainableUsesInt(): number;
      getEatType(): string;
      getEngineLoudness(): number;
      getEquipParent(): zombie.characters.IsoGameCharacter;
      getEquipSound(): string;
      getEquippedWeight(): number;
      getEvolvedRecipeName(): string;
      getExplosionSound(): string;
      getExtraItems(): java.util.ArrayList<string>;
      getExtraItemsWeight(): number;
      getFabricType(): string;
      getFatigueChange(): number;
      getFillFromDispenserSound(): string;
      getFillFromTapSound(): string;
      getFullType(): string;
      getG(): number;
      getGunType(): string;
      getHaveBeenRepaired(): number;
      getHeat(): number;
      getHotbarEquippedWeight(): number;
      getID(): number;
      getIconsForTexture(): java.util.ArrayList<string>;
      getInvHeat(): number;
      getItemCapacity(): number;
      getItemHeat(): number;
      getItemReplacementPrimaryHand(): zombie.scripting.objects.ItemReplacement;
      getItemReplacementSecondHand(): zombie.scripting.objects.ItemReplacement;
      getItemWhenDry(): string;
      getJobDelta(): number;
      getJobType(): string;
      getKeyId(): number;
      getLastAged(): number;
      getLightDistance(): number;
      getLightStrength(): number;
      getLuaCreate(): string;
      getMakeUpType(): string;
      getMaxAmmo(): number;
      getMaxCapacity(): number;
      getMechanicType(): number;
      getMediaData(): zombie.radio.media.MediaData;
      getMediaType(): number;
      getMeltingTime(): number;
      getMetalValue(): number;
      getMinutesToBurn(): number;
      getMinutesToCook(): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getModID(): string;
      getModName(): string;
      getModule(): string;
      getName(): string;
      getNewPlaceDir(): zombie.iso.IsoDirections;
      getOffAge(): number;
      getOffAgeMax(): number;
      getOffString(): string;
      getOnCooked(): string;
      getOutermostContainer(): zombie.inventory.ItemContainer;
      getPlaceDir(): zombie.iso.IsoDirections;
      getPreviousOwner(): zombie.characters.IsoGameCharacter;
      getR(): number;
      getRainFactor(): number;
      getRecordedMediaIndex(): number;
      getReduceInfectionPower(): number;
      getRegistry_id(): number;
      getRemainingUses(): number;
      getRemoteControlID(): number;
      getRemoteRange(): number;
      getReplaceOnCooked(): java.util.List<string>;
      getReplaceOnDeplete(): string;
      getReplaceOnDepleteFullType(): string;
      getReplaceOnUse(): string;
      getReplaceOnUseFullType(): string;
      getReplaceOnUseOn(): string;
      getReplaceOnUseOnString(): string;
      getRequireInHandOrInventory(): java.util.ArrayList<string>;
      getRightClickContainer(): zombie.inventory.ItemContainer;
      getSaveType(): number;
      getScore(arg0: zombie.characters.SurvivorDesc): number;
      getScriptItem(): zombie.scripting.objects.Item;
      getStashChance(): number;
      getStaticModel(): string;
      getStressChange(): number;
      getStringItemType(): string;
      getSuspensionCompression(): number;
      getSuspensionDamping(): number;
      getSwingAnim(): string;
      getTags(): java.util.ArrayList<string>;
      getTaken(): java.util.ArrayList<zombie.iso.IsoObject>;
      getTex(): zombie.core.textures.Texture;
      getTexture(): zombie.core.textures.Texture;
      getTextureBurnt(): zombie.core.textures.Texture;
      getTextureCooked(): zombie.core.textures.Texture;
      getTexturerotten(): zombie.core.textures.Texture;
      getTicks(): number;
      getTicksPerEquipUse(): number;
      getTooltip(): string;
      getTorchDot(): number;
      getType(): string;
      getUnCookedString(): string;
      getUnequipSound(): string;
      getUnequippedWeight(): number;
      getUnhappyChange(): number;
      getUseDelta(): number;
      getUsedDelta(): number;
      getUses(): number;
      getVisual(): zombie.core.skinnedmodel.visual.ItemVisual;
      getWeight(): number;
      getWeightEmpty(): number;
      getWetCooldown(): number;
      getWheelFriction(): number;
      getWorker(): string;
      getWorldItem(): zombie.iso.objects.IsoWorldInventoryObject;
      getWorldStaticItem(): string;
      getWorldTexture(): string;
      hasBlood(): boolean;
      hasDirt(): boolean;
      hasModData(): boolean;
      hasTag(arg0: string): boolean;
      hashCode(): number;
      haveExtraItems(): boolean;
      initialiseItem(): void;
      isActivated(): boolean;
      isAlcoholic(): boolean;
      isAlwaysWelcomeGift(): boolean;
      isBeingFilled(): boolean;
      isBroken(): boolean;
      isBurnt(): boolean;
      isCanBandage(): boolean;
      isConditionAffectsCapacity(): boolean;
      isCookable(): boolean;
      isCooked(): boolean;
      isCustomColor(): boolean;
      isCustomName(): boolean;
      isCustomWeight(): boolean;
      isDisappearOnUse(): boolean;
      isEmittingLight(): boolean;
      isEquipped(): boolean;
      isEquippedNoSprint(): boolean;
      isFavorite(): boolean;
      isFishingLure(): boolean;
      isHairDye(): boolean;
      isHidden(): boolean;
      isInLocalPlayerInventory(): boolean;
      isInPlayerInventory(): boolean;
      isInfected(): boolean;
      isInitialised(): boolean;
      isIsCookable(): boolean;
      isProtectFromRainWhileEquipped(): boolean;
      isRecordedMedia(): boolean;
      isRemoteController(): boolean;
      isRequiresEquippedBothHands(): boolean;
      isTaintedWater(): boolean;
      isTorchCone(): boolean;
      isTrap(): boolean;
      isTwoHandWeapon(): boolean;
      isUseWhileEquiped(): boolean;
      isUseWhileUnequiped(): boolean;
      isUseWorldItem(): boolean;
      isVanilla(): boolean;
      isWaterSource(): boolean;
      isWet(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadItem(arg0: java.nio.ByteBuffer, arg1: number, arg2: boolean): zombie.inventory.InventoryItem;
      notify(): void;
      notifyAll(): void;
      render(): void;
      renderlast(): void;
      save(arg0: java.nio.ByteBuffer, arg1: boolean): void;
      saveWithSize(arg0: java.nio.ByteBuffer, arg1: boolean): void;
      setActivated(arg0: boolean): void;
      setActivatedRemote(arg0: boolean): void;
      setActualWeight(arg0: number): void;
      setAge(arg0: number): void;
      setAlcoholPower(arg0: number): void;
      setAlcoholic(arg0: boolean): void;
      setAmmoType(arg0: string): void;
      setAttachedSlot(arg0: number): void;
      setAttachedSlotType(arg0: string): void;
      setAttachedToModel(arg0: string): void;
      setAttachmentReplacement(arg0: string): void;
      setAttachmentType(arg0: string): void;
      setAttachmentsProvided(arg0: java.util.ArrayList<string>): void;
      setAutoAge(): void;
      setBandagePower(arg0: number): void;
      setBeingFilled(arg0: boolean): void;
      setBlood(arg0: zombie.characterTextures.BloodBodyPartType, arg1: number): void;
      setBloodClothingType(arg0: java.util.ArrayList<zombie.characterTextures.BloodClothingType>): void;
      setBoredomChange(arg0: number): void;
      setBrakeForce(arg0: number): void;
      setBreakSound(arg0: string): void;
      setBroken(arg0: boolean): void;
      setBurnt(arg0: boolean): void;
      setBurntString(arg0: string): void;
      setCanBeActivated(arg0: boolean): void;
      setCanBeRemote(arg0: boolean): void;
      setCanConsolidate(arg0: boolean): void;
      setCat(arg0: zombie.inventory.ItemType): void;
      setChanceToSpawnDamaged(arg0: number): void;
      setColor(arg0: zombie.core.Color): void;
      setColorBlue(arg0: number): void;
      setColorGreen(arg0: number): void;
      setColorRed(arg0: number): void;
      setCondition(arg0: number, arg1: boolean): void;
      setConditionFromModData(arg0: zombie.inventory.InventoryItem): void;
      setConditionLowerNormal(arg0: number): void;
      setConditionLowerOffroad(arg0: number): void;
      setConditionMax(arg0: number): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setContainerX(arg0: number): void;
      setContainerY(arg0: number): void;
      setCooked(arg0: boolean): void;
      setCookedString(arg0: string): void;
      setCookingTime(arg0: number): void;
      setCount(arg0: number): void;
      setCountDownSound(arg0: string): void;
      setCurrentAmmoCount(arg0: number): void;
      setCustomColor(arg0: boolean): void;
      setCustomMenuOption(arg0: string): void;
      setCustomName(arg0: boolean): void;
      setCustomWeight(arg0: boolean): void;
      setDelta(arg0: number): void;
      setDescription(arg0: string): void;
      setDirt(arg0: zombie.characterTextures.BloodBodyPartType, arg1: number): void;
      setDisplayCategory(arg0: string): void;
      setEngineLoudness(arg0: number): void;
      setEquipParent(arg0: zombie.characters.IsoGameCharacter): void;
      setEvolvedRecipeName(arg0: string): void;
      setExplosionSound(arg0: string): void;
      setFatigueChange(arg0: number): void;
      setFavorite(arg0: boolean): void;
      setGunType(arg0: string): void;
      setHaveBeenRepaired(arg0: number): void;
      setHeat(arg0: number): void;
      setID(arg0: number): void;
      setIconsForTexture(arg0: java.util.ArrayList<string>): void;
      setInfected(arg0: boolean): void;
      setInitialised(arg0: boolean): void;
      setIsCookable(arg0: boolean): void;
      setIsWaterSource(arg0: boolean): void;
      setItemCapacity(arg0: number): void;
      setItemHeat(arg0: number): void;
      setItemWhenDry(arg0: string): void;
      setJobDelta(arg0: number): void;
      setJobType(arg0: string): void;
      setKeyId(arg0: number): void;
      setLastAged(arg0: number): void;
      setLightDistance(arg0: number): void;
      setLightStrength(arg0: number): void;
      setMaxAmmo(arg0: number): void;
      setMaxCapacity(arg0: number): void;
      setMediaType(arg0: number): void;
      setMeltingTime(arg0: number): void;
      setMetalValue(arg0: number): void;
      setMinutesToBurn(arg0: number): void;
      setMinutesToCook(arg0: number): void;
      setModule(arg0: string): void;
      setName(arg0: string): void;
      setNewPlaceDir(arg0: zombie.iso.IsoDirections): void;
      setOffAge(arg0: number): void;
      setOffAgeMax(arg0: number): void;
      setOffString(arg0: string): void;
      setOnCooked(arg0: string): void;
      setPlaceDir(arg0: zombie.iso.IsoDirections): void;
      setPreviousOwner(arg0: zombie.characters.IsoGameCharacter): void;
      setRainFactor(arg0: number): void;
      setRecordedMediaData(arg0: zombie.radio.media.MediaData): void;
      setRecordedMediaIndex(arg0: number): void;
      setRecordedMediaIndexInteger(arg0: number): void;
      setReduceInfectionPower(arg0: number): void;
      setRegistry_id(arg0: zombie.scripting.objects.Item): void;
      setRemoteControlID(arg0: number): void;
      setRemoteController(arg0: boolean): void;
      setRemoteRange(arg0: number): void;
      setReplaceOnCooked(arg0: java.util.List<string>): void;
      setReplaceOnDeplete(arg0: string): void;
      setReplaceOnUse(arg0: string): void;
      setReplaceOnUseOn(arg0: string): void;
      setRequireInHandOrInventory(arg0: java.util.ArrayList<string>): void;
      setRightClickContainer(arg0: zombie.inventory.ItemContainer): void;
      setScriptItem(arg0: zombie.scripting.objects.Item): void;
      setStashChance(arg0: number): void;
      setStashMap(arg0: string): void;
      setStressChange(arg0: number): void;
      setSuspensionCompression(arg0: number): void;
      setSuspensionDamping(arg0: number): void;
      setTaintedWater(arg0: boolean): void;
      setTaken(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      setTexture(arg0: zombie.core.textures.Texture): void;
      setTextureBurnt(arg0: zombie.core.textures.Texture): void;
      setTextureCooked(arg0: zombie.core.textures.Texture): void;
      setTexturerotten(arg0: zombie.core.textures.Texture): void;
      setTicks(arg0: number): void;
      setTicksPerEquipUse(arg0: number): void;
      setTooltip(arg0: string): void;
      setTorchCone(arg0: boolean): void;
      setType(arg0: string): void;
      setUnCookedString(arg0: string): void;
      setUnhappyChange(arg0: number): void;
      setUseDelta(arg0: number): void;
      setUseWhileEquiped(arg0: boolean): void;
      setUseWhileUnequiped(arg0: boolean): void;
      setUsedDelta(arg0: number): void;
      setUses(arg0: number): void;
      setWeight(arg0: number): void;
      setWeightEmpty(arg0: number): void;
      setWet(arg0: boolean): void;
      setWetCooldown(arg0: number): void;
      setWheelFriction(arg0: number): void;
      setWorker(arg0: string): void;
      setWorldItem(arg0: zombie.iso.objects.IsoWorldInventoryObject): void;
      setWorldScale(arg0: number): void;
      setWorldTexture(arg0: string): void;
      setWorldZRotation(arg0: number): void;
      shouldUpdateInWorld(): boolean;
      storeInByteData(arg0: zombie.iso.IsoObject): void;
      synchWithVisual(): void;
      toString(): string;
      update(): void;
      updateAge(): void;
      updateSound(arg0: zombie.audio.BaseSoundEmitter): void;
      updateWeight(): void;
      wait(arg0: number): void;
    }
    // zombie.inventory.types.Food extends zombie.inventory.InventoryItem
    export class Food {
      private constructor();
      CanStoreWater: boolean;
      CloseKillMove?: string;
      Cooked: boolean;
      static readonly FreezerAgeMultiplier: number;
      IsWaterSource: boolean;
      Poison: boolean;
      ReplaceOnUseOn?: string;
      RequiresEquippedBothHands: boolean;
      byteData?: java.nio.ByteBuffer;
      col?: zombie.core.Color;
      extraItems?: java.util.ArrayList<string>;
      fatigueChange: number;
      id: number;
      jobDelta: number;
      jobType?: string;
      keepOnDeplete: boolean;
      mainCategory?: string;
      spices?: java.util.ArrayList<string>;
      thirstChange: number;
      worldItem?: zombie.iso.objects.IsoWorldInventoryObject;
      worldScale: number;
      worldZRotation: number;
  
      CanStack(arg0: zombie.inventory.InventoryItem): boolean;
      CopyModData(arg0: se.krka.kahlua.vm.KahluaTable): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      HowRotten(): number;
      IsClothing(): boolean;
      IsDrainable(): boolean;
      IsFood(): boolean;
      IsInventoryContainer(): boolean;
      IsLiterature(): boolean;
      IsMap(): boolean;
      IsRotten(): boolean;
      IsWeapon(): boolean;
      ModDataMatches(arg0: zombie.inventory.InventoryItem): boolean;
      SetContainerPosition(arg0: number, arg1: number): void;
      Use(arg0: boolean, arg1: boolean): void;
      UseItem(): void;
      addExtraItem(arg0: string): void;
      allowRandomTint(): boolean;
      canBeActivated(): boolean;
      canBeFrozen(): boolean;
      canBeRemote(): boolean;
      canEmitLight(): boolean;
      canStoreWater(): boolean;
      copyConditionModData(arg0: zombie.inventory.InventoryItem): void;
      copyModData(arg0: se.krka.kahlua.vm.KahluaTable): void;
      doBuildingStash(): void;
      equals(arg0: any): boolean;
      finishupdate(): boolean;
      freeze(): void;
      getA(): number;
      getActualWeight(): number;
      getAge(): number;
      getAlcoholPower(): number;
      getAlternateModelName(): string;
      getAmmoType(): string;
      getAttachedSlot(): number;
      getAttachedSlotType(): string;
      getAttachedToModel(): string;
      getAttachmentReplacement(): string;
      getAttachmentType(): string;
      getAttachmentsProvided(): java.util.ArrayList<string>;
      getB(): number;
      getBandagePower(): number;
      getBaseHungChange(): number;
      getBaseHunger(): number;
      getBlood(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getBloodClothingType(): java.util.ArrayList<zombie.characterTextures.BloodClothingType>;
      getBodyLocation(): string;
      getBoredomChange(): number;
      getBrakeForce(): number;
      getBreakSound(): string;
      getBringToBearSound(): string;
      getBurntString(): string;
      getByteData(): java.nio.ByteBuffer;
      getCalories(): number;
      getCarbohydrates(): number;
      getCat(): zombie.inventory.ItemType;
      getCategory(): string;
      getChanceToSpawnDamaged(): number;
      getChef(): string;
      getClass(): java.lang.Class<any>;
      getCleanString(arg0: number): string;
      getClothingItem(): zombie.core.skinnedmodel.population.ClothingItem;
      getClothingItemExtra(): java.util.ArrayList<string>;
      getClothingItemExtraOption(): java.util.ArrayList<string>;
      getClothingItemName(): string;
      getColor(): zombie.core.Color;
      getColorBlue(): number;
      getColorGreen(): number;
      getColorInfo(): zombie.core.textures.ColorInfo;
      getColorRed(): number;
      getCompostTime(): number;
      getCondition(): number;
      getConditionLowerNormal(): number;
      getConditionLowerOffroad(): number;
      getConditionMax(): number;
      getConsolidateOption(): string;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerX(): number;
      getContainerY(): number;
      getContentsWeight(): number;
      getCookedString(): string;
      getCookingSound(): string;
      getCookingTime(): number;
      getCount(): number;
      getCountDownSound(): string;
      getCurrentAmmoCount(): number;
      getCurrentCondition(): number;
      getCurrentUses(): number;
      getCustomEatSound(): string;
      getCustomMenuOption(): string;
      getDescription(): string;
      getDirt(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getDisplayCategory(): string;
      getDisplayName(): string;
      getEatType(): string;
      getEndChange(): number;
      getEnduranceChange(): number;
      getEngineLoudness(): number;
      getEquipParent(): zombie.characters.IsoGameCharacter;
      getEquipSound(): string;
      getEquippedWeight(): number;
      getEvolvedRecipeName(): string;
      getExplosionSound(): string;
      getExtraItems(): java.util.ArrayList<string>;
      getExtraItemsWeight(): number;
      getFabricType(): string;
      getFatigueChange(): number;
      getFillFromDispenserSound(): string;
      getFillFromTapSound(): string;
      getFluReduction(): number;
      getFoodType(): string;
      getFreezingTime(): number;
      getFullType(): string;
      getG(): number;
      getGunType(): string;
      getHaveBeenRepaired(): number;
      getHeat(): number;
      getHerbalistType(): string;
      getHotbarEquippedWeight(): number;
      getHungChange(): number;
      getHungerChange(): number;
      getID(): number;
      getIconsForTexture(): java.util.ArrayList<string>;
      getInvHeat(): number;
      getItemCapacity(): number;
      getItemHeat(): number;
      getItemReplacementPrimaryHand(): zombie.scripting.objects.ItemReplacement;
      getItemReplacementSecondHand(): zombie.scripting.objects.ItemReplacement;
      getItemWhenDry(): string;
      getJobDelta(): number;
      getJobType(): string;
      getKeyId(): number;
      getLastAged(): number;
      getLastCookMinute(): number;
      getLightDistance(): number;
      getLightStrength(): number;
      getLipids(): number;
      getLuaCreate(): string;
      getMakeUpType(): string;
      getMaxAmmo(): number;
      getMaxCapacity(): number;
      getMechanicType(): number;
      getMediaData(): zombie.radio.media.MediaData;
      getMediaType(): number;
      getMeltingTime(): number;
      getMetalValue(): number;
      getMinutesToBurn(): number;
      getMinutesToCook(): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getModID(): string;
      getModName(): string;
      getModule(): string;
      getName(): string;
      getNewPlaceDir(): zombie.iso.IsoDirections;
      getOffAge(): number;
      getOffAgeMax(): number;
      getOffString(): string;
      getOnCooked(): string;
      getOnEat(): string;
      getOutermostContainer(): zombie.inventory.ItemContainer;
      getPainReduction(): number;
      getPlaceDir(): zombie.iso.IsoDirections;
      getPoisonDetectionLevel(): number;
      getPoisonLevelForRecipe(): number;
      getPoisonPower(): number;
      getPreviousOwner(): zombie.characters.IsoGameCharacter;
      getProteins(): number;
      getR(): number;
      getRecordedMediaIndex(): number;
      getReduceFoodSickness(): number;
      getReduceInfectionPower(): number;
      getRegistry_id(): number;
      getRemoteControlID(): number;
      getRemoteRange(): number;
      getReplaceOnCooked(): java.util.List<string>;
      getReplaceOnRotten(): string;
      getReplaceOnUse(): string;
      getReplaceOnUseFullType(): string;
      getReplaceOnUseOn(): string;
      getReplaceOnUseOnString(): string;
      getRequireInHandOrInventory(): java.util.ArrayList<string>;
      getRightClickContainer(): zombie.inventory.ItemContainer;
      getRottenTime(): number;
      getSaveType(): number;
      getScore(arg0: zombie.characters.SurvivorDesc): number;
      getScriptItem(): zombie.scripting.objects.Item;
      getSpices(): java.util.ArrayList<string>;
      getStashChance(): number;
      getStaticModel(): string;
      getStressChange(): number;
      getStringItemType(): string;
      getSuspensionCompression(): number;
      getSuspensionDamping(): number;
      getSwingAnim(): string;
      getTags(): java.util.ArrayList<string>;
      getTaken(): java.util.ArrayList<zombie.iso.IsoObject>;
      getTex(): zombie.core.textures.Texture;
      getTexture(): zombie.core.textures.Texture;
      getTextureBurnt(): zombie.core.textures.Texture;
      getTextureCooked(): zombie.core.textures.Texture;
      getTexturerotten(): zombie.core.textures.Texture;
      getThirstChange(): number;
      getTooltip(): string;
      getTorchDot(): number;
      getType(): string;
      getUnCookedString(): string;
      getUnequipSound(): string;
      getUnequippedWeight(): number;
      getUnhappyChange(): number;
      getUseForPoison(): number;
      getUseOnConsume(): string;
      getUses(): number;
      getVisual(): zombie.core.skinnedmodel.visual.ItemVisual;
      getWeight(): number;
      getWetCooldown(): number;
      getWheelFriction(): number;
      getWorker(): string;
      getWorldItem(): zombie.iso.objects.IsoWorldInventoryObject;
      getWorldStaticItem(): string;
      getWorldTexture(): string;
      hasBlood(): boolean;
      hasDirt(): boolean;
      hasModData(): boolean;
      hasTag(arg0: string): boolean;
      hashCode(): number;
      haveExtraItems(): boolean;
      initialiseItem(): void;
      isActivated(): boolean;
      isAlcoholic(): boolean;
      isAlwaysWelcomeGift(): boolean;
      isBadCold(): boolean;
      isBadInMicrowave(): boolean;
      isBeingFilled(): boolean;
      isBroken(): boolean;
      isBurnt(): boolean;
      isCanBandage(): boolean;
      isConditionAffectsCapacity(): boolean;
      isCookable(): boolean;
      isCooked(): boolean;
      isCookedInMicrowave(): boolean;
      isCustomColor(): boolean;
      isCustomName(): boolean;
      isCustomWeight(): boolean;
      isDisappearOnUse(): boolean;
      isEmittingLight(): boolean;
      isEquipped(): boolean;
      isEquippedNoSprint(): boolean;
      isFavorite(): boolean;
      isFishingLure(): boolean;
      isFreezing(): boolean;
      isFresh(): boolean;
      isFrozen(): boolean;
      isGoodHot(): boolean;
      isHairDye(): boolean;
      isHidden(): boolean;
      isInLocalPlayerInventory(): boolean;
      isInPlayerInventory(): boolean;
      isInfected(): boolean;
      isInitialised(): boolean;
      isIsCookable(): boolean;
      isPackaged(): boolean;
      isPoison(): boolean;
      isProtectFromRainWhileEquipped(): boolean;
      isRecordedMedia(): boolean;
      isRemoteController(): boolean;
      isRemoveNegativeEffectOnCooked(): boolean;
      isRequiresEquippedBothHands(): boolean;
      isRotten(): boolean;
      isSpice(): boolean;
      isTaintedWater(): boolean;
      isThawing(): boolean;
      isTorchCone(): boolean;
      isTrap(): boolean;
      isTwoHandWeapon(): boolean;
      isUseWorldItem(): boolean;
      isVanilla(): boolean;
      isWaterSource(): boolean;
      isWet(): boolean;
      isbDangerousUncooked(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadItem(arg0: java.nio.ByteBuffer, arg1: number, arg2: boolean): zombie.inventory.InventoryItem;
      multiplyFoodValues(arg0: number): void;
      notify(): void;
      notifyAll(): void;
      save(arg0: java.nio.ByteBuffer, arg1: boolean): void;
      saveWithSize(arg0: java.nio.ByteBuffer, arg1: boolean): void;
      setActivated(arg0: boolean): void;
      setActivatedRemote(arg0: boolean): void;
      setActualWeight(arg0: number): void;
      setAge(arg0: number): void;
      setAlcoholPower(arg0: number): void;
      setAlcoholic(arg0: boolean): void;
      setAmmoType(arg0: string): void;
      setAttachedSlot(arg0: number): void;
      setAttachedSlotType(arg0: string): void;
      setAttachedToModel(arg0: string): void;
      setAttachmentReplacement(arg0: string): void;
      setAttachmentType(arg0: string): void;
      setAttachmentsProvided(arg0: java.util.ArrayList<string>): void;
      setAutoAge(): void;
      setBadCold(arg0: boolean): void;
      setBadInMicrowave(arg0: boolean): void;
      setBandagePower(arg0: number): void;
      setBaseHunger(arg0: number): void;
      setBeingFilled(arg0: boolean): void;
      setBlood(arg0: zombie.characterTextures.BloodBodyPartType, arg1: number): void;
      setBloodClothingType(arg0: java.util.ArrayList<zombie.characterTextures.BloodClothingType>): void;
      setBoredomChange(arg0: number): void;
      setBrakeForce(arg0: number): void;
      setBreakSound(arg0: string): void;
      setBroken(arg0: boolean): void;
      setBurnt(arg0: boolean): void;
      setBurntString(arg0: string): void;
      setCalories(arg0: number): void;
      setCanBeActivated(arg0: boolean): void;
      setCanBeFrozen(arg0: boolean): void;
      setCanBeRemote(arg0: boolean): void;
      setCarbohydrates(arg0: number): void;
      setCat(arg0: zombie.inventory.ItemType): void;
      setChanceToSpawnDamaged(arg0: number): void;
      setChef(arg0: string): void;
      setColor(arg0: zombie.core.Color): void;
      setColorBlue(arg0: number): void;
      setColorGreen(arg0: number): void;
      setColorRed(arg0: number): void;
      setCompostTime(arg0: number): void;
      setCondition(arg0: number, arg1: boolean): void;
      setConditionFromModData(arg0: zombie.inventory.InventoryItem): void;
      setConditionLowerNormal(arg0: number): void;
      setConditionLowerOffroad(arg0: number): void;
      setConditionMax(arg0: number): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setContainerX(arg0: number): void;
      setContainerY(arg0: number): void;
      setCooked(arg0: boolean): void;
      setCookedString(arg0: string): void;
      setCookingTime(arg0: number): void;
      setCount(arg0: number): void;
      setCountDownSound(arg0: string): void;
      setCurrentAmmoCount(arg0: number): void;
      setCustomColor(arg0: boolean): void;
      setCustomEatSound(arg0: string): void;
      setCustomMenuOption(arg0: string): void;
      setCustomName(arg0: boolean): void;
      setCustomWeight(arg0: boolean): void;
      setDescription(arg0: string): void;
      setDirt(arg0: zombie.characterTextures.BloodBodyPartType, arg1: number): void;
      setDisplayCategory(arg0: string): void;
      setEndChange(arg0: number): void;
      setEngineLoudness(arg0: number): void;
      setEquipParent(arg0: zombie.characters.IsoGameCharacter): void;
      setEvolvedRecipeName(arg0: string): void;
      setExplosionSound(arg0: string): void;
      setFatigueChange(arg0: number): void;
      setFavorite(arg0: boolean): void;
      setFluReduction(arg0: number): void;
      setFoodType(arg0: string): void;
      setFreezingTime(arg0: number): void;
      setFrozen(arg0: boolean): void;
      setGoodHot(arg0: boolean): void;
      setGunType(arg0: string): void;
      setHaveBeenRepaired(arg0: number): void;
      setHeat(arg0: number): void;
      setHerbalistType(arg0: string): void;
      setHungChange(arg0: number): void;
      setID(arg0: number): void;
      setIconsForTexture(arg0: java.util.ArrayList<string>): void;
      setInfected(arg0: boolean): void;
      setInitialised(arg0: boolean): void;
      setIsCookable(arg0: boolean): void;
      setIsWaterSource(arg0: boolean): void;
      setItemCapacity(arg0: number): void;
      setItemHeat(arg0: number): void;
      setItemWhenDry(arg0: string): void;
      setJobDelta(arg0: number): void;
      setJobType(arg0: string): void;
      setKeyId(arg0: number): void;
      setLastAged(arg0: number): void;
      setLastCookMinute(arg0: number): void;
      setLightDistance(arg0: number): void;
      setLightStrength(arg0: number): void;
      setLipids(arg0: number): void;
      setMaxAmmo(arg0: number): void;
      setMaxCapacity(arg0: number): void;
      setMediaType(arg0: number): void;
      setMeltingTime(arg0: number): void;
      setMetalValue(arg0: number): void;
      setMinutesToBurn(arg0: number): void;
      setMinutesToCook(arg0: number): void;
      setModule(arg0: string): void;
      setName(arg0: string): void;
      setNewPlaceDir(arg0: zombie.iso.IsoDirections): void;
      setOffAge(arg0: number): void;
      setOffAgeMax(arg0: number): void;
      setOffString(arg0: string): void;
      setOnCooked(arg0: string): void;
      setOnEat(arg0: string): void;
      setPackaged(arg0: boolean): void;
      setPainReduction(arg0: number): void;
      setPlaceDir(arg0: zombie.iso.IsoDirections): void;
      setPoisonDetectionLevel(arg0: number): void;
      setPoisonLevelForRecipe(arg0: number): void;
      setPoisonPower(arg0: number): void;
      setPreviousOwner(arg0: zombie.characters.IsoGameCharacter): void;
      setProteins(arg0: number): void;
      setRecordedMediaData(arg0: zombie.radio.media.MediaData): void;
      setRecordedMediaIndex(arg0: number): void;
      setRecordedMediaIndexInteger(arg0: number): void;
      setReduceFoodSickness(arg0: number): void;
      setReduceInfectionPower(arg0: number): void;
      setRegistry_id(arg0: zombie.scripting.objects.Item): void;
      setRemoteControlID(arg0: number): void;
      setRemoteController(arg0: boolean): void;
      setRemoteRange(arg0: number): void;
      setRemoveNegativeEffectOnCooked(arg0: boolean): void;
      setReplaceOnCooked(arg0: java.util.List<string>): void;
      setReplaceOnRotten(arg0: string): void;
      setReplaceOnUse(arg0: string): void;
      setReplaceOnUseOn(arg0: string): void;
      setRequireInHandOrInventory(arg0: java.util.ArrayList<string>): void;
      setRightClickContainer(arg0: zombie.inventory.ItemContainer): void;
      setRotten(arg0: boolean): void;
      setRottenTime(arg0: number): void;
      setScriptItem(arg0: zombie.scripting.objects.Item): void;
      setSpice(arg0: boolean): void;
      setSpices(arg0: java.util.ArrayList<string>): void;
      setStashChance(arg0: number): void;
      setStashMap(arg0: string): void;
      setStressChange(arg0: number): void;
      setSuspensionCompression(arg0: number): void;
      setSuspensionDamping(arg0: number): void;
      setTaintedWater(arg0: boolean): void;
      setTaken(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      setTexture(arg0: zombie.core.textures.Texture): void;
      setTextureBurnt(arg0: zombie.core.textures.Texture): void;
      setTextureCooked(arg0: zombie.core.textures.Texture): void;
      setTexturerotten(arg0: zombie.core.textures.Texture): void;
      setThirstChange(arg0: number): void;
      setTooltip(arg0: string): void;
      setTorchCone(arg0: boolean): void;
      setType(arg0: string): void;
      setUnCookedString(arg0: string): void;
      setUnhappyChange(arg0: number): void;
      setUseForPoison(arg0: number): void;
      setUseOnConsume(arg0: string): void;
      setUses(arg0: number): void;
      setWeight(arg0: number): void;
      setWet(arg0: boolean): void;
      setWetCooldown(arg0: number): void;
      setWheelFriction(arg0: number): void;
      setWorker(arg0: string): void;
      setWorldItem(arg0: zombie.iso.objects.IsoWorldInventoryObject): void;
      setWorldScale(arg0: number): void;
      setWorldTexture(arg0: string): void;
      setWorldZRotation(arg0: number): void;
      setbDangerousUncooked(arg0: boolean): void;
      shouldUpdateInWorld(): boolean;
      storeInByteData(arg0: zombie.iso.IsoObject): void;
      synchWithVisual(): void;
      toString(): string;
      update(): void;
      updateAge(): void;
      updateFreezing(arg0: zombie.inventory.ItemContainer): void;
      updateSound(arg0: zombie.audio.BaseSoundEmitter): void;
      wait(arg0: number): void;
    }
    // zombie.inventory.types.HandWeapon extends zombie.inventory.InventoryItem
    export class HandWeapon {
      private constructor();
      CanStoreWater: boolean;
      CloseKillMove?: string;
      Cooked: boolean;
      CriticalChance: number;
      HitAngleMod: number;
      IdleAnim?: string;
      IsWaterSource: boolean;
      ProjectileCount: number;
      ReplaceOnUseOn?: string;
      RequiresEquippedBothHands: boolean;
      RunAnim?: string;
      SplatSize: number;
      WeaponLength: number;
      aimingMod: number;
      bIsAimedFirearm: boolean;
      bIsAimedHandWeapon: boolean;
      byteData?: java.nio.ByteBuffer;
      col?: zombie.core.Color;
      extraItems?: java.util.ArrayList<string>;
      fatigueChange: number;
      id: number;
      jobDelta: number;
      jobType?: string;
      keepOnDeplete: boolean;
      mainCategory?: string;
      worldItem?: zombie.iso.objects.IsoWorldInventoryObject;
      worldScale: number;
      worldZRotation: number;
  
      CanStack(arg0: zombie.inventory.InventoryItem): boolean;
      CopyModData(arg0: se.krka.kahlua.vm.KahluaTable): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      HowRotten(): number;
      IsClothing(): boolean;
      IsDrainable(): boolean;
      IsFood(): boolean;
      IsInventoryContainer(): boolean;
      IsLiterature(): boolean;
      IsMap(): boolean;
      IsRotten(): boolean;
      IsWeapon(): boolean;
      ModDataMatches(arg0: zombie.inventory.InventoryItem): boolean;
      SetContainerPosition(arg0: number, arg1: number): void;
      Use(arg0: boolean, arg1: boolean): void;
      UseItem(): void;
      addExtraItem(arg0: string): void;
      allowRandomTint(): boolean;
      attachWeaponPart(arg0: zombie.inventory.types.WeaponPart): void;
      canBeActivated(): boolean;
      canBePlaced(): boolean;
      canBeRemote(): boolean;
      canBeReused(): boolean;
      canEmitLight(): boolean;
      canStoreWater(): boolean;
      copyConditionModData(arg0: zombie.inventory.InventoryItem): void;
      copyModData(arg0: se.krka.kahlua.vm.KahluaTable): void;
      detachWeaponPart(arg0: zombie.inventory.types.WeaponPart): void;
      doBuildingStash(): void;
      equals(arg0: any): boolean;
      finishupdate(): boolean;
      getA(): number;
      getActualWeight(): number;
      getAge(): number;
      getAimingMod(): number;
      getAimingPerkCritModifier(): number;
      getAimingPerkHitChanceModifier(): number;
      getAimingPerkMinAngleModifier(): number;
      getAimingPerkRangeModifier(): number;
      getAimingTime(): number;
      getAlcoholPower(): number;
      getAllWeaponParts(): java.util.ArrayList<zombie.inventory.types.WeaponPart>;
      getAlternateModelName(): string;
      getAmmoBox(): string;
      getAmmoPerShoot(): number;
      getAmmoType(): string;
      getAttachedSlot(): number;
      getAttachedSlotType(): string;
      getAttachedToModel(): string;
      getAttachmentReplacement(): string;
      getAttachmentType(): string;
      getAttachmentsProvided(): java.util.ArrayList<string>;
      getB(): number;
      getBandagePower(): number;
      getBaseSpeed(): number;
      getBestMagazine(arg0: zombie.characters.IsoGameCharacter): zombie.inventory.InventoryItem;
      getBlood(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getBloodClothingType(): java.util.ArrayList<zombie.characterTextures.BloodClothingType>;
      getBloodLevel(): number;
      getBodyLocation(): string;
      getBoredomChange(): number;
      getBrakeForce(): number;
      getBreakSound(): string;
      getBringToBearSound(): string;
      getBulletOutSound(): string;
      getBurntString(): string;
      getByteData(): java.nio.ByteBuffer;
      getCanon(): zombie.inventory.types.WeaponPart;
      getCat(): zombie.inventory.ItemType;
      getCategories(): java.util.ArrayList<string>;
      getCategory(): string;
      getChanceToSpawnDamaged(): number;
      getClass(): java.lang.Class<any>;
      getCleanString(arg0: number): string;
      getClickSound(): string;
      getClip(): zombie.inventory.types.WeaponPart;
      getClipSize(): number;
      getClothingItem(): zombie.core.skinnedmodel.population.ClothingItem;
      getClothingItemExtra(): java.util.ArrayList<string>;
      getClothingItemExtraOption(): java.util.ArrayList<string>;
      getClothingItemName(): string;
      getColor(): zombie.core.Color;
      getColorBlue(): number;
      getColorGreen(): number;
      getColorInfo(): zombie.core.textures.ColorInfo;
      getColorRed(): number;
      getCondition(): number;
      getConditionLowerChance(): number;
      getConditionLowerNormal(): number;
      getConditionLowerOffroad(): number;
      getConditionMax(): number;
      getConsolidateOption(): string;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerX(): number;
      getContainerY(): number;
      getContentsWeight(): number;
      getCookedString(): string;
      getCookingTime(): number;
      getCount(): number;
      getCountDownSound(): string;
      getCritDmgMultiplier(): number;
      getCriticalChance(): number;
      getCurrentAmmoCount(): number;
      getCurrentCondition(): number;
      getCurrentUses(): number;
      getCustomMenuOption(): string;
      getDamageCategory(): string;
      getDamageMod(arg0: zombie.characters.IsoGameCharacter): number;
      getDescription(): string;
      getDirt(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getDisplayCategory(): string;
      getDisplayName(): string;
      getDoSwingBeforeImpact(): number;
      getDoorDamage(): number;
      getDoorHitSound(): string;
      getEatType(): string;
      getEjectAmmoSound(): string;
      getEjectAmmoStartSound(): string;
      getEjectAmmoStopSound(): string;
      getEnduranceMod(): number;
      getEngineLoudness(): number;
      getEquipParent(): zombie.characters.IsoGameCharacter;
      getEquipSound(): string;
      getEquippedWeight(): number;
      getEvolvedRecipeName(): string;
      getExplosionPower(): number;
      getExplosionRange(): number;
      getExplosionSound(): string;
      getExplosionTimer(): number;
      getExtraDamage(): number;
      getExtraItems(): java.util.ArrayList<string>;
      getExtraItemsWeight(): number;
      getFabricType(): string;
      getFatigueChange(): number;
      getFatigueMod(arg0: zombie.characters.IsoGameCharacter): number;
      getFillFromDispenserSound(): string;
      getFillFromTapSound(): string;
      getFireMode(): string;
      getFireModePossibilities(): java.util.ArrayList<string>;
      getFirePower(): number;
      getFireRange(): number;
      getFullType(): string;
      getG(): number;
      getGunType(): string;
      getHaveBeenRepaired(): number;
      getHitChance(): number;
      getHitFloorSound(): string;
      getHotbarEquippedWeight(): number;
      getID(): number;
      getIconsForTexture(): java.util.ArrayList<string>;
      getImpactSound(): string;
      getInsertAmmoSound(): string;
      getInsertAmmoStartSound(): string;
      getInsertAmmoStopSound(): string;
      getInvHeat(): number;
      getItemCapacity(): number;
      getItemHeat(): number;
      getItemReplacementPrimaryHand(): zombie.scripting.objects.ItemReplacement;
      getItemReplacementSecondHand(): zombie.scripting.objects.ItemReplacement;
      getItemWhenDry(): string;
      getJamGunChance(): number;
      getJobDelta(): number;
      getJobType(): string;
      getKeyId(): number;
      getKnockbackMod(arg0: zombie.characters.IsoGameCharacter): number;
      getKnockdownMod(): number;
      getLastAged(): number;
      getLightDistance(): number;
      getLightStrength(): number;
      getLuaCreate(): string;
      getMagazineType(): string;
      getMakeUpType(): string;
      getMaxAmmo(): number;
      getMaxAngle(): number;
      getMaxCapacity(): number;
      getMaxDamage(): number;
      getMaxHitCount(): number;
      getMaxRange(): number;
      getMechanicType(): number;
      getMediaData(): zombie.radio.media.MediaData;
      getMediaType(): number;
      getMeltingTime(): number;
      getMetalValue(): number;
      getMinAngle(): number;
      getMinDamage(): number;
      getMinRange(): number;
      getMinRangeRanged(): number;
      getMinimumSwingTime(): number;
      getMinutesToBurn(): number;
      getMinutesToCook(): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getModID(): string;
      getModName(): string;
      getModelWeaponPart(): java.util.ArrayList<zombie.scripting.objects.ModelWeaponPart>;
      getModule(): string;
      getName(): string;
      getNewPlaceDir(): zombie.iso.IsoDirections;
      getNoiseDuration(): number;
      getNoiseFactor(): number;
      getNoiseRange(): number;
      getOffAge(): number;
      getOffAgeMax(): number;
      getOffString(): string;
      getOriginalWeaponSprite(): string;
      getOtherBoost(): number;
      getOtherHandRequire(): string;
      getOutermostContainer(): zombie.inventory.ItemContainer;
      getPhysicsObject(): string;
      getPlaceDir(): zombie.iso.IsoDirections;
      getPlacedSprite(): string;
      getPreviousOwner(): zombie.characters.IsoGameCharacter;
      getProjectileCount(): number;
      getPushBackMod(): number;
      getR(): number;
      getRackSound(): string;
      getRangeMod(arg0: zombie.characters.IsoGameCharacter): number;
      getRecoilDelay(): number;
      getRecoilpad(): zombie.inventory.types.WeaponPart;
      getRecordedMediaIndex(): number;
      getReduceInfectionPower(): number;
      getRegistry_id(): number;
      getReloadTime(): number;
      getRemoteControlID(): number;
      getRemoteRange(): number;
      getReplaceOnUse(): string;
      getReplaceOnUseFullType(): string;
      getReplaceOnUseOn(): string;
      getReplaceOnUseOnString(): string;
      getRequireInHandOrInventory(): java.util.ArrayList<string>;
      getRightClickContainer(): zombie.inventory.ItemContainer;
      getRunAnim(): string;
      getSaveType(): number;
      getScope(): zombie.inventory.types.WeaponPart;
      getScore(arg0: zombie.characters.SurvivorDesc): number;
      getScriptItem(): zombie.scripting.objects.Item;
      getSensorRange(): number;
      getShellFallSound(): string;
      getSling(): zombie.inventory.types.WeaponPart;
      getSmokeRange(): number;
      getSoundGain(): number;
      getSoundRadius(): number;
      getSoundVolume(): number;
      getSpeedMod(arg0: zombie.characters.IsoGameCharacter): number;
      getSpentRoundCount(): number;
      getSplatNumber(): number;
      getSplatSize(): number;
      getStashChance(): number;
      getStaticModel(): string;
      getStock(): zombie.inventory.types.WeaponPart;
      getStopPower(): number;
      getStressChange(): number;
      getStringItemType(): string;
      getSubCategory(): string;
      getSuspensionCompression(): number;
      getSuspensionDamping(): number;
      getSwingAnim(): string;
      getSwingSound(): string;
      getSwingTime(): number;
      getTags(): java.util.ArrayList<string>;
      getTaken(): java.util.ArrayList<zombie.iso.IsoObject>;
      getTex(): zombie.core.textures.Texture;
      getTexture(): zombie.core.textures.Texture;
      getTextureBurnt(): zombie.core.textures.Texture;
      getTextureCooked(): zombie.core.textures.Texture;
      getTexturerotten(): zombie.core.textures.Texture;
      getToHitMod(arg0: zombie.characters.IsoGameCharacter): number;
      getToHitModifier(): number;
      getTooltip(): string;
      getTorchDot(): number;
      getTreeDamage(): number;
      getTriggerExplosionTimer(): number;
      getType(): string;
      getUnCookedString(): string;
      getUnequipSound(): string;
      getUnequippedWeight(): number;
      getUnhappyChange(): number;
      getUses(): number;
      getVisual(): zombie.core.skinnedmodel.visual.ItemVisual;
      getWeaponPart(arg0: string): zombie.inventory.types.WeaponPart;
      getWeaponReloadType(): string;
      getWeaponSprite(): string;
      getWeight(): number;
      getWetCooldown(): number;
      getWheelFriction(): number;
      getWorker(): string;
      getWorldItem(): zombie.iso.objects.IsoWorldInventoryObject;
      getWorldStaticItem(): string;
      getWorldTexture(): string;
      getZombieHitSound(): string;
      hasBlood(): boolean;
      hasDirt(): boolean;
      hasModData(): boolean;
      hasTag(arg0: string): boolean;
      hashCode(): number;
      haveChamber(): boolean;
      haveExtraItems(): boolean;
      initialiseItem(): void;
      isActivated(): boolean;
      isAimed(): boolean;
      isAimedFirearm(): boolean;
      isAimedHandWeapon(): boolean;
      isAlcoholic(): boolean;
      isAlwaysKnockdown(): boolean;
      isAlwaysWelcomeGift(): boolean;
      isAngleFalloff(): boolean;
      isBeingFilled(): boolean;
      isBroken(): boolean;
      isBurnt(): boolean;
      isCanBandage(): boolean;
      isCanBarracade(): boolean;
      isCantAttackWithLowestEndurance(): boolean;
      isConditionAffectsCapacity(): boolean;
      isContainsClip(): boolean;
      isCookable(): boolean;
      isCooked(): boolean;
      isCustomColor(): boolean;
      isCustomName(): boolean;
      isCustomWeight(): boolean;
      isDamageMakeHole(): boolean;
      isDisappearOnUse(): boolean;
      isEmittingLight(): boolean;
      isEquipped(): boolean;
      isEquippedNoSprint(): boolean;
      isFavorite(): boolean;
      isFishingLure(): boolean;
      isHairDye(): boolean;
      isHidden(): boolean;
      isInLocalPlayerInventory(): boolean;
      isInPlayerInventory(): boolean;
      isInfected(): boolean;
      isInitialised(): boolean;
      isInsertAllBulletsReload(): boolean;
      isInstantExplosion(): boolean;
      isIsCookable(): boolean;
      isJammed(): boolean;
      isKnockBackOnNoDeath(): boolean;
      isManuallyRemoveSpentRounds(): boolean;
      isMultipleHitConditionAffected(): boolean;
      isOtherHandUse(): boolean;
      isPiercingBullets(): boolean;
      isProtectFromRainWhileEquipped(): boolean;
      isRackAfterShoot(): boolean;
      isRangeFalloff(): boolean;
      isRanged(): boolean;
      isRecordedMedia(): boolean;
      isReloadable(arg0: zombie.characters.IsoGameCharacter): boolean;
      isRemoteController(): boolean;
      isRequiresEquippedBothHands(): boolean;
      isRoundChambered(): boolean;
      isShareDamage(): boolean;
      isShareEndurance(): boolean;
      isSpentRoundChambered(): boolean;
      isSplatBloodOnNoDeath(): boolean;
      isTaintedWater(): boolean;
      isTorchCone(): boolean;
      isTrap(): boolean;
      isTwoHandWeapon(): boolean;
      isUseEndurance(): boolean;
      isUseSelf(): boolean;
      isUseWorldItem(): boolean;
      isVanilla(): boolean;
      isWaterSource(): boolean;
      isWet(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadItem(arg0: java.nio.ByteBuffer, arg1: number, arg2: boolean): zombie.inventory.InventoryItem;
      notify(): void;
      notifyAll(): void;
      randomizeBullets(): void;
      save(arg0: java.nio.ByteBuffer, arg1: boolean): void;
      saveWithSize(arg0: java.nio.ByteBuffer, arg1: boolean): void;
      setActivated(arg0: boolean): void;
      setActivatedRemote(arg0: boolean): void;
      setActualWeight(arg0: number): void;
      setAge(arg0: number): void;
      setAimingPerkCritModifier(arg0: number): void;
      setAimingPerkHitChanceModifier(arg0: number): void;
      setAimingPerkMinAngleModifier(arg0: number): void;
      setAimingPerkRangeModifier(arg0: number): void;
      setAimingTime(arg0: number): void;
      setAlcoholPower(arg0: number): void;
      setAlcoholic(arg0: boolean): void;
      setAlwaysKnockdown(arg0: boolean): void;
      setAmmoBox(arg0: string): void;
      setAmmoPerShoot(arg0: number): void;
      setAmmoType(arg0: string): void;
      setAngleFalloff(arg0: boolean): void;
      setAttachedSlot(arg0: number): void;
      setAttachedSlotType(arg0: string): void;
      setAttachedToModel(arg0: string): void;
      setAttachmentReplacement(arg0: string): void;
      setAttachmentType(arg0: string): void;
      setAttachmentsProvided(arg0: java.util.ArrayList<string>): void;
      setAutoAge(): void;
      setBandagePower(arg0: number): void;
      setBaseSpeed(arg0: number): void;
      setBeingFilled(arg0: boolean): void;
      setBlood(arg0: zombie.characterTextures.BloodBodyPartType, arg1: number): void;
      setBloodClothingType(arg0: java.util.ArrayList<zombie.characterTextures.BloodClothingType>): void;
      setBloodLevel(arg0: number): void;
      setBoredomChange(arg0: number): void;
      setBrakeForce(arg0: number): void;
      setBreakSound(arg0: string): void;
      setBroken(arg0: boolean): void;
      setBulletOutSound(arg0: string): void;
      setBurnt(arg0: boolean): void;
      setBurntString(arg0: string): void;
      setCanBarracade(arg0: boolean): void;
      setCanBeActivated(arg0: boolean): void;
      setCanBePlaced(arg0: boolean): void;
      setCanBeRemote(arg0: boolean): void;
      setCanBeReused(arg0: boolean): void;
      setCanon(arg0: zombie.inventory.types.WeaponPart): void;
      setCantAttackWithLowestEndurance(arg0: boolean): void;
      setCat(arg0: zombie.inventory.ItemType): void;
      setCategories(arg0: java.util.ArrayList<string>): void;
      setChanceToSpawnDamaged(arg0: number): void;
      setClickSound(arg0: string): void;
      setClip(arg0: zombie.inventory.types.WeaponPart): void;
      setClipSize(arg0: number): void;
      setColor(arg0: zombie.core.Color): void;
      setColorBlue(arg0: number): void;
      setColorGreen(arg0: number): void;
      setColorRed(arg0: number): void;
      setCondition(arg0: number, arg1: boolean): void;
      setConditionFromModData(arg0: zombie.inventory.InventoryItem): void;
      setConditionLowerChance(arg0: number): void;
      setConditionLowerNormal(arg0: number): void;
      setConditionLowerOffroad(arg0: number): void;
      setConditionMax(arg0: number): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setContainerX(arg0: number): void;
      setContainerY(arg0: number): void;
      setContainsClip(arg0: boolean): void;
      setCooked(arg0: boolean): void;
      setCookedString(arg0: string): void;
      setCookingTime(arg0: number): void;
      setCount(arg0: number): void;
      setCountDownSound(arg0: string): void;
      setCritDmgMultiplier(arg0: number): void;
      setCriticalChance(arg0: number): void;
      setCurrentAmmoCount(arg0: number): void;
      setCustomColor(arg0: boolean): void;
      setCustomMenuOption(arg0: string): void;
      setCustomName(arg0: boolean): void;
      setCustomWeight(arg0: boolean): void;
      setDamageCategory(arg0: string): void;
      setDamageMakeHole(arg0: boolean): void;
      setDescription(arg0: string): void;
      setDirt(arg0: zombie.characterTextures.BloodBodyPartType, arg1: number): void;
      setDisplayCategory(arg0: string): void;
      setDoSwingBeforeImpact(arg0: number): void;
      setDoorDamage(arg0: number): void;
      setDoorHitSound(arg0: string): void;
      setEnduranceMod(arg0: number): void;
      setEngineLoudness(arg0: number): void;
      setEquipParent(arg0: zombie.characters.IsoGameCharacter): void;
      setEvolvedRecipeName(arg0: string): void;
      setExplosionPower(arg0: number): void;
      setExplosionRange(arg0: number): void;
      setExplosionSound(arg0: string): void;
      setExplosionTimer(arg0: number): void;
      setExtraDamage(arg0: number): void;
      setFatigueChange(arg0: number): void;
      setFavorite(arg0: boolean): void;
      setFireMode(arg0: string): void;
      setFireModePossibilities(arg0: java.util.ArrayList<string>): void;
      setFirePower(arg0: number): void;
      setFireRange(arg0: number): void;
      setGunType(arg0: string): void;
      setHaveBeenRepaired(arg0: number): void;
      setHaveChamber(arg0: boolean): void;
      setHitChance(arg0: number): void;
      setHitFloorSound(arg0: string): void;
      setID(arg0: number): void;
      setIconsForTexture(arg0: java.util.ArrayList<string>): void;
      setImpactSound(arg0: string): void;
      setInfected(arg0: boolean): void;
      setInitialised(arg0: boolean): void;
      setInsertAllBulletsReload(arg0: boolean): void;
      setIsCookable(arg0: boolean): void;
      setIsWaterSource(arg0: boolean): void;
      setItemCapacity(arg0: number): void;
      setItemHeat(arg0: number): void;
      setItemWhenDry(arg0: string): void;
      setJamGunChance(arg0: number): void;
      setJammed(arg0: boolean): void;
      setJobDelta(arg0: number): void;
      setJobType(arg0: string): void;
      setKeyId(arg0: number): void;
      setKnockBackOnNoDeath(arg0: boolean): void;
      setKnockdownMod(arg0: number): void;
      setLastAged(arg0: number): void;
      setLightDistance(arg0: number): void;
      setLightStrength(arg0: number): void;
      setMagazineType(arg0: string): void;
      setMaxAmmo(arg0: number): void;
      setMaxAngle(arg0: number): void;
      setMaxCapacity(arg0: number): void;
      setMaxDamage(arg0: number): void;
      setMaxHitCount(arg0: number): void;
      setMaxRange(arg0: number): void;
      setMediaType(arg0: number): void;
      setMeltingTime(arg0: number): void;
      setMetalValue(arg0: number): void;
      setMinAngle(arg0: number): void;
      setMinDamage(arg0: number): void;
      setMinRange(arg0: number): void;
      setMinRangeRanged(arg0: number): void;
      setMinimumSwingTime(arg0: number): void;
      setMinutesToBurn(arg0: number): void;
      setMinutesToCook(arg0: number): void;
      setModelWeaponPart(arg0: java.util.ArrayList<zombie.scripting.objects.ModelWeaponPart>): void;
      setModule(arg0: string): void;
      setMultipleHitConditionAffected(arg0: boolean): void;
      setName(arg0: string): void;
      setNewPlaceDir(arg0: zombie.iso.IsoDirections): void;
      setNoiseFactor(arg0: number): void;
      setNoiseRange(arg0: number): void;
      setOffAge(arg0: number): void;
      setOffAgeMax(arg0: number): void;
      setOffString(arg0: string): void;
      setOriginalWeaponSprite(arg0: string): void;
      setOtherBoost(arg0: number): void;
      setOtherHandRequire(arg0: string): void;
      setOtherHandUse(arg0: boolean): void;
      setPhysicsObject(arg0: string): void;
      setPiercingBullets(arg0: boolean): void;
      setPlaceDir(arg0: zombie.iso.IsoDirections): void;
      setPlacedSprite(arg0: string): void;
      setPreviousOwner(arg0: zombie.characters.IsoGameCharacter): void;
      setProjectileCount(arg0: number): void;
      setPushBackMod(arg0: number): void;
      setRackAfterShoot(arg0: boolean): void;
      setRackSound(arg0: string): void;
      setRangeFalloff(arg0: boolean): void;
      setRanged(arg0: boolean): void;
      setRecoilDelay(arg0: number): void;
      setRecoilpad(arg0: zombie.inventory.types.WeaponPart): void;
      setRecordedMediaData(arg0: zombie.radio.media.MediaData): void;
      setRecordedMediaIndex(arg0: number): void;
      setRecordedMediaIndexInteger(arg0: number): void;
      setReduceInfectionPower(arg0: number): void;
      setRegistry_id(arg0: zombie.scripting.objects.Item): void;
      setReloadTime(arg0: number): void;
      setRemoteControlID(arg0: number): void;
      setRemoteController(arg0: boolean): void;
      setRemoteRange(arg0: number): void;
      setReplaceOnUse(arg0: string): void;
      setReplaceOnUseOn(arg0: string): void;
      setRequireInHandOrInventory(arg0: java.util.ArrayList<string>): void;
      setRightClickContainer(arg0: zombie.inventory.ItemContainer): void;
      setRoundChambered(arg0: boolean): void;
      setScope(arg0: zombie.inventory.types.WeaponPart): void;
      setScriptItem(arg0: zombie.scripting.objects.Item): void;
      setSensorRange(arg0: number): void;
      setShareDamage(arg0: boolean): void;
      setShareEndurance(arg0: boolean): void;
      setShellFallSound(arg0: string): void;
      setSling(arg0: zombie.inventory.types.WeaponPart): void;
      setSmokeRange(arg0: number): void;
      setSoundGain(arg0: number): void;
      setSoundRadius(arg0: number): void;
      setSoundVolume(arg0: number): void;
      setSpentRoundChambered(arg0: boolean): void;
      setSpentRoundCount(arg0: number): void;
      setSplatBloodOnNoDeath(arg0: boolean): void;
      setSplatNumber(arg0: number): void;
      setStashChance(arg0: number): void;
      setStashMap(arg0: string): void;
      setStock(arg0: zombie.inventory.types.WeaponPart): void;
      setStressChange(arg0: number): void;
      setSubCategory(arg0: string): void;
      setSuspensionCompression(arg0: number): void;
      setSuspensionDamping(arg0: number): void;
      setSwingSound(arg0: string): void;
      setSwingTime(arg0: number): void;
      setTaintedWater(arg0: boolean): void;
      setTaken(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      setTexture(arg0: zombie.core.textures.Texture): void;
      setTextureBurnt(arg0: zombie.core.textures.Texture): void;
      setTextureCooked(arg0: zombie.core.textures.Texture): void;
      setTexturerotten(arg0: zombie.core.textures.Texture): void;
      setToHitModifier(arg0: number): void;
      setTooltip(arg0: string): void;
      setTorchCone(arg0: boolean): void;
      setTreeDamage(arg0: number): void;
      setTriggerExplosionTimer(arg0: number): void;
      setType(arg0: string): void;
      setUnCookedString(arg0: string): void;
      setUnhappyChange(arg0: number): void;
      setUseEndurance(arg0: boolean): void;
      setUseSelf(arg0: boolean): void;
      setUses(arg0: number): void;
      setWeaponLength(arg0: number): void;
      setWeaponPart(arg0: string, arg1: zombie.inventory.types.WeaponPart): void;
      setWeaponReloadType(arg0: string): void;
      setWeaponSprite(arg0: string): void;
      setWeight(arg0: number): void;
      setWet(arg0: boolean): void;
      setWetCooldown(arg0: number): void;
      setWheelFriction(arg0: number): void;
      setWorker(arg0: string): void;
      setWorldItem(arg0: zombie.iso.objects.IsoWorldInventoryObject): void;
      setWorldScale(arg0: number): void;
      setWorldTexture(arg0: string): void;
      setWorldZRotation(arg0: number): void;
      setZombieHitSound(arg0: string): void;
      shouldUpdateInWorld(): boolean;
      storeInByteData(arg0: zombie.iso.IsoObject): void;
      synchWithVisual(): void;
      toString(): string;
      update(): void;
      updateAge(): void;
      updateSound(arg0: zombie.audio.BaseSoundEmitter): void;
      wait(arg0: number): void;
    }
    // zombie.inventory.types.InventoryContainer extends zombie.inventory.InventoryItem
    export class InventoryContainer {
      private constructor();
      CanStoreWater: boolean;
      CloseKillMove?: string;
      Cooked: boolean;
      IsWaterSource: boolean;
      ReplaceOnUseOn?: string;
      RequiresEquippedBothHands: boolean;
      byteData?: java.nio.ByteBuffer;
      col?: zombie.core.Color;
      extraItems?: java.util.ArrayList<string>;
      fatigueChange: number;
      id: number;
      jobDelta: number;
      jobType?: string;
      keepOnDeplete: boolean;
      mainCategory?: string;
      worldItem?: zombie.iso.objects.IsoWorldInventoryObject;
      worldScale: number;
      worldZRotation: number;
  
      CanStack(arg0: zombie.inventory.InventoryItem): boolean;
      CopyModData(arg0: se.krka.kahlua.vm.KahluaTable): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      HowRotten(): number;
      IsClothing(): boolean;
      IsDrainable(): boolean;
      IsFood(): boolean;
      IsInventoryContainer(): boolean;
      IsLiterature(): boolean;
      IsMap(): boolean;
      IsRotten(): boolean;
      IsWeapon(): boolean;
      ModDataMatches(arg0: zombie.inventory.InventoryItem): boolean;
      SetContainerPosition(arg0: number, arg1: number): void;
      Use(arg0: boolean, arg1: boolean): void;
      UseItem(): void;
      addExtraItem(arg0: string): void;
      allowRandomTint(): boolean;
      canBeActivated(): boolean;
      canBeEquipped(): string;
      canBeRemote(): boolean;
      canEmitLight(): boolean;
      canStoreWater(): boolean;
      copyConditionModData(arg0: zombie.inventory.InventoryItem): void;
      copyModData(arg0: se.krka.kahlua.vm.KahluaTable): void;
      doBuildingStash(): void;
      equals(arg0: any): boolean;
      finishupdate(): boolean;
      getA(): number;
      getActualWeight(): number;
      getAge(): number;
      getAlcoholPower(): number;
      getAlternateModelName(): string;
      getAmmoType(): string;
      getAttachedSlot(): number;
      getAttachedSlotType(): string;
      getAttachedToModel(): string;
      getAttachmentReplacement(): string;
      getAttachmentType(): string;
      getAttachmentsProvided(): java.util.ArrayList<string>;
      getB(): number;
      getBandagePower(): number;
      getBlood(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getBloodClothingType(): java.util.ArrayList<zombie.characterTextures.BloodClothingType>;
      getBloodLevel(): number;
      getBodyLocation(): string;
      getBoredomChange(): number;
      getBrakeForce(): number;
      getBreakSound(): string;
      getBringToBearSound(): string;
      getBurntString(): string;
      getByteData(): java.nio.ByteBuffer;
      getCapacity(): number;
      getCat(): zombie.inventory.ItemType;
      getCategory(): string;
      getChanceToSpawnDamaged(): number;
      getClass(): java.lang.Class<any>;
      getCleanString(arg0: number): string;
      getClothingExtraSubmenu(): string;
      getClothingItem(): zombie.core.skinnedmodel.population.ClothingItem;
      getClothingItemExtra(): java.util.ArrayList<string>;
      getClothingItemExtraOption(): java.util.ArrayList<string>;
      getClothingItemName(): string;
      getColor(): zombie.core.Color;
      getColorBlue(): number;
      getColorGreen(): number;
      getColorInfo(): zombie.core.textures.ColorInfo;
      getColorRed(): number;
      getCondition(): number;
      getConditionLowerNormal(): number;
      getConditionLowerOffroad(): number;
      getConditionMax(): number;
      getConsolidateOption(): string;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerX(): number;
      getContainerY(): number;
      getContentsWeight(): number;
      getCookedString(): string;
      getCookingTime(): number;
      getCount(): number;
      getCountDownSound(): string;
      getCurrentAmmoCount(): number;
      getCurrentCondition(): number;
      getCurrentUses(): number;
      getCustomMenuOption(): string;
      getDescription(): string;
      getDirt(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getDisplayCategory(): string;
      getDisplayName(): string;
      getEatType(): string;
      getEffectiveCapacity(arg0: zombie.characters.IsoGameCharacter): number;
      getEngineLoudness(): number;
      getEquipParent(): zombie.characters.IsoGameCharacter;
      getEquipSound(): string;
      getEquippedWeight(): number;
      getEvolvedRecipeName(): string;
      getExplosionSound(): string;
      getExtraItems(): java.util.ArrayList<string>;
      getExtraItemsWeight(): number;
      getFabricType(): string;
      getFatigueChange(): number;
      getFillFromDispenserSound(): string;
      getFillFromTapSound(): string;
      getFullType(): string;
      getG(): number;
      getGunType(): string;
      getHaveBeenRepaired(): number;
      getHotbarEquippedWeight(): number;
      getID(): number;
      getIconsForTexture(): java.util.ArrayList<string>;
      getInvHeat(): number;
      getInventory(): zombie.inventory.ItemContainer;
      getInventoryWeight(): number;
      getItemCapacity(): number;
      getItemContainer(): zombie.inventory.ItemContainer;
      getItemHeat(): number;
      getItemReplacementPrimaryHand(): zombie.scripting.objects.ItemReplacement;
      getItemReplacementSecondHand(): zombie.scripting.objects.ItemReplacement;
      getItemWhenDry(): string;
      getJobDelta(): number;
      getJobType(): string;
      getKeyId(): number;
      getLastAged(): number;
      getLightDistance(): number;
      getLightStrength(): number;
      getLuaCreate(): string;
      getMakeUpType(): string;
      getMaxAmmo(): number;
      getMaxCapacity(): number;
      getMechanicType(): number;
      getMediaData(): zombie.radio.media.MediaData;
      getMediaType(): number;
      getMeltingTime(): number;
      getMetalValue(): number;
      getMinutesToBurn(): number;
      getMinutesToCook(): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getModID(): string;
      getModName(): string;
      getModule(): string;
      getName(): string;
      getNewPlaceDir(): zombie.iso.IsoDirections;
      getOffAge(): number;
      getOffAgeMax(): number;
      getOffString(): string;
      getOutermostContainer(): zombie.inventory.ItemContainer;
      getPlaceDir(): zombie.iso.IsoDirections;
      getPreviousOwner(): zombie.characters.IsoGameCharacter;
      getR(): number;
      getRecordedMediaIndex(): number;
      getReduceInfectionPower(): number;
      getRegistry_id(): number;
      getRemoteControlID(): number;
      getRemoteRange(): number;
      getReplaceOnUse(): string;
      getReplaceOnUseFullType(): string;
      getReplaceOnUseOn(): string;
      getReplaceOnUseOnString(): string;
      getRequireInHandOrInventory(): java.util.ArrayList<string>;
      getRightClickContainer(): zombie.inventory.ItemContainer;
      getSaveType(): number;
      getScore(arg0: zombie.characters.SurvivorDesc): number;
      getScriptItem(): zombie.scripting.objects.Item;
      getStashChance(): number;
      getStaticModel(): string;
      getStressChange(): number;
      getStringItemType(): string;
      getSuspensionCompression(): number;
      getSuspensionDamping(): number;
      getSwingAnim(): string;
      getTags(): java.util.ArrayList<string>;
      getTaken(): java.util.ArrayList<zombie.iso.IsoObject>;
      getTex(): zombie.core.textures.Texture;
      getTexture(): zombie.core.textures.Texture;
      getTextureBurnt(): zombie.core.textures.Texture;
      getTextureCooked(): zombie.core.textures.Texture;
      getTexturerotten(): zombie.core.textures.Texture;
      getTooltip(): string;
      getTorchDot(): number;
      getType(): string;
      getUnCookedString(): string;
      getUnequipSound(): string;
      getUnequippedWeight(): number;
      getUnhappyChange(): number;
      getUses(): number;
      getVisual(): zombie.core.skinnedmodel.visual.ItemVisual;
      getWeight(): number;
      getWeightReduction(): number;
      getWetCooldown(): number;
      getWheelFriction(): number;
      getWorker(): string;
      getWorldItem(): zombie.iso.objects.IsoWorldInventoryObject;
      getWorldStaticItem(): string;
      getWorldTexture(): string;
      hasBlood(): boolean;
      hasDirt(): boolean;
      hasModData(): boolean;
      hasTag(arg0: string): boolean;
      hashCode(): number;
      haveExtraItems(): boolean;
      initialiseItem(): void;
      isActivated(): boolean;
      isAlcoholic(): boolean;
      isAlwaysWelcomeGift(): boolean;
      isBeingFilled(): boolean;
      isBroken(): boolean;
      isBurnt(): boolean;
      isCanBandage(): boolean;
      isConditionAffectsCapacity(): boolean;
      isCookable(): boolean;
      isCooked(): boolean;
      isCustomColor(): boolean;
      isCustomName(): boolean;
      isCustomWeight(): boolean;
      isDisappearOnUse(): boolean;
      isEmittingLight(): boolean;
      isEquipped(): boolean;
      isEquippedNoSprint(): boolean;
      isFavorite(): boolean;
      isFishingLure(): boolean;
      isHairDye(): boolean;
      isHidden(): boolean;
      isInLocalPlayerInventory(): boolean;
      isInPlayerInventory(): boolean;
      isInfected(): boolean;
      isInitialised(): boolean;
      isIsCookable(): boolean;
      isProtectFromRainWhileEquipped(): boolean;
      isRecordedMedia(): boolean;
      isRemoteController(): boolean;
      isRequiresEquippedBothHands(): boolean;
      isTaintedWater(): boolean;
      isTorchCone(): boolean;
      isTrap(): boolean;
      isTwoHandWeapon(): boolean;
      isUseWorldItem(): boolean;
      isVanilla(): boolean;
      isWaterSource(): boolean;
      isWet(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadItem(arg0: java.nio.ByteBuffer, arg1: number, arg2: boolean): zombie.inventory.InventoryItem;
      notify(): void;
      notifyAll(): void;
      save(arg0: java.nio.ByteBuffer, arg1: boolean): void;
      saveWithSize(arg0: java.nio.ByteBuffer, arg1: boolean): void;
      setActivated(arg0: boolean): void;
      setActivatedRemote(arg0: boolean): void;
      setActualWeight(arg0: number): void;
      setAge(arg0: number): void;
      setAlcoholPower(arg0: number): void;
      setAlcoholic(arg0: boolean): void;
      setAmmoType(arg0: string): void;
      setAttachedSlot(arg0: number): void;
      setAttachedSlotType(arg0: string): void;
      setAttachedToModel(arg0: string): void;
      setAttachmentReplacement(arg0: string): void;
      setAttachmentType(arg0: string): void;
      setAttachmentsProvided(arg0: java.util.ArrayList<string>): void;
      setAutoAge(): void;
      setBandagePower(arg0: number): void;
      setBeingFilled(arg0: boolean): void;
      setBlood(arg0: zombie.characterTextures.BloodBodyPartType, arg1: number): void;
      setBloodClothingType(arg0: java.util.ArrayList<zombie.characterTextures.BloodClothingType>): void;
      setBloodLevel(arg0: number): void;
      setBoredomChange(arg0: number): void;
      setBrakeForce(arg0: number): void;
      setBreakSound(arg0: string): void;
      setBroken(arg0: boolean): void;
      setBurnt(arg0: boolean): void;
      setBurntString(arg0: string): void;
      setCanBeActivated(arg0: boolean): void;
      setCanBeEquipped(arg0: string): void;
      setCanBeRemote(arg0: boolean): void;
      setCapacity(arg0: number): void;
      setCat(arg0: zombie.inventory.ItemType): void;
      setChanceToSpawnDamaged(arg0: number): void;
      setColor(arg0: zombie.core.Color): void;
      setColorBlue(arg0: number): void;
      setColorGreen(arg0: number): void;
      setColorRed(arg0: number): void;
      setCondition(arg0: number, arg1: boolean): void;
      setConditionFromModData(arg0: zombie.inventory.InventoryItem): void;
      setConditionLowerNormal(arg0: number): void;
      setConditionLowerOffroad(arg0: number): void;
      setConditionMax(arg0: number): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setContainerX(arg0: number): void;
      setContainerY(arg0: number): void;
      setCooked(arg0: boolean): void;
      setCookedString(arg0: string): void;
      setCookingTime(arg0: number): void;
      setCount(arg0: number): void;
      setCountDownSound(arg0: string): void;
      setCurrentAmmoCount(arg0: number): void;
      setCustomColor(arg0: boolean): void;
      setCustomMenuOption(arg0: string): void;
      setCustomName(arg0: boolean): void;
      setCustomWeight(arg0: boolean): void;
      setDescription(arg0: string): void;
      setDirt(arg0: zombie.characterTextures.BloodBodyPartType, arg1: number): void;
      setDisplayCategory(arg0: string): void;
      setEngineLoudness(arg0: number): void;
      setEquipParent(arg0: zombie.characters.IsoGameCharacter): void;
      setEvolvedRecipeName(arg0: string): void;
      setExplosionSound(arg0: string): void;
      setFatigueChange(arg0: number): void;
      setFavorite(arg0: boolean): void;
      setGunType(arg0: string): void;
      setHaveBeenRepaired(arg0: number): void;
      setID(arg0: number): void;
      setIconsForTexture(arg0: java.util.ArrayList<string>): void;
      setInfected(arg0: boolean): void;
      setInitialised(arg0: boolean): void;
      setIsCookable(arg0: boolean): void;
      setIsWaterSource(arg0: boolean): void;
      setItemCapacity(arg0: number): void;
      setItemContainer(arg0: zombie.inventory.ItemContainer): void;
      setItemHeat(arg0: number): void;
      setItemWhenDry(arg0: string): void;
      setJobDelta(arg0: number): void;
      setJobType(arg0: string): void;
      setKeyId(arg0: number): void;
      setLastAged(arg0: number): void;
      setLightDistance(arg0: number): void;
      setLightStrength(arg0: number): void;
      setMaxAmmo(arg0: number): void;
      setMaxCapacity(arg0: number): void;
      setMediaType(arg0: number): void;
      setMeltingTime(arg0: number): void;
      setMetalValue(arg0: number): void;
      setMinutesToBurn(arg0: number): void;
      setMinutesToCook(arg0: number): void;
      setModule(arg0: string): void;
      setName(arg0: string): void;
      setNewPlaceDir(arg0: zombie.iso.IsoDirections): void;
      setOffAge(arg0: number): void;
      setOffAgeMax(arg0: number): void;
      setOffString(arg0: string): void;
      setPlaceDir(arg0: zombie.iso.IsoDirections): void;
      setPreviousOwner(arg0: zombie.characters.IsoGameCharacter): void;
      setRecordedMediaData(arg0: zombie.radio.media.MediaData): void;
      setRecordedMediaIndex(arg0: number): void;
      setRecordedMediaIndexInteger(arg0: number): void;
      setReduceInfectionPower(arg0: number): void;
      setRegistry_id(arg0: zombie.scripting.objects.Item): void;
      setRemoteControlID(arg0: number): void;
      setRemoteController(arg0: boolean): void;
      setRemoteRange(arg0: number): void;
      setReplaceOnUse(arg0: string): void;
      setReplaceOnUseOn(arg0: string): void;
      setRequireInHandOrInventory(arg0: java.util.ArrayList<string>): void;
      setRightClickContainer(arg0: zombie.inventory.ItemContainer): void;
      setScriptItem(arg0: zombie.scripting.objects.Item): void;
      setStashChance(arg0: number): void;
      setStashMap(arg0: string): void;
      setStressChange(arg0: number): void;
      setSuspensionCompression(arg0: number): void;
      setSuspensionDamping(arg0: number): void;
      setTaintedWater(arg0: boolean): void;
      setTaken(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      setTexture(arg0: zombie.core.textures.Texture): void;
      setTextureBurnt(arg0: zombie.core.textures.Texture): void;
      setTextureCooked(arg0: zombie.core.textures.Texture): void;
      setTexturerotten(arg0: zombie.core.textures.Texture): void;
      setTooltip(arg0: string): void;
      setTorchCone(arg0: boolean): void;
      setType(arg0: string): void;
      setUnCookedString(arg0: string): void;
      setUnhappyChange(arg0: number): void;
      setUses(arg0: number): void;
      setWeight(arg0: number): void;
      setWeightReduction(arg0: number): void;
      setWet(arg0: boolean): void;
      setWetCooldown(arg0: number): void;
      setWheelFriction(arg0: number): void;
      setWorker(arg0: string): void;
      setWorldItem(arg0: zombie.iso.objects.IsoWorldInventoryObject): void;
      setWorldScale(arg0: number): void;
      setWorldTexture(arg0: string): void;
      setWorldZRotation(arg0: number): void;
      shouldUpdateInWorld(): boolean;
      storeInByteData(arg0: zombie.iso.IsoObject): void;
      synchWithVisual(): void;
      toString(): string;
      update(): void;
      updateAge(): void;
      updateSound(arg0: zombie.audio.BaseSoundEmitter): void;
      wait(arg0: number): void;
    }
    // zombie.inventory.types.Key extends zombie.inventory.InventoryItem
    export class Key {
      private constructor();
      CanStoreWater: boolean;
      CloseKillMove?: string;
      Cooked: boolean;
      IsWaterSource: boolean;
      ReplaceOnUseOn?: string;
      RequiresEquippedBothHands: boolean;
      byteData?: java.nio.ByteBuffer;
      col?: zombie.core.Color;
      extraItems?: java.util.ArrayList<string>;
      fatigueChange: number;
      static readonly highlightDoor?: zombie.inventory.types.Key[];
      id: number;
      jobDelta: number;
      jobType?: string;
      keepOnDeplete: boolean;
      mainCategory?: string;
      worldItem?: zombie.iso.objects.IsoWorldInventoryObject;
      worldScale: number;
      worldZRotation: number;
  
      CanStack(arg0: zombie.inventory.InventoryItem): boolean;
      CopyModData(arg0: se.krka.kahlua.vm.KahluaTable): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      HowRotten(): number;
      IsClothing(): boolean;
      IsDrainable(): boolean;
      IsFood(): boolean;
      IsInventoryContainer(): boolean;
      IsLiterature(): boolean;
      IsMap(): boolean;
      IsRotten(): boolean;
      IsWeapon(): boolean;
      ModDataMatches(arg0: zombie.inventory.InventoryItem): boolean;
      SetContainerPosition(arg0: number, arg1: number): void;
      Use(arg0: boolean, arg1: boolean): void;
      UseItem(): void;
      addExtraItem(arg0: string): void;
      allowRandomTint(): boolean;
      canBeActivated(): boolean;
      canBeRemote(): boolean;
      canEmitLight(): boolean;
      canStoreWater(): boolean;
      copyConditionModData(arg0: zombie.inventory.InventoryItem): void;
      copyModData(arg0: se.krka.kahlua.vm.KahluaTable): void;
      doBuildingStash(): void;
      equals(arg0: any): boolean;
      finishupdate(): boolean;
      getA(): number;
      getActualWeight(): number;
      getAge(): number;
      getAlcoholPower(): number;
      getAlternateModelName(): string;
      getAmmoType(): string;
      getAttachedSlot(): number;
      getAttachedSlotType(): string;
      getAttachedToModel(): string;
      getAttachmentReplacement(): string;
      getAttachmentType(): string;
      getAttachmentsProvided(): java.util.ArrayList<string>;
      getB(): number;
      getBandagePower(): number;
      getBlood(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getBloodClothingType(): java.util.ArrayList<zombie.characterTextures.BloodClothingType>;
      getBodyLocation(): string;
      getBoredomChange(): number;
      getBrakeForce(): number;
      getBreakSound(): string;
      getBringToBearSound(): string;
      getBurntString(): string;
      getByteData(): java.nio.ByteBuffer;
      getCat(): zombie.inventory.ItemType;
      getCategory(): string;
      getChanceToSpawnDamaged(): number;
      getClass(): java.lang.Class<any>;
      getCleanString(arg0: number): string;
      getClothingItem(): zombie.core.skinnedmodel.population.ClothingItem;
      getClothingItemExtra(): java.util.ArrayList<string>;
      getClothingItemExtraOption(): java.util.ArrayList<string>;
      getClothingItemName(): string;
      getColor(): zombie.core.Color;
      getColorBlue(): number;
      getColorGreen(): number;
      getColorInfo(): zombie.core.textures.ColorInfo;
      getColorRed(): number;
      getCondition(): number;
      getConditionLowerNormal(): number;
      getConditionLowerOffroad(): number;
      getConditionMax(): number;
      getConsolidateOption(): string;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerX(): number;
      getContainerY(): number;
      getContentsWeight(): number;
      getCookedString(): string;
      getCookingTime(): number;
      getCount(): number;
      getCountDownSound(): string;
      getCurrentAmmoCount(): number;
      getCurrentCondition(): number;
      getCurrentUses(): number;
      getCustomMenuOption(): string;
      getDescription(): string;
      getDirt(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getDisplayCategory(): string;
      getDisplayName(): string;
      getEatType(): string;
      getEngineLoudness(): number;
      getEquipParent(): zombie.characters.IsoGameCharacter;
      getEquipSound(): string;
      getEquippedWeight(): number;
      getEvolvedRecipeName(): string;
      getExplosionSound(): string;
      getExtraItems(): java.util.ArrayList<string>;
      getExtraItemsWeight(): number;
      getFabricType(): string;
      getFatigueChange(): number;
      getFillFromDispenserSound(): string;
      getFillFromTapSound(): string;
      getFullType(): string;
      getG(): number;
      getGunType(): string;
      getHaveBeenRepaired(): number;
      getHotbarEquippedWeight(): number;
      getID(): number;
      getIconsForTexture(): java.util.ArrayList<string>;
      getInvHeat(): number;
      getItemCapacity(): number;
      getItemHeat(): number;
      getItemReplacementPrimaryHand(): zombie.scripting.objects.ItemReplacement;
      getItemReplacementSecondHand(): zombie.scripting.objects.ItemReplacement;
      getItemWhenDry(): string;
      getJobDelta(): number;
      getJobType(): string;
      getKeyId(): number;
      getLastAged(): number;
      getLightDistance(): number;
      getLightStrength(): number;
      getLuaCreate(): string;
      getMakeUpType(): string;
      getMaxAmmo(): number;
      getMaxCapacity(): number;
      getMechanicType(): number;
      getMediaData(): zombie.radio.media.MediaData;
      getMediaType(): number;
      getMeltingTime(): number;
      getMetalValue(): number;
      getMinutesToBurn(): number;
      getMinutesToCook(): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getModID(): string;
      getModName(): string;
      getModule(): string;
      getName(): string;
      getNewPlaceDir(): zombie.iso.IsoDirections;
      getNumberOfKey(): number;
      getOffAge(): number;
      getOffAgeMax(): number;
      getOffString(): string;
      getOutermostContainer(): zombie.inventory.ItemContainer;
      getPlaceDir(): zombie.iso.IsoDirections;
      getPreviousOwner(): zombie.characters.IsoGameCharacter;
      getR(): number;
      getRecordedMediaIndex(): number;
      getReduceInfectionPower(): number;
      getRegistry_id(): number;
      getRemoteControlID(): number;
      getRemoteRange(): number;
      getReplaceOnUse(): string;
      getReplaceOnUseFullType(): string;
      getReplaceOnUseOn(): string;
      getReplaceOnUseOnString(): string;
      getRequireInHandOrInventory(): java.util.ArrayList<string>;
      getRightClickContainer(): zombie.inventory.ItemContainer;
      getSaveType(): number;
      getScore(arg0: zombie.characters.SurvivorDesc): number;
      getScriptItem(): zombie.scripting.objects.Item;
      getStashChance(): number;
      getStaticModel(): string;
      getStressChange(): number;
      getStringItemType(): string;
      getSuspensionCompression(): number;
      getSuspensionDamping(): number;
      getSwingAnim(): string;
      getTags(): java.util.ArrayList<string>;
      getTaken(): java.util.ArrayList<zombie.iso.IsoObject>;
      getTex(): zombie.core.textures.Texture;
      getTexture(): zombie.core.textures.Texture;
      getTextureBurnt(): zombie.core.textures.Texture;
      getTextureCooked(): zombie.core.textures.Texture;
      getTexturerotten(): zombie.core.textures.Texture;
      getTooltip(): string;
      getTorchDot(): number;
      getType(): string;
      getUnCookedString(): string;
      getUnequipSound(): string;
      getUnequippedWeight(): number;
      getUnhappyChange(): number;
      getUses(): number;
      getVisual(): zombie.core.skinnedmodel.visual.ItemVisual;
      getWeight(): number;
      getWetCooldown(): number;
      getWheelFriction(): number;
      getWorker(): string;
      getWorldItem(): zombie.iso.objects.IsoWorldInventoryObject;
      getWorldStaticItem(): string;
      getWorldTexture(): string;
      hasBlood(): boolean;
      hasDirt(): boolean;
      hasModData(): boolean;
      hasTag(arg0: string): boolean;
      hashCode(): number;
      haveExtraItems(): boolean;
      initialiseItem(): void;
      isActivated(): boolean;
      isAlcoholic(): boolean;
      isAlwaysWelcomeGift(): boolean;
      isBeingFilled(): boolean;
      isBroken(): boolean;
      isBurnt(): boolean;
      isCanBandage(): boolean;
      isConditionAffectsCapacity(): boolean;
      isCookable(): boolean;
      isCooked(): boolean;
      isCustomColor(): boolean;
      isCustomName(): boolean;
      isCustomWeight(): boolean;
      isDigitalPadlock(): boolean;
      isDisappearOnUse(): boolean;
      isEmittingLight(): boolean;
      isEquipped(): boolean;
      isEquippedNoSprint(): boolean;
      isFavorite(): boolean;
      isFishingLure(): boolean;
      isHairDye(): boolean;
      isHidden(): boolean;
      isInLocalPlayerInventory(): boolean;
      isInPlayerInventory(): boolean;
      isInfected(): boolean;
      isInitialised(): boolean;
      isIsCookable(): boolean;
      isPadlock(): boolean;
      isProtectFromRainWhileEquipped(): boolean;
      isRecordedMedia(): boolean;
      isRemoteController(): boolean;
      isRequiresEquippedBothHands(): boolean;
      isTaintedWater(): boolean;
      isTorchCone(): boolean;
      isTrap(): boolean;
      isTwoHandWeapon(): boolean;
      isUseWorldItem(): boolean;
      isVanilla(): boolean;
      isWaterSource(): boolean;
      isWet(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadItem(arg0: java.nio.ByteBuffer, arg1: number, arg2: boolean): zombie.inventory.InventoryItem;
      notify(): void;
      notifyAll(): void;
      save(arg0: java.nio.ByteBuffer, arg1: boolean): void;
      saveWithSize(arg0: java.nio.ByteBuffer, arg1: boolean): void;
      setActivated(arg0: boolean): void;
      setActivatedRemote(arg0: boolean): void;
      setActualWeight(arg0: number): void;
      setAge(arg0: number): void;
      setAlcoholPower(arg0: number): void;
      setAlcoholic(arg0: boolean): void;
      setAmmoType(arg0: string): void;
      setAttachedSlot(arg0: number): void;
      setAttachedSlotType(arg0: string): void;
      setAttachedToModel(arg0: string): void;
      setAttachmentReplacement(arg0: string): void;
      setAttachmentType(arg0: string): void;
      setAttachmentsProvided(arg0: java.util.ArrayList<string>): void;
      setAutoAge(): void;
      setBandagePower(arg0: number): void;
      setBeingFilled(arg0: boolean): void;
      setBlood(arg0: zombie.characterTextures.BloodBodyPartType, arg1: number): void;
      setBloodClothingType(arg0: java.util.ArrayList<zombie.characterTextures.BloodClothingType>): void;
      setBoredomChange(arg0: number): void;
      setBrakeForce(arg0: number): void;
      setBreakSound(arg0: string): void;
      setBroken(arg0: boolean): void;
      setBurnt(arg0: boolean): void;
      setBurntString(arg0: string): void;
      setCanBeActivated(arg0: boolean): void;
      setCanBeRemote(arg0: boolean): void;
      setCat(arg0: zombie.inventory.ItemType): void;
      setChanceToSpawnDamaged(arg0: number): void;
      setColor(arg0: zombie.core.Color): void;
      setColorBlue(arg0: number): void;
      setColorGreen(arg0: number): void;
      setColorRed(arg0: number): void;
      setCondition(arg0: number, arg1: boolean): void;
      setConditionFromModData(arg0: zombie.inventory.InventoryItem): void;
      setConditionLowerNormal(arg0: number): void;
      setConditionLowerOffroad(arg0: number): void;
      setConditionMax(arg0: number): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setContainerX(arg0: number): void;
      setContainerY(arg0: number): void;
      setCooked(arg0: boolean): void;
      setCookedString(arg0: string): void;
      setCookingTime(arg0: number): void;
      setCount(arg0: number): void;
      setCountDownSound(arg0: string): void;
      setCurrentAmmoCount(arg0: number): void;
      setCustomColor(arg0: boolean): void;
      setCustomMenuOption(arg0: string): void;
      setCustomName(arg0: boolean): void;
      setCustomWeight(arg0: boolean): void;
      setDescription(arg0: string): void;
      setDigitalPadlock(arg0: boolean): void;
      setDirt(arg0: zombie.characterTextures.BloodBodyPartType, arg1: number): void;
      setDisplayCategory(arg0: string): void;
      setEngineLoudness(arg0: number): void;
      setEquipParent(arg0: zombie.characters.IsoGameCharacter): void;
      setEvolvedRecipeName(arg0: string): void;
      setExplosionSound(arg0: string): void;
      setFatigueChange(arg0: number): void;
      setFavorite(arg0: boolean): void;
      setGunType(arg0: string): void;
      setHaveBeenRepaired(arg0: number): void;
      setHighlightDoors(arg0: number, arg1: zombie.inventory.InventoryItem): void;
      setID(arg0: number): void;
      setIconsForTexture(arg0: java.util.ArrayList<string>): void;
      setInfected(arg0: boolean): void;
      setInitialised(arg0: boolean): void;
      setIsCookable(arg0: boolean): void;
      setIsWaterSource(arg0: boolean): void;
      setItemCapacity(arg0: number): void;
      setItemHeat(arg0: number): void;
      setItemWhenDry(arg0: string): void;
      setJobDelta(arg0: number): void;
      setJobType(arg0: string): void;
      setKeyId(arg0: number): void;
      setLastAged(arg0: number): void;
      setLightDistance(arg0: number): void;
      setLightStrength(arg0: number): void;
      setMaxAmmo(arg0: number): void;
      setMaxCapacity(arg0: number): void;
      setMediaType(arg0: number): void;
      setMeltingTime(arg0: number): void;
      setMetalValue(arg0: number): void;
      setMinutesToBurn(arg0: number): void;
      setMinutesToCook(arg0: number): void;
      setModule(arg0: string): void;
      setName(arg0: string): void;
      setNewPlaceDir(arg0: zombie.iso.IsoDirections): void;
      setNumberOfKey(arg0: number): void;
      setOffAge(arg0: number): void;
      setOffAgeMax(arg0: number): void;
      setOffString(arg0: string): void;
      setPadlock(arg0: boolean): void;
      setPlaceDir(arg0: zombie.iso.IsoDirections): void;
      setPreviousOwner(arg0: zombie.characters.IsoGameCharacter): void;
      setRecordedMediaData(arg0: zombie.radio.media.MediaData): void;
      setRecordedMediaIndex(arg0: number): void;
      setRecordedMediaIndexInteger(arg0: number): void;
      setReduceInfectionPower(arg0: number): void;
      setRegistry_id(arg0: zombie.scripting.objects.Item): void;
      setRemoteControlID(arg0: number): void;
      setRemoteController(arg0: boolean): void;
      setRemoteRange(arg0: number): void;
      setReplaceOnUse(arg0: string): void;
      setReplaceOnUseOn(arg0: string): void;
      setRequireInHandOrInventory(arg0: java.util.ArrayList<string>): void;
      setRightClickContainer(arg0: zombie.inventory.ItemContainer): void;
      setScriptItem(arg0: zombie.scripting.objects.Item): void;
      setStashChance(arg0: number): void;
      setStashMap(arg0: string): void;
      setStressChange(arg0: number): void;
      setSuspensionCompression(arg0: number): void;
      setSuspensionDamping(arg0: number): void;
      setTaintedWater(arg0: boolean): void;
      setTaken(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      setTexture(arg0: zombie.core.textures.Texture): void;
      setTextureBurnt(arg0: zombie.core.textures.Texture): void;
      setTextureCooked(arg0: zombie.core.textures.Texture): void;
      setTexturerotten(arg0: zombie.core.textures.Texture): void;
      setTooltip(arg0: string): void;
      setTorchCone(arg0: boolean): void;
      setType(arg0: string): void;
      setUnCookedString(arg0: string): void;
      setUnhappyChange(arg0: number): void;
      setUses(arg0: number): void;
      setWeight(arg0: number): void;
      setWet(arg0: boolean): void;
      setWetCooldown(arg0: number): void;
      setWheelFriction(arg0: number): void;
      setWorker(arg0: string): void;
      setWorldItem(arg0: zombie.iso.objects.IsoWorldInventoryObject): void;
      setWorldScale(arg0: number): void;
      setWorldTexture(arg0: string): void;
      setWorldZRotation(arg0: number): void;
      shouldUpdateInWorld(): boolean;
      storeInByteData(arg0: zombie.iso.IsoObject): void;
      synchWithVisual(): void;
      takeKeyId(): void;
      toString(): string;
      update(): void;
      updateAge(): void;
      updateSound(arg0: zombie.audio.BaseSoundEmitter): void;
      wait(arg0: number): void;
    }
    // zombie.inventory.types.KeyRing extends zombie.inventory.InventoryItem
    export class KeyRing {
      private constructor();
      CanStoreWater: boolean;
      CloseKillMove?: string;
      Cooked: boolean;
      IsWaterSource: boolean;
      ReplaceOnUseOn?: string;
      RequiresEquippedBothHands: boolean;
      byteData?: java.nio.ByteBuffer;
      col?: zombie.core.Color;
      extraItems?: java.util.ArrayList<string>;
      fatigueChange: number;
      id: number;
      jobDelta: number;
      jobType?: string;
      keepOnDeplete: boolean;
      mainCategory?: string;
      worldItem?: zombie.iso.objects.IsoWorldInventoryObject;
      worldScale: number;
      worldZRotation: number;
  
      CanStack(arg0: zombie.inventory.InventoryItem): boolean;
      CopyModData(arg0: se.krka.kahlua.vm.KahluaTable): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      HowRotten(): number;
      IsClothing(): boolean;
      IsDrainable(): boolean;
      IsFood(): boolean;
      IsInventoryContainer(): boolean;
      IsLiterature(): boolean;
      IsMap(): boolean;
      IsRotten(): boolean;
      IsWeapon(): boolean;
      ModDataMatches(arg0: zombie.inventory.InventoryItem): boolean;
      SetContainerPosition(arg0: number, arg1: number): void;
      Use(arg0: boolean, arg1: boolean): void;
      UseItem(): void;
      addExtraItem(arg0: string): void;
      addKey(arg0: zombie.inventory.types.Key): void;
      allowRandomTint(): boolean;
      canBeActivated(): boolean;
      canBeRemote(): boolean;
      canEmitLight(): boolean;
      canStoreWater(): boolean;
      containsKeyId(arg0: number): boolean;
      copyConditionModData(arg0: zombie.inventory.InventoryItem): void;
      copyModData(arg0: se.krka.kahlua.vm.KahluaTable): void;
      doBuildingStash(): void;
      equals(arg0: any): boolean;
      finishupdate(): boolean;
      getA(): number;
      getActualWeight(): number;
      getAge(): number;
      getAlcoholPower(): number;
      getAlternateModelName(): string;
      getAmmoType(): string;
      getAttachedSlot(): number;
      getAttachedSlotType(): string;
      getAttachedToModel(): string;
      getAttachmentReplacement(): string;
      getAttachmentType(): string;
      getAttachmentsProvided(): java.util.ArrayList<string>;
      getB(): number;
      getBandagePower(): number;
      getBlood(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getBloodClothingType(): java.util.ArrayList<zombie.characterTextures.BloodClothingType>;
      getBodyLocation(): string;
      getBoredomChange(): number;
      getBrakeForce(): number;
      getBreakSound(): string;
      getBringToBearSound(): string;
      getBurntString(): string;
      getByteData(): java.nio.ByteBuffer;
      getCat(): zombie.inventory.ItemType;
      getCategory(): string;
      getChanceToSpawnDamaged(): number;
      getClass(): java.lang.Class<any>;
      getCleanString(arg0: number): string;
      getClothingItem(): zombie.core.skinnedmodel.population.ClothingItem;
      getClothingItemExtra(): java.util.ArrayList<string>;
      getClothingItemExtraOption(): java.util.ArrayList<string>;
      getClothingItemName(): string;
      getColor(): zombie.core.Color;
      getColorBlue(): number;
      getColorGreen(): number;
      getColorInfo(): zombie.core.textures.ColorInfo;
      getColorRed(): number;
      getCondition(): number;
      getConditionLowerNormal(): number;
      getConditionLowerOffroad(): number;
      getConditionMax(): number;
      getConsolidateOption(): string;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerX(): number;
      getContainerY(): number;
      getContentsWeight(): number;
      getCookedString(): string;
      getCookingTime(): number;
      getCount(): number;
      getCountDownSound(): string;
      getCurrentAmmoCount(): number;
      getCurrentCondition(): number;
      getCurrentUses(): number;
      getCustomMenuOption(): string;
      getDescription(): string;
      getDirt(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getDisplayCategory(): string;
      getDisplayName(): string;
      getEatType(): string;
      getEngineLoudness(): number;
      getEquipParent(): zombie.characters.IsoGameCharacter;
      getEquipSound(): string;
      getEquippedWeight(): number;
      getEvolvedRecipeName(): string;
      getExplosionSound(): string;
      getExtraItems(): java.util.ArrayList<string>;
      getExtraItemsWeight(): number;
      getFabricType(): string;
      getFatigueChange(): number;
      getFillFromDispenserSound(): string;
      getFillFromTapSound(): string;
      getFullType(): string;
      getG(): number;
      getGunType(): string;
      getHaveBeenRepaired(): number;
      getHotbarEquippedWeight(): number;
      getID(): number;
      getIconsForTexture(): java.util.ArrayList<string>;
      getInvHeat(): number;
      getItemCapacity(): number;
      getItemHeat(): number;
      getItemReplacementPrimaryHand(): zombie.scripting.objects.ItemReplacement;
      getItemReplacementSecondHand(): zombie.scripting.objects.ItemReplacement;
      getItemWhenDry(): string;
      getJobDelta(): number;
      getJobType(): string;
      getKeyId(): number;
      getKeys(): java.util.ArrayList<zombie.inventory.types.Key>;
      getLastAged(): number;
      getLightDistance(): number;
      getLightStrength(): number;
      getLuaCreate(): string;
      getMakeUpType(): string;
      getMaxAmmo(): number;
      getMaxCapacity(): number;
      getMechanicType(): number;
      getMediaData(): zombie.radio.media.MediaData;
      getMediaType(): number;
      getMeltingTime(): number;
      getMetalValue(): number;
      getMinutesToBurn(): number;
      getMinutesToCook(): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getModID(): string;
      getModName(): string;
      getModule(): string;
      getName(): string;
      getNewPlaceDir(): zombie.iso.IsoDirections;
      getOffAge(): number;
      getOffAgeMax(): number;
      getOffString(): string;
      getOutermostContainer(): zombie.inventory.ItemContainer;
      getPlaceDir(): zombie.iso.IsoDirections;
      getPreviousOwner(): zombie.characters.IsoGameCharacter;
      getR(): number;
      getRecordedMediaIndex(): number;
      getReduceInfectionPower(): number;
      getRegistry_id(): number;
      getRemoteControlID(): number;
      getRemoteRange(): number;
      getReplaceOnUse(): string;
      getReplaceOnUseFullType(): string;
      getReplaceOnUseOn(): string;
      getReplaceOnUseOnString(): string;
      getRequireInHandOrInventory(): java.util.ArrayList<string>;
      getRightClickContainer(): zombie.inventory.ItemContainer;
      getSaveType(): number;
      getScore(arg0: zombie.characters.SurvivorDesc): number;
      getScriptItem(): zombie.scripting.objects.Item;
      getStashChance(): number;
      getStaticModel(): string;
      getStressChange(): number;
      getStringItemType(): string;
      getSuspensionCompression(): number;
      getSuspensionDamping(): number;
      getSwingAnim(): string;
      getTags(): java.util.ArrayList<string>;
      getTaken(): java.util.ArrayList<zombie.iso.IsoObject>;
      getTex(): zombie.core.textures.Texture;
      getTexture(): zombie.core.textures.Texture;
      getTextureBurnt(): zombie.core.textures.Texture;
      getTextureCooked(): zombie.core.textures.Texture;
      getTexturerotten(): zombie.core.textures.Texture;
      getTooltip(): string;
      getTorchDot(): number;
      getType(): string;
      getUnCookedString(): string;
      getUnequipSound(): string;
      getUnequippedWeight(): number;
      getUnhappyChange(): number;
      getUses(): number;
      getVisual(): zombie.core.skinnedmodel.visual.ItemVisual;
      getWeight(): number;
      getWetCooldown(): number;
      getWheelFriction(): number;
      getWorker(): string;
      getWorldItem(): zombie.iso.objects.IsoWorldInventoryObject;
      getWorldStaticItem(): string;
      getWorldTexture(): string;
      hasBlood(): boolean;
      hasDirt(): boolean;
      hasModData(): boolean;
      hasTag(arg0: string): boolean;
      hashCode(): number;
      haveExtraItems(): boolean;
      initialiseItem(): void;
      isActivated(): boolean;
      isAlcoholic(): boolean;
      isAlwaysWelcomeGift(): boolean;
      isBeingFilled(): boolean;
      isBroken(): boolean;
      isBurnt(): boolean;
      isCanBandage(): boolean;
      isConditionAffectsCapacity(): boolean;
      isCookable(): boolean;
      isCooked(): boolean;
      isCustomColor(): boolean;
      isCustomName(): boolean;
      isCustomWeight(): boolean;
      isDisappearOnUse(): boolean;
      isEmittingLight(): boolean;
      isEquipped(): boolean;
      isEquippedNoSprint(): boolean;
      isFavorite(): boolean;
      isFishingLure(): boolean;
      isHairDye(): boolean;
      isHidden(): boolean;
      isInLocalPlayerInventory(): boolean;
      isInPlayerInventory(): boolean;
      isInfected(): boolean;
      isInitialised(): boolean;
      isIsCookable(): boolean;
      isProtectFromRainWhileEquipped(): boolean;
      isRecordedMedia(): boolean;
      isRemoteController(): boolean;
      isRequiresEquippedBothHands(): boolean;
      isTaintedWater(): boolean;
      isTorchCone(): boolean;
      isTrap(): boolean;
      isTwoHandWeapon(): boolean;
      isUseWorldItem(): boolean;
      isVanilla(): boolean;
      isWaterSource(): boolean;
      isWet(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadItem(arg0: java.nio.ByteBuffer, arg1: number, arg2: boolean): zombie.inventory.InventoryItem;
      notify(): void;
      notifyAll(): void;
      save(arg0: java.nio.ByteBuffer, arg1: boolean): void;
      saveWithSize(arg0: java.nio.ByteBuffer, arg1: boolean): void;
      setActivated(arg0: boolean): void;
      setActivatedRemote(arg0: boolean): void;
      setActualWeight(arg0: number): void;
      setAge(arg0: number): void;
      setAlcoholPower(arg0: number): void;
      setAlcoholic(arg0: boolean): void;
      setAmmoType(arg0: string): void;
      setAttachedSlot(arg0: number): void;
      setAttachedSlotType(arg0: string): void;
      setAttachedToModel(arg0: string): void;
      setAttachmentReplacement(arg0: string): void;
      setAttachmentType(arg0: string): void;
      setAttachmentsProvided(arg0: java.util.ArrayList<string>): void;
      setAutoAge(): void;
      setBandagePower(arg0: number): void;
      setBeingFilled(arg0: boolean): void;
      setBlood(arg0: zombie.characterTextures.BloodBodyPartType, arg1: number): void;
      setBloodClothingType(arg0: java.util.ArrayList<zombie.characterTextures.BloodClothingType>): void;
      setBoredomChange(arg0: number): void;
      setBrakeForce(arg0: number): void;
      setBreakSound(arg0: string): void;
      setBroken(arg0: boolean): void;
      setBurnt(arg0: boolean): void;
      setBurntString(arg0: string): void;
      setCanBeActivated(arg0: boolean): void;
      setCanBeRemote(arg0: boolean): void;
      setCat(arg0: zombie.inventory.ItemType): void;
      setChanceToSpawnDamaged(arg0: number): void;
      setColor(arg0: zombie.core.Color): void;
      setColorBlue(arg0: number): void;
      setColorGreen(arg0: number): void;
      setColorRed(arg0: number): void;
      setCondition(arg0: number, arg1: boolean): void;
      setConditionFromModData(arg0: zombie.inventory.InventoryItem): void;
      setConditionLowerNormal(arg0: number): void;
      setConditionLowerOffroad(arg0: number): void;
      setConditionMax(arg0: number): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setContainerX(arg0: number): void;
      setContainerY(arg0: number): void;
      setCooked(arg0: boolean): void;
      setCookedString(arg0: string): void;
      setCookingTime(arg0: number): void;
      setCount(arg0: number): void;
      setCountDownSound(arg0: string): void;
      setCurrentAmmoCount(arg0: number): void;
      setCustomColor(arg0: boolean): void;
      setCustomMenuOption(arg0: string): void;
      setCustomName(arg0: boolean): void;
      setCustomWeight(arg0: boolean): void;
      setDescription(arg0: string): void;
      setDirt(arg0: zombie.characterTextures.BloodBodyPartType, arg1: number): void;
      setDisplayCategory(arg0: string): void;
      setEngineLoudness(arg0: number): void;
      setEquipParent(arg0: zombie.characters.IsoGameCharacter): void;
      setEvolvedRecipeName(arg0: string): void;
      setExplosionSound(arg0: string): void;
      setFatigueChange(arg0: number): void;
      setFavorite(arg0: boolean): void;
      setGunType(arg0: string): void;
      setHaveBeenRepaired(arg0: number): void;
      setID(arg0: number): void;
      setIconsForTexture(arg0: java.util.ArrayList<string>): void;
      setInfected(arg0: boolean): void;
      setInitialised(arg0: boolean): void;
      setIsCookable(arg0: boolean): void;
      setIsWaterSource(arg0: boolean): void;
      setItemCapacity(arg0: number): void;
      setItemHeat(arg0: number): void;
      setItemWhenDry(arg0: string): void;
      setJobDelta(arg0: number): void;
      setJobType(arg0: string): void;
      setKeyId(arg0: number): void;
      setKeys(arg0: java.util.ArrayList<zombie.inventory.types.Key>): void;
      setLastAged(arg0: number): void;
      setLightDistance(arg0: number): void;
      setLightStrength(arg0: number): void;
      setMaxAmmo(arg0: number): void;
      setMaxCapacity(arg0: number): void;
      setMediaType(arg0: number): void;
      setMeltingTime(arg0: number): void;
      setMetalValue(arg0: number): void;
      setMinutesToBurn(arg0: number): void;
      setMinutesToCook(arg0: number): void;
      setModule(arg0: string): void;
      setName(arg0: string): void;
      setNewPlaceDir(arg0: zombie.iso.IsoDirections): void;
      setOffAge(arg0: number): void;
      setOffAgeMax(arg0: number): void;
      setOffString(arg0: string): void;
      setPlaceDir(arg0: zombie.iso.IsoDirections): void;
      setPreviousOwner(arg0: zombie.characters.IsoGameCharacter): void;
      setRecordedMediaData(arg0: zombie.radio.media.MediaData): void;
      setRecordedMediaIndex(arg0: number): void;
      setRecordedMediaIndexInteger(arg0: number): void;
      setReduceInfectionPower(arg0: number): void;
      setRegistry_id(arg0: zombie.scripting.objects.Item): void;
      setRemoteControlID(arg0: number): void;
      setRemoteController(arg0: boolean): void;
      setRemoteRange(arg0: number): void;
      setReplaceOnUse(arg0: string): void;
      setReplaceOnUseOn(arg0: string): void;
      setRequireInHandOrInventory(arg0: java.util.ArrayList<string>): void;
      setRightClickContainer(arg0: zombie.inventory.ItemContainer): void;
      setScriptItem(arg0: zombie.scripting.objects.Item): void;
      setStashChance(arg0: number): void;
      setStashMap(arg0: string): void;
      setStressChange(arg0: number): void;
      setSuspensionCompression(arg0: number): void;
      setSuspensionDamping(arg0: number): void;
      setTaintedWater(arg0: boolean): void;
      setTaken(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      setTexture(arg0: zombie.core.textures.Texture): void;
      setTextureBurnt(arg0: zombie.core.textures.Texture): void;
      setTextureCooked(arg0: zombie.core.textures.Texture): void;
      setTexturerotten(arg0: zombie.core.textures.Texture): void;
      setTooltip(arg0: string): void;
      setTorchCone(arg0: boolean): void;
      setType(arg0: string): void;
      setUnCookedString(arg0: string): void;
      setUnhappyChange(arg0: number): void;
      setUses(arg0: number): void;
      setWeight(arg0: number): void;
      setWet(arg0: boolean): void;
      setWetCooldown(arg0: number): void;
      setWheelFriction(arg0: number): void;
      setWorker(arg0: string): void;
      setWorldItem(arg0: zombie.iso.objects.IsoWorldInventoryObject): void;
      setWorldScale(arg0: number): void;
      setWorldTexture(arg0: string): void;
      setWorldZRotation(arg0: number): void;
      shouldUpdateInWorld(): boolean;
      storeInByteData(arg0: zombie.iso.IsoObject): void;
      synchWithVisual(): void;
      toString(): string;
      update(): void;
      updateAge(): void;
      updateSound(arg0: zombie.audio.BaseSoundEmitter): void;
      wait(arg0: number): void;
    }
    // zombie.inventory.types.Literature extends zombie.inventory.InventoryItem
    export class Literature {
      private constructor();
      CanStoreWater: boolean;
      CloseKillMove?: string;
      Cooked: boolean;
      IsWaterSource: boolean;
      ReplaceOnUseOn?: string;
      RequiresEquippedBothHands: boolean;
      bAlreadyRead: boolean;
      byteData?: java.nio.ByteBuffer;
      col?: zombie.core.Color;
      extraItems?: java.util.ArrayList<string>;
      fatigueChange: number;
      id: number;
      jobDelta: number;
      jobType?: string;
      keepOnDeplete: boolean;
      mainCategory?: string;
      requireInHandOrInventory?: string;
      useOnConsume?: string;
      worldItem?: zombie.iso.objects.IsoWorldInventoryObject;
      worldScale: number;
      worldZRotation: number;
  
      CanStack(arg0: zombie.inventory.InventoryItem): boolean;
      CopyModData(arg0: se.krka.kahlua.vm.KahluaTable): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      HowRotten(): number;
      IsClothing(): boolean;
      IsDrainable(): boolean;
      IsFood(): boolean;
      IsInventoryContainer(): boolean;
      IsLiterature(): boolean;
      IsMap(): boolean;
      IsRotten(): boolean;
      IsWeapon(): boolean;
      ModDataMatches(arg0: zombie.inventory.InventoryItem): boolean;
      SetContainerPosition(arg0: number, arg1: number): void;
      Use(arg0: boolean, arg1: boolean): void;
      UseItem(): void;
      addExtraItem(arg0: string): void;
      addPage(arg0: number, arg1: string): void;
      allowRandomTint(): boolean;
      canBeActivated(): boolean;
      canBeRemote(): boolean;
      canBeWrite(): boolean;
      canEmitLight(): boolean;
      canStoreWater(): boolean;
      copyConditionModData(arg0: zombie.inventory.InventoryItem): void;
      copyModData(arg0: se.krka.kahlua.vm.KahluaTable): void;
      doBuildingStash(): void;
      equals(arg0: any): boolean;
      finishupdate(): boolean;
      getA(): number;
      getActualWeight(): number;
      getAge(): number;
      getAlcoholPower(): number;
      getAlreadyReadPages(): number;
      getAlternateModelName(): string;
      getAmmoType(): string;
      getAttachedSlot(): number;
      getAttachedSlotType(): string;
      getAttachedToModel(): string;
      getAttachmentReplacement(): string;
      getAttachmentType(): string;
      getAttachmentsProvided(): java.util.ArrayList<string>;
      getB(): number;
      getBandagePower(): number;
      getBlood(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getBloodClothingType(): java.util.ArrayList<zombie.characterTextures.BloodClothingType>;
      getBodyLocation(): string;
      getBookName(): string;
      getBoredomChange(): number;
      getBrakeForce(): number;
      getBreakSound(): string;
      getBringToBearSound(): string;
      getBurntString(): string;
      getByteData(): java.nio.ByteBuffer;
      getCat(): zombie.inventory.ItemType;
      getCategory(): string;
      getChanceToSpawnDamaged(): number;
      getClass(): java.lang.Class<any>;
      getCleanString(arg0: number): string;
      getClothingItem(): zombie.core.skinnedmodel.population.ClothingItem;
      getClothingItemExtra(): java.util.ArrayList<string>;
      getClothingItemExtraOption(): java.util.ArrayList<string>;
      getClothingItemName(): string;
      getColor(): zombie.core.Color;
      getColorBlue(): number;
      getColorGreen(): number;
      getColorInfo(): zombie.core.textures.ColorInfo;
      getColorRed(): number;
      getCondition(): number;
      getConditionLowerNormal(): number;
      getConditionLowerOffroad(): number;
      getConditionMax(): number;
      getConsolidateOption(): string;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerX(): number;
      getContainerY(): number;
      getContentsWeight(): number;
      getCookedString(): string;
      getCookingTime(): number;
      getCount(): number;
      getCountDownSound(): string;
      getCurrentAmmoCount(): number;
      getCurrentCondition(): number;
      getCurrentUses(): number;
      getCustomMenuOption(): string;
      getCustomPages(): java.util.HashMap<number, string>;
      getDescription(): string;
      getDirt(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getDisplayCategory(): string;
      getDisplayName(): string;
      getEatType(): string;
      getEngineLoudness(): number;
      getEquipParent(): zombie.characters.IsoGameCharacter;
      getEquipSound(): string;
      getEquippedWeight(): number;
      getEvolvedRecipeName(): string;
      getExplosionSound(): string;
      getExtraItems(): java.util.ArrayList<string>;
      getExtraItemsWeight(): number;
      getFabricType(): string;
      getFatigueChange(): number;
      getFillFromDispenserSound(): string;
      getFillFromTapSound(): string;
      getFullType(): string;
      getG(): number;
      getGunType(): string;
      getHaveBeenRepaired(): number;
      getHotbarEquippedWeight(): number;
      getID(): number;
      getIconsForTexture(): java.util.ArrayList<string>;
      getInvHeat(): number;
      getItemCapacity(): number;
      getItemHeat(): number;
      getItemReplacementPrimaryHand(): zombie.scripting.objects.ItemReplacement;
      getItemReplacementSecondHand(): zombie.scripting.objects.ItemReplacement;
      getItemWhenDry(): string;
      getJobDelta(): number;
      getJobType(): string;
      getKeyId(): number;
      getLastAged(): number;
      getLightDistance(): number;
      getLightStrength(): number;
      getLockedBy(): string;
      getLuaCreate(): string;
      getLvlSkillTrained(): number;
      getMakeUpType(): string;
      getMaxAmmo(): number;
      getMaxCapacity(): number;
      getMaxLevelTrained(): number;
      getMechanicType(): number;
      getMediaData(): zombie.radio.media.MediaData;
      getMediaType(): number;
      getMeltingTime(): number;
      getMetalValue(): number;
      getMinutesToBurn(): number;
      getMinutesToCook(): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getModID(): string;
      getModName(): string;
      getModule(): string;
      getName(): string;
      getNewPlaceDir(): zombie.iso.IsoDirections;
      getNumLevelsTrained(): number;
      getNumberOfPages(): number;
      getOffAge(): number;
      getOffAgeMax(): number;
      getOffString(): string;
      getOutermostContainer(): zombie.inventory.ItemContainer;
      getPageToWrite(): number;
      getPlaceDir(): zombie.iso.IsoDirections;
      getPreviousOwner(): zombie.characters.IsoGameCharacter;
      getR(): number;
      getRecordedMediaIndex(): number;
      getReduceInfectionPower(): number;
      getRegistry_id(): number;
      getRemoteControlID(): number;
      getRemoteRange(): number;
      getReplaceOnUse(): string;
      getReplaceOnUseFullType(): string;
      getReplaceOnUseOn(): string;
      getReplaceOnUseOnString(): string;
      getRequireInHandOrInventory(): java.util.ArrayList<string>;
      getRightClickContainer(): zombie.inventory.ItemContainer;
      getSaveType(): number;
      getScore(arg0: zombie.characters.SurvivorDesc): number;
      getScriptItem(): zombie.scripting.objects.Item;
      getSkillTrained(): string;
      getStashChance(): number;
      getStaticModel(): string;
      getStressChange(): number;
      getStringItemType(): string;
      getSuspensionCompression(): number;
      getSuspensionDamping(): number;
      getSwingAnim(): string;
      getTags(): java.util.ArrayList<string>;
      getTaken(): java.util.ArrayList<zombie.iso.IsoObject>;
      getTeachedRecipes(): java.util.List<string>;
      getTex(): zombie.core.textures.Texture;
      getTexture(): zombie.core.textures.Texture;
      getTextureBurnt(): zombie.core.textures.Texture;
      getTextureCooked(): zombie.core.textures.Texture;
      getTexturerotten(): zombie.core.textures.Texture;
      getTooltip(): string;
      getTorchDot(): number;
      getType(): string;
      getUnCookedString(): string;
      getUnequipSound(): string;
      getUnequippedWeight(): number;
      getUnhappyChange(): number;
      getUses(): number;
      getVisual(): zombie.core.skinnedmodel.visual.ItemVisual;
      getWeight(): number;
      getWetCooldown(): number;
      getWheelFriction(): number;
      getWorker(): string;
      getWorldItem(): zombie.iso.objects.IsoWorldInventoryObject;
      getWorldStaticItem(): string;
      getWorldTexture(): string;
      hasBlood(): boolean;
      hasDirt(): boolean;
      hasModData(): boolean;
      hasTag(arg0: string): boolean;
      hashCode(): number;
      haveExtraItems(): boolean;
      initialiseItem(): void;
      isActivated(): boolean;
      isAlcoholic(): boolean;
      isAlwaysWelcomeGift(): boolean;
      isBeingFilled(): boolean;
      isBroken(): boolean;
      isBurnt(): boolean;
      isCanBandage(): boolean;
      isConditionAffectsCapacity(): boolean;
      isCookable(): boolean;
      isCooked(): boolean;
      isCustomColor(): boolean;
      isCustomName(): boolean;
      isCustomWeight(): boolean;
      isDisappearOnUse(): boolean;
      isEmittingLight(): boolean;
      isEquipped(): boolean;
      isEquippedNoSprint(): boolean;
      isFavorite(): boolean;
      isFishingLure(): boolean;
      isHairDye(): boolean;
      isHidden(): boolean;
      isInLocalPlayerInventory(): boolean;
      isInPlayerInventory(): boolean;
      isInfected(): boolean;
      isInitialised(): boolean;
      isIsCookable(): boolean;
      isProtectFromRainWhileEquipped(): boolean;
      isRecordedMedia(): boolean;
      isRemoteController(): boolean;
      isRequiresEquippedBothHands(): boolean;
      isTaintedWater(): boolean;
      isTorchCone(): boolean;
      isTrap(): boolean;
      isTwoHandWeapon(): boolean;
      isUseWorldItem(): boolean;
      isVanilla(): boolean;
      isWaterSource(): boolean;
      isWet(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadItem(arg0: java.nio.ByteBuffer, arg1: number, arg2: boolean): zombie.inventory.InventoryItem;
      notify(): void;
      notifyAll(): void;
      save(arg0: java.nio.ByteBuffer, arg1: boolean): void;
      saveWithSize(arg0: java.nio.ByteBuffer, arg1: boolean): void;
      seePage(arg0: number): string;
      setActivated(arg0: boolean): void;
      setActivatedRemote(arg0: boolean): void;
      setActualWeight(arg0: number): void;
      setAge(arg0: number): void;
      setAlcoholPower(arg0: number): void;
      setAlcoholic(arg0: boolean): void;
      setAlreadyReadPages(arg0: number): void;
      setAmmoType(arg0: string): void;
      setAttachedSlot(arg0: number): void;
      setAttachedSlotType(arg0: string): void;
      setAttachedToModel(arg0: string): void;
      setAttachmentReplacement(arg0: string): void;
      setAttachmentType(arg0: string): void;
      setAttachmentsProvided(arg0: java.util.ArrayList<string>): void;
      setAutoAge(): void;
      setBandagePower(arg0: number): void;
      setBeingFilled(arg0: boolean): void;
      setBlood(arg0: zombie.characterTextures.BloodBodyPartType, arg1: number): void;
      setBloodClothingType(arg0: java.util.ArrayList<zombie.characterTextures.BloodClothingType>): void;
      setBookName(arg0: string): void;
      setBoredomChange(arg0: number): void;
      setBrakeForce(arg0: number): void;
      setBreakSound(arg0: string): void;
      setBroken(arg0: boolean): void;
      setBurnt(arg0: boolean): void;
      setBurntString(arg0: string): void;
      setCanBeActivated(arg0: boolean): void;
      setCanBeRemote(arg0: boolean): void;
      setCanBeWrite(arg0: boolean): void;
      setCat(arg0: zombie.inventory.ItemType): void;
      setChanceToSpawnDamaged(arg0: number): void;
      setColor(arg0: zombie.core.Color): void;
      setColorBlue(arg0: number): void;
      setColorGreen(arg0: number): void;
      setColorRed(arg0: number): void;
      setCondition(arg0: number, arg1: boolean): void;
      setConditionFromModData(arg0: zombie.inventory.InventoryItem): void;
      setConditionLowerNormal(arg0: number): void;
      setConditionLowerOffroad(arg0: number): void;
      setConditionMax(arg0: number): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setContainerX(arg0: number): void;
      setContainerY(arg0: number): void;
      setCooked(arg0: boolean): void;
      setCookedString(arg0: string): void;
      setCookingTime(arg0: number): void;
      setCount(arg0: number): void;
      setCountDownSound(arg0: string): void;
      setCurrentAmmoCount(arg0: number): void;
      setCustomColor(arg0: boolean): void;
      setCustomMenuOption(arg0: string): void;
      setCustomName(arg0: boolean): void;
      setCustomPages(arg0: java.util.HashMap<number, string>): void;
      setCustomWeight(arg0: boolean): void;
      setDescription(arg0: string): void;
      setDirt(arg0: zombie.characterTextures.BloodBodyPartType, arg1: number): void;
      setDisplayCategory(arg0: string): void;
      setEngineLoudness(arg0: number): void;
      setEquipParent(arg0: zombie.characters.IsoGameCharacter): void;
      setEvolvedRecipeName(arg0: string): void;
      setExplosionSound(arg0: string): void;
      setFatigueChange(arg0: number): void;
      setFavorite(arg0: boolean): void;
      setGunType(arg0: string): void;
      setHaveBeenRepaired(arg0: number): void;
      setID(arg0: number): void;
      setIconsForTexture(arg0: java.util.ArrayList<string>): void;
      setInfected(arg0: boolean): void;
      setInitialised(arg0: boolean): void;
      setIsCookable(arg0: boolean): void;
      setIsWaterSource(arg0: boolean): void;
      setItemCapacity(arg0: number): void;
      setItemHeat(arg0: number): void;
      setItemWhenDry(arg0: string): void;
      setJobDelta(arg0: number): void;
      setJobType(arg0: string): void;
      setKeyId(arg0: number): void;
      setLastAged(arg0: number): void;
      setLightDistance(arg0: number): void;
      setLightStrength(arg0: number): void;
      setLockedBy(arg0: string): void;
      setLvlSkillTrained(arg0: number): void;
      setMaxAmmo(arg0: number): void;
      setMaxCapacity(arg0: number): void;
      setMediaType(arg0: number): void;
      setMeltingTime(arg0: number): void;
      setMetalValue(arg0: number): void;
      setMinutesToBurn(arg0: number): void;
      setMinutesToCook(arg0: number): void;
      setModule(arg0: string): void;
      setName(arg0: string): void;
      setNewPlaceDir(arg0: zombie.iso.IsoDirections): void;
      setNumLevelsTrained(arg0: number): void;
      setNumberOfPages(arg0: number): void;
      setOffAge(arg0: number): void;
      setOffAgeMax(arg0: number): void;
      setOffString(arg0: string): void;
      setPageToWrite(arg0: number): void;
      setPlaceDir(arg0: zombie.iso.IsoDirections): void;
      setPreviousOwner(arg0: zombie.characters.IsoGameCharacter): void;
      setRecordedMediaData(arg0: zombie.radio.media.MediaData): void;
      setRecordedMediaIndex(arg0: number): void;
      setRecordedMediaIndexInteger(arg0: number): void;
      setReduceInfectionPower(arg0: number): void;
      setRegistry_id(arg0: zombie.scripting.objects.Item): void;
      setRemoteControlID(arg0: number): void;
      setRemoteController(arg0: boolean): void;
      setRemoteRange(arg0: number): void;
      setReplaceOnUse(arg0: string): void;
      setReplaceOnUseOn(arg0: string): void;
      setRequireInHandOrInventory(arg0: java.util.ArrayList<string>): void;
      setRightClickContainer(arg0: zombie.inventory.ItemContainer): void;
      setScriptItem(arg0: zombie.scripting.objects.Item): void;
      setSkillTrained(arg0: string): void;
      setStashChance(arg0: number): void;
      setStashMap(arg0: string): void;
      setStressChange(arg0: number): void;
      setSuspensionCompression(arg0: number): void;
      setSuspensionDamping(arg0: number): void;
      setTaintedWater(arg0: boolean): void;
      setTaken(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      setTeachedRecipes(arg0: java.util.List<string>): void;
      setTexture(arg0: zombie.core.textures.Texture): void;
      setTextureBurnt(arg0: zombie.core.textures.Texture): void;
      setTextureCooked(arg0: zombie.core.textures.Texture): void;
      setTexturerotten(arg0: zombie.core.textures.Texture): void;
      setTooltip(arg0: string): void;
      setTorchCone(arg0: boolean): void;
      setType(arg0: string): void;
      setUnCookedString(arg0: string): void;
      setUnhappyChange(arg0: number): void;
      setUses(arg0: number): void;
      setWeight(arg0: number): void;
      setWet(arg0: boolean): void;
      setWetCooldown(arg0: number): void;
      setWheelFriction(arg0: number): void;
      setWorker(arg0: string): void;
      setWorldItem(arg0: zombie.iso.objects.IsoWorldInventoryObject): void;
      setWorldScale(arg0: number): void;
      setWorldTexture(arg0: string): void;
      setWorldZRotation(arg0: number): void;
      shouldUpdateInWorld(): boolean;
      storeInByteData(arg0: zombie.iso.IsoObject): void;
      synchWithVisual(): void;
      toString(): string;
      update(): void;
      updateAge(): void;
      updateSound(arg0: zombie.audio.BaseSoundEmitter): void;
      wait(arg0: number): void;
    }
    // zombie.inventory.types.MapItem extends zombie.inventory.InventoryItem
    export class MapItem {
      private constructor();
      CanStoreWater: boolean;
      CloseKillMove?: string;
      Cooked: boolean;
      IsWaterSource: boolean;
      ReplaceOnUseOn?: string;
      RequiresEquippedBothHands: boolean;
      static WORLD_MAP_INSTANCE?: zombie.inventory.types.MapItem;
      byteData?: java.nio.ByteBuffer;
      col?: zombie.core.Color;
      extraItems?: java.util.ArrayList<string>;
      fatigueChange: number;
      id: number;
      jobDelta: number;
      jobType?: string;
      keepOnDeplete: boolean;
      mainCategory?: string;
      worldItem?: zombie.iso.objects.IsoWorldInventoryObject;
      worldScale: number;
      worldZRotation: number;
  
      CanStack(arg0: zombie.inventory.InventoryItem): boolean;
      CopyModData(arg0: se.krka.kahlua.vm.KahluaTable): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      HowRotten(): number;
      IsClothing(): boolean;
      IsDrainable(): boolean;
      IsFood(): boolean;
      IsInventoryContainer(): boolean;
      IsLiterature(): boolean;
      IsMap(): boolean;
      IsRotten(): boolean;
      IsWeapon(): boolean;
      LoadWorldMap(): void;
      ModDataMatches(arg0: zombie.inventory.InventoryItem): boolean;
      Reset(): void;
      SaveWorldMap(): void;
      SetContainerPosition(arg0: number, arg1: number): void;
      Use(arg0: boolean, arg1: boolean): void;
      UseItem(): void;
      addExtraItem(arg0: string): void;
      allowRandomTint(): boolean;
      canBeActivated(): boolean;
      canBeRemote(): boolean;
      canEmitLight(): boolean;
      canStoreWater(): boolean;
      copyConditionModData(arg0: zombie.inventory.InventoryItem): void;
      copyModData(arg0: se.krka.kahlua.vm.KahluaTable): void;
      doBuildingStash(): void;
      equals(arg0: any): boolean;
      finishupdate(): boolean;
      getA(): number;
      getActualWeight(): number;
      getAge(): number;
      getAlcoholPower(): number;
      getAlternateModelName(): string;
      getAmmoType(): string;
      getAttachedSlot(): number;
      getAttachedSlotType(): string;
      getAttachedToModel(): string;
      getAttachmentReplacement(): string;
      getAttachmentType(): string;
      getAttachmentsProvided(): java.util.ArrayList<string>;
      getB(): number;
      getBandagePower(): number;
      getBlood(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getBloodClothingType(): java.util.ArrayList<zombie.characterTextures.BloodClothingType>;
      getBodyLocation(): string;
      getBoredomChange(): number;
      getBrakeForce(): number;
      getBreakSound(): string;
      getBringToBearSound(): string;
      getBurntString(): string;
      getByteData(): java.nio.ByteBuffer;
      getCat(): zombie.inventory.ItemType;
      getCategory(): string;
      getChanceToSpawnDamaged(): number;
      getClass(): java.lang.Class<any>;
      getCleanString(arg0: number): string;
      getClothingItem(): zombie.core.skinnedmodel.population.ClothingItem;
      getClothingItemExtra(): java.util.ArrayList<string>;
      getClothingItemExtraOption(): java.util.ArrayList<string>;
      getClothingItemName(): string;
      getColor(): zombie.core.Color;
      getColorBlue(): number;
      getColorGreen(): number;
      getColorInfo(): zombie.core.textures.ColorInfo;
      getColorRed(): number;
      getCondition(): number;
      getConditionLowerNormal(): number;
      getConditionLowerOffroad(): number;
      getConditionMax(): number;
      getConsolidateOption(): string;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerX(): number;
      getContainerY(): number;
      getContentsWeight(): number;
      getCookedString(): string;
      getCookingTime(): number;
      getCount(): number;
      getCountDownSound(): string;
      getCurrentAmmoCount(): number;
      getCurrentCondition(): number;
      getCurrentUses(): number;
      getCustomMenuOption(): string;
      getDescription(): string;
      getDirt(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getDisplayCategory(): string;
      getDisplayName(): string;
      getEatType(): string;
      getEngineLoudness(): number;
      getEquipParent(): zombie.characters.IsoGameCharacter;
      getEquipSound(): string;
      getEquippedWeight(): number;
      getEvolvedRecipeName(): string;
      getExplosionSound(): string;
      getExtraItems(): java.util.ArrayList<string>;
      getExtraItemsWeight(): number;
      getFabricType(): string;
      getFatigueChange(): number;
      getFillFromDispenserSound(): string;
      getFillFromTapSound(): string;
      getFullType(): string;
      getG(): number;
      getGunType(): string;
      getHaveBeenRepaired(): number;
      getHotbarEquippedWeight(): number;
      getID(): number;
      getIconsForTexture(): java.util.ArrayList<string>;
      getInvHeat(): number;
      getItemCapacity(): number;
      getItemHeat(): number;
      getItemReplacementPrimaryHand(): zombie.scripting.objects.ItemReplacement;
      getItemReplacementSecondHand(): zombie.scripting.objects.ItemReplacement;
      getItemWhenDry(): string;
      getJobDelta(): number;
      getJobType(): string;
      getKeyId(): number;
      getLastAged(): number;
      getLightDistance(): number;
      getLightStrength(): number;
      getLuaCreate(): string;
      getMakeUpType(): string;
      getMapID(): string;
      getMaxAmmo(): number;
      getMaxCapacity(): number;
      getMechanicType(): number;
      getMediaData(): zombie.radio.media.MediaData;
      getMediaType(): number;
      getMeltingTime(): number;
      getMetalValue(): number;
      getMinutesToBurn(): number;
      getMinutesToCook(): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getModID(): string;
      getModName(): string;
      getModule(): string;
      getName(): string;
      getNewPlaceDir(): zombie.iso.IsoDirections;
      getOffAge(): number;
      getOffAgeMax(): number;
      getOffString(): string;
      getOutermostContainer(): zombie.inventory.ItemContainer;
      getPlaceDir(): zombie.iso.IsoDirections;
      getPreviousOwner(): zombie.characters.IsoGameCharacter;
      getR(): number;
      getRecordedMediaIndex(): number;
      getReduceInfectionPower(): number;
      getRegistry_id(): number;
      getRemoteControlID(): number;
      getRemoteRange(): number;
      getReplaceOnUse(): string;
      getReplaceOnUseFullType(): string;
      getReplaceOnUseOn(): string;
      getReplaceOnUseOnString(): string;
      getRequireInHandOrInventory(): java.util.ArrayList<string>;
      getRightClickContainer(): zombie.inventory.ItemContainer;
      getSaveType(): number;
      getScore(arg0: zombie.characters.SurvivorDesc): number;
      getScriptItem(): zombie.scripting.objects.Item;
      getSingleton(): zombie.inventory.types.MapItem;
      getStashChance(): number;
      getStaticModel(): string;
      getStressChange(): number;
      getStringItemType(): string;
      getSuspensionCompression(): number;
      getSuspensionDamping(): number;
      getSwingAnim(): string;
      getSymbols(): zombie.worldMap.symbols.WorldMapSymbols;
      getTags(): java.util.ArrayList<string>;
      getTaken(): java.util.ArrayList<zombie.iso.IsoObject>;
      getTex(): zombie.core.textures.Texture;
      getTexture(): zombie.core.textures.Texture;
      getTextureBurnt(): zombie.core.textures.Texture;
      getTextureCooked(): zombie.core.textures.Texture;
      getTexturerotten(): zombie.core.textures.Texture;
      getTooltip(): string;
      getTorchDot(): number;
      getType(): string;
      getUnCookedString(): string;
      getUnequipSound(): string;
      getUnequippedWeight(): number;
      getUnhappyChange(): number;
      getUses(): number;
      getVisual(): zombie.core.skinnedmodel.visual.ItemVisual;
      getWeight(): number;
      getWetCooldown(): number;
      getWheelFriction(): number;
      getWorker(): string;
      getWorldItem(): zombie.iso.objects.IsoWorldInventoryObject;
      getWorldStaticItem(): string;
      getWorldTexture(): string;
      hasBlood(): boolean;
      hasDirt(): boolean;
      hasModData(): boolean;
      hasTag(arg0: string): boolean;
      hashCode(): number;
      haveExtraItems(): boolean;
      initialiseItem(): void;
      isActivated(): boolean;
      isAlcoholic(): boolean;
      isAlwaysWelcomeGift(): boolean;
      isBeingFilled(): boolean;
      isBroken(): boolean;
      isBurnt(): boolean;
      isCanBandage(): boolean;
      isConditionAffectsCapacity(): boolean;
      isCookable(): boolean;
      isCooked(): boolean;
      isCustomColor(): boolean;
      isCustomName(): boolean;
      isCustomWeight(): boolean;
      isDisappearOnUse(): boolean;
      isEmittingLight(): boolean;
      isEquipped(): boolean;
      isEquippedNoSprint(): boolean;
      isFavorite(): boolean;
      isFishingLure(): boolean;
      isHairDye(): boolean;
      isHidden(): boolean;
      isInLocalPlayerInventory(): boolean;
      isInPlayerInventory(): boolean;
      isInfected(): boolean;
      isInitialised(): boolean;
      isIsCookable(): boolean;
      isProtectFromRainWhileEquipped(): boolean;
      isRecordedMedia(): boolean;
      isRemoteController(): boolean;
      isRequiresEquippedBothHands(): boolean;
      isTaintedWater(): boolean;
      isTorchCone(): boolean;
      isTrap(): boolean;
      isTwoHandWeapon(): boolean;
      isUseWorldItem(): boolean;
      isVanilla(): boolean;
      isWaterSource(): boolean;
      isWet(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadItem(arg0: java.nio.ByteBuffer, arg1: number, arg2: boolean): zombie.inventory.InventoryItem;
      notify(): void;
      notifyAll(): void;
      save(arg0: java.nio.ByteBuffer, arg1: boolean): void;
      saveWithSize(arg0: java.nio.ByteBuffer, arg1: boolean): void;
      setActivated(arg0: boolean): void;
      setActivatedRemote(arg0: boolean): void;
      setActualWeight(arg0: number): void;
      setAge(arg0: number): void;
      setAlcoholPower(arg0: number): void;
      setAlcoholic(arg0: boolean): void;
      setAmmoType(arg0: string): void;
      setAttachedSlot(arg0: number): void;
      setAttachedSlotType(arg0: string): void;
      setAttachedToModel(arg0: string): void;
      setAttachmentReplacement(arg0: string): void;
      setAttachmentType(arg0: string): void;
      setAttachmentsProvided(arg0: java.util.ArrayList<string>): void;
      setAutoAge(): void;
      setBandagePower(arg0: number): void;
      setBeingFilled(arg0: boolean): void;
      setBlood(arg0: zombie.characterTextures.BloodBodyPartType, arg1: number): void;
      setBloodClothingType(arg0: java.util.ArrayList<zombie.characterTextures.BloodClothingType>): void;
      setBoredomChange(arg0: number): void;
      setBrakeForce(arg0: number): void;
      setBreakSound(arg0: string): void;
      setBroken(arg0: boolean): void;
      setBurnt(arg0: boolean): void;
      setBurntString(arg0: string): void;
      setCanBeActivated(arg0: boolean): void;
      setCanBeRemote(arg0: boolean): void;
      setCat(arg0: zombie.inventory.ItemType): void;
      setChanceToSpawnDamaged(arg0: number): void;
      setColor(arg0: zombie.core.Color): void;
      setColorBlue(arg0: number): void;
      setColorGreen(arg0: number): void;
      setColorRed(arg0: number): void;
      setCondition(arg0: number, arg1: boolean): void;
      setConditionFromModData(arg0: zombie.inventory.InventoryItem): void;
      setConditionLowerNormal(arg0: number): void;
      setConditionLowerOffroad(arg0: number): void;
      setConditionMax(arg0: number): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setContainerX(arg0: number): void;
      setContainerY(arg0: number): void;
      setCooked(arg0: boolean): void;
      setCookedString(arg0: string): void;
      setCookingTime(arg0: number): void;
      setCount(arg0: number): void;
      setCountDownSound(arg0: string): void;
      setCurrentAmmoCount(arg0: number): void;
      setCustomColor(arg0: boolean): void;
      setCustomMenuOption(arg0: string): void;
      setCustomName(arg0: boolean): void;
      setCustomWeight(arg0: boolean): void;
      setDescription(arg0: string): void;
      setDirt(arg0: zombie.characterTextures.BloodBodyPartType, arg1: number): void;
      setDisplayCategory(arg0: string): void;
      setEngineLoudness(arg0: number): void;
      setEquipParent(arg0: zombie.characters.IsoGameCharacter): void;
      setEvolvedRecipeName(arg0: string): void;
      setExplosionSound(arg0: string): void;
      setFatigueChange(arg0: number): void;
      setFavorite(arg0: boolean): void;
      setGunType(arg0: string): void;
      setHaveBeenRepaired(arg0: number): void;
      setID(arg0: number): void;
      setIconsForTexture(arg0: java.util.ArrayList<string>): void;
      setInfected(arg0: boolean): void;
      setInitialised(arg0: boolean): void;
      setIsCookable(arg0: boolean): void;
      setIsWaterSource(arg0: boolean): void;
      setItemCapacity(arg0: number): void;
      setItemHeat(arg0: number): void;
      setItemWhenDry(arg0: string): void;
      setJobDelta(arg0: number): void;
      setJobType(arg0: string): void;
      setKeyId(arg0: number): void;
      setLastAged(arg0: number): void;
      setLightDistance(arg0: number): void;
      setLightStrength(arg0: number): void;
      setMapID(arg0: string): void;
      setMaxAmmo(arg0: number): void;
      setMaxCapacity(arg0: number): void;
      setMediaType(arg0: number): void;
      setMeltingTime(arg0: number): void;
      setMetalValue(arg0: number): void;
      setMinutesToBurn(arg0: number): void;
      setMinutesToCook(arg0: number): void;
      setModule(arg0: string): void;
      setName(arg0: string): void;
      setNewPlaceDir(arg0: zombie.iso.IsoDirections): void;
      setOffAge(arg0: number): void;
      setOffAgeMax(arg0: number): void;
      setOffString(arg0: string): void;
      setPlaceDir(arg0: zombie.iso.IsoDirections): void;
      setPreviousOwner(arg0: zombie.characters.IsoGameCharacter): void;
      setRecordedMediaData(arg0: zombie.radio.media.MediaData): void;
      setRecordedMediaIndex(arg0: number): void;
      setRecordedMediaIndexInteger(arg0: number): void;
      setReduceInfectionPower(arg0: number): void;
      setRegistry_id(arg0: zombie.scripting.objects.Item): void;
      setRemoteControlID(arg0: number): void;
      setRemoteController(arg0: boolean): void;
      setRemoteRange(arg0: number): void;
      setReplaceOnUse(arg0: string): void;
      setReplaceOnUseOn(arg0: string): void;
      setRequireInHandOrInventory(arg0: java.util.ArrayList<string>): void;
      setRightClickContainer(arg0: zombie.inventory.ItemContainer): void;
      setScriptItem(arg0: zombie.scripting.objects.Item): void;
      setStashChance(arg0: number): void;
      setStashMap(arg0: string): void;
      setStressChange(arg0: number): void;
      setSuspensionCompression(arg0: number): void;
      setSuspensionDamping(arg0: number): void;
      setTaintedWater(arg0: boolean): void;
      setTaken(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      setTexture(arg0: zombie.core.textures.Texture): void;
      setTextureBurnt(arg0: zombie.core.textures.Texture): void;
      setTextureCooked(arg0: zombie.core.textures.Texture): void;
      setTexturerotten(arg0: zombie.core.textures.Texture): void;
      setTooltip(arg0: string): void;
      setTorchCone(arg0: boolean): void;
      setType(arg0: string): void;
      setUnCookedString(arg0: string): void;
      setUnhappyChange(arg0: number): void;
      setUses(arg0: number): void;
      setWeight(arg0: number): void;
      setWet(arg0: boolean): void;
      setWetCooldown(arg0: number): void;
      setWheelFriction(arg0: number): void;
      setWorker(arg0: string): void;
      setWorldItem(arg0: zombie.iso.objects.IsoWorldInventoryObject): void;
      setWorldScale(arg0: number): void;
      setWorldTexture(arg0: string): void;
      setWorldZRotation(arg0: number): void;
      shouldUpdateInWorld(): boolean;
      storeInByteData(arg0: zombie.iso.IsoObject): void;
      synchWithVisual(): void;
      toString(): string;
      update(): void;
      updateAge(): void;
      updateSound(arg0: zombie.audio.BaseSoundEmitter): void;
      wait(arg0: number): void;
    }
    // zombie.inventory.types.Moveable extends zombie.inventory.InventoryItem
    export class Moveable {
      private constructor();
      CanStoreWater: boolean;
      CloseKillMove?: string;
      Cooked: boolean;
      IsWaterSource: boolean;
      ReplaceOnUseOn?: string;
      RequiresEquippedBothHands: boolean;
      byteData?: java.nio.ByteBuffer;
      col?: zombie.core.Color;
      extraItems?: java.util.ArrayList<string>;
      fatigueChange: number;
      id: number;
      jobDelta: number;
      jobType?: string;
      keepOnDeplete: boolean;
      mainCategory?: string;
      worldItem?: zombie.iso.objects.IsoWorldInventoryObject;
      worldScale: number;
      worldZRotation: number;
  
      CanBeDroppedOnFloor(): boolean;
      CanStack(arg0: zombie.inventory.InventoryItem): boolean;
      CopyModData(arg0: se.krka.kahlua.vm.KahluaTable): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      HowRotten(): number;
      IsClothing(): boolean;
      IsDrainable(): boolean;
      IsFood(): boolean;
      IsInventoryContainer(): boolean;
      IsLiterature(): boolean;
      IsMap(): boolean;
      IsRotten(): boolean;
      IsWeapon(): boolean;
      ModDataMatches(arg0: zombie.inventory.InventoryItem): boolean;
      ReadFromWorldSprite(arg0: string): boolean;
      SetContainerPosition(arg0: number, arg1: number): void;
      Use(arg0: boolean, arg1: boolean): void;
      UseItem(): void;
      addExtraItem(arg0: string): void;
      allowRandomTint(): boolean;
      canBeActivated(): boolean;
      canBeRemote(): boolean;
      canEmitLight(): boolean;
      canStoreWater(): boolean;
      copyConditionModData(arg0: zombie.inventory.InventoryItem): void;
      copyModData(arg0: se.krka.kahlua.vm.KahluaTable): void;
      doBuildingStash(): void;
      equals(arg0: any): boolean;
      finishupdate(): boolean;
      getA(): number;
      getActualWeight(): number;
      getAge(): number;
      getAlcoholPower(): number;
      getAlternateModelName(): string;
      getAmmoType(): string;
      getAttachedSlot(): number;
      getAttachedSlotType(): string;
      getAttachedToModel(): string;
      getAttachmentReplacement(): string;
      getAttachmentType(): string;
      getAttachmentsProvided(): java.util.ArrayList<string>;
      getB(): number;
      getBandagePower(): number;
      getBlood(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getBloodClothingType(): java.util.ArrayList<zombie.characterTextures.BloodClothingType>;
      getBodyLocation(): string;
      getBoredomChange(): number;
      getBrakeForce(): number;
      getBreakSound(): string;
      getBringToBearSound(): string;
      getBurntString(): string;
      getByteData(): java.nio.ByteBuffer;
      getCat(): zombie.inventory.ItemType;
      getCategory(): string;
      getChanceToSpawnDamaged(): number;
      getClass(): java.lang.Class<any>;
      getCleanString(arg0: number): string;
      getClothingItem(): zombie.core.skinnedmodel.population.ClothingItem;
      getClothingItemExtra(): java.util.ArrayList<string>;
      getClothingItemExtraOption(): java.util.ArrayList<string>;
      getClothingItemName(): string;
      getColor(): zombie.core.Color;
      getColorBlue(): number;
      getColorGreen(): number;
      getColorInfo(): zombie.core.textures.ColorInfo;
      getColorRed(): number;
      getCondition(): number;
      getConditionLowerNormal(): number;
      getConditionLowerOffroad(): number;
      getConditionMax(): number;
      getConsolidateOption(): string;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerX(): number;
      getContainerY(): number;
      getContentsWeight(): number;
      getCookedString(): string;
      getCookingTime(): number;
      getCount(): number;
      getCountDownSound(): string;
      getCurrentAmmoCount(): number;
      getCurrentCondition(): number;
      getCurrentUses(): number;
      getCustomMenuOption(): string;
      getCustomNameFull(): string;
      getDescription(): string;
      getDirt(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getDisplayCategory(): string;
      getDisplayName(): string;
      getEatType(): string;
      getEngineLoudness(): number;
      getEquipParent(): zombie.characters.IsoGameCharacter;
      getEquipSound(): string;
      getEquippedWeight(): number;
      getEvolvedRecipeName(): string;
      getExplosionSound(): string;
      getExtraItems(): java.util.ArrayList<string>;
      getExtraItemsWeight(): number;
      getFabricType(): string;
      getFatigueChange(): number;
      getFillFromDispenserSound(): string;
      getFillFromTapSound(): string;
      getFullType(): string;
      getG(): number;
      getGunType(): string;
      getHaveBeenRepaired(): number;
      getHotbarEquippedWeight(): number;
      getID(): number;
      getIconsForTexture(): java.util.ArrayList<string>;
      getInvHeat(): number;
      getItemCapacity(): number;
      getItemHeat(): number;
      getItemReplacementPrimaryHand(): zombie.scripting.objects.ItemReplacement;
      getItemReplacementSecondHand(): zombie.scripting.objects.ItemReplacement;
      getItemWhenDry(): string;
      getJobDelta(): number;
      getJobType(): string;
      getKeyId(): number;
      getLastAged(): number;
      getLightB(): number;
      getLightBulbItem(): string;
      getLightDelta(): number;
      getLightDistance(): number;
      getLightG(): number;
      getLightPower(): number;
      getLightR(): number;
      getLightStrength(): number;
      getLuaCreate(): string;
      getMakeUpType(): string;
      getMaxAmmo(): number;
      getMaxCapacity(): number;
      getMechanicType(): number;
      getMediaData(): zombie.radio.media.MediaData;
      getMediaType(): number;
      getMeltingTime(): number;
      getMetalValue(): number;
      getMinutesToBurn(): number;
      getMinutesToCook(): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getModID(): string;
      getModName(): string;
      getModule(): string;
      getMovableFullName(): string;
      getName(): string;
      getNewPlaceDir(): zombie.iso.IsoDirections;
      getOffAge(): number;
      getOffAgeMax(): number;
      getOffString(): string;
      getOutermostContainer(): zombie.inventory.ItemContainer;
      getPlaceDir(): zombie.iso.IsoDirections;
      getPreviousOwner(): zombie.characters.IsoGameCharacter;
      getR(): number;
      getRecordedMediaIndex(): number;
      getReduceInfectionPower(): number;
      getRegistry_id(): number;
      getRemoteControlID(): number;
      getRemoteRange(): number;
      getReplaceOnUse(): string;
      getReplaceOnUseFullType(): string;
      getReplaceOnUseOn(): string;
      getReplaceOnUseOnString(): string;
      getRequireInHandOrInventory(): java.util.ArrayList<string>;
      getRightClickContainer(): zombie.inventory.ItemContainer;
      getSaveType(): number;
      getScore(arg0: zombie.characters.SurvivorDesc): number;
      getScriptItem(): zombie.scripting.objects.Item;
      getSpriteGrid(): zombie.iso.sprite.IsoSpriteGrid;
      getStashChance(): number;
      getStaticModel(): string;
      getStressChange(): number;
      getStringItemType(): string;
      getSuspensionCompression(): number;
      getSuspensionDamping(): number;
      getSwingAnim(): string;
      getTags(): java.util.ArrayList<string>;
      getTaken(): java.util.ArrayList<zombie.iso.IsoObject>;
      getTex(): zombie.core.textures.Texture;
      getTexture(): zombie.core.textures.Texture;
      getTextureBurnt(): zombie.core.textures.Texture;
      getTextureCooked(): zombie.core.textures.Texture;
      getTexturerotten(): zombie.core.textures.Texture;
      getTooltip(): string;
      getTorchDot(): number;
      getType(): string;
      getUnCookedString(): string;
      getUnequipSound(): string;
      getUnequippedWeight(): number;
      getUnhappyChange(): number;
      getUses(): number;
      getVisual(): zombie.core.skinnedmodel.visual.ItemVisual;
      getWeight(): number;
      getWetCooldown(): number;
      getWheelFriction(): number;
      getWorker(): string;
      getWorldItem(): zombie.iso.objects.IsoWorldInventoryObject;
      getWorldSprite(): string;
      getWorldStaticItem(): string;
      getWorldTexture(): string;
      hasBlood(): boolean;
      hasDirt(): boolean;
      hasModData(): boolean;
      hasTag(arg0: string): boolean;
      hashCode(): number;
      haveExtraItems(): boolean;
      initialiseItem(): void;
      isActivated(): boolean;
      isAlcoholic(): boolean;
      isAlwaysWelcomeGift(): boolean;
      isBeingFilled(): boolean;
      isBroken(): boolean;
      isBurnt(): boolean;
      isCanBandage(): boolean;
      isConditionAffectsCapacity(): boolean;
      isCookable(): boolean;
      isCooked(): boolean;
      isCustomColor(): boolean;
      isCustomName(): boolean;
      isCustomWeight(): boolean;
      isDisappearOnUse(): boolean;
      isEmittingLight(): boolean;
      isEquipped(): boolean;
      isEquippedNoSprint(): boolean;
      isFavorite(): boolean;
      isFishingLure(): boolean;
      isHairDye(): boolean;
      isHidden(): boolean;
      isInLocalPlayerInventory(): boolean;
      isInPlayerInventory(): boolean;
      isInfected(): boolean;
      isInitialised(): boolean;
      isIsCookable(): boolean;
      isLight(): boolean;
      isLightHasBattery(): boolean;
      isLightUseBattery(): boolean;
      isMultiGridAnchor(): boolean;
      isProtectFromRainWhileEquipped(): boolean;
      isRecordedMedia(): boolean;
      isRemoteController(): boolean;
      isRequiresEquippedBothHands(): boolean;
      isTaintedWater(): boolean;
      isTorchCone(): boolean;
      isTrap(): boolean;
      isTwoHandWeapon(): boolean;
      isUseWorldItem(): boolean;
      isVanilla(): boolean;
      isWaterSource(): boolean;
      isWet(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadItem(arg0: java.nio.ByteBuffer, arg1: number, arg2: boolean): zombie.inventory.InventoryItem;
      notify(): void;
      notifyAll(): void;
      save(arg0: java.nio.ByteBuffer, arg1: boolean): void;
      saveWithSize(arg0: java.nio.ByteBuffer, arg1: boolean): void;
      setActivated(arg0: boolean): void;
      setActivatedRemote(arg0: boolean): void;
      setActualWeight(arg0: number): void;
      setAge(arg0: number): void;
      setAlcoholPower(arg0: number): void;
      setAlcoholic(arg0: boolean): void;
      setAmmoType(arg0: string): void;
      setAttachedSlot(arg0: number): void;
      setAttachedSlotType(arg0: string): void;
      setAttachedToModel(arg0: string): void;
      setAttachmentReplacement(arg0: string): void;
      setAttachmentType(arg0: string): void;
      setAttachmentsProvided(arg0: java.util.ArrayList<string>): void;
      setAutoAge(): void;
      setBandagePower(arg0: number): void;
      setBeingFilled(arg0: boolean): void;
      setBlood(arg0: zombie.characterTextures.BloodBodyPartType, arg1: number): void;
      setBloodClothingType(arg0: java.util.ArrayList<zombie.characterTextures.BloodClothingType>): void;
      setBoredomChange(arg0: number): void;
      setBrakeForce(arg0: number): void;
      setBreakSound(arg0: string): void;
      setBroken(arg0: boolean): void;
      setBurnt(arg0: boolean): void;
      setBurntString(arg0: string): void;
      setCanBeActivated(arg0: boolean): void;
      setCanBeRemote(arg0: boolean): void;
      setCat(arg0: zombie.inventory.ItemType): void;
      setChanceToSpawnDamaged(arg0: number): void;
      setColor(arg0: zombie.core.Color): void;
      setColorBlue(arg0: number): void;
      setColorGreen(arg0: number): void;
      setColorRed(arg0: number): void;
      setCondition(arg0: number, arg1: boolean): void;
      setConditionFromModData(arg0: zombie.inventory.InventoryItem): void;
      setConditionLowerNormal(arg0: number): void;
      setConditionLowerOffroad(arg0: number): void;
      setConditionMax(arg0: number): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setContainerX(arg0: number): void;
      setContainerY(arg0: number): void;
      setCooked(arg0: boolean): void;
      setCookedString(arg0: string): void;
      setCookingTime(arg0: number): void;
      setCount(arg0: number): void;
      setCountDownSound(arg0: string): void;
      setCurrentAmmoCount(arg0: number): void;
      setCustomColor(arg0: boolean): void;
      setCustomMenuOption(arg0: string): void;
      setCustomName(arg0: boolean): void;
      setCustomWeight(arg0: boolean): void;
      setDescription(arg0: string): void;
      setDirt(arg0: zombie.characterTextures.BloodBodyPartType, arg1: number): void;
      setDisplayCategory(arg0: string): void;
      setEngineLoudness(arg0: number): void;
      setEquipParent(arg0: zombie.characters.IsoGameCharacter): void;
      setEvolvedRecipeName(arg0: string): void;
      setExplosionSound(arg0: string): void;
      setFatigueChange(arg0: number): void;
      setFavorite(arg0: boolean): void;
      setGunType(arg0: string): void;
      setHaveBeenRepaired(arg0: number): void;
      setID(arg0: number): void;
      setIconsForTexture(arg0: java.util.ArrayList<string>): void;
      setInfected(arg0: boolean): void;
      setInitialised(arg0: boolean): void;
      setIsCookable(arg0: boolean): void;
      setIsWaterSource(arg0: boolean): void;
      setItemCapacity(arg0: number): void;
      setItemHeat(arg0: number): void;
      setItemWhenDry(arg0: string): void;
      setJobDelta(arg0: number): void;
      setJobType(arg0: string): void;
      setKeyId(arg0: number): void;
      setLastAged(arg0: number): void;
      setLight(arg0: boolean): void;
      setLightB(arg0: number): void;
      setLightBulbItem(arg0: string): void;
      setLightDelta(arg0: number): void;
      setLightDistance(arg0: number): void;
      setLightG(arg0: number): void;
      setLightHasBattery(arg0: boolean): void;
      setLightPower(arg0: number): void;
      setLightR(arg0: number): void;
      setLightStrength(arg0: number): void;
      setLightUseBattery(arg0: boolean): void;
      setMaxAmmo(arg0: number): void;
      setMaxCapacity(arg0: number): void;
      setMediaType(arg0: number): void;
      setMeltingTime(arg0: number): void;
      setMetalValue(arg0: number): void;
      setMinutesToBurn(arg0: number): void;
      setMinutesToCook(arg0: number): void;
      setModule(arg0: string): void;
      setName(arg0: string): void;
      setNewPlaceDir(arg0: zombie.iso.IsoDirections): void;
      setOffAge(arg0: number): void;
      setOffAgeMax(arg0: number): void;
      setOffString(arg0: string): void;
      setPlaceDir(arg0: zombie.iso.IsoDirections): void;
      setPreviousOwner(arg0: zombie.characters.IsoGameCharacter): void;
      setRecordedMediaData(arg0: zombie.radio.media.MediaData): void;
      setRecordedMediaIndex(arg0: number): void;
      setRecordedMediaIndexInteger(arg0: number): void;
      setReduceInfectionPower(arg0: number): void;
      setRegistry_id(arg0: zombie.scripting.objects.Item): void;
      setRemoteControlID(arg0: number): void;
      setRemoteController(arg0: boolean): void;
      setRemoteRange(arg0: number): void;
      setReplaceOnUse(arg0: string): void;
      setReplaceOnUseOn(arg0: string): void;
      setRequireInHandOrInventory(arg0: java.util.ArrayList<string>): void;
      setRightClickContainer(arg0: zombie.inventory.ItemContainer): void;
      setScriptItem(arg0: zombie.scripting.objects.Item): void;
      setStashChance(arg0: number): void;
      setStashMap(arg0: string): void;
      setStressChange(arg0: number): void;
      setSuspensionCompression(arg0: number): void;
      setSuspensionDamping(arg0: number): void;
      setTaintedWater(arg0: boolean): void;
      setTaken(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      setTexture(arg0: zombie.core.textures.Texture): void;
      setTextureBurnt(arg0: zombie.core.textures.Texture): void;
      setTextureCooked(arg0: zombie.core.textures.Texture): void;
      setTexturerotten(arg0: zombie.core.textures.Texture): void;
      setTooltip(arg0: string): void;
      setTorchCone(arg0: boolean): void;
      setType(arg0: string): void;
      setUnCookedString(arg0: string): void;
      setUnhappyChange(arg0: number): void;
      setUses(arg0: number): void;
      setWeight(arg0: number): void;
      setWet(arg0: boolean): void;
      setWetCooldown(arg0: number): void;
      setWheelFriction(arg0: number): void;
      setWorker(arg0: string): void;
      setWorldItem(arg0: zombie.iso.objects.IsoWorldInventoryObject): void;
      setWorldScale(arg0: number): void;
      setWorldSprite(arg0: string): void;
      setWorldTexture(arg0: string): void;
      setWorldZRotation(arg0: number): void;
      shouldUpdateInWorld(): boolean;
      storeInByteData(arg0: zombie.iso.IsoObject): void;
      synchWithVisual(): void;
      toString(): string;
      update(): void;
      updateAge(): void;
      updateSound(arg0: zombie.audio.BaseSoundEmitter): void;
      wait(arg0: number): void;
    }
    // zombie.inventory.types.Radio extends zombie.inventory.types.Moveable
    export class Radio {
      private constructor();
      CanStoreWater: boolean;
      CloseKillMove?: string;
      Cooked: boolean;
      IsWaterSource: boolean;
      ReplaceOnUseOn?: string;
      RequiresEquippedBothHands: boolean;
      byteData?: java.nio.ByteBuffer;
      col?: zombie.core.Color;
      extraItems?: java.util.ArrayList<string>;
      fatigueChange: number;
      id: number;
      jobDelta: number;
      jobType?: string;
      keepOnDeplete: boolean;
      mainCategory?: string;
      worldItem?: zombie.iso.objects.IsoWorldInventoryObject;
      worldScale: number;
      worldZRotation: number;
  
      AddDeviceText(arg0: zombie.characters.IsoPlayer, arg1: string, arg2: number, arg3: number, arg4: number, arg5: string, arg6: number): void;
      CanBeDroppedOnFloor(): boolean;
      CanStack(arg0: zombie.inventory.InventoryItem): boolean;
      CopyModData(arg0: se.krka.kahlua.vm.KahluaTable): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      HasPlayerInRange(): boolean;
      HowRotten(): number;
      IsClothing(): boolean;
      IsDrainable(): boolean;
      IsFood(): boolean;
      IsInventoryContainer(): boolean;
      IsLiterature(): boolean;
      IsMap(): boolean;
      IsRotten(): boolean;
      IsSpeaking(): boolean;
      IsWeapon(): boolean;
      ModDataMatches(arg0: zombie.inventory.InventoryItem): boolean;
      ReadFromWorldSprite(arg0: string): boolean;
      Say(arg0: string): void;
      SetContainerPosition(arg0: number, arg1: number): void;
      Use(arg0: boolean, arg1: boolean): void;
      UseItem(): void;
      addExtraItem(arg0: string): void;
      allowRandomTint(): boolean;
      canBeActivated(): boolean;
      canBeRemote(): boolean;
      canEmitLight(): boolean;
      canStoreWater(): boolean;
      copyConditionModData(arg0: zombie.inventory.InventoryItem): void;
      copyModData(arg0: se.krka.kahlua.vm.KahluaTable): void;
      doBuildingStash(): void;
      doReceiveSignal(arg0: number): void;
      equals(arg0: any): boolean;
      finishupdate(): boolean;
      getA(): number;
      getActualWeight(): number;
      getAge(): number;
      getAlcoholPower(): number;
      getAlternateModelName(): string;
      getAmmoType(): string;
      getAttachedSlot(): number;
      getAttachedSlotType(): string;
      getAttachedToModel(): string;
      getAttachmentReplacement(): string;
      getAttachmentType(): string;
      getAttachmentsProvided(): java.util.ArrayList<string>;
      getB(): number;
      getBandagePower(): number;
      getBlood(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getBloodClothingType(): java.util.ArrayList<zombie.characterTextures.BloodClothingType>;
      getBodyLocation(): string;
      getBoredomChange(): number;
      getBrakeForce(): number;
      getBreakSound(): string;
      getBringToBearSound(): string;
      getBurntString(): string;
      getByteData(): java.nio.ByteBuffer;
      getCat(): zombie.inventory.ItemType;
      getCategory(): string;
      getChanceToSpawnDamaged(): number;
      getClass(): java.lang.Class<any>;
      getCleanString(arg0: number): string;
      getClothingItem(): zombie.core.skinnedmodel.population.ClothingItem;
      getClothingItemExtra(): java.util.ArrayList<string>;
      getClothingItemExtraOption(): java.util.ArrayList<string>;
      getClothingItemName(): string;
      getColor(): zombie.core.Color;
      getColorBlue(): number;
      getColorGreen(): number;
      getColorInfo(): zombie.core.textures.ColorInfo;
      getColorRed(): number;
      getCondition(): number;
      getConditionLowerNormal(): number;
      getConditionLowerOffroad(): number;
      getConditionMax(): number;
      getConsolidateOption(): string;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerX(): number;
      getContainerY(): number;
      getContentsWeight(): number;
      getCookedString(): string;
      getCookingTime(): number;
      getCount(): number;
      getCountDownSound(): string;
      getCurrentAmmoCount(): number;
      getCurrentCondition(): number;
      getCurrentUses(): number;
      getCustomMenuOption(): string;
      getCustomNameFull(): string;
      getDelta(): number;
      getDescription(): string;
      getDeviceData(): zombie.radio.devices.DeviceData;
      getDirt(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getDisplayCategory(): string;
      getDisplayName(): string;
      getEatType(): string;
      getEngineLoudness(): number;
      getEquipParent(): zombie.characters.IsoGameCharacter;
      getEquipSound(): string;
      getEquippedWeight(): number;
      getEvolvedRecipeName(): string;
      getExplosionSound(): string;
      getExtraItems(): java.util.ArrayList<string>;
      getExtraItemsWeight(): number;
      getFabricType(): string;
      getFatigueChange(): number;
      getFillFromDispenserSound(): string;
      getFillFromTapSound(): string;
      getFullType(): string;
      getG(): number;
      getGunType(): string;
      getHaveBeenRepaired(): number;
      getHotbarEquippedWeight(): number;
      getID(): number;
      getIconsForTexture(): java.util.ArrayList<string>;
      getInvHeat(): number;
      getItemCapacity(): number;
      getItemHeat(): number;
      getItemReplacementPrimaryHand(): zombie.scripting.objects.ItemReplacement;
      getItemReplacementSecondHand(): zombie.scripting.objects.ItemReplacement;
      getItemWhenDry(): string;
      getJobDelta(): number;
      getJobType(): string;
      getKeyId(): number;
      getLastAged(): number;
      getLightB(): number;
      getLightBulbItem(): string;
      getLightDelta(): number;
      getLightDistance(): number;
      getLightG(): number;
      getLightPower(): number;
      getLightR(): number;
      getLightStrength(): number;
      getLuaCreate(): string;
      getMakeUpType(): string;
      getMaxAmmo(): number;
      getMaxCapacity(): number;
      getMechanicType(): number;
      getMediaData(): zombie.radio.media.MediaData;
      getMediaType(): number;
      getMeltingTime(): number;
      getMetalValue(): number;
      getMinutesToBurn(): number;
      getMinutesToCook(): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getModID(): string;
      getModName(): string;
      getModule(): string;
      getMovableFullName(): string;
      getName(): string;
      getNewPlaceDir(): zombie.iso.IsoDirections;
      getOffAge(): number;
      getOffAgeMax(): number;
      getOffString(): string;
      getOutermostContainer(): zombie.inventory.ItemContainer;
      getPlaceDir(): zombie.iso.IsoDirections;
      getPlayer(): zombie.characters.IsoPlayer;
      getPreviousOwner(): zombie.characters.IsoGameCharacter;
      getR(): number;
      getRecordedMediaIndex(): number;
      getReduceInfectionPower(): number;
      getRegistry_id(): number;
      getRemoteControlID(): number;
      getRemoteRange(): number;
      getReplaceOnUse(): string;
      getReplaceOnUseFullType(): string;
      getReplaceOnUseOn(): string;
      getReplaceOnUseOnString(): string;
      getRequireInHandOrInventory(): java.util.ArrayList<string>;
      getRightClickContainer(): zombie.inventory.ItemContainer;
      getSaveType(): number;
      getSayLine(): string;
      getScore(arg0: zombie.characters.SurvivorDesc): number;
      getScriptItem(): zombie.scripting.objects.Item;
      getSpriteGrid(): zombie.iso.sprite.IsoSpriteGrid;
      getSquare(): zombie.iso.IsoGridSquare;
      getStashChance(): number;
      getStaticModel(): string;
      getStressChange(): number;
      getStringItemType(): string;
      getSuspensionCompression(): number;
      getSuspensionDamping(): number;
      getSwingAnim(): string;
      getTags(): java.util.ArrayList<string>;
      getTaken(): java.util.ArrayList<zombie.iso.IsoObject>;
      getTalkerType(): string;
      getTex(): zombie.core.textures.Texture;
      getTexture(): zombie.core.textures.Texture;
      getTextureBurnt(): zombie.core.textures.Texture;
      getTextureCooked(): zombie.core.textures.Texture;
      getTexturerotten(): zombie.core.textures.Texture;
      getTooltip(): string;
      getTorchDot(): number;
      getType(): string;
      getUnCookedString(): string;
      getUnequipSound(): string;
      getUnequippedWeight(): number;
      getUnhappyChange(): number;
      getUses(): number;
      getVisual(): zombie.core.skinnedmodel.visual.ItemVisual;
      getWeight(): number;
      getWetCooldown(): number;
      getWheelFriction(): number;
      getWorker(): string;
      getWorldItem(): zombie.iso.objects.IsoWorldInventoryObject;
      getWorldSprite(): string;
      getWorldStaticItem(): string;
      getWorldTexture(): string;
      getX(): number;
      getY(): number;
      getZ(): number;
      hasBlood(): boolean;
      hasDirt(): boolean;
      hasModData(): boolean;
      hasTag(arg0: string): boolean;
      hashCode(): number;
      haveExtraItems(): boolean;
      initialiseItem(): void;
      isActivated(): boolean;
      isAlcoholic(): boolean;
      isAlwaysWelcomeGift(): boolean;
      isBeingFilled(): boolean;
      isBroken(): boolean;
      isBurnt(): boolean;
      isCanBandage(): boolean;
      isConditionAffectsCapacity(): boolean;
      isCookable(): boolean;
      isCooked(): boolean;
      isCustomColor(): boolean;
      isCustomName(): boolean;
      isCustomWeight(): boolean;
      isDisappearOnUse(): boolean;
      isEmittingLight(): boolean;
      isEquipped(): boolean;
      isEquippedNoSprint(): boolean;
      isFavorite(): boolean;
      isFishingLure(): boolean;
      isHairDye(): boolean;
      isHidden(): boolean;
      isInLocalPlayerInventory(): boolean;
      isInPlayerInventory(): boolean;
      isInfected(): boolean;
      isInitialised(): boolean;
      isIsCookable(): boolean;
      isLight(): boolean;
      isLightHasBattery(): boolean;
      isLightUseBattery(): boolean;
      isMultiGridAnchor(): boolean;
      isProtectFromRainWhileEquipped(): boolean;
      isRecordedMedia(): boolean;
      isRemoteController(): boolean;
      isRequiresEquippedBothHands(): boolean;
      isTaintedWater(): boolean;
      isTorchCone(): boolean;
      isTrap(): boolean;
      isTwoHandWeapon(): boolean;
      isUseWorldItem(): boolean;
      isVanilla(): boolean;
      isWaterSource(): boolean;
      isWet(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadItem(arg0: java.nio.ByteBuffer, arg1: number, arg2: boolean): zombie.inventory.InventoryItem;
      notify(): void;
      notifyAll(): void;
      render(): void;
      renderlast(): void;
      save(arg0: java.nio.ByteBuffer, arg1: boolean): void;
      saveWithSize(arg0: java.nio.ByteBuffer, arg1: boolean): void;
      setActivated(arg0: boolean): void;
      setActivatedRemote(arg0: boolean): void;
      setActualWeight(arg0: number): void;
      setAge(arg0: number): void;
      setAlcoholPower(arg0: number): void;
      setAlcoholic(arg0: boolean): void;
      setAmmoType(arg0: string): void;
      setAttachedSlot(arg0: number): void;
      setAttachedSlotType(arg0: string): void;
      setAttachedToModel(arg0: string): void;
      setAttachmentReplacement(arg0: string): void;
      setAttachmentType(arg0: string): void;
      setAttachmentsProvided(arg0: java.util.ArrayList<string>): void;
      setAutoAge(): void;
      setBandagePower(arg0: number): void;
      setBeingFilled(arg0: boolean): void;
      setBlood(arg0: zombie.characterTextures.BloodBodyPartType, arg1: number): void;
      setBloodClothingType(arg0: java.util.ArrayList<zombie.characterTextures.BloodClothingType>): void;
      setBoredomChange(arg0: number): void;
      setBrakeForce(arg0: number): void;
      setBreakSound(arg0: string): void;
      setBroken(arg0: boolean): void;
      setBurnt(arg0: boolean): void;
      setBurntString(arg0: string): void;
      setCanBeActivated(arg0: boolean): void;
      setCanBeRemote(arg0: boolean): void;
      setCat(arg0: zombie.inventory.ItemType): void;
      setChanceToSpawnDamaged(arg0: number): void;
      setColor(arg0: zombie.core.Color): void;
      setColorBlue(arg0: number): void;
      setColorGreen(arg0: number): void;
      setColorRed(arg0: number): void;
      setCondition(arg0: number, arg1: boolean): void;
      setConditionFromModData(arg0: zombie.inventory.InventoryItem): void;
      setConditionLowerNormal(arg0: number): void;
      setConditionLowerOffroad(arg0: number): void;
      setConditionMax(arg0: number): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setContainerX(arg0: number): void;
      setContainerY(arg0: number): void;
      setCooked(arg0: boolean): void;
      setCookedString(arg0: string): void;
      setCookingTime(arg0: number): void;
      setCount(arg0: number): void;
      setCountDownSound(arg0: string): void;
      setCurrentAmmoCount(arg0: number): void;
      setCustomColor(arg0: boolean): void;
      setCustomMenuOption(arg0: string): void;
      setCustomName(arg0: boolean): void;
      setCustomWeight(arg0: boolean): void;
      setDelta(arg0: number): void;
      setDescription(arg0: string): void;
      setDeviceData(arg0: zombie.radio.devices.DeviceData): void;
      setDirt(arg0: zombie.characterTextures.BloodBodyPartType, arg1: number): void;
      setDisplayCategory(arg0: string): void;
      setEngineLoudness(arg0: number): void;
      setEquipParent(arg0: zombie.characters.IsoGameCharacter): void;
      setEvolvedRecipeName(arg0: string): void;
      setExplosionSound(arg0: string): void;
      setFatigueChange(arg0: number): void;
      setFavorite(arg0: boolean): void;
      setGunType(arg0: string): void;
      setHaveBeenRepaired(arg0: number): void;
      setID(arg0: number): void;
      setIconsForTexture(arg0: java.util.ArrayList<string>): void;
      setInfected(arg0: boolean): void;
      setInitialised(arg0: boolean): void;
      setIsCookable(arg0: boolean): void;
      setIsWaterSource(arg0: boolean): void;
      setItemCapacity(arg0: number): void;
      setItemHeat(arg0: number): void;
      setItemWhenDry(arg0: string): void;
      setJobDelta(arg0: number): void;
      setJobType(arg0: string): void;
      setKeyId(arg0: number): void;
      setLastAged(arg0: number): void;
      setLight(arg0: boolean): void;
      setLightB(arg0: number): void;
      setLightBulbItem(arg0: string): void;
      setLightDelta(arg0: number): void;
      setLightDistance(arg0: number): void;
      setLightG(arg0: number): void;
      setLightHasBattery(arg0: boolean): void;
      setLightPower(arg0: number): void;
      setLightR(arg0: number): void;
      setLightStrength(arg0: number): void;
      setLightUseBattery(arg0: boolean): void;
      setMaxAmmo(arg0: number): void;
      setMaxCapacity(arg0: number): void;
      setMediaType(arg0: number): void;
      setMeltingTime(arg0: number): void;
      setMetalValue(arg0: number): void;
      setMinutesToBurn(arg0: number): void;
      setMinutesToCook(arg0: number): void;
      setModule(arg0: string): void;
      setName(arg0: string): void;
      setNewPlaceDir(arg0: zombie.iso.IsoDirections): void;
      setOffAge(arg0: number): void;
      setOffAgeMax(arg0: number): void;
      setOffString(arg0: string): void;
      setPlaceDir(arg0: zombie.iso.IsoDirections): void;
      setPreviousOwner(arg0: zombie.characters.IsoGameCharacter): void;
      setRecordedMediaData(arg0: zombie.radio.media.MediaData): void;
      setRecordedMediaIndex(arg0: number): void;
      setRecordedMediaIndexInteger(arg0: number): void;
      setReduceInfectionPower(arg0: number): void;
      setRegistry_id(arg0: zombie.scripting.objects.Item): void;
      setRemoteControlID(arg0: number): void;
      setRemoteController(arg0: boolean): void;
      setRemoteRange(arg0: number): void;
      setReplaceOnUse(arg0: string): void;
      setReplaceOnUseOn(arg0: string): void;
      setRequireInHandOrInventory(arg0: java.util.ArrayList<string>): void;
      setRightClickContainer(arg0: zombie.inventory.ItemContainer): void;
      setScriptItem(arg0: zombie.scripting.objects.Item): void;
      setStashChance(arg0: number): void;
      setStashMap(arg0: string): void;
      setStressChange(arg0: number): void;
      setSuspensionCompression(arg0: number): void;
      setSuspensionDamping(arg0: number): void;
      setTaintedWater(arg0: boolean): void;
      setTaken(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      setTexture(arg0: zombie.core.textures.Texture): void;
      setTextureBurnt(arg0: zombie.core.textures.Texture): void;
      setTextureCooked(arg0: zombie.core.textures.Texture): void;
      setTexturerotten(arg0: zombie.core.textures.Texture): void;
      setTooltip(arg0: string): void;
      setTorchCone(arg0: boolean): void;
      setType(arg0: string): void;
      setUnCookedString(arg0: string): void;
      setUnhappyChange(arg0: number): void;
      setUses(arg0: number): void;
      setWeight(arg0: number): void;
      setWet(arg0: boolean): void;
      setWetCooldown(arg0: number): void;
      setWheelFriction(arg0: number): void;
      setWorker(arg0: string): void;
      setWorldItem(arg0: zombie.iso.objects.IsoWorldInventoryObject): void;
      setWorldScale(arg0: number): void;
      setWorldSprite(arg0: string): void;
      setWorldTexture(arg0: string): void;
      setWorldZRotation(arg0: number): void;
      shouldUpdateInWorld(): boolean;
      storeInByteData(arg0: zombie.iso.IsoObject): void;
      synchWithVisual(): void;
      toString(): string;
      update(): void;
      updateAge(): void;
      updateSound(arg0: zombie.audio.BaseSoundEmitter): void;
      wait(arg0: number): void;
    }
    // zombie.inventory.types.WeaponPart extends zombie.inventory.InventoryItem
    export class WeaponPart {
      private constructor();
      CanStoreWater: boolean;
      CloseKillMove?: string;
      Cooked: boolean;
      IsWaterSource: boolean;
      ReplaceOnUseOn?: string;
      RequiresEquippedBothHands: boolean;
      static readonly TYPE_CANON?: string;
      static readonly TYPE_CLIP?: string;
      static readonly TYPE_RECOILPAD?: string;
      static readonly TYPE_SCOPE?: string;
      static readonly TYPE_SLING?: string;
      static readonly TYPE_STOCK?: string;
      byteData?: java.nio.ByteBuffer;
      col?: zombie.core.Color;
      extraItems?: java.util.ArrayList<string>;
      fatigueChange: number;
      id: number;
      jobDelta: number;
      jobType?: string;
      keepOnDeplete: boolean;
      mainCategory?: string;
      worldItem?: zombie.iso.objects.IsoWorldInventoryObject;
      worldScale: number;
      worldZRotation: number;
  
      CanStack(arg0: zombie.inventory.InventoryItem): boolean;
      CopyModData(arg0: se.krka.kahlua.vm.KahluaTable): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      HowRotten(): number;
      IsClothing(): boolean;
      IsDrainable(): boolean;
      IsFood(): boolean;
      IsInventoryContainer(): boolean;
      IsLiterature(): boolean;
      IsMap(): boolean;
      IsRotten(): boolean;
      IsWeapon(): boolean;
      ModDataMatches(arg0: zombie.inventory.InventoryItem): boolean;
      SetContainerPosition(arg0: number, arg1: number): void;
      Use(arg0: boolean, arg1: boolean): void;
      UseItem(): void;
      addExtraItem(arg0: string): void;
      allowRandomTint(): boolean;
      canBeActivated(): boolean;
      canBeRemote(): boolean;
      canEmitLight(): boolean;
      canStoreWater(): boolean;
      copyConditionModData(arg0: zombie.inventory.InventoryItem): void;
      copyModData(arg0: se.krka.kahlua.vm.KahluaTable): void;
      doBuildingStash(): void;
      equals(arg0: any): boolean;
      finishupdate(): boolean;
      getA(): number;
      getActualWeight(): number;
      getAge(): number;
      getAimingTime(): number;
      getAlcoholPower(): number;
      getAlternateModelName(): string;
      getAmmoType(): string;
      getAngle(): number;
      getAttachedSlot(): number;
      getAttachedSlotType(): string;
      getAttachedToModel(): string;
      getAttachmentReplacement(): string;
      getAttachmentType(): string;
      getAttachmentsProvided(): java.util.ArrayList<string>;
      getB(): number;
      getBandagePower(): number;
      getBlood(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getBloodClothingType(): java.util.ArrayList<zombie.characterTextures.BloodClothingType>;
      getBodyLocation(): string;
      getBoredomChange(): number;
      getBrakeForce(): number;
      getBreakSound(): string;
      getBringToBearSound(): string;
      getBurntString(): string;
      getByteData(): java.nio.ByteBuffer;
      getCat(): zombie.inventory.ItemType;
      getCategory(): string;
      getChanceToSpawnDamaged(): number;
      getClass(): java.lang.Class<any>;
      getCleanString(arg0: number): string;
      getClipSize(): number;
      getClothingItem(): zombie.core.skinnedmodel.population.ClothingItem;
      getClothingItemExtra(): java.util.ArrayList<string>;
      getClothingItemExtraOption(): java.util.ArrayList<string>;
      getClothingItemName(): string;
      getColor(): zombie.core.Color;
      getColorBlue(): number;
      getColorGreen(): number;
      getColorInfo(): zombie.core.textures.ColorInfo;
      getColorRed(): number;
      getCondition(): number;
      getConditionLowerNormal(): number;
      getConditionLowerOffroad(): number;
      getConditionMax(): number;
      getConsolidateOption(): string;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerX(): number;
      getContainerY(): number;
      getContentsWeight(): number;
      getCookedString(): string;
      getCookingTime(): number;
      getCount(): number;
      getCountDownSound(): string;
      getCurrentAmmoCount(): number;
      getCurrentCondition(): number;
      getCurrentUses(): number;
      getCustomMenuOption(): string;
      getDamage(): number;
      getDescription(): string;
      getDirt(arg0: zombie.characterTextures.BloodBodyPartType): number;
      getDisplayCategory(): string;
      getDisplayName(): string;
      getEatType(): string;
      getEngineLoudness(): number;
      getEquipParent(): zombie.characters.IsoGameCharacter;
      getEquipSound(): string;
      getEquippedWeight(): number;
      getEvolvedRecipeName(): string;
      getExplosionSound(): string;
      getExtraItems(): java.util.ArrayList<string>;
      getExtraItemsWeight(): number;
      getFabricType(): string;
      getFatigueChange(): number;
      getFillFromDispenserSound(): string;
      getFillFromTapSound(): string;
      getFullType(): string;
      getG(): number;
      getGunType(): string;
      getHaveBeenRepaired(): number;
      getHitChance(): number;
      getHotbarEquippedWeight(): number;
      getID(): number;
      getIconsForTexture(): java.util.ArrayList<string>;
      getInvHeat(): number;
      getItemCapacity(): number;
      getItemHeat(): number;
      getItemReplacementPrimaryHand(): zombie.scripting.objects.ItemReplacement;
      getItemReplacementSecondHand(): zombie.scripting.objects.ItemReplacement;
      getItemWhenDry(): string;
      getJobDelta(): number;
      getJobType(): string;
      getKeyId(): number;
      getLastAged(): number;
      getLightDistance(): number;
      getLightStrength(): number;
      getLuaCreate(): string;
      getMakeUpType(): string;
      getMaxAmmo(): number;
      getMaxCapacity(): number;
      getMaxRange(): number;
      getMechanicType(): number;
      getMediaData(): zombie.radio.media.MediaData;
      getMediaType(): number;
      getMeltingTime(): number;
      getMetalValue(): number;
      getMinRangeRanged(): number;
      getMinutesToBurn(): number;
      getMinutesToCook(): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getModID(): string;
      getModName(): string;
      getModule(): string;
      getMountOn(): java.util.ArrayList<string>;
      getName(): string;
      getNewPlaceDir(): zombie.iso.IsoDirections;
      getOffAge(): number;
      getOffAgeMax(): number;
      getOffString(): string;
      getOutermostContainer(): zombie.inventory.ItemContainer;
      getPartType(): string;
      getPlaceDir(): zombie.iso.IsoDirections;
      getPreviousOwner(): zombie.characters.IsoGameCharacter;
      getR(): number;
      getRecoilDelay(): number;
      getRecordedMediaIndex(): number;
      getReduceInfectionPower(): number;
      getRegistry_id(): number;
      getReloadTime(): number;
      getRemoteControlID(): number;
      getRemoteRange(): number;
      getReplaceOnUse(): string;
      getReplaceOnUseFullType(): string;
      getReplaceOnUseOn(): string;
      getReplaceOnUseOnString(): string;
      getRequireInHandOrInventory(): java.util.ArrayList<string>;
      getRightClickContainer(): zombie.inventory.ItemContainer;
      getSaveType(): number;
      getScore(arg0: zombie.characters.SurvivorDesc): number;
      getScriptItem(): zombie.scripting.objects.Item;
      getStashChance(): number;
      getStaticModel(): string;
      getStressChange(): number;
      getStringItemType(): string;
      getSuspensionCompression(): number;
      getSuspensionDamping(): number;
      getSwingAnim(): string;
      getTags(): java.util.ArrayList<string>;
      getTaken(): java.util.ArrayList<zombie.iso.IsoObject>;
      getTex(): zombie.core.textures.Texture;
      getTexture(): zombie.core.textures.Texture;
      getTextureBurnt(): zombie.core.textures.Texture;
      getTextureCooked(): zombie.core.textures.Texture;
      getTexturerotten(): zombie.core.textures.Texture;
      getTooltip(): string;
      getTorchDot(): number;
      getType(): string;
      getUnCookedString(): string;
      getUnequipSound(): string;
      getUnequippedWeight(): number;
      getUnhappyChange(): number;
      getUses(): number;
      getVisual(): zombie.core.skinnedmodel.visual.ItemVisual;
      getWeight(): number;
      getWeightModifier(): number;
      getWetCooldown(): number;
      getWheelFriction(): number;
      getWorker(): string;
      getWorldItem(): zombie.iso.objects.IsoWorldInventoryObject;
      getWorldStaticItem(): string;
      getWorldTexture(): string;
      hasBlood(): boolean;
      hasDirt(): boolean;
      hasModData(): boolean;
      hasTag(arg0: string): boolean;
      hashCode(): number;
      haveExtraItems(): boolean;
      initialiseItem(): void;
      isActivated(): boolean;
      isAlcoholic(): boolean;
      isAlwaysWelcomeGift(): boolean;
      isBeingFilled(): boolean;
      isBroken(): boolean;
      isBurnt(): boolean;
      isCanBandage(): boolean;
      isConditionAffectsCapacity(): boolean;
      isCookable(): boolean;
      isCooked(): boolean;
      isCustomColor(): boolean;
      isCustomName(): boolean;
      isCustomWeight(): boolean;
      isDisappearOnUse(): boolean;
      isEmittingLight(): boolean;
      isEquipped(): boolean;
      isEquippedNoSprint(): boolean;
      isFavorite(): boolean;
      isFishingLure(): boolean;
      isHairDye(): boolean;
      isHidden(): boolean;
      isInLocalPlayerInventory(): boolean;
      isInPlayerInventory(): boolean;
      isInfected(): boolean;
      isInitialised(): boolean;
      isIsCookable(): boolean;
      isProtectFromRainWhileEquipped(): boolean;
      isRecordedMedia(): boolean;
      isRemoteController(): boolean;
      isRequiresEquippedBothHands(): boolean;
      isTaintedWater(): boolean;
      isTorchCone(): boolean;
      isTrap(): boolean;
      isTwoHandWeapon(): boolean;
      isUseWorldItem(): boolean;
      isVanilla(): boolean;
      isWaterSource(): boolean;
      isWet(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadItem(arg0: java.nio.ByteBuffer, arg1: number, arg2: boolean): zombie.inventory.InventoryItem;
      notify(): void;
      notifyAll(): void;
      save(arg0: java.nio.ByteBuffer, arg1: boolean): void;
      saveWithSize(arg0: java.nio.ByteBuffer, arg1: boolean): void;
      setActivated(arg0: boolean): void;
      setActivatedRemote(arg0: boolean): void;
      setActualWeight(arg0: number): void;
      setAge(arg0: number): void;
      setAimingTime(arg0: number): void;
      setAlcoholPower(arg0: number): void;
      setAlcoholic(arg0: boolean): void;
      setAmmoType(arg0: string): void;
      setAngle(arg0: number): void;
      setAttachedSlot(arg0: number): void;
      setAttachedSlotType(arg0: string): void;
      setAttachedToModel(arg0: string): void;
      setAttachmentReplacement(arg0: string): void;
      setAttachmentType(arg0: string): void;
      setAttachmentsProvided(arg0: java.util.ArrayList<string>): void;
      setAutoAge(): void;
      setBandagePower(arg0: number): void;
      setBeingFilled(arg0: boolean): void;
      setBlood(arg0: zombie.characterTextures.BloodBodyPartType, arg1: number): void;
      setBloodClothingType(arg0: java.util.ArrayList<zombie.characterTextures.BloodClothingType>): void;
      setBoredomChange(arg0: number): void;
      setBrakeForce(arg0: number): void;
      setBreakSound(arg0: string): void;
      setBroken(arg0: boolean): void;
      setBurnt(arg0: boolean): void;
      setBurntString(arg0: string): void;
      setCanBeActivated(arg0: boolean): void;
      setCanBeRemote(arg0: boolean): void;
      setCat(arg0: zombie.inventory.ItemType): void;
      setChanceToSpawnDamaged(arg0: number): void;
      setClipSize(arg0: number): void;
      setColor(arg0: zombie.core.Color): void;
      setColorBlue(arg0: number): void;
      setColorGreen(arg0: number): void;
      setColorRed(arg0: number): void;
      setCondition(arg0: number, arg1: boolean): void;
      setConditionFromModData(arg0: zombie.inventory.InventoryItem): void;
      setConditionLowerNormal(arg0: number): void;
      setConditionLowerOffroad(arg0: number): void;
      setConditionMax(arg0: number): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setContainerX(arg0: number): void;
      setContainerY(arg0: number): void;
      setCooked(arg0: boolean): void;
      setCookedString(arg0: string): void;
      setCookingTime(arg0: number): void;
      setCount(arg0: number): void;
      setCountDownSound(arg0: string): void;
      setCurrentAmmoCount(arg0: number): void;
      setCustomColor(arg0: boolean): void;
      setCustomMenuOption(arg0: string): void;
      setCustomName(arg0: boolean): void;
      setCustomWeight(arg0: boolean): void;
      setDamage(arg0: number): void;
      setDescription(arg0: string): void;
      setDirt(arg0: zombie.characterTextures.BloodBodyPartType, arg1: number): void;
      setDisplayCategory(arg0: string): void;
      setEngineLoudness(arg0: number): void;
      setEquipParent(arg0: zombie.characters.IsoGameCharacter): void;
      setEvolvedRecipeName(arg0: string): void;
      setExplosionSound(arg0: string): void;
      setFatigueChange(arg0: number): void;
      setFavorite(arg0: boolean): void;
      setGunType(arg0: string): void;
      setHaveBeenRepaired(arg0: number): void;
      setHitChance(arg0: number): void;
      setID(arg0: number): void;
      setIconsForTexture(arg0: java.util.ArrayList<string>): void;
      setInfected(arg0: boolean): void;
      setInitialised(arg0: boolean): void;
      setIsCookable(arg0: boolean): void;
      setIsWaterSource(arg0: boolean): void;
      setItemCapacity(arg0: number): void;
      setItemHeat(arg0: number): void;
      setItemWhenDry(arg0: string): void;
      setJobDelta(arg0: number): void;
      setJobType(arg0: string): void;
      setKeyId(arg0: number): void;
      setLastAged(arg0: number): void;
      setLightDistance(arg0: number): void;
      setLightStrength(arg0: number): void;
      setMaxAmmo(arg0: number): void;
      setMaxCapacity(arg0: number): void;
      setMaxRange(arg0: number): void;
      setMediaType(arg0: number): void;
      setMeltingTime(arg0: number): void;
      setMetalValue(arg0: number): void;
      setMinRangeRanged(arg0: number): void;
      setMinutesToBurn(arg0: number): void;
      setMinutesToCook(arg0: number): void;
      setModule(arg0: string): void;
      setMountOn(arg0: java.util.ArrayList<string>): void;
      setName(arg0: string): void;
      setNewPlaceDir(arg0: zombie.iso.IsoDirections): void;
      setOffAge(arg0: number): void;
      setOffAgeMax(arg0: number): void;
      setOffString(arg0: string): void;
      setPartType(arg0: string): void;
      setPlaceDir(arg0: zombie.iso.IsoDirections): void;
      setPreviousOwner(arg0: zombie.characters.IsoGameCharacter): void;
      setRecoilDelay(arg0: number): void;
      setRecordedMediaData(arg0: zombie.radio.media.MediaData): void;
      setRecordedMediaIndex(arg0: number): void;
      setRecordedMediaIndexInteger(arg0: number): void;
      setReduceInfectionPower(arg0: number): void;
      setRegistry_id(arg0: zombie.scripting.objects.Item): void;
      setReloadTime(arg0: number): void;
      setRemoteControlID(arg0: number): void;
      setRemoteController(arg0: boolean): void;
      setRemoteRange(arg0: number): void;
      setReplaceOnUse(arg0: string): void;
      setReplaceOnUseOn(arg0: string): void;
      setRequireInHandOrInventory(arg0: java.util.ArrayList<string>): void;
      setRightClickContainer(arg0: zombie.inventory.ItemContainer): void;
      setScriptItem(arg0: zombie.scripting.objects.Item): void;
      setStashChance(arg0: number): void;
      setStashMap(arg0: string): void;
      setStressChange(arg0: number): void;
      setSuspensionCompression(arg0: number): void;
      setSuspensionDamping(arg0: number): void;
      setTaintedWater(arg0: boolean): void;
      setTaken(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      setTexture(arg0: zombie.core.textures.Texture): void;
      setTextureBurnt(arg0: zombie.core.textures.Texture): void;
      setTextureCooked(arg0: zombie.core.textures.Texture): void;
      setTexturerotten(arg0: zombie.core.textures.Texture): void;
      setTooltip(arg0: string): void;
      setTorchCone(arg0: boolean): void;
      setType(arg0: string): void;
      setUnCookedString(arg0: string): void;
      setUnhappyChange(arg0: number): void;
      setUses(arg0: number): void;
      setWeight(arg0: number): void;
      setWeightModifier(arg0: number): void;
      setWet(arg0: boolean): void;
      setWetCooldown(arg0: number): void;
      setWheelFriction(arg0: number): void;
      setWorker(arg0: string): void;
      setWorldItem(arg0: zombie.iso.objects.IsoWorldInventoryObject): void;
      setWorldScale(arg0: number): void;
      setWorldTexture(arg0: string): void;
      setWorldZRotation(arg0: number): void;
      shouldUpdateInWorld(): boolean;
      storeInByteData(arg0: zombie.iso.IsoObject): void;
      synchWithVisual(): void;
      toString(): string;
      update(): void;
      updateAge(): void;
      updateSound(arg0: zombie.audio.BaseSoundEmitter): void;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.inventory.types.WeaponType */
    export class WeaponType {
      /* ENUM VALUES */
      static readonly barehand: WeaponType; 
      static readonly chainsaw: WeaponType; 
      static readonly firearm: WeaponType; 
      static readonly handgun: WeaponType; 
      static readonly heavy: WeaponType; 
      static readonly knife: WeaponType; 
      static readonly onehanded: WeaponType; 
      static readonly spear: WeaponType; 
      static readonly throwing: WeaponType; 
      static readonly twohanded: WeaponType; 
  
      /* FIELDS */
      canMiss: boolean;
      isRanged: boolean;
      possibleAttack?: java.util.List<string>;
      type?: string;
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.inventory.types.WeaponType[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): WeaponType;
      getType(): string;
      getWeaponType(arg0: zombie.inventory.types.HandWeapon): zombie.inventory.types.WeaponType;
      valueOf(arg0: string): zombie.inventory.types.WeaponType;
      values(): zombie.inventory.types.WeaponType[];
    }
  }
  export namespace zombie.iso {
    // zombie.iso.BentFences extends java.lang.Object
    export class BentFences {
      private constructor();
      Reset(): void;
      addFenceTiles(arg0: number, arg1: se.krka.kahlua.j2se.KahluaTableImpl): void;
      bendFence(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoDirections): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getInstance(): zombie.iso.BentFences;
      hashCode(): number;
      isBentObject(arg0: zombie.iso.IsoObject): boolean;
      isUnbentObject(arg0: zombie.iso.IsoObject): boolean;
      notify(): void;
      notifyAll(): void;
      swapTiles(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoDirections): void;
      toString(): string;
      unbendFence(arg0: zombie.iso.IsoObject): void;
      wait(arg0: number): void;
    }
    // zombie.iso.BrokenFences extends java.lang.Object
    export class BrokenFences {
      private constructor();
      Reset(): void;
      addBrokenTiles(arg0: se.krka.kahlua.j2se.KahluaTableImpl): void;
      addDebrisTiles(arg0: se.krka.kahlua.j2se.KahluaTableImpl): void;
      destroyFence(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoDirections): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getInstance(): zombie.iso.BrokenFences;
      hashCode(): number;
      isBreakableObject(arg0: zombie.iso.IsoObject): boolean;
      notify(): void;
      notifyAll(): void;
      setDamagedLeft(arg0: zombie.iso.IsoObject): void;
      setDamagedRight(arg0: zombie.iso.IsoObject): void;
      setDestroyed(arg0: zombie.iso.IsoObject): void;
      toString(): string;
      updateSprite(arg0: zombie.iso.IsoObject, arg1: boolean, arg2: boolean): void;
      wait(arg0: number): void;
    }
    // zombie.iso.BuildingDef extends java.lang.Object
    export class BuildingDef {
      private constructor();
      bAlarmed: boolean;
      readonly emptyoutside?: java.util.ArrayList<zombie.iso.RoomDef>;
      food: number;
      hasBeenVisited: boolean;
      itemTypes?: java.util.HashSet<string>;
      items?: java.util.ArrayList<zombie.inventory.InventoryItem>;
      lootRespawnHour: number;
      overlappedChunks?: gnu.trove.list.array.TShortArrayList;
      readonly rooms?: java.util.ArrayList<zombie.iso.RoomDef>;
      seen: boolean;
      stash?: string;
      table?: se.krka.kahlua.vm.KahluaTable;
      x: number;
      x2: number;
      y: number;
      y2: number;
      zone?: zombie.iso.IsoMetaGrid$Zone;
  
      CalculateBounds(arg0: java.util.ArrayList<zombie.iso.RoomDef>): void;
      Dispose(): void;
      containsRoom(arg0: string): boolean;
      equals(arg0: any): boolean;
      getChunkX(): number;
      getChunkY(): number;
      getClass(): java.lang.Class<any>;
      getFirstRoom(): zombie.iso.RoomDef;
      getFreeSquareInRoom(): zombie.iso.IsoGridSquare;
      getH(): number;
      getID(): number;
      getKeyId(): number;
      getKeySpawned(): number;
      getRandomRoom(arg0: number): zombie.iso.RoomDef;
      getRoom(arg0: string): zombie.iso.RoomDef;
      getRooms(): java.util.ArrayList<zombie.iso.RoomDef>;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getW(): number;
      getX(): number;
      getX2(): number;
      getY(): number;
      getY2(): number;
      getZone(): zombie.iso.IsoMetaGrid$Zone;
      hashCode(): number;
      isAlarmed(): boolean;
      isAllExplored(): boolean;
      isFullyStreamedIn(): boolean;
      isHasBeenVisited(): boolean;
      notify(): void;
      notifyAll(): void;
      overlapsChunk(arg0: number, arg1: number): boolean;
      recalculate(): void;
      refreshSquares(): void;
      setAlarmed(arg0: boolean): void;
      setAllExplored(arg0: boolean): void;
      setHasBeenVisited(arg0: boolean): void;
      setKeyId(arg0: number): void;
      setKeySpawned(arg0: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.ContainerOverlays extends java.lang.Object
    export class ContainerOverlays {
      private constructor();
      static readonly instance?: zombie.iso.ContainerOverlays;
  
      Reset(): void;
      addOverlays(arg0: se.krka.kahlua.j2se.KahluaTableImpl): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hasOverlays(arg0: zombie.iso.IsoObject): boolean;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      updateContainerOverlaySprite(arg0: zombie.iso.IsoObject): void;
      wait(arg0: number): void;
    }
    // zombie.iso.Helicopter extends java.lang.Object
    export class Helicopter {
      private constructor();
      target?: zombie.characters.IsoGameCharacter;
      x: number;
      y: number;
  
      clientSync(arg0: number, arg1: number, arg2: boolean): void;
      deactivate(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      isActive(): boolean;
      notify(): void;
      notifyAll(): void;
      pickRandomTarget(): void;
      setTarget(arg0: zombie.characters.IsoGameCharacter): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.iso.IsoCamera extends java.lang.Object
    export class IsoCamera {
      private constructor();
      static CamCharacter?: zombie.characters.IsoGameCharacter;
      static FakePos?: zombie.iso.Vector2;
      static FakePosVec?: zombie.iso.Vector2;
      static PLAYER_OFFSET_X: number;
      static PLAYER_OFFSET_Y: number;
      static TargetTileX: number;
      static TargetTileY: number;
      static readonly cameras?: zombie.iso.PlayerCamera[];
      static readonly frameState?: zombie.iso.IsoCamera$FrameState;
  
      SetCharacterToFollow(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      getCamCharacter(): zombie.characters.IsoGameCharacter;
      getClass(): java.lang.Class<any>;
      getFakePos(): zombie.iso.Vector2;
      getFakePosVec(): zombie.iso.Vector2;
      getLastOffX(): number;
      getLastOffY(): number;
      getOffX(): number;
      getOffY(): number;
      getOffscreenHeight(arg0: number): number;
      getOffscreenLeft(arg0: number): number;
      getOffscreenTop(arg0: number): number;
      getOffscreenWidth(arg0: number): number;
      getRightClickOffX(): number;
      getRightClickOffY(): number;
      getScreenHeight(arg0: number): number;
      getScreenLeft(arg0: number): number;
      getScreenTop(arg0: number): number;
      getScreenWidth(arg0: number): number;
      getTOffX(): number;
      getTOffY(): number;
      getTargetTileX(): number;
      getTargetTileY(): number;
      hashCode(): number;
      init(): void;
      notify(): void;
      notifyAll(): void;
      setCamCharacter(arg0: zombie.characters.IsoGameCharacter): void;
      setFakePos(arg0: zombie.iso.Vector2): void;
      setFakePosVec(arg0: zombie.iso.Vector2): void;
      setLastOffX(arg0: number): void;
      setLastOffY(arg0: number): void;
      setOffX(arg0: number): void;
      setOffY(arg0: number): void;
      setTargetTileX(arg0: number): void;
      setTargetTileY(arg0: number): void;
      toString(): string;
      update(): void;
      updateAll(): void;
      wait(arg0: number): void;
    }
    // zombie.iso.IsoCamera$FrameState extends java.lang.Object
    export class IsoCamera$FrameState {
      private constructor();
      CamCharacter?: zombie.characters.IsoGameCharacter;
      CamCharacterRoom?: zombie.iso.areas.IsoRoom;
      CamCharacterSquare?: zombie.iso.IsoGridSquare;
      CamCharacterX: number;
      CamCharacterY: number;
      CamCharacterZ: number;
      OffX: number;
      OffY: number;
      OffscreenHeight: number;
      OffscreenWidth: number;
      Paused: boolean;
      frameCount: number;
      playerIndex: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      set(arg0: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.IsoCell extends java.lang.Object
    export class IsoCell {
      private constructor();
      readonly BuildingList?: java.util.ArrayList<zombie.iso.areas.IsoBuilding>;
      readonly ChunkMap?: zombie.iso.IsoChunkMap[];
      DangerScore?: zombie.core.utils.IntGrid;
      DeferredCharacterTick: number;
      static readonly ENABLE_SQUARE_CACHE: boolean;
      static readonly ISOANGLEFACTOR: number;
      static MaxHeight: number;
      readonly ProcessWorldItemsRemove?: java.util.ArrayList<zombie.iso.objects.IsoWorldInventoryObject>;
      static readonly RTF_MinusFloorCharacters: number;
      static readonly RTF_ShadedFloor: number;
      static readonly RTF_Shadows: number;
      static readonly RTF_SolidFloor: number;
      static readonly RTF_VegetationCorpses: number;
      StencilX1: number;
      StencilX2: number;
      StencilY1: number;
      StencilY2: number;
      Trees?: java.util.ArrayList<zombie.iso.IsoGridSquare>;
      readonly addVehicles?: java.util.ArrayList<zombie.vehicles.BaseVehicle>;
      bRendering: boolean;
      static readonly perPlayerRender?: zombie.iso.IsoCell$PerPlayerRender[];
      recalcFloors: boolean;
      readonly roomLights?: java.util.ArrayList<zombie.iso.IsoRoomLight>;
      readonly vehicles?: java.util.ArrayList<zombie.vehicles.BaseVehicle>;
  
      CalculateVertColoursForTile(arg0: zombie.iso.IsoGridSquare, arg1: number, arg2: number, arg3: number, arg4: number): void;
      CanBuildingSquareOccludePlayer(arg0: zombie.iso.IsoGridSquare, arg1: number): boolean;
      ConnectNewSquare(arg0: zombie.iso.IsoGridSquare, arg1: boolean): zombie.iso.IsoGridSquare;
      DeleteAllMovingObjects(): void;
      Dispose(): void;
      DistanceFromSupport(arg0: number, arg1: number, arg2: number): number;
      DoBuilding(arg0: number, arg1: boolean): boolean;
      DoGridNav(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare$GetSquare): void;
      DrawStencilMask(): void;
      EnsureSurroundNotNull(arg0: number, arg1: number, arg2: number): void;
      FromMouseTile(): zombie.iso.IsoDirections;
      GetEffectivePlayerRoomId(): number;
      IsPlayerWindowPeeking(arg0: number): boolean;
      LoadPlayer(arg0: number): boolean;
      PlaceLot(arg0: zombie.iso.IsoLot, arg1: number, arg2: number, arg3: number, arg4: zombie.iso.IsoChunk, arg5: number, arg6: number): void;
      ProcessSpottedRooms(): void;
      Remove(arg0: zombie.iso.IsoMovingObject): void;
      RenderFloorShading(arg0: number): void;
      RenderTiles(arg0: number): void;
      addHeatSource(arg0: zombie.iso.IsoHeatSource): void;
      addLamppost(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): zombie.iso.IsoLightSource;
      addMovingObject(arg0: zombie.iso.IsoMovingObject): void;
      addToProcessIsoObject(arg0: zombie.iso.IsoObject): void;
      addToProcessIsoObjectRemove(arg0: zombie.iso.IsoObject): void;
      addToProcessItems(arg0: java.util.ArrayList<zombie.inventory.InventoryItem>): void;
      addToProcessItemsRemove(arg0: zombie.inventory.InventoryItem): void;
      addToProcessWorldItems(arg0: zombie.iso.objects.IsoWorldInventoryObject): void;
      addToProcessWorldItemsRemove(arg0: zombie.iso.objects.IsoWorldInventoryObject): void;
      addToStaticUpdaterObjectList(arg0: zombie.iso.IsoObject): void;
      addToWindowList(arg0: zombie.iso.objects.IsoWindow): void;
      blocked(arg0: zombie.ai.astar.Mover, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
      checkHaveRoof(arg0: number, arg1: number): void;
      clearCacheGridSquare(arg0: number): void;
      createNewGridSquare(arg0: number, arg1: number, arg2: number, arg3: boolean): zombie.iso.IsoGridSquare;
      equals(arg0: any): boolean;
      getAddList(): java.util.ArrayList<zombie.iso.IsoMovingObject>;
      getBComponent(arg0: number): number;
      getBestBuildings(arg0: zombie.iso.IsoCell$BuildingSearchCriteria, arg1: number): java.util.Stack<zombie.iso.areas.BuildingScore>;
      getBuildingList(): java.util.ArrayList<zombie.iso.areas.IsoBuilding>;
      getBuildingScores(): java.util.HashMap<number, zombie.iso.areas.BuildingScore>;
      getBuildings(): java.util.Stack<zombie.iso.areas.BuildingScore>;
      getChunk(arg0: number, arg1: number): zombie.iso.IsoChunk;
      getChunkForGridSquare(arg0: number, arg1: number, arg2: number): zombie.iso.IsoChunk;
      getChunkMap(arg0: number): zombie.iso.IsoChunkMap;
      getClass(): java.lang.Class<any>;
      getClosestBuildingExcept(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.areas.IsoRoom): zombie.iso.areas.IsoBuilding;
      getCurrentLightX(): number;
      getCurrentLightY(): number;
      getCurrentLightZ(): number;
      getCurrentLotHeader(): zombie.iso.LotHeader;
      getDangerScore(arg0: number, arg1: number): number;
      getDangerUpdate(): zombie.core.utils.OnceEvery;
      getDrag(arg0: number): se.krka.kahlua.vm.KahluaTable;
      getFakeZombieForHit(): zombie.characters.IsoZombie;
      getFreeTile(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getGComponent(arg0: number): number;
      getGridSquare(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getGridSquareDirect(arg0: number, arg1: number, arg2: number, arg3: number): zombie.iso.IsoGridSquare;
      getHeatSourceHighestTemperature(arg0: number, arg1: number, arg2: number, arg3: number): number;
      getHeatSourceTemperature(arg0: number, arg1: number, arg2: number): number;
      getHeight(): number;
      getHeightInTiles(): number;
      getInstance(): zombie.iso.IsoCell;
      getLamppostPositions(): java.util.Stack<zombie.iso.IsoLightSource>;
      getLightInfoUpdate(): java.lang.Thread;
      getLightSourceAt(arg0: number, arg1: number, arg2: number): zombie.iso.IsoLightSource;
      getLuaObjectList(): se.krka.kahlua.vm.KahluaTable;
      getMaxFloors(): number;
      getMaxHeight(): number;
      getMaxX(): number;
      getMaxY(): number;
      getMaxZ(): number;
      getMinX(): number;
      getMinY(): number;
      getMinZ(): number;
      getNearestVisibleZombie(arg0: number): zombie.characters.IsoZombie;
      getNetworkPlayer(arg0: number): zombie.characters.IsoSurvivor;
      getObjectList(): java.util.ArrayList<zombie.iso.IsoMovingObject>;
      getOrCreateGridSquare(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getProcessIsoObjectRemove(): java.util.ArrayList<zombie.iso.IsoObject>;
      getProcessIsoObjects(): java.util.ArrayList<zombie.iso.IsoObject>;
      getProcessItems(): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getProcessItemsRemove(): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getProcessWorldItems(): java.util.ArrayList<zombie.iso.objects.IsoWorldInventoryObject>;
      getPushableObjectList(): java.util.ArrayList<zombie.iso.IsoPushableObject>;
      getRComponent(arg0: number): number;
      getRandomFreeTileInRoom(): zombie.iso.IsoGridSquare;
      getRandomOutdoorTile(): zombie.iso.IsoGridSquare;
      getRelativeGridSquare(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getRemoteSurvivorList(): java.util.ArrayList<zombie.characters.IsoGameCharacter>;
      getRemoveList(): java.util.ArrayList<zombie.iso.IsoMovingObject>;
      getRoom(arg0: number): zombie.iso.areas.IsoRoom;
      getRoomList(): java.util.ArrayList<zombie.iso.areas.IsoRoom>;
      getSpriteManager(): zombie.iso.sprite.IsoSpriteManager;
      getStaticUpdaterObjectList(): java.util.ArrayList<zombie.iso.IsoObject>;
      getStencilValue(arg0: number, arg1: number, arg2: number): number;
      getStencilValue2z(arg0: number, arg1: number, arg2: number): number;
      getSurvivorList(): java.util.ArrayList<zombie.characters.IsoSurvivor>;
      getVehicles(): java.util.ArrayList<zombie.vehicles.BaseVehicle>;
      getWeatherFX(): zombie.iso.weather.fx.IsoWeatherFX;
      getWidth(): number;
      getWidthInTiles(): number;
      getWindowList(): java.util.ArrayList<zombie.iso.objects.IsoWindow>;
      getWorldX(): number;
      getWorldY(): number;
      getZombieList(): java.util.ArrayList<zombie.characters.IsoZombie>;
      gridSquareIsSnow(arg0: number, arg1: number, arg2: number): boolean;
      hashCode(): number;
      invalidatePeekedRoom(arg0: number): void;
      isInChunkMap(arg0: number, arg1: number): boolean;
      isNull(arg0: number, arg1: number, arg2: number): boolean;
      isSafeToAdd(): boolean;
      notify(): void;
      notifyAll(): void;
      putInVehicle(arg0: zombie.characters.IsoGameCharacter): void;
      reloadRainTextures(): void;
      removeFromWindowList(arg0: zombie.iso.objects.IsoWindow): void;
      removeHeatSource(arg0: zombie.iso.IsoHeatSource): void;
      removeLamppost(arg0: number, arg1: number, arg2: number): void;
      render(): void;
      resumeVehicleSounds(arg0: zombie.characters.IsoGameCharacter): void;
      roomSpotted(arg0: zombie.iso.areas.IsoRoom): void;
      save(arg0: java.io.DataOutputStream, arg1: boolean): void;
      savePlayer(): void;
      setBuildings(arg0: java.util.Stack<zombie.iso.areas.BuildingScore>): void;
      setCacheChunk(arg0: zombie.iso.IsoChunk): void;
      setCacheGridSquare(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoGridSquare): void;
      setCacheGridSquareLocal(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoGridSquare, arg4: number): void;
      setCurrentLightX(arg0: number): void;
      setCurrentLightY(arg0: number): void;
      setCurrentLightZ(arg0: number): void;
      setDangerUpdate(arg0: zombie.core.utils.OnceEvery): void;
      setDrag(arg0: se.krka.kahlua.vm.KahluaTable, arg1: number): void;
      setHeight(arg0: number): void;
      setLightInfoUpdate(arg0: java.lang.Thread): void;
      setMaxX(arg0: number): void;
      setMaxY(arg0: number): void;
      setMaxZ(arg0: number): void;
      setMinX(arg0: number): void;
      setMinY(arg0: number): void;
      setMinZ(arg0: number): void;
      setRainAlpha(arg0: number): void;
      setRainIntensity(arg0: number): void;
      setRainSpeed(arg0: number): void;
      setSafeToAdd(arg0: boolean): void;
      setSnowTarget(arg0: number): void;
      setStencilValue(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setStencilValue2z(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setWidth(arg0: number): void;
      setWorldX(arg0: number): void;
      setWorldY(arg0: number): void;
      toIntColor(arg0: number, arg1: number, arg2: number, arg3: number): number;
      toString(): string;
      update(): void;
      updateHeatSources(): void;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.iso.IsoCell$BuildingSearchCriteria */
    export class IsoCell$BuildingSearchCriteria {
      /* ENUM VALUES */
      static readonly Defense: IsoCell$BuildingSearchCriteria; 
      static readonly Food: IsoCell$BuildingSearchCriteria; 
      static readonly General: IsoCell$BuildingSearchCriteria; 
      static readonly Weapons: IsoCell$BuildingSearchCriteria; 
      static readonly Wood: IsoCell$BuildingSearchCriteria; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.iso.IsoCell$BuildingSearchCriteria[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): IsoCell$BuildingSearchCriteria;
      valueOf(arg0: string): zombie.iso.IsoCell$BuildingSearchCriteria;
      values(): zombie.iso.IsoCell$BuildingSearchCriteria[];
    }
    // zombie.iso.IsoCell$PerPlayerRender extends java.lang.Object
    export class IsoCell$PerPlayerRender {
      private constructor();
      FlattenGrassEtc?: boolean[][];
      readonly GridStacks?: zombie.iso.IsoGridStack;
      StencilValues?: number[][][];
      VisiCulledFlags?: boolean[][];
      VisiOccludedFlags?: boolean[][][];
      maxX: number;
      maxY: number;
      minX: number;
      minY: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      setSize(arg0: number, arg1: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.IsoChunk extends java.lang.Object
    export class IsoChunk {
      private constructor();
      readonly FloorBloodSplats?: zombie.core.utils.BoundedQueue<zombie.iso.IsoFloorBloodSplat>;
      readonly FloorBloodSplatsFade?: java.util.ArrayList<zombie.iso.IsoFloorBloodSplat>;
      ObjectsSyncCount: number;
      readonly SoundList?: java.util.ArrayList<zombie.WorldSoundManager$WorldSound>;
      static readonly WriteLock?: any;
      static bDoServerRequests: boolean;
      readonly bLightingNeverDone?: boolean[];
      bLoaded: boolean;
      readonly collision?: zombie.vehicles.CollideWithObstaclesPoly$ChunkData;
      corpseData?: zombie.FliesSound$ChunkData;
      jobType?: zombie.iso.IsoChunk$JobType;
      readonly lightCheck?: boolean[];
      static readonly loadGridSquare?: java.util.concurrent.ConcurrentLinkedQueue<zombie.iso.IsoChunk>;
      lootRespawnHour: number;
      lotheader?: zombie.iso.LotHeader;
      m_adjacentChunkLoadedCounter: number;
      m_loadVehiclesObject?: any;
      m_vehicleStorySpawnData?: zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawnData;
      maxLevel: number;
      readonly nearestWalls?: zombie.iso.NearestWalls$ChunkData;
      next?: zombie.iso.IsoChunk;
      randomID: number;
      readonly refs?: java.util.ArrayList<zombie.iso.IsoChunkMap>;
      static readonly renderByIndex?: number[][];
      revision: number;
      readonly roomLights?: java.util.ArrayList<zombie.iso.IsoRoomLight>;
      readonly squares?: zombie.iso.IsoGridSquare[][];
      readonly vehicles?: java.util.ArrayList<zombie.vehicles.BaseVehicle>;
      vehiclesForAddToWorld?: java.util.ArrayList<zombie.vehicles.BaseVehicle>;
      readonly vehiclesForAddToWorldLock?: any;
      wx: number;
      wy: number;
  
      AddBlood(arg0: number, arg1: number): void;
      AddCorpses(arg0: number, arg1: number): void;
      AddVehicles(): void;
      Blam(arg0: number, arg1: number): void;
      FileExists(arg0: number, arg1: number): boolean;
      Fix2x(arg0: zombie.iso.IsoGridSquare, arg1: number): number;
      IsDebugSave(): boolean;
      LoadBrandNew(arg0: number, arg1: number): boolean;
      LoadFromBuffer(arg0: number, arg1: number, arg2: java.nio.ByteBuffer): boolean;
      LoadFromDisk(): void;
      LoadFromDiskOrBuffer(arg0: java.nio.ByteBuffer): void;
      LoadOrCreate(arg0: number, arg1: number, arg2: java.nio.ByteBuffer): boolean;
      RandomizeModel(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: string, arg3: zombie.vehicles.VehicleType): boolean;
      Reset(): void;
      SafeRead(arg0: string, arg1: number, arg2: number, arg3: java.nio.ByteBuffer): java.nio.ByteBuffer;
      SafeWrite(arg0: string, arg1: number, arg2: number, arg3: java.nio.ByteBuffer): void;
      Save(arg0: boolean): void;
      SaveLoadedChunk(arg0: zombie.network.ClientChunkRequest$Chunk, arg1: java.util.zip.CRC32): void;
      addBloodSplat(arg0: number, arg1: number, arg2: number, arg3: number): void;
      addFromCheckedVehicles(arg0: zombie.vehicles.BaseVehicle): void;
      addGeneratorPos(arg0: number, arg1: number, arg2: number): void;
      addRandomCarCrash(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: boolean): void;
      addSpawnedRoom(arg0: number): void;
      addSurvivorInHorde(arg0: boolean): void;
      canAddRandomCarCrash(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: boolean): boolean;
      checkForMissingGenerators(): void;
      doLoadGridsquare(): void;
      doReuseGridsquares(): void;
      doSpawnedVehiclesInInvalidPosition(arg0: zombie.vehicles.BaseVehicle): boolean;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getErosionData(): zombie.erosion.ErosionData$Chunk;
      getGridSquare(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getHashCodeObjects(): number;
      getNumberOfWaterTiles(): number;
      getRoom(arg0: number): zombie.iso.areas.IsoRoom;
      getScavengeZone(): zombie.iso.IsoMetaGrid$Zone;
      hashCode(): number;
      hashCodeNoOverride(): number;
      isGeneratorPoweringSquare(arg0: number, arg1: number, arg2: number): boolean;
      isNewChunk(): boolean;
      isSpawnedRoom(arg0: number): boolean;
      loadInMainThread(): void;
      loadInWorldStreamerThread(): void;
      loadObjectState(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      recalcHashCodeObjects(): void;
      recalcNeighboursNow(): void;
      removeFromCheckedVehicles(arg0: zombie.vehicles.BaseVehicle): void;
      removeFromWorld(): void;
      removeGeneratorPos(arg0: number, arg1: number, arg2: number): void;
      resetForStore(): void;
      saveObjectState(arg0: java.nio.ByteBuffer): boolean;
      setCache(): void;
      setCacheIncludingNull(): void;
      setRandomVehicleStoryToSpawnLater(arg0: zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawnData): void;
      setSquare(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoGridSquare): void;
      toString(): string;
      update(): void;
      updateBuildings(): void;
      updatePlayerInBullet(): void;
      updateSounds(): void;
      updateVehicleStory(): void;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.iso.IsoChunk$JobType */
    export class IsoChunk$JobType {
      /* ENUM VALUES */
      static readonly Convert: IsoChunk$JobType; 
      static readonly None: IsoChunk$JobType; 
      static readonly SoftReset: IsoChunk$JobType; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.iso.IsoChunk$JobType[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): IsoChunk$JobType;
      valueOf(arg0: string): zombie.iso.IsoChunk$JobType;
      values(): zombie.iso.IsoChunk$JobType[];
    }
    // zombie.iso.IsoChunkMap extends java.lang.Object
    export class IsoChunkMap {
      private constructor();
      static ChunkGridWidth: number;
      static ChunkWidthInTiles: number;
      static readonly ChunksPerWidth: number;
      static readonly LEVELS: number;
      static MPWorldXA: number;
      static MPWorldYA: number;
      static MPWorldZA: number;
      PlayerID: number;
      static readonly SWorldX?: number[];
      static readonly SWorldY?: number[];
      static readonly SharedChunks?: java.util.HashMap<number, zombie.iso.IsoChunk>;
      WorldX: number;
      static WorldXA: number;
      WorldY: number;
      static WorldYA: number;
      static WorldZA: number;
      static readonly bSettingChunk?: java.util.concurrent.locks.ReentrantLock;
      static readonly chunkStore?: java.util.concurrent.ConcurrentLinkedQueue<zombie.iso.IsoChunk>;
      readonly filenameServerRequests?: java.util.ArrayList<string>;
      ignore: boolean;
  
      CalcChunkWidth(): void;
      Dispose(): void;
      LoadChunk(arg0: number, arg1: number, arg2: number, arg3: number): void;
      LoadChunkForLater(arg0: number, arg1: number, arg2: number, arg3: number): zombie.iso.IsoChunk;
      ProcessChunkPos(arg0: zombie.characters.IsoGameCharacter): void;
      Save(): void;
      SwapChunkBuffers(): void;
      Unload(): void;
      checkIntegrity(): void;
      checkIntegrityThread(): void;
      copy(arg0: zombie.iso.IsoChunkMap): void;
      drawDebugChunkMap(): void;
      equals(arg0: any): boolean;
      getChunk(arg0: number, arg1: number): zombie.iso.IsoChunk;
      getChunkCurrent(arg0: number, arg1: number): zombie.iso.IsoChunk;
      getChunkForGridSquare(arg0: number, arg1: number): zombie.iso.IsoChunk;
      getClass(): java.lang.Class<any>;
      getGridSquare(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getGridSquareDirect(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getRoom(arg0: number): zombie.iso.areas.IsoRoom;
      getWidthInTiles(): number;
      getWorldXMaxTiles(): number;
      getWorldXMin(): number;
      getWorldXMinTiles(): number;
      getWorldYMaxTiles(): number;
      getWorldYMin(): number;
      getWorldYMinTiles(): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      processAllLoadGridSquare(): void;
      renderBloodForChunks(arg0: number): void;
      setChunkDirect(arg0: zombie.iso.IsoChunk, arg1: boolean): boolean;
      setGridSquare(arg0: zombie.iso.IsoGridSquare, arg1: number, arg2: number, arg3: number): void;
      setInitialPos(arg0: number, arg1: number): void;
      setWorldStartPos(arg0: number, arg1: number): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.iso.IsoDirectionSet extends java.lang.Object
    export class IsoDirectionSet {
      private constructor();
      set: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getNext(): zombie.iso.IsoDirections;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      rotate(arg0: zombie.iso.IsoDirections, arg1: number): zombie.iso.IsoDirections;
      toString(): string;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.iso.IsoDirections */
    export class IsoDirections {
      /* ENUM VALUES */
      static readonly E: IsoDirections; 
      static readonly Max: IsoDirections; 
      static readonly N: IsoDirections; 
      static readonly NE: IsoDirections; 
      static readonly NW: IsoDirections; 
      static readonly S: IsoDirections; 
      static readonly SE: IsoDirections; 
      static readonly SW: IsoDirections; 
      static readonly W: IsoDirections; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.iso.IsoDirections[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): IsoDirections;
      RotLeft(arg0: zombie.iso.IsoDirections): zombie.iso.IsoDirections;
      RotRight(arg0: zombie.iso.IsoDirections): zombie.iso.IsoDirections;
      ToVector(): zombie.iso.Vector2;
      cardinalFromAngle(arg0: zombie.iso.Vector2): zombie.iso.IsoDirections;
      fromAngle(arg0: number, arg1: number): zombie.iso.IsoDirections;
      fromAngleActual(arg0: zombie.iso.Vector2): zombie.iso.IsoDirections;
      fromIndex(arg0: number): zombie.iso.IsoDirections;
      generateTables(): void;
      getRandom(): zombie.iso.IsoDirections;
      index(): number;
      reverse(arg0: zombie.iso.IsoDirections): zombie.iso.IsoDirections;
      toAngle(): number;
      toCompassString(): string;
      valueOf(arg0: string): zombie.iso.IsoDirections;
      values(): zombie.iso.IsoDirections[];
    }
    // zombie.iso.IsoFloorBloodSplat extends java.lang.Object
    export class IsoFloorBloodSplat {
      private constructor();
      static readonly FADE_HOURS: number;
      static FloorBloodTypes?: string[];
      static SpriteMap?: java.util.HashMap<string, zombie.iso.sprite.IsoSprite>;
      Type: number;
      fade: number;
      index: number;
      worldAge: number;
      x: number;
      y: number;
      z: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      notify(): void;
      notifyAll(): void;
      save(arg0: java.nio.ByteBuffer): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.IsoGridOcclusionData extends java.lang.Object
    export class IsoGridOcclusionData {
      private constructor();
      static readonly MAXBUILDINGOCCLUDERS: number;
  
      Reset(): void;
      SquareChanged(): void;
      equals(arg0: any): boolean;
      getBuildingsCouldBeOccluders(arg0: zombie.iso.IsoGridOcclusionData$OcclusionFilter): java.util.ArrayList<zombie.iso.areas.IsoBuilding>;
      getClass(): java.lang.Class<any>;
      getCouldBeOccludedByOrphanStructures(arg0: zombie.iso.IsoGridOcclusionData$OcclusionFilter): boolean;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.iso.IsoGridOcclusionData$OccluderType */
    export class IsoGridOcclusionData$OccluderType {
      /* ENUM VALUES */
      static readonly Full: IsoGridOcclusionData$OccluderType; 
      static readonly NotFull: IsoGridOcclusionData$OccluderType; 
      static readonly Unknown: IsoGridOcclusionData$OccluderType; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.iso.IsoGridOcclusionData$OccluderType[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): IsoGridOcclusionData$OccluderType;
      valueOf(arg0: string): zombie.iso.IsoGridOcclusionData$OccluderType;
      values(): zombie.iso.IsoGridOcclusionData$OccluderType[];
    }
    /** [ENUM] zombie.iso.IsoGridOcclusionData$OcclusionFilter */
    export class IsoGridOcclusionData$OcclusionFilter {
      /* ENUM VALUES */
      static readonly All: IsoGridOcclusionData$OcclusionFilter; 
      static readonly Left: IsoGridOcclusionData$OcclusionFilter; 
      static readonly Right: IsoGridOcclusionData$OcclusionFilter; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.iso.IsoGridOcclusionData$OcclusionFilter[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): IsoGridOcclusionData$OcclusionFilter;
      valueOf(arg0: string): zombie.iso.IsoGridOcclusionData$OcclusionFilter;
      values(): zombie.iso.IsoGridOcclusionData$OcclusionFilter[];
    }
    // zombie.iso.IsoGridSquare extends java.lang.Object
    export class IsoGridSquare {
      private constructor();
      CachedScreenX: number;
      CachedScreenY: number;
      static CircleStencil: boolean;
      ID?: number;
      static IDMax: number;
      ObjectsSyncCount: number;
      static RecalcLightTime: number;
      SolidFloor: boolean;
      SolidFloorCached: boolean;
      static USE_WALL_SHADER: boolean;
      static UseSlowCollision: boolean;
      static readonly WALL_TYPE_E: number;
      static readonly WALL_TYPE_N: number;
      static readonly WALL_TYPE_S: number;
      static readonly WALL_TYPE_W: number;
      bFlattenGrassEtc: boolean;
      static bmod: number;
      static readonly cellGetSquare?: zombie.iso.IsoGridSquare$CellGetSquare;
      static readonly choices?: java.util.ArrayList<zombie.iso.IsoGridSquare>;
      chunk?: zombie.iso.IsoChunk;
      collideMatrix: number;
      e?: zombie.iso.IsoGridSquare;
      static gmod: number;
      static gridSquareCacheEmptyTimer: number;
      hashCodeObjects: number;
      haveRoof: boolean;
      haveSheetRope: boolean;
      hourLastSeen: number;
      isExteriorCache: boolean;
      static isOnScreenLast: boolean;
      isSolidFloorCache: boolean;
      isVegitationCache: boolean;
      static readonly isoGridSquareCache?: java.util.concurrent.ConcurrentLinkedQueue<zombie.iso.IsoGridSquare>;
      readonly lighting?: zombie.iso.IsoGridSquare$ILighting[];
      static loadGridSquareCache?: java.util.ArrayDeque<zombie.iso.IsoGridSquare>;
      n?: zombie.iso.IsoGridSquare;
      readonly nav?: zombie.iso.IsoGridSquare[];
      ne?: zombie.iso.IsoGridSquare;
      nw?: zombie.iso.IsoGridSquare;
      pathMatrix: number;
      propertiesDirty: boolean;
      static rmod: number;
      roofHideBuilding?: zombie.iso.areas.IsoBuilding;
      room?: zombie.iso.areas.IsoRoom;
      roomID: number;
      s?: zombie.iso.IsoGridSquare;
      se?: zombie.iso.IsoGridSquare;
      sw?: zombie.iso.IsoGridSquare;
      visionMatrix: number;
      w?: zombie.iso.IsoGridSquare;
      x: number;
      y: number;
      z: number;
      zone?: zombie.iso.IsoMetaGrid$Zone;
  
      AddSpecialObject(arg0: zombie.iso.IsoObject, arg1: number): void;
      AddSpecialTileObject(arg0: zombie.iso.IsoObject): void;
      AddStairs(arg0: boolean, arg1: number, arg2: string, arg3: string, arg4: se.krka.kahlua.vm.KahluaTable): zombie.iso.objects.IsoThumpable;
      AddTileObject(arg0: zombie.iso.IsoObject): void;
      AddWorldInventoryItem(arg0: zombie.inventory.InventoryItem, arg1: number, arg2: number, arg3: number): zombie.inventory.InventoryItem;
      Burn(arg0: boolean): void;
      BurnTick(): void;
      BurnWalls(arg0: boolean): void;
      BurnWallsTCOnly(): void;
      CalcVisibility(arg0: number): void;
      CalculateCollide(arg0: zombie.iso.IsoGridSquare, arg1: boolean, arg2: boolean, arg3: boolean, arg4: boolean, arg5: zombie.iso.IsoGridSquare$GetSquare): boolean;
      CalculateVisionBlocked(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare$GetSquare): boolean;
      ClearTileObjects(): void;
      ClearTileObjectsExceptFloor(): void;
      DeleteTileObject(arg0: zombie.iso.IsoObject): void;
      DirtySlice(): void;
      DistTo(arg0: zombie.iso.IsoMovingObject): number;
      DistToProper(arg0: zombie.iso.IsoMovingObject): number;
      DoCutawayShader(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoDirections, arg2: boolean, arg3: boolean, arg4: boolean, arg5: boolean, arg6: boolean, arg7: boolean, arg8: boolean, arg9: zombie.iso.sprite.shapers.WallShaperWhole): void;
      DoCutawayShaderSprite(arg0: zombie.iso.sprite.IsoSprite, arg1: zombie.iso.IsoDirections, arg2: boolean, arg3: boolean, arg4: boolean): void;
      DoSplat(arg0: string, arg1: boolean, arg2: zombie.iso.SpriteDetails.IsoFlagType, arg3: number, arg4: number, arg5: number): void;
      DoWallLightingN(arg0: zombie.iso.IsoObject, arg1: number, arg2: boolean, arg3: boolean, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): number;
      DoWallLightingNW(arg0: zombie.iso.IsoObject, arg1: number, arg2: boolean, arg3: boolean, arg4: boolean, arg5: boolean, arg6: boolean, arg7: boolean, arg8: boolean, arg9: zombie.core.opengl.Shader): number;
      DoWallLightingW(arg0: zombie.iso.IsoObject, arg1: number, arg2: boolean, arg3: boolean, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): number;
      EnsureSurroundNotNull(): void;
      FindEnemy(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: java.util.ArrayList<zombie.iso.IsoMovingObject>): zombie.characters.IsoGameCharacter;
      FindFriend(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: java.util.Stack<zombie.characters.IsoGameCharacter>): zombie.characters.IsoGameCharacter;
      FixStackableObjects(): void;
      Has(arg0: zombie.iso.SpriteDetails.IsoObjectType): boolean;
      HasElevatedFloor(): boolean;
      HasPushable(): boolean;
      HasSlopedRoof(): boolean;
      HasSlopedRoofNorth(): boolean;
      HasSlopedRoofWest(): boolean;
      HasStairs(): boolean;
      HasStairsBelow(): boolean;
      HasStairsNorth(): boolean;
      HasStairsWest(): boolean;
      HasTree(): boolean;
      InvalidateSpecialObjectPaths(): void;
      Is(arg0: string): boolean;
      IsOnScreen(): boolean;
      ReCalculateCollide(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare$GetSquare): void;
      ReCalculatePathFind(arg0: zombie.iso.IsoGridSquare): void;
      ReCalculateVisionBlocked(arg0: zombie.iso.IsoGridSquare): void;
      RecalcAllWithNeighbours(arg0: boolean, arg1: zombie.iso.IsoGridSquare$GetSquare): void;
      RecalcAllWithNeighboursMineOnly(): void;
      RecalcProperties(): void;
      RecalcPropertiesIfNeeded(): void;
      RemoveTileObject(arg0: zombie.iso.IsoObject): number;
      RemoveTileObjectErosionNoRecalc(arg0: zombie.iso.IsoObject): number;
      RenderMinusFloorFxMask(arg0: number, arg1: boolean, arg2: boolean): boolean;
      RenderOpenDoorOnly(): void;
      ResetIsoWorldRegion(): void;
      StartFire(): void;
      TreatAsSolidFloor(): boolean;
      addBrokenGlass(): zombie.iso.objects.IsoBrokenGlass;
      addCorpse(arg0: zombie.iso.objects.IsoDeadBody, arg1: boolean): void;
      addDeferredCharacter(arg0: zombie.characters.IsoGameCharacter): void;
      addFloor(arg0: string): zombie.iso.IsoObject;
      auth(arg0: string, arg1: string[]): boolean;
      checkRoomSeen(arg0: number): void;
      clearPuddles(): void;
      clearWater(): void;
      connectedWithFloor(): boolean;
      damageSpriteSheetRopeFromBottom(arg0: zombie.characters.IsoPlayer, arg1: boolean): boolean;
      disableErosion(): void;
      discard(): void;
      drawCircleExplosion(arg0: number, arg1: zombie.iso.objects.IsoTrap, arg2: zombie.iso.objects.IsoTrap$ExplosionMode): void;
      equals(arg0: any): boolean;
      explode(): void;
      explodeTrap(): void;
      explosion(arg0: zombie.iso.objects.IsoTrap): void;
      getAdjacentPathSquare(arg0: zombie.iso.IsoDirections): zombie.iso.IsoGridSquare;
      getAdjacentSquare(arg0: zombie.iso.IsoDirections): zombie.iso.IsoGridSquare;
      getApparentZ(arg0: number, arg1: number): number;
      getBedTo(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      getBrokenGlass(): zombie.iso.objects.IsoBrokenGlass;
      getBuilding(): zombie.iso.areas.IsoBuilding;
      getCanSee(arg0: number): boolean;
      getCell(): zombie.iso.IsoCell;
      getChunk(): zombie.iso.IsoChunk;
      getClass(): java.lang.Class<any>;
      getCollideMatrix(arg0: number, arg1: number, arg2: number): boolean;
      getCompost(): zombie.iso.objects.IsoCompost;
      getContainerItem(arg0: string): zombie.iso.IsoObject;
      getCurtain(arg0: zombie.iso.SpriteDetails.IsoObjectType): zombie.iso.objects.IsoCurtain;
      getDarkMulti(arg0: number): number;
      getDarkStep(): number;
      getDeadBody(): zombie.iso.objects.IsoDeadBody;
      getDeadBodys(): java.util.List<zombie.iso.objects.IsoDeadBody>;
      getDefColorInfo(): zombie.core.textures.ColorInfo;
      getDeferedCharacters(): java.util.ArrayList<zombie.characters.IsoGameCharacter>;
      getDoor(arg0: boolean): zombie.iso.IsoObject;
      getDoorFrameTo(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      getDoorOrWindow(arg0: boolean): zombie.iso.IsoObject;
      getDoorOrWindowOrWindowFrame(arg0: zombie.iso.IsoDirections, arg1: boolean): zombie.iso.IsoObject;
      getDoorTo(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      getE(): zombie.iso.IsoGridSquare;
      getErosionData(): zombie.erosion.ErosionData$Square;
      getFloor(): zombie.iso.IsoObject;
      getGenerator(): zombie.iso.objects.IsoGenerator;
      getGridSneakModifier(arg0: boolean): number;
      getHasTypes(): zombie.ZomboidBitFlag;
      getHashCodeObjects(): number;
      getHashCodeObjectsInt(): number;
      getHoppable(arg0: boolean): zombie.iso.IsoObject;
      getHoppableThumpable(arg0: boolean): zombie.iso.objects.IsoThumpable;
      getHoppableThumpableTo(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoThumpable;
      getHoppableTo(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      getHoppableWall(arg0: boolean): zombie.iso.IsoObject;
      getHourLastSeen(): number;
      getHoursSinceLastSeen(): number;
      getID(): number;
      getIsDissolved(arg0: number, arg1: number): boolean;
      getIsoDoor(): zombie.iso.objects.IsoDoor;
      getIsoWorldRegion(): zombie.iso.areas.isoregion.regions.IWorldRegion;
      getLampostTotalB(): number;
      getLampostTotalG(): number;
      getLampostTotalR(): number;
      getLightInfluenceB(): java.util.ArrayList<number>;
      getLightInfluenceG(): java.util.ArrayList<number>;
      getLightInfluenceR(): java.util.ArrayList<number>;
      getLightLevel(arg0: number): number;
      getLightcache(): number;
      getLocalTemporaryObjects(): zombie.util.list.PZArrayList<zombie.iso.IsoObject>;
      getLuaMovingObjectList(): se.krka.kahlua.vm.KahluaTable;
      getLuaTileObjectList(): se.krka.kahlua.vm.KahluaTable;
      getMatrixBit(arg0: number, arg1: number, arg2: number, arg3: number): boolean;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getMovingObjects(): java.util.ArrayList<zombie.iso.IsoMovingObject>;
      getN(): zombie.iso.IsoGridSquare;
      getNew(arg0: zombie.iso.IsoCell, arg1: zombie.iso.SliceY, arg2: number, arg3: number, arg4: number): zombie.iso.IsoGridSquare;
      getObjects(): zombie.util.list.PZArrayList<zombie.iso.IsoObject>;
      getOcclusionData(): zombie.iso.IsoGridOcclusionData;
      getOpenDoor(arg0: zombie.iso.IsoDirections): zombie.iso.IsoObject;
      getOrCreateOcclusionData(): zombie.iso.IsoGridOcclusionData;
      getPathMatrix(arg0: number, arg1: number, arg2: number): boolean;
      getPlayer(): zombie.characters.IsoPlayer;
      getPlayerBuiltFloor(): zombie.iso.IsoObject;
      getPlayerCutawayFlag(arg0: number, arg1: number): boolean;
      getProperties(): zombie.core.properties.PropertyContainer;
      getPuddles(): zombie.iso.IsoPuddlesGeometry;
      getPuddlesDir(): number;
      getPuddlesInGround(): number;
      getRainDrop(): zombie.iso.objects.IsoRaindrop;
      getRainSplash(): zombie.iso.objects.IsoRainSplash;
      getRecalcLightTime(): number;
      getRoofHideBuilding(): zombie.iso.areas.IsoBuilding;
      getRoom(): zombie.iso.areas.IsoRoom;
      getRoomID(): number;
      getRoomSize(): number;
      getS(): zombie.iso.IsoGridSquare;
      getSeen(arg0: number): boolean;
      getSheetRope(): zombie.iso.IsoObject;
      getSpecialObjects(): java.util.ArrayList<zombie.iso.IsoObject>;
      getSquaresForThread(arg0: java.util.ArrayDeque<zombie.iso.IsoGridSquare>, arg1: number): void;
      getStaticMovingObjects(): java.util.ArrayList<zombie.iso.IsoMovingObject>;
      getTargetDarkMulti(arg0: number): number;
      getThumpableWall(arg0: boolean): zombie.iso.IsoObject;
      getThumpableWallOrHoppable(arg0: boolean): zombie.iso.IsoObject;
      getThumpableWindow(arg0: boolean): zombie.iso.objects.IsoThumpable;
      getTileInDirection(arg0: zombie.iso.IsoDirections): zombie.iso.IsoGridSquare;
      getTotalWeightOfItemsOnFloor(): number;
      getTransparentWallTo(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      getTrapPositionX(): number;
      getTrapPositionY(): number;
      getTrapPositionZ(): number;
      getTree(): zombie.iso.objects.IsoTree;
      getVehicleContainer(): zombie.vehicles.BaseVehicle;
      getVertLight(arg0: number, arg1: number): number;
      getVisionMatrix(arg0: number, arg1: number, arg2: number): boolean;
      getW(): zombie.iso.IsoGridSquare;
      getWall(arg0: boolean): zombie.iso.IsoObject;
      getWallFull(): boolean;
      getWallHoppable(arg0: boolean): zombie.iso.IsoObject;
      getWallHoppableTo(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      getWallSE(): zombie.iso.IsoObject;
      getWallType(): number;
      getWater(): zombie.iso.IsoWaterGeometry;
      getWindow(arg0: boolean): zombie.iso.objects.IsoWindow;
      getWindowFrame(arg0: boolean): zombie.iso.IsoObject;
      getWindowFrameTo(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      getWindowThumpableTo(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoThumpable;
      getWindowTo(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      getWorldObjects(): java.util.ArrayList<zombie.iso.objects.IsoWorldInventoryObject>;
      getX(): number;
      getY(): number;
      getZ(): number;
      getZombie(): zombie.characters.IsoZombie;
      getZone(): zombie.iso.IsoMetaGrid$Zone;
      getZoneType(): string;
      hasBlockedDoor(arg0: boolean): boolean;
      hasBlockedWindow(arg0: boolean): boolean;
      hasFlies(): boolean;
      hasFloor(arg0: boolean): boolean;
      hasModData(): boolean;
      hasSupport(): boolean;
      hasWindowFrame(): boolean;
      hasWindowOrWindowFrame(): boolean;
      hashCode(): number;
      hashCodeNoOverride(): number;
      haveBlood(): boolean;
      haveDoor(): boolean;
      haveElectricity(): boolean;
      haveFire(): boolean;
      interpolateLight(arg0: zombie.core.textures.ColorInfo, arg1: number, arg2: number): void;
      isAdjacentToWindow(): boolean;
      isBlockedTo(arg0: zombie.iso.IsoGridSquare): boolean;
      isCacheIsFree(): boolean;
      isCachedIsFree(): boolean;
      isCanSee(arg0: number): boolean;
      isCommonGrass(): boolean;
      isCouldSee(arg0: number): boolean;
      isDoorBlockedTo(arg0: zombie.iso.IsoGridSquare): boolean;
      isDoorTo(arg0: zombie.iso.IsoGridSquare): boolean;
      isFree(arg0: boolean): boolean;
      isFreeOrMidair(arg0: boolean, arg1: boolean): boolean;
      isHoppableTo(arg0: zombie.iso.IsoGridSquare): boolean;
      isInARoom(): boolean;
      isNotBlocked(arg0: boolean): boolean;
      isOutside(): boolean;
      isOverlayDone(): boolean;
      isSafeToSpawn(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      isSameStaircase(arg0: number, arg1: number, arg2: number): boolean;
      isSeen(arg0: number): boolean;
      isSolid(): boolean;
      isSolidFloor(): boolean;
      isSolidFloorCached(): boolean;
      isSolidTrans(): boolean;
      isSomethingTo(arg0: zombie.iso.IsoGridSquare): boolean;
      isVehicleIntersecting(): boolean;
      isWallTo(arg0: zombie.iso.IsoGridSquare): boolean;
      isWindowBlockedTo(arg0: zombie.iso.IsoGridSquare): boolean;
      isWindowTo(arg0: zombie.iso.IsoGridSquare): boolean;
      isbDoSlowPathfinding(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number, arg2: boolean): void;
      notify(): void;
      notifyAll(): void;
      placeWallAndDoorCheck(arg0: zombie.iso.IsoObject, arg1: number): number;
      playSound(arg0: string, arg1: boolean): number;
      recalcHashCodeObjects(): void;
      removeAllWorldObjects(): void;
      removeBlood(arg0: boolean, arg1: boolean): void;
      removeCorpse(arg0: zombie.iso.objects.IsoDeadBody, arg1: boolean): void;
      removeErosionObject(arg0: string): void;
      removeSheetRopeFromBottom(arg0: zombie.characters.IsoPlayer, arg1: boolean): boolean;
      removeWorldObject(arg0: zombie.iso.objects.IsoWorldInventoryObject): void;
      renderCharacters(arg0: number, arg1: boolean, arg2: boolean): void;
      renderDeferredCharacters(arg0: number): void;
      restackSheetRope(): void;
      save(arg0: java.nio.ByteBuffer, arg1: java.io.ObjectOutputStream, arg2: boolean): void;
      scoreAsWaypoint(arg0: number, arg1: number): number;
      setCacheIsFree(arg0: boolean): void;
      setCachedIsFree(arg0: boolean): void;
      setCanSee(arg0: number, arg1: boolean): void;
      setCollisionMode(): void;
      setCouldSee(arg0: number, arg1: boolean): void;
      setDarkMulti(arg0: number, arg1: number): void;
      setDarkStep(arg0: number): void;
      setE(arg0: zombie.iso.IsoGridSquare): void;
      setHasFlies(arg0: boolean): void;
      setHaveElectricity(arg0: boolean): void;
      setHourSeenToCurrent(): void;
      setID(arg0: number): void;
      setIsDissolved(arg0: number, arg1: boolean, arg2: number): void;
      setIsSeen(arg0: number, arg1: boolean): void;
      setIsoWorldRegion(arg0: zombie.iso.areas.isoregion.regions.IsoWorldRegion): void;
      setLampostTotalB(arg0: number): void;
      setLampostTotalG(arg0: number): void;
      setLampostTotalR(arg0: number): void;
      setLightInfluenceB(arg0: java.util.ArrayList<number>): void;
      setLightInfluenceG(arg0: java.util.ArrayList<number>): void;
      setLightInfluenceR(arg0: java.util.ArrayList<number>): void;
      setLightInfoServerGUIOnly(arg0: zombie.core.textures.ColorInfo): void;
      setLightcache(arg0: number): void;
      setMatrixBit(arg0: number, arg1: number, arg2: number, arg3: number, arg4: boolean): number;
      setN(arg0: zombie.iso.IsoGridSquare): void;
      setOverlayDone(arg0: boolean): void;
      setPlayerCutawayFlag(arg0: number, arg1: boolean, arg2: number): void;
      setRainDrop(arg0: zombie.iso.objects.IsoRaindrop): void;
      setRainSplash(arg0: zombie.iso.objects.IsoRainSplash): void;
      setRecalcLightTime(arg0: number): void;
      setRoom(arg0: zombie.iso.areas.IsoRoom): void;
      setRoomID(arg0: number): void;
      setS(arg0: zombie.iso.IsoGridSquare): void;
      setSolidFloor(arg0: boolean): void;
      setSolidFloorCached(arg0: boolean): void;
      setTargetDarkMulti(arg0: number, arg1: number): void;
      setTrapPositionX(arg0: number): void;
      setTrapPositionY(arg0: number): void;
      setTrapPositionZ(arg0: number): void;
      setVertLight(arg0: number, arg1: number, arg2: number): void;
      setW(arg0: zombie.iso.IsoGridSquare): void;
      setX(arg0: number): void;
      setY(arg0: number): void;
      setZ(arg0: number): void;
      setbDoSlowPathfinding(arg0: boolean): void;
      shouldSave(): boolean;
      smoke(): void;
      softClear(): void;
      splatBlood(arg0: number, arg1: number): void;
      stopFire(): void;
      switchLight(arg0: boolean): void;
      syncIsoTrap(arg0: zombie.inventory.types.HandWeapon): void;
      testCollideAdjacent(arg0: zombie.iso.IsoMovingObject, arg1: number, arg2: number, arg3: number): boolean;
      testCollideAdjacentAdvanced(arg0: number, arg1: number, arg2: number, arg3: boolean): boolean;
      testCollideSpecialObjects(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      testPathFindAdjacent(arg0: zombie.iso.IsoMovingObject, arg1: number, arg2: number, arg3: number): boolean;
      testVisionAdjacent(arg0: number, arg1: number, arg2: number, arg3: boolean, arg4: boolean): zombie.iso.LosUtil$TestResults;
      toBoolean(arg0: number[]): boolean;
      toString(): string;
      transmitAddObjectToSquare(arg0: zombie.iso.IsoObject, arg1: number): void;
      transmitModdata(): void;
      transmitRemoveItemFromSquare(arg0: zombie.iso.IsoObject): number;
      transmitRemoveItemFromSquareOnServer(arg0: zombie.iso.IsoObject): void;
      transmitStopFire(): void;
      wait(arg0: number): void;
    }
    // zombie.iso.IsoGridSquare$CellGetSquare extends java.lang.Object
    export class IsoGridSquare$CellGetSquare {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getGridSquare(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // (Unknown)
    export type IsoGridSquare$CircleStencilShader = any;
    // zombie.iso.IsoGridSquare$GetSquare
    export class IsoGridSquare$GetSquare {
      private constructor();
      getGridSquare(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
    }
    // zombie.iso.IsoGridSquare$ILighting
    export class IsoGridSquare$ILighting {
      private constructor();
      bCanSee(arg0: boolean): void;
      bCouldSee(arg0: boolean): void;
      bSeen(arg0: boolean): void;
      darkMulti(): number;
      getResultLight(arg0: number): zombie.iso.IsoGridSquare$ResultLight;
      lampostTotalB(arg0: number): void;
      lampostTotalG(arg0: number): void;
      lampostTotalR(arg0: number): void;
      lightInfo(): zombie.core.textures.ColorInfo;
      lightverts(arg0: number, arg1: number): void;
      reset(): void;
      resultLightCount(): number;
      targetDarkMulti(arg0: number): void;
    }
    // zombie.iso.IsoGridSquare$Lighting extends java.lang.Object
    export class IsoGridSquare$Lighting {
      private constructor();
      bCanSee(arg0: boolean): void;
      bCouldSee(arg0: boolean): void;
      bSeen(): boolean;
      darkMulti(): number;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getResultLight(arg0: number): zombie.iso.IsoGridSquare$ResultLight;
      hashCode(): number;
      lampostTotalB(arg0: number): void;
      lampostTotalG(arg0: number): void;
      lampostTotalR(arg0: number): void;
      lightInfo(): zombie.core.textures.ColorInfo;
      lightverts(arg0: number): number;
      notify(): void;
      notifyAll(): void;
      reset(): void;
      resultLightCount(): number;
      targetDarkMulti(): number;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.IsoGridSquare$NoCircleStencilShader extends java.lang.Object
    export class IsoGridSquare$NoCircleStencilShader {
      private constructor();
      ShaderID: number;
      a_wallShadeColor: number;
      static readonly instance?: zombie.iso.IsoGridSquare$NoCircleStencilShader;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.IsoGridSquare$PuddlesDirection extends java.lang.Object
    export class IsoGridSquare$PuddlesDirection {
      private constructor();
      static PUDDLES_DIR_ALL: number;
      static PUDDLES_DIR_NE: number;
      static PUDDLES_DIR_NONE: number;
      static PUDDLES_DIR_NW: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.IsoGridSquare$ResultLight extends java.lang.Object
    export class IsoGridSquare$ResultLight {
      private constructor();
      static readonly RLF_NONE: number;
      static readonly RLF_ROOMLIGHT: number;
      static readonly RLF_TORCH: number;
      b: number;
      flags: number;
      g: number;
      id: number;
      r: number;
      radius: number;
      x: number;
      y: number;
      z: number;
  
      copyFrom(arg0: zombie.iso.IsoGridSquare$ResultLight): zombie.iso.IsoGridSquare$ResultLight;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.IsoGridStack extends java.lang.Object
    export class IsoGridStack {
      private constructor();
      Squares?: java.util.ArrayList<java.util.ArrayList<zombie.iso.IsoGridSquare>>;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.IsoHeatSource extends java.lang.Object
    export class IsoHeatSource {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getRadius(): number;
      getTemperature(): number;
      getX(): number;
      getY(): number;
      getZ(): number;
      hashCode(): number;
      isInBounds(): boolean;
      notify(): void;
      notifyAll(): void;
      setRadius(arg0: number): void;
      setTemperature(arg0: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.IsoLightSource extends java.lang.Object
    export class IsoLightSource {
      private constructor();
      ID: number;
      static NextID: number;
      b: number;
      bActive: boolean;
      bActiveJNI: boolean;
      bHydroPowered: boolean;
      bJNI: number;
      bWasActive: boolean;
      chunk?: zombie.iso.IsoChunk;
      g: number;
      gJNI: number;
      life: number;
      lightMap?: any;
      localToBuilding?: zombie.iso.areas.IsoBuilding;
      r: number;
      rJNI: number;
      radius: number;
      startlife: number;
      switches?: java.util.ArrayList<zombie.iso.objects.IsoLightSwitch>;
      x: number;
      y: number;
      z: number;
  
      clearInfluence(): void;
      equals(arg0: any): boolean;
      getB(): number;
      getClass(): java.lang.Class<any>;
      getG(): number;
      getLocalToBuilding(): zombie.iso.areas.IsoBuilding;
      getR(): number;
      getRadius(): number;
      getSwitches(): java.util.ArrayList<zombie.iso.objects.IsoLightSwitch>;
      getX(): number;
      getY(): number;
      getZ(): number;
      hashCode(): number;
      isActive(): boolean;
      isHydroPowered(): boolean;
      isInBounds(arg0: number, arg1: number, arg2: number, arg3: number): boolean;
      notify(): void;
      notifyAll(): void;
      setActive(arg0: boolean): void;
      setB(arg0: number): void;
      setG(arg0: number): void;
      setR(arg0: number): void;
      setRadius(arg0: number): void;
      setSwitches(arg0: java.util.ArrayList<zombie.iso.objects.IsoLightSwitch>): void;
      setWasActive(arg0: boolean): void;
      setX(arg0: number): void;
      setY(arg0: number): void;
      setZ(arg0: number): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
      wasActive(): boolean;
    }
    // zombie.iso.IsoLot extends java.lang.Object
    export class IsoLot {
      private constructor();
      static readonly InfoFileNames?: java.util.HashMap<string, string>;
      static readonly InfoHeaderNames?: java.util.ArrayList<string>;
      static readonly InfoHeaders?: java.util.HashMap<string, zombie.iso.LotHeader>;
      static readonly pool?: zombie.popman.ObjectPool<zombie.iso.IsoLot>;
      wx: number;
      wy: number;
  
      Dispose(): void;
      equals(arg0: any): boolean;
      get(arg0: number, arg1: number, arg2: number, arg3: number, arg4: zombie.iso.IsoChunk): zombie.iso.IsoLot;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      load(arg0: number, arg1: number, arg2: number, arg3: number, arg4: zombie.iso.IsoChunk): void;
      notify(): void;
      notifyAll(): void;
      put(arg0: zombie.iso.IsoLot): void;
      readInt(arg0: java.io.RandomAccessFile): number;
      readShort(arg0: java.io.RandomAccessFile): number;
      readString(arg0: zombie.util.BufferedRandomAccessFile): string;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.IsoLuaMover extends zombie.characters.IsoGameCharacter
    export class IsoLuaMover {
      private constructor();
      Asleep: boolean;
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      readonly IsVisibleToPlayer?: boolean[];
      static LowLightingQualityHack: boolean;
      static readonly MAX_WALL_SPLATS: number;
      static readonly MAX_ZOMBIES_EATING: number;
      NoPicking: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OutlineOnMouseover: boolean;
      static readonly RENDER_OFFSET_X: number;
      static readonly RENDER_OFFSET_Y: number;
      ReanimatedCorpse?: zombie.characters.IsoGameCharacter;
      ReanimatedCorpseID: number;
      readonly StateMachineParams?: java.util.HashMap<zombie.ai.State, java.util.HashMap<any, any>>;
      readonly Traits?: zombie.characters.IsoGameCharacter$CharacterTraits;
      readonly actionContext?: zombie.characters.action.ActionContext;
      readonly advancedAnimator?: zombie.core.skinnedmodel.advancedanimation.AdvancedAnimator;
      readonly amputations?: java.util.ArrayList<string>;
      readonly attackVars?: zombie.network.packets.hit.AttackVars;
      bAlphaForced: boolean;
      bNeverDoneAlpha: boolean;
      readonly bOutline?: boolean[];
      bUpdateEquippedTextures: boolean;
      bagsWorn?: java.util.ArrayList<zombie.inventory.types.InventoryContainer>;
      beard?: zombie.core.skinnedmodel.model.ModelInstance;
      blockTurning: boolean;
      static bmod: number;
      bumpNbr: number;
      callOut: boolean;
      clientIgnoreCollision: number;
      container?: zombie.inventory.ItemContainer;
      def?: zombie.iso.sprite.IsoSpriteInstance;
      dir?: zombie.iso.IsoDirections;
      doDirtBloodEtc: boolean;
      doNotSync: boolean;
      doRenderShadow: boolean;
      emitter?: zombie.audio.BaseSoundEmitter;
      forceNullOverride: boolean;
      static gmod: number;
      hair?: zombie.core.skinnedmodel.model.ModelInstance;
      highlightFlags: number;
      readonly hitList?: java.util.ArrayList<zombie.network.packets.hit.HitInfo>;
      invRadioFreq?: java.util.ArrayList<number>;
      keyId: number;
      knockbackAttackMod: number;
      last?: zombie.iso.IsoGridSquare;
      lastAutomaticShoot: number;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      legsSprite?: zombie.iso.sprite.IsoSprite;
      luaMoverTable?: se.krka.kahlua.vm.KahluaTable;
      lx: number;
      ly: number;
      lz: number;
      name?: string;
      readonly networkCharacter?: zombie.characters.NetworkCharacter;
      noDamage: boolean;
      nx: number;
      ny: number;
      offsetX: number;
      offsetY: number;
      readonly outlineColor?: zombie.core.textures.ColorInfo[];
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      overridePrimaryHandModel?: string;
      overrideSecondaryHandModel?: string;
      partialThumpDmg: number;
      primaryHandModel?: zombie.core.skinnedmodel.model.ModelInstance;
      realState?: zombie.network.NetworkVariables$ZombieState;
      realdir?: zombie.iso.IsoDirections;
      realx: number;
      realy: number;
      realz: number;
      removedFromWorldMS: number;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      static readonly s_maxPossibleTwist: number;
      savedVehicleRunning: boolean;
      savedVehicleSeat: number;
      savedVehicleX: number;
      savedVehicleY: number;
      secondaryHandModel?: zombie.core.skinnedmodel.model.ModelInstance;
      sheetRope: boolean;
      sheetRopeHealth: number;
      shootInARow: number;
      speedMod: number;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      square?: zombie.iso.IsoGridSquare;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      tintb: number;
      tintg: number;
      tintr: number;
      static treeSoundMgr?: zombie.iso.IsoMovingObject$TreeSoundManager;
      upKillCount: boolean;
      vocalEvent: number;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
      x: number;
      y: number;
      z: number;
  
      Anger(arg0: number): void;
      ApplyInBedOffset(arg0: boolean): void;
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      BetaAntiDepress(arg0: number): void;
      BetaBlockers(arg0: number): void;
      CacheEquipped(): void;
      Callout(): void;
      CanAttack(): boolean;
      CanSee(arg0: zombie.iso.IsoMovingObject): boolean;
      ClearEquippedCache(): void;
      ClearVariable(arg0: string): void;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number): void;
      Despawn(): void;
      DirectionFromVector(arg0: zombie.iso.Vector2): void;
      DirtySlice(): void;
      DistTo(arg0: number, arg1: number): number;
      DistToProper(arg0: zombie.iso.IsoObject): number;
      DistToSquared(arg0: zombie.iso.IsoMovingObject): number;
      DoCollideNorS(): void;
      DoCollideWorE(): void;
      DoDeath(arg0: zombie.inventory.types.HandWeapon, arg1: zombie.characters.IsoGameCharacter): void;
      DoFloorSplat(arg0: zombie.iso.IsoGridSquare, arg1: string, arg2: boolean, arg3: number, arg4: number): void;
      DoFootstepSound(arg0: number): void;
      DoSneezeText(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoSwingCollisionBoneCheck(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number): boolean;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      DrawSneezeText(): void;
      Dressup(arg0: zombie.characters.SurvivorDesc): void;
      Eat(arg0: zombie.inventory.InventoryItem, arg1: number): boolean;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      FireCheck(): void;
      GetAnimSetName(): string;
      GetPrimaryEquippedCache(): zombie.inventory.InventoryItem;
      GetSecondaryEquippedCache(): zombie.inventory.InventoryItem;
      GetVariable(arg0: string): string;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasItem(arg0: string): boolean;
      HasTooltip(): boolean;
      HasTrait(arg0: string): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      HitSilence(arg0: zombie.inventory.types.HandWeapon, arg1: zombie.characters.IsoGameCharacter, arg2: boolean, arg3: number): void;
      InitSpriteParts(arg0: zombie.characters.SurvivorDesc): void;
      IsAttackRange(arg0: number, arg1: number, arg2: number): boolean;
      IsSpeaking(): boolean;
      Kill(arg0: zombie.characters.IsoGameCharacter): void;
      LevelPerk(arg0: zombie.characters.skills.PerkFactory$Perk, arg1: boolean): void;
      LoseLevel(arg0: zombie.characters.skills.PerkFactory$Perk): void;
      Move(arg0: zombie.iso.Vector2): void;
      MoveForward(arg0: number, arg1: number, arg2: number, arg3: number): void;
      MoveUnmodded(arg0: zombie.iso.Vector2): void;
      NPCGetAiming(): boolean;
      NPCGetRunning(): boolean;
      NPCSetAiming(arg0: boolean): void;
      NPCSetAttack(arg0: boolean): void;
      NPCSetJustMoved(arg0: boolean): void;
      NPCSetMelee(arg0: boolean): void;
      NPCSetRunning(arg0: boolean): void;
      OnAnimEvent(arg0: zombie.core.skinnedmodel.advancedanimation.AnimLayer, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      OnDeath(): void;
      PainMeds(arg0: number): void;
      PlayAnim(arg0: string): void;
      PlayAnimUnlooped(arg0: string): void;
      PlayAnimWithSpeed(arg0: string, arg1: number): void;
      QueueAction(arg0: zombie.characters.CharacterTimedActions.BaseAction): void;
      ReadLiterature(arg0: zombie.inventory.types.Literature): void;
      ReduceHealthWhenBurning(): void;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      Say(arg0: string): void;
      SayDebug(arg0: number, arg1: string): void;
      SayRadio(arg0: string, arg1: number, arg2: number, arg3: number, arg4: zombie.ui.UIFont, arg5: number, arg6: number, arg7: string): void;
      SayShout(arg0: string): void;
      SayWhisper(arg0: string): void;
      Seen(arg0: java.util.Stack<zombie.iso.IsoMovingObject>): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      SetOnFire(): void;
      SetVariable(arg0: string, arg1: string): void;
      SleepingTablet(arg0: number): void;
      SpreadFire(): void;
      SpreadFireMP(): void;
      StartAction(arg0: zombie.characters.CharacterTimedActions.BaseAction): void;
      StartTimedActionAnim(arg0: string, arg1: string): void;
      StopAllActionQueue(): void;
      StopAllActionQueueAiming(): void;
      StopAllActionQueueRunning(): void;
      StopAllActionQueueWalking(): void;
      StopBurning(): void;
      StopTimedActionAnim(): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      Throw(arg0: zombie.inventory.types.HandWeapon): void;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      actionStateChanged(arg0: zombie.characters.action.ActionContext): void;
      addBasicPatch(arg0: zombie.characterTextures.BloodBodyPartType): void;
      addBlood(arg0: zombie.characterTextures.BloodBodyPartType, arg1: boolean, arg2: boolean, arg3: boolean): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addDirt(arg0: zombie.characterTextures.BloodBodyPartType, arg1: number, arg2: boolean): void;
      addHole(arg0: zombie.characterTextures.BloodBodyPartType): boolean;
      addHoleFromZombieAttacks(arg0: zombie.characterTextures.BloodBodyPartType, arg1: boolean): boolean;
      addLineChatElement(arg0: string): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      addToWorld(): void;
      addVisualDamage(arg0: string): void;
      addWorldSoundUnlessInvisible(arg0: number, arg1: number, arg2: boolean): void;
      applyTraits(arg0: java.util.ArrayList<string>): void;
      attackFromWindowsLunge(arg0: zombie.characters.IsoZombie): void;
      autoDrink(): void;
      avoidDamage(): boolean;
      becomeCorpse(): void;
      calcHitDir(arg0: zombie.iso.Vector2): void;
      calculateBaseSpeed(): number;
      canAddSheetRope(): boolean;
      canClimbDownSheetRope(arg0: zombie.iso.IsoGridSquare): boolean;
      canClimbDownSheetRopeInCurrentSquare(): boolean;
      canClimbSheetRope(arg0: zombie.iso.IsoGridSquare): boolean;
      canHaveMultipleHits(): number;
      canSprint(): boolean;
      changeState(arg0: zombie.ai.State): void;
      checkHaveElectricity(): void;
      checkIsNearWall(): number;
      cleanWallBlood(): void;
      clearAttachedAnimSprite(): void;
      clearAttachedItems(): void;
      clearVariable(arg0: string): void;
      clearVariables(): void;
      clearWornItems(): void;
      climbDownSheetRope(): void;
      climbOverFence(arg0: zombie.iso.IsoDirections): void;
      climbSheetRope(): void;
      climbThroughWindow(arg0: zombie.iso.objects.IsoThumpable, arg1: number): void;
      climbThroughWindowFrame(arg0: zombie.iso.IsoObject): void;
      closeWindow(arg0: zombie.iso.objects.IsoWindow): void;
      clothingItemChanged(arg0: string): void;
      collideWith(arg0: zombie.iso.IsoObject): void;
      compareMovePriority(arg0: zombie.characters.IsoGameCharacter): number;
      compareToY(arg0: zombie.iso.IsoMovingObject): number;
      containsVariable(arg0: string): boolean;
      countAddSheetRope(): number;
      createContainersFromSpriteProperties(): void;
      createKeyRing(): void;
      customHashCode(): number;
      dbgGetAnimTrack(arg0: number, arg1: number): zombie.core.skinnedmodel.animation.AnimationTrack;
      dbgGetAnimTrackName(arg0: number, arg1: number): string;
      dbgGetAnimTrackTime(arg0: number, arg1: number): number;
      dbgGetAnimTrackWeight(arg0: number, arg1: number): number;
      debugPrintout(): void;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      distToNearestCamCharacter(): number;
      doFindExternalWaterSource(): void;
      doHitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.vehicles.BaseVehicle$HitVars): void;
      doStairs(): void;
      drawDirectionLine(arg0: zombie.iso.Vector2, arg1: number, arg2: number, arg3: number, arg4: number): void;
      dressInClothingItem(arg0: string): void;
      dressInNamedOutfit(arg0: string): void;
      dressInPersistentOutfit(arg0: string): void;
      dressInPersistentOutfitID(arg0: number): void;
      dressInRandomOutfit(): void;
      dropHandItems(): void;
      dropHeavyItems(): void;
      endPlaybackGameVariables(arg0: zombie.core.skinnedmodel.advancedanimation.AnimationVariableSource): void;
      ensureOnTile(): void;
      enterVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number, arg2: org.joml.Vector3f): void;
      equals(arg0: any): boolean;
      exert(arg0: number): void;
      faceLocation(arg0: number, arg1: number): void;
      faceLocationF(arg0: number, arg1: number): void;
      facePosition(arg0: number, arg1: number): void;
      faceThisObject(arg0: zombie.iso.IsoObject): void;
      faceThisObjectAlt(arg0: zombie.iso.IsoObject): void;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      fallenOnKnees(): void;
      forceAwake(): void;
      getAbsoluteExcessTwist(): number;
      getActionContext(): zombie.characters.action.ActionContext;
      getActionStateName(): string;
      getActiveLightItems(arg0: java.util.ArrayList<zombie.inventory.InventoryItem>): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getAdvancedAnimator(): zombie.core.skinnedmodel.advancedanimation.AdvancedAnimator;
      getAge(): number;
      getAlpha(arg0: number): number;
      getAlreadyReadPages(arg0: string): number;
      getAnimAngle(): number;
      getAnimAngleRadians(): number;
      getAnimAngleStepDelta(): number;
      getAnimAngleTwistDelta(): number;
      getAnimVector(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getAnimationDebug(): string;
      getAnimationPlayer(): zombie.core.skinnedmodel.animation.AnimationPlayer;
      getAnimationPlayerRecorder(): zombie.core.skinnedmodel.animation.debug.AnimationPlayerRecorder;
      getAnimationStateName(): string;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getAttachedItem(arg0: string): zombie.inventory.InventoryItem;
      getAttachedItems(): zombie.characters.AttachedItems.AttachedItems;
      getAttachedLocationGroup(): zombie.characters.AttachedItems.AttachedLocationGroup;
      getAttackTargetSquare(): zombie.iso.IsoGridSquare;
      getAttackedBy(): zombie.characters.IsoGameCharacter;
      getAutoWalkDirection(): zombie.iso.Vector2;
      getBarricadeStrengthMod(): number;
      getBarricadeTimeMod(): number;
      getBed(): zombie.iso.IsoObject;
      getBedType(): string;
      getBeenMovingFor(): number;
      getBeenSprintingFor(): number;
      getBetaDelta(): number;
      getBetaEffect(): number;
      getBloodImpactX(): number;
      getBloodImpactY(): number;
      getBloodImpactZ(): number;
      getBloodSplat(): zombie.iso.sprite.IsoSprite;
      getBodyDamage(): zombie.characters.BodyDamage.BodyDamage;
      getBodyDamageRemote(): zombie.characters.BodyDamage.BodyDamage;
      getBodyLocationGroup(): zombie.characters.WornItems.BodyLocationGroup;
      getBodyPartClothingDefense(arg0: number, arg1: boolean, arg2: boolean): number;
      getBrain(): zombie.ai.GameCharacterAIBrain;
      getBuilding(): zombie.iso.areas.IsoBuilding;
      getBumpFallType(): string;
      getBumpType(): string;
      getBumpedChr(): zombie.characters.IsoGameCharacter;
      getBumpedType(arg0: zombie.characters.IsoGameCharacter): string;
      getCell(): zombie.iso.IsoCell;
      getCharacterActions(): java.util.Stack<zombie.characters.CharacterTimedActions.BaseAction>;
      getCharacterTraits(): zombie.characters.IsoGameCharacter$CharacterTraits;
      getChatElement(): zombie.chat.ChatElement;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getChopTreeSpeed(): number;
      getClass(): java.lang.Class<any>;
      getClickSound(): string;
      getClothingItem_Back(): zombie.inventory.InventoryItem;
      getClothingItem_Feet(): zombie.inventory.InventoryItem;
      getClothingItem_Hands(): zombie.inventory.InventoryItem;
      getClothingItem_Head(): zombie.inventory.InventoryItem;
      getClothingItem_Legs(): zombie.inventory.InventoryItem;
      getClothingItem_Torso(): zombie.inventory.InventoryItem;
      getClothingWetness(): zombie.characters.ClothingWetness;
      getCollideType(): string;
      getCollidedObject(): zombie.iso.IsoObject;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getCurrentActionContextStateName(): string;
      getCurrentBuilding(): zombie.iso.areas.IsoBuilding;
      getCurrentBuildingDef(): zombie.iso.BuildingDef;
      getCurrentRoomDef(): zombie.iso.RoomDef;
      getCurrentSquare(): zombie.iso.IsoGridSquare;
      getCurrentState(): zombie.ai.State;
      getCurrentStateName(): string;
      getCurrentZone(): zombie.iso.IsoMetaGrid$Zone;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getDamage(): number;
      getDangerLevels(): number;
      getDebugMonitor(): zombie.core.skinnedmodel.advancedanimation.debug.AnimatorDebugMonitor;
      getDefaultState(): zombie.ai.State;
      getDeferredAngleDelta(): number;
      getDeferredMovement(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getDeferredRotationWeight(): number;
      getDepressDelta(): number;
      getDepressEffect(): number;
      getDescriptor(): zombie.characters.SurvivorDesc;
      getDieCount(): number;
      getDir(): zombie.iso.IsoDirections;
      getDirectionAngle(): number;
      getDistanceSq(arg0: zombie.iso.IsoMovingObject): number;
      getDotWithForwardDirection(arg0: number, arg1: number): number;
      getEatingZombies(): java.util.ArrayList<zombie.characters.IsoZombie>;
      getEmitter(): zombie.characters.BaseCharacterSoundEmitter;
      getEnemyList(): java.util.Stack<zombie.characters.IsoGameCharacter>;
      getEquipedRadio(): zombie.inventory.types.Radio;
      getExcessTwist(): number;
      getFMODParameters(): zombie.audio.FMODParameterList;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getFallTime(): number;
      getFamiliarBuildings(): java.util.Stack<zombie.iso.areas.IsoBuilding>;
      getFatigueMod(): number;
      getFatiqueMultiplier(): number;
      getFeelerTile(arg0: number): zombie.iso.IsoGridSquare;
      getFeelersize(): number;
      getFinder(): zombie.ai.astar.AStarPathFinderResult;
      getFireKillRate(): number;
      getFireSpreadProbability(): number;
      getFollowingTarget(): zombie.characters.IsoGameCharacter;
      getForceWakeUpTime(): number;
      getForwardDirection(): zombie.iso.Vector2;
      getFullName(): string;
      getFuturWalkedSquare(): zombie.iso.IsoGridSquare;
      getGameCharacterAIBrain(): zombie.ai.GameCharacterAIBrain;
      getGameVariables(): java.lang.Iterable<zombie.core.skinnedmodel.advancedanimation.IAnimationVariableSlot>;
      getGlobalMovementMod(): number;
      getHaloTimerCount(): number;
      getHammerSoundMod(): number;
      getHealth(): number;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getHitChancesMod(): number;
      getHitDir(): zombie.iso.Vector2;
      getHitForce(): number;
      getHitFromAngle(): number;
      getHitReaction(): string;
      getHitReactionNetworkAI(): zombie.characters.HitReactionNetworkAI;
      getHittingMod(): number;
      getHoursSurvived(): number;
      getHungerMultiplier(): number;
      getHurtSound(): string;
      getHyperthermiaMod(): number;
      getID(): number;
      getIDCount(): number;
      getIgnoreMovement(): boolean;
      getImpulsex(): number;
      getImpulsey(): number;
      getInf(): zombie.core.textures.ColorInfo;
      getInventory(): zombie.inventory.ItemContainer;
      getInventoryWeight(): number;
      getIsNPC(): boolean;
      getIsSurfaceNormalOffset(): boolean;
      getItemContainer(): zombie.inventory.ItemContainer;
      getItemVisuals(): zombie.core.skinnedmodel.visual.ItemVisuals;
      getKeyId(): number;
      getKnownRecipes(): java.util.List<string>;
      getLastBump(): number;
      getLastChatMessage(): zombie.chat.ChatMessage;
      getLastCollideTime(): number;
      getLastFallSpeed(): number;
      getLastHeardSound(): zombie.characters.IsoGameCharacter$Location;
      getLastHitCount(): number;
      getLastHourSleeped(): number;
      getLastKnownLocation(): java.util.HashMap<string, zombie.characters.IsoGameCharacter$Location>;
      getLastKnownLocationOf(arg0: string): zombie.characters.IsoGameCharacter$Location;
      getLastLocalEnemies(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getLastSpokenLine(): string;
      getLastSquare(): zombie.iso.IsoGridSquare;
      getLastTargettedBy(): zombie.characters.IsoZombie;
      getLastZombieKills(): number;
      getLeaveBodyTimedown(): number;
      getLegsSprite(): zombie.iso.sprite.IsoSprite;
      getLevelMaxForXp(): number;
      getLevelUpLevels(): number[];
      getLevelUpMultiplier(): number;
      getLightInfo2(): zombie.characters.IsoGameCharacter$LightInfo;
      getLightfootMod(): number;
      getLimpulsex(): number;
      getLimpulsey(): number;
      getLlx(): number;
      getLly(): number;
      getLlz(): number;
      getLocalEnemyList(): java.util.Stack<zombie.characters.IsoGameCharacter>;
      getLocalGroupList(): java.util.ArrayList<zombie.iso.IsoMovingObject>;
      getLocalList(): java.util.ArrayList<zombie.iso.IsoMovingObject>;
      getLocalNeutralList(): java.util.ArrayList<zombie.iso.IsoMovingObject>;
      getLocalRelevantEnemyList(): java.util.ArrayList<zombie.iso.IsoMovingObject>;
      getLookAngleRadians(): number;
      getLookVector(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getLowDangerInVicinity(arg0: number, arg1: number): zombie.iso.IsoGridSquare;
      getLrx(): number;
      getLry(): number;
      getLx(): number;
      getLy(): number;
      getLz(): number;
      getMaintenanceMod(): number;
      getMapKnowledge(): zombie.ai.MapKnowledge;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getMasterRegion(): zombie.iso.areas.isoregion.regions.IWorldRegion;
      getMaxChatLines(): number;
      getMaxTwist(): number;
      getMaxWeight(): number;
      getMaxWeightBase(): number;
      getMeleeCombatMod(): number;
      getMeleeDelay(): number;
      getMetalBarricadeStrengthMod(): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getModel(): zombie.core.skinnedmodel.model.ModelInstance;
      getModelInstance(): zombie.core.skinnedmodel.model.ModelInstance;
      getMomentumScalar(): number;
      getMoodles(): zombie.characters.Moodles.Moodles;
      getMoveDelta(): number;
      getMoveForwardVec(): zombie.iso.Vector2;
      getMoveSpeed(): number;
      getMovementLastFrame(): zombie.iso.Vector2;
      getMovingObjectIndex(): number;
      getName(): string;
      getNearVehicle(): zombie.vehicles.BaseVehicle;
      getNetworkCharacterAI(): zombie.characters.NetworkCharacterAI;
      getNew(): zombie.iso.IsoObject;
      getNextWander(): number;
      getNimbleMod(): number;
      getNoDamage(): boolean;
      getNumSurvivorsInVicinity(): number;
      getNx(): number;
      getNy(): number;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffsetX(): number;
      getOffsetY(): number;
      getOnlineID(): number;
      getOrCreateSleepingEventData(): zombie.ai.sadisticAIDirector.SleepingEventData;
      getOrCreateVariable(arg0: string): zombie.core.skinnedmodel.advancedanimation.IAnimationVariableSlot;
      getOutfitName(): string;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPacingMod(): number;
      getPainDelta(): number;
      getPainEffect(): number;
      getPath2(): zombie.vehicles.PolygonalMap2$Path;
      getPathFindBehavior2(): zombie.vehicles.PathFindBehavior2;
      getPathFindIndex(): number;
      getPathIndex(): number;
      getPathTargetX(): number;
      getPathTargetY(): number;
      getPathTargetZ(): number;
      getPatience(): number;
      getPatienceMax(): number;
      getPatienceMin(): number;
      getPerkInfo(arg0: zombie.characters.skills.PerkFactory$Perk): zombie.characters.IsoGameCharacter$PerkInfo;
      getPerkLevel(arg0: zombie.characters.skills.PerkFactory$Perk): number;
      getPerkList(): java.util.ArrayList<zombie.characters.IsoGameCharacter$PerkInfo>;
      getPersistentOutfitID(): number;
      getPipedFuelAmount(): number;
      getPosition(arg0: zombie.iso.Vector3): zombie.iso.Vector3;
      getPreviousActionContextStateName(): string;
      getPreviousStateName(): string;
      getPrimaryHandItem(): zombie.inventory.InventoryItem;
      getPrimaryHandType(): string;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRandomDefaultOutfit(): zombie.core.skinnedmodel.population.Outfit;
      getReadyModelData(): java.util.ArrayList<zombie.core.skinnedmodel.model.ModelInstance>;
      getReanimAnimDelay(): number;
      getReanimAnimFrame(): number;
      getReanimateTimer(): number;
      getRecoilDelay(): number;
      getRecoveryMod(): number;
      getReduceInfectionPower(): number;
      getRemoteID(): number;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getRunSpeedModifier(): number;
      getSafetyCooldown(): number;
      getSayLine(): string;
      getScreenX(): number;
      getScreenY(): number;
      getScriptModule(): string;
      getScriptName(): string;
      getScriptnx(): number;
      getScriptny(): number;
      getSecondaryHandItem(): zombie.inventory.InventoryItem;
      getSecondaryHandType(): string;
      getShoulderTwist(): number;
      getShovingMod(): number;
      getSleepingTabletDelta(): number;
      getSleepingTabletEffect(): number;
      getSlowFactor(): number;
      getSlowTimer(): number;
      getSneakSpotMod(): number;
      getSpeakColour(): zombie.core.Color;
      getSpeakTime(): number;
      getSpecialObjectIndex(): number;
      getSpeedMod(): number;
      getSprintMod(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteDef(): zombie.iso.sprite.IsoSpriteInstance;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSquare(): zombie.iso.IsoGridSquare;
      getStaggerTimeMod(): number;
      getStateEventDelayTimer(): number;
      getStateMachine(): zombie.ai.StateMachine;
      getStateMachineParams(arg0: zombie.ai.State): java.util.HashMap<any, any>;
      getStaticMovingObjectIndex(): number;
      getStats(): zombie.characters.Stats;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getSurroundingAttackingZombies(): number;
      getSurvivorKills(): number;
      getSurvivorMap(): java.util.HashMap<number, zombie.characters.SurvivorDesc>;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTalkerType(): string;
      getTargetAlpha(arg0: number): number;
      getTargetTwist(): number;
      getTeleport(): zombie.characters.NetworkTeleport;
      getTemperature(): number;
      getTempo(): zombie.iso.Vector2;
      getTextureCreator(): zombie.core.skinnedmodel.model.ModelInstanceTextureCreator;
      getTextureName(): string;
      getThirstMultiplier(): number;
      getThreatLevel(): number;
      getThumpCondition(): number;
      getThumpTarget(): zombie.iso.objects.interfaces.Thumpable;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTile(): string;
      getTimeSinceLastSmoke(): number;
      getTimeSinceZombieAttack(): number;
      getTimeThumping(): number;
      getTimedActionTimeModifier(): number;
      getTorchStrength(): number;
      getTotalBlood(): number;
      getTraits(): zombie.characters.traits.TraitCollection;
      getTurnDelta(): number;
      getTwist(): number;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUID(): string;
      getUseHandWeapon(): zombie.inventory.types.HandWeapon;
      getUsedItemsOn(): java.util.Stack<string>;
      getUserNameHeight(): number;
      getUsesExternalWaterSource(): boolean;
      getVariable(arg0: zombie.core.skinnedmodel.advancedanimation.AnimationVariableHandle): zombie.core.skinnedmodel.advancedanimation.IAnimationVariableSlot;
      getVariableBoolean(arg0: string, arg1: boolean): boolean;
      getVariableFloat(arg0: string, arg1: number): number;
      getVariableString(arg0: string): string;
      getVectorFromDirection(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getVehicle(): zombie.vehicles.BaseVehicle;
      getVeryCloseEnemyList(): java.util.ArrayList<zombie.iso.IsoMovingObject>;
      getVisual(): zombie.core.skinnedmodel.visual.BaseVisual;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWaterSource(arg0: java.util.ArrayList<zombie.inventory.InventoryItem>): zombie.inventory.InventoryItem;
      getWeaponLevel(): number;
      getWeight(): number;
      getWeightMod(): number;
      getWeldingSoundMod(): number;
      getWidth(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWorldObjectIndex(): number;
      getWornItem(arg0: string): zombie.inventory.InventoryItem;
      getWornItems(): zombie.characters.WornItems.WornItems;
      getX(): number;
      getXp(): zombie.characters.IsoGameCharacter$XP;
      getXpForLevel(arg0: number): number;
      getY(): number;
      getZ(): number;
      getZombieKills(): number;
      hasActiveModel(): boolean;
      hasAnimationPlayer(): boolean;
      hasEquipped(arg0: string): boolean;
      hasEquippedTag(arg0: string): boolean;
      hasExternalWaterSource(): boolean;
      hasFootInjury(): boolean;
      hasHitReaction(): boolean;
      hasItems(arg0: string, arg1: number): boolean;
      hasModData(): boolean;
      hasPath(): boolean;
      hasTimedActions(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      helmetFall(arg0: boolean, arg1: string): boolean;
      hitConsequences(arg0: zombie.inventory.types.HandWeapon, arg1: zombie.characters.IsoGameCharacter, arg2: boolean, arg3: number, arg4: boolean): void;
      initAttachedItems(arg0: string): void;
      initLightInfo2(): zombie.characters.IsoGameCharacter$LightInfo;
      initSpritePartsEmpty(): void;
      initWornItems(arg0: string): void;
      isAboveTopOfStairs(): boolean;
      isAimAtFloor(): boolean;
      isAiming(): boolean;
      isAlive(): boolean;
      isAllowConversation(): boolean;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isAnimForecasted(): boolean;
      isAnimationRecorderActive(): boolean;
      isAsleep(): boolean;
      isAttachedItem(arg0: zombie.inventory.InventoryItem): boolean;
      isAttackAnim(): boolean;
      isAttackWasSuperAttack(): boolean;
      isAttacking(): boolean;
      isAutoWalk(): boolean;
      isBehaviourMoving(): boolean;
      isBehind(arg0: zombie.characters.IsoGameCharacter): boolean;
      isBeingSteppedOn(): boolean;
      isBlink(): boolean;
      isBuildCheat(): boolean;
      isBumpDone(): boolean;
      isBumpFall(): boolean;
      isBumpStaggered(): boolean;
      isBumped(): boolean;
      isCanShout(): boolean;
      isCharacter(): boolean;
      isClimbing(): boolean;
      isClimbingThroughWindow(arg0: zombie.iso.objects.IsoWindow): boolean;
      isCloseKilled(): boolean;
      isClosingWindow(arg0: zombie.iso.objects.IsoWindow): boolean;
      isCollidable(): boolean;
      isCollided(): boolean;
      isCollidedE(): boolean;
      isCollidedN(): boolean;
      isCollidedS(): boolean;
      isCollidedThisFrame(): boolean;
      isCollidedW(): boolean;
      isCollidedWithDoor(): boolean;
      isCollidedWithVehicle(): boolean;
      isCriticalHit(): boolean;
      isCurrentState(arg0: zombie.ai.State): boolean;
      isDead(): boolean;
      isDeathDragDown(): boolean;
      isDestroyed(): boolean;
      isDoDeathSound(): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isDriving(): boolean;
      isEatingOther(arg0: zombie.iso.IsoMovingObject): boolean;
      isEquipped(arg0: zombie.inventory.InventoryItem): boolean;
      isEquippedClothing(arg0: zombie.inventory.InventoryItem): boolean;
      isExistInTheWorld(): boolean;
      isFacingLocation(arg0: number, arg1: number, arg2: number): boolean;
      isFacingObject(arg0: zombie.iso.IsoObject, arg1: number): boolean;
      isFallOnFront(): boolean;
      isFarmingCheat(): boolean;
      isFemale(): boolean;
      isFirstUpdate(): boolean;
      isFloor(): boolean;
      isForceShove(): boolean;
      isGodMod(): boolean;
      isHandItem(arg0: zombie.inventory.InventoryItem): boolean;
      isHealthCheat(): boolean;
      isHeavyItem(arg0: zombie.inventory.InventoryItem): boolean;
      isHideWeaponModel(): boolean;
      isHighlighted(): boolean;
      isHitFromBehind(): boolean;
      isHoppable(): boolean;
      isIgnoreMovementForDirection(): boolean;
      isIgnoreStaggerBack(): boolean;
      isInARoom(): boolean;
      isInTrees(): boolean;
      isInTrees2(arg0: boolean): boolean;
      isInTreesNoBush(): boolean;
      isInvincible(): boolean;
      isInvisible(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isItemInBothHands(arg0: zombie.inventory.InventoryItem): boolean;
      isKnockedDown(): boolean;
      isKnownPoison(arg0: zombie.inventory.InventoryItem): boolean;
      isLastCollidedN(): boolean;
      isLastCollidedW(): boolean;
      isLocal(): boolean;
      isMaskClicked(arg0: number, arg1: number): boolean;
      isMechanicsCheat(): boolean;
      isMovablesCheat(): boolean;
      isMovedThumpable(): boolean;
      isMoving(): boolean;
      isMuzzleFlash(): boolean;
      isNPC(): boolean;
      isNoPicking(): boolean;
      isNorthHoppable(): boolean;
      isOnDeathDone(): boolean;
      isOnFire(): boolean;
      isOnFloor(): boolean;
      isOnKillDone(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isOutside(): boolean;
      isPathing(): boolean;
      isPersistentOutfitInit(): boolean;
      isPlayerMoving(): boolean;
      isPlayingDeathSound(): boolean;
      isPrimaryEquipped(arg0: string): boolean;
      isPrimaryHandItem(arg0: zombie.inventory.InventoryItem): boolean;
      isProne(): boolean;
      isPushableForSeparate(): boolean;
      isPushedByForSeparate(arg0: zombie.iso.IsoMovingObject): boolean;
      isRangedWeaponEmpty(): boolean;
      isReading(): boolean;
      isReanim(): boolean;
      isRecipeKnown(arg0: string): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isRunning(): boolean;
      isSafety(): boolean;
      isSceneCulled(): boolean;
      isSeatedInVehicle(): boolean;
      isSecondaryHandItem(arg0: zombie.inventory.InventoryItem): boolean;
      isShootable(): boolean;
      isShowAdminTag(): boolean;
      isSitOnGround(): boolean;
      isSkipResolveCollision(): boolean;
      isSneaking(): boolean;
      isSolid(): boolean;
      isSolidForSeparate(): boolean;
      isSpeaking(): boolean;
      isSprinting(): boolean;
      isSpriteInvisible(): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isStrafing(): boolean;
      isSuperAttack(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isTeleporting(): boolean;
      isTimedActionInstant(): boolean;
      isTimedActionInstantCheat(): boolean;
      isUnderVehicle(): boolean;
      isUnlimitedCarry(): boolean;
      isUnlimitedEndurance(): boolean;
      isUsingWornItems(): boolean;
      isVariable(arg0: string, arg1: string): boolean;
      isVehicleCollisionActive(arg0: zombie.vehicles.BaseVehicle): boolean;
      isVisibleToNPCs(): boolean;
      isZombie(): boolean;
      isZombieAttacking(): boolean;
      isZombiesDontAttack(): boolean;
      isbAltCollide(): boolean;
      isbDoDefer(): boolean;
      isbFalling(): boolean;
      isbOnBed(): boolean;
      isbUseParts(): boolean;
      learnRecipe(arg0: string): boolean;
      level0(arg0: zombie.characters.skills.PerkFactory$Perk): void;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      onCullStateChanged(arg0: zombie.core.skinnedmodel.ModelManager, arg1: boolean): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      onWornItemsChanged(): void;
      openWindow(arg0: zombie.iso.objects.IsoWindow): void;
      pathToCharacter(arg0: zombie.characters.IsoGameCharacter): void;
      pathToLocation(arg0: number, arg1: number, arg2: number): void;
      pathToLocationF(arg0: number, arg1: number, arg2: number): void;
      pathToSound(arg0: number, arg1: number, arg2: number): void;
      playAnim(arg0: string, arg1: number, arg2: boolean, arg3: boolean): void;
      playBloodSplatterSound(): void;
      playDeadSound(): void;
      playEmote(arg0: string): void;
      playHurtSound(): void;
      playSound(arg0: string): number;
      playSoundLocal(arg0: string): number;
      playbackRecordCurrentStateSnapshot(): zombie.characters.action.ActionStateSnapshot;
      playbackSetCurrentStateSnapshot(arg0: zombie.characters.action.ActionStateSnapshot): void;
      postUpdateEquippedTextures(): void;
      postUpdateModelTextures(): void;
      postupdate(): void;
      preupdate(): void;
      processHitDamage(arg0: zombie.inventory.types.HandWeapon, arg1: zombie.characters.IsoGameCharacter, arg2: number, arg3: boolean, arg4: number): number;
      readInventory(arg0: java.nio.ByteBuffer): string;
      releaseAnimationPlayer(): void;
      reloadOutfit(): void;
      removeAllContainers(): void;
      removeAttachedItem(arg0: zombie.inventory.InventoryItem): void;
      removeFromHands(arg0: zombie.inventory.InventoryItem): boolean;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      removeWornItem(arg0: zombie.inventory.InventoryItem): void;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderServerGUI(): void;
      renderShadow(arg0: number, arg1: number, arg2: number): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reportEvent(arg0: string): void;
      reset(): void;
      resetBeardGrowingTime(): void;
      resetBodyDamageRemote(): void;
      resetEquippedHandsModels(): void;
      resetHairGrowingTime(): void;
      resetModel(): void;
      resetModelNextFrame(): void;
      reuseGridSquare(): void;
      save(arg0: java.nio.ByteBuffer): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      sendStopBurning(): void;
      separate(): void;
      serverRemoveItemFromZombie(arg0: string): void;
      setAge(arg0: number): void;
      setAimAtFloor(arg0: boolean): void;
      setAllowConversation(arg0: boolean): void;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAlreadyReadPages(arg0: string, arg1: number): void;
      setAnimForecasted(arg0: number): void;
      setAnimated(arg0: boolean): void;
      setAsleep(arg0: boolean): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setAttachedItem(arg0: string, arg1: zombie.inventory.InventoryItem): void;
      setAttachedItems(arg0: zombie.characters.AttachedItems.AttachedItems): void;
      setAttackAnim(arg0: boolean): void;
      setAttackTargetSquare(arg0: zombie.iso.IsoGridSquare): void;
      setAttackWasSuperAttack(arg0: boolean): void;
      setAttackedBy(arg0: zombie.characters.IsoGameCharacter): void;
      setAutoWalk(arg0: boolean): void;
      setAutoWalkDirection(arg0: zombie.iso.Vector2): void;
      setAvoidDamage(arg0: boolean): void;
      setBed(arg0: zombie.iso.IsoObject): void;
      setBedType(arg0: string): void;
      setBeenMovingFor(arg0: number): void;
      setBeenSprintingFor(arg0: number): void;
      setBetaDelta(arg0: number): void;
      setBetaEffect(arg0: number): void;
      setBlink(arg0: boolean): void;
      setBloodImpactX(arg0: number): void;
      setBloodImpactY(arg0: number): void;
      setBloodImpactZ(arg0: number): void;
      setBloodSplat(arg0: zombie.iso.sprite.IsoSprite): void;
      setBuildCheat(arg0: boolean): void;
      setBumpDone(arg0: boolean): void;
      setBumpFall(arg0: boolean): void;
      setBumpFallType(arg0: string): void;
      setBumpStaggered(arg0: boolean): void;
      setBumpType(arg0: string): void;
      setBumpedChr(arg0: zombie.characters.IsoGameCharacter): void;
      setCanShout(arg0: boolean): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setClickSound(arg0: string): void;
      setCloseKilled(arg0: boolean): void;
      setClothingItem_Back(arg0: zombie.inventory.InventoryItem): void;
      setClothingItem_Feet(arg0: zombie.inventory.InventoryItem): void;
      setClothingItem_Hands(arg0: zombie.inventory.InventoryItem): void;
      setClothingItem_Head(arg0: zombie.inventory.InventoryItem): void;
      setClothingItem_Legs(arg0: zombie.inventory.InventoryItem): void;
      setClothingItem_Torso(arg0: zombie.inventory.InventoryItem): void;
      setCollidable(arg0: boolean): void;
      setCollideType(arg0: string): void;
      setCollidedE(arg0: boolean): void;
      setCollidedN(arg0: boolean): void;
      setCollidedObject(arg0: zombie.iso.IsoObject): void;
      setCollidedS(arg0: boolean): void;
      setCollidedThisFrame(arg0: boolean): void;
      setCollidedW(arg0: boolean): void;
      setCollidedWithDoor(arg0: boolean): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCriticalHit(arg0: boolean): void;
      setCurrent(arg0: zombie.iso.IsoGridSquare): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setDamage(arg0: number): void;
      setDangerLevels(arg0: number): void;
      setDeathDragDown(arg0: boolean): void;
      setDebugMonitor(arg0: zombie.core.skinnedmodel.advancedanimation.debug.AnimatorDebugMonitor): void;
      setDefaultCondition(arg0: number): void;
      setDefaultState(arg0: zombie.ai.State): void;
      setDelayToSleep(arg0: number): void;
      setDepressDelta(arg0: number): void;
      setDepressEffect(arg0: number): void;
      setDescriptor(arg0: zombie.characters.SurvivorDesc): void;
      setDestroyed(arg0: boolean): void;
      setDieCount(arg0: number): void;
      setDir(arg0: number): void;
      setDirectionAngle(arg0: number): void;
      setDoDeathSound(arg0: boolean): void;
      setEatingZombies(arg0: java.util.ArrayList<zombie.characters.IsoZombie>): void;
      setFallOnFront(arg0: boolean): void;
      setFallTime(arg0: number): void;
      setFarmingCheat(arg0: boolean): void;
      setFeelersize(arg0: number): void;
      setFemale(arg0: boolean): void;
      setFireKillRate(arg0: number): void;
      setFireSpreadProbability(arg0: number): void;
      setFirstUpdate(arg0: boolean): void;
      setFollowingTarget(arg0: zombie.characters.IsoGameCharacter): void;
      setForceShove(arg0: boolean): void;
      setForceWakeUpTime(arg0: number): void;
      setForwardDirection(arg0: zombie.iso.Vector2): void;
      setGodMod(arg0: boolean): void;
      setHaloNote(arg0: string, arg1: number): void;
      setHealth(arg0: number): void;
      setHealthCheat(arg0: boolean): void;
      setHideWeaponModel(arg0: boolean): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setHitDir(arg0: zombie.iso.Vector2): void;
      setHitForce(arg0: number): void;
      setHitFromAngle(arg0: number): void;
      setHitFromBehind(arg0: boolean): void;
      setHitReaction(arg0: string): void;
      setHurtSound(arg0: string): void;
      setID(arg0: number): void;
      setIDCount(arg0: number): void;
      setIgnoreAimingInput(arg0: boolean): void;
      setIgnoreMovement(arg0: boolean): void;
      setIgnoreStaggerBack(arg0: boolean): void;
      setImpulsex(arg0: number): void;
      setImpulsey(arg0: number): void;
      setInventory(arg0: zombie.inventory.ItemContainer): void;
      setInvincible(arg0: boolean): void;
      setInvisible(arg0: boolean): void;
      setIsAiming(arg0: boolean): void;
      setIsNPC(arg0: boolean): void;
      setKeyId(arg0: number): void;
      setKnockedDown(arg0: boolean): void;
      setLast(arg0: zombie.iso.IsoGridSquare): void;
      setLastBump(arg0: number): void;
      setLastChatMessage(arg0: zombie.chat.ChatMessage): void;
      setLastCollideTime(arg0: number): void;
      setLastCollidedN(arg0: boolean): void;
      setLastCollidedW(arg0: boolean): void;
      setLastFallSpeed(arg0: number): void;
      setLastHeardSound(arg0: number, arg1: number, arg2: number): void;
      setLastHitCount(arg0: number): void;
      setLastHourSleeped(arg0: number): void;
      setLastLocalEnemies(arg0: number): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setLastSpokenLine(arg0: string): void;
      setLastTargettedBy(arg0: zombie.characters.IsoZombie): void;
      setLastZombieKills(arg0: number): void;
      setLeaveBodyTimedown(arg0: number): void;
      setLegsSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setLevelUpMultiplier(arg0: number): void;
      setLimpulsex(arg0: number): void;
      setLimpulsey(arg0: number): void;
      setLlx(arg0: number): void;
      setLly(arg0: number): void;
      setLlz(arg0: number): void;
      setLrx(arg0: number): void;
      setLry(arg0: number): void;
      setLx(arg0: number): void;
      setLy(arg0: number): void;
      setLz(arg0: number): void;
      setMaxTwist(arg0: number): void;
      setMaxWeight(arg0: number): void;
      setMaxWeightBase(arg0: number): void;
      setMechanicsCheat(arg0: boolean): void;
      setMeleeDelay(arg0: number): void;
      setMetabolicTarget(arg0: zombie.characters.BodyDamage.Metabolics): void;
      setMomentumScalar(arg0: number): void;
      setMovablesCheat(arg0: boolean): void;
      setMoveDelta(arg0: number): void;
      setMoveForwardVec(arg0: zombie.iso.Vector2): void;
      setMovedThumpable(arg0: boolean): void;
      setMovementLastFrame(arg0: zombie.iso.Vector2): void;
      setMoving(arg0: boolean): void;
      setMovingSquareNow(): void;
      setNPC(arg0: boolean): void;
      setName(arg0: string): void;
      setNextWander(arg0: number): void;
      setNoDamage(arg0: boolean): void;
      setNoPicking(arg0: boolean): void;
      setNumSurvivorsInVicinity(arg0: number): void;
      setNx(arg0: number): void;
      setNy(arg0: number): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOnDeathDone(arg0: boolean): void;
      setOnFire(arg0: boolean): void;
      setOnFloor(arg0: boolean): void;
      setOnKillDone(arg0: boolean): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPainDelta(arg0: number): void;
      setPainEffect(arg0: number): void;
      setPath2(arg0: zombie.vehicles.PolygonalMap2$Path): void;
      setPathFindIndex(arg0: number): void;
      setPathIndex(arg0: number): void;
      setPathing(arg0: boolean): void;
      setPatience(arg0: number): void;
      setPatienceMax(arg0: number): void;
      setPatienceMin(arg0: number): void;
      setPerkLevelDebug(arg0: zombie.characters.skills.PerkFactory$Perk, arg1: number): void;
      setPersistentOutfitID(arg0: number, arg1: boolean): void;
      setPipedFuelAmount(arg0: number): void;
      setPlayingDeathSound(arg0: boolean): void;
      setPrimaryHandItem(arg0: zombie.inventory.InventoryItem): void;
      setRangedWeaponEmpty(arg0: boolean): void;
      setReading(arg0: boolean): void;
      setReanim(arg0: boolean): void;
      setReanimAnimDelay(arg0: number): void;
      setReanimAnimFrame(arg0: number): void;
      setReanimateTimer(arg0: number): void;
      setRecoilDelay(arg0: number): void;
      setReduceInfectionPower(arg0: number): void;
      setRemoteID(arg0: number): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setRunning(arg0: boolean): void;
      setSafety(arg0: boolean): void;
      setSafetyCooldown(arg0: number): void;
      setSayLine(arg0: string): void;
      setSceneCulled(arg0: boolean): void;
      setScriptModule(arg0: string): void;
      setScriptnx(arg0: number): void;
      setScriptny(arg0: number): void;
      setSecondaryHandItem(arg0: zombie.inventory.InventoryItem): void;
      setShootable(arg0: boolean): void;
      setShowAdminTag(arg0: boolean): void;
      setSitOnGround(arg0: boolean): void;
      setSleepingTabletDelta(arg0: number): void;
      setSleepingTabletEffect(arg0: number): void;
      setSlowFactor(arg0: number): void;
      setSlowTimer(arg0: number): void;
      setSneaking(arg0: boolean): void;
      setSolid(arg0: boolean): void;
      setSpeakColour(arg0: zombie.core.Color): void;
      setSpeakColourInfo(arg0: zombie.core.textures.ColorInfo): void;
      setSpeakTime(arg0: number): void;
      setSpeaking(arg0: boolean): void;
      setSpecialTooltip(arg0: boolean): void;
      setSpeedMod(arg0: number): void;
      setSprinting(arg0: boolean): void;
      setSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setStaggerTimeMod(arg0: number): void;
      setStateEventDelayTimer(arg0: number): void;
      setStateMachineLocked(arg0: boolean): void;
      setSuperAttack(arg0: boolean): void;
      setSurvivorKills(arg0: number): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTaintedWater(arg0: boolean): void;
      setTargetAlpha(arg0: number): void;
      setTeleport(arg0: zombie.characters.NetworkTeleport): void;
      setTemperature(arg0: number): void;
      setTextureCreator(arg0: zombie.core.skinnedmodel.model.ModelInstanceTextureCreator): void;
      setThumpTarget(arg0: zombie.iso.objects.interfaces.Thumpable): void;
      setTimeOfSleep(arg0: number): void;
      setTimeSinceLastSmoke(arg0: number): void;
      setTimeSinceZombieAttack(arg0: number): void;
      setTimeThumping(arg0: number): void;
      setTimedActionInstantCheat(arg0: boolean): void;
      setTurnDelta(arg0: number): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUnlimitedCarry(arg0: boolean): void;
      setUnlimitedEndurance(arg0: boolean): void;
      setUseHandWeapon(arg0: zombie.inventory.types.HandWeapon): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setVariable(arg0: string, arg1: boolean): void;
      setVehicle(arg0: zombie.vehicles.BaseVehicle): void;
      setVisibleToNPCs(arg0: boolean): void;
      setWaterAmount(arg0: number): void;
      setWeight(arg0: number): void;
      setWidth(arg0: number): void;
      setWornItem(arg0: string, arg1: zombie.inventory.InventoryItem): void;
      setWornItems(arg0: zombie.characters.WornItems.WornItems): void;
      setX(arg0: number): void;
      setXp(arg0: zombie.characters.IsoGameCharacter$XP): void;
      setY(arg0: number): void;
      setZ(arg0: number): void;
      setZombieKills(arg0: number): void;
      setZombiesDontAttack(arg0: boolean): void;
      setbAltCollide(arg0: boolean): void;
      setbClimbing(arg0: boolean): void;
      setbDoDefer(arg0: boolean): void;
      setbFalling(arg0: boolean): void;
      setbOnBed(arg0: boolean): void;
      setbUseParts(arg0: boolean): void;
      shouldBeTurning(): boolean;
      shouldBeTurning90(): boolean;
      shouldBeTurningAround(): boolean;
      shouldBecomeCorpse(): boolean;
      shouldBecomeZombieAfterDeath(): boolean;
      shouldDoInventory(): boolean;
      shouldWaitToStartTimedAction(): boolean;
      smashCarWindow(arg0: zombie.vehicles.VehiclePart): void;
      smashWindow(arg0: zombie.iso.objects.IsoWindow): void;
      softReset(): void;
      splatBlood(arg0: number, arg1: number): void;
      splatBloodFloor(): void;
      splatBloodFloorBig(): void;
      spotted(arg0: zombie.iso.IsoMovingObject, arg1: boolean): void;
      startEvent(arg0: number, arg1: zombie.audio.GameSoundClip, arg2: java.util.BitSet): void;
      startMuzzleFlash(): void;
      startPlaybackGameVariables(): zombie.core.skinnedmodel.advancedanimation.AnimationVariableSource;
      stopEvent(arg0: number, arg1: zombie.audio.GameSoundClip, arg2: java.util.BitSet): void;
      stopOrTriggerSound(arg0: number): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection, arg3: java.nio.ByteBuffer): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      testDefense(arg0: zombie.characters.IsoZombie): boolean;
      testDotSide(arg0: zombie.iso.IsoMovingObject): string;
      toString(): string;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitModData(): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      unsetOutlineHighlight(): void;
      update(): void;
      updateEmitter(): void;
      updateEquippedRadioFreq(): void;
      updateEvent(arg0: number, arg1: zombie.audio.GameSoundClip): void;
      updateLightInfo(): void;
      updateRecoilVar(): void;
      updateSpeedModifiers(): void;
      updateTextObjects(): void;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      writeInventory(arg0: java.nio.ByteBuffer): void;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
      zeroForwardDirectionX(): void;
      zeroForwardDirectionY(): void;
    }
    // zombie.iso.IsoMarkers extends java.lang.Object
    export class IsoMarkers {
      private constructor();
      static readonly instance?: zombie.iso.IsoMarkers;
  
      addCircleIsoMarker(arg0: zombie.iso.IsoGridSquare, arg1: number, arg2: number, arg3: number, arg4: number): zombie.iso.IsoMarkers$CircleIsoMarker;
      addIsoMarker(arg0: se.krka.kahlua.vm.KahluaTable, arg1: se.krka.kahlua.vm.KahluaTable, arg2: zombie.iso.IsoGridSquare, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: boolean): zombie.iso.IsoMarkers$IsoMarker;
      equals(arg0: any): boolean;
      getCircleIsoMarker(arg0: number): zombie.iso.IsoMarkers$CircleIsoMarker;
      getClass(): java.lang.Class<any>;
      getIsoMarker(arg0: number): zombie.iso.IsoMarkers$IsoMarker;
      hashCode(): number;
      init(): void;
      notify(): void;
      notifyAll(): void;
      removeCircleIsoMarker(arg0: number): boolean;
      removeIsoMarker(arg0: number): boolean;
      render(): void;
      renderCircleIsoMarkers(arg0: zombie.iso.IsoCell$PerPlayerRender, arg1: number, arg2: number): void;
      renderIsoMarkers(arg0: zombie.iso.IsoCell$PerPlayerRender, arg1: number, arg2: number): void;
      renderIsoMarkersDeferred(arg0: zombie.iso.IsoCell$PerPlayerRender, arg1: number, arg2: number): void;
      renderIsoMarkersOnSquare(arg0: zombie.iso.IsoCell$PerPlayerRender, arg1: number, arg2: number): void;
      reset(): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.iso.IsoMarkers$CircleIsoMarker extends java.lang.Object
    export class IsoMarkers$CircleIsoMarker {
      private constructor();
      equals(arg0: any): boolean;
      getA(): number;
      getAlpha(): number;
      getAlphaMax(): number;
      getAlphaMin(): number;
      getB(): number;
      getClass(): java.lang.Class<any>;
      getFadeSpeed(): number;
      getG(): number;
      getID(): number;
      getR(): number;
      getSize(): number;
      getSquare(): zombie.iso.IsoGridSquare;
      getX(): number;
      getY(): number;
      getZ(): number;
      hashCode(): number;
      init(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoGridSquare): void;
      isActive(): boolean;
      isDoAlpha(): boolean;
      isRemoved(): boolean;
      notify(): void;
      notifyAll(): void;
      remove(): void;
      setA(arg0: number): void;
      setActive(arg0: boolean): void;
      setAlpha(arg0: number): void;
      setAlphaMax(arg0: number): void;
      setAlphaMin(arg0: number): void;
      setB(arg0: number): void;
      setDoAlpha(arg0: boolean): void;
      setFadeSpeed(arg0: number): void;
      setG(arg0: number): void;
      setPos(arg0: number, arg1: number, arg2: number): void;
      setR(arg0: number): void;
      setSize(arg0: number): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.IsoMarkers$IsoMarker extends java.lang.Object
    export class IsoMarkers$IsoMarker {
      private constructor();
      addTempSquareObject(arg0: zombie.iso.IsoObject): void;
      equals(arg0: any): boolean;
      getA(): number;
      getAlpha(): number;
      getAlphaMax(): number;
      getAlphaMin(): number;
      getB(): number;
      getClass(): java.lang.Class<any>;
      getFadeSpeed(): number;
      getG(): number;
      getID(): number;
      getR(): number;
      getSquare(): zombie.iso.IsoGridSquare;
      getX(): number;
      getY(): number;
      getZ(): number;
      hasTempSquareObject(): boolean;
      hashCode(): number;
      init(arg0: se.krka.kahlua.vm.KahluaTable, arg1: se.krka.kahlua.vm.KahluaTable, arg2: number, arg3: number, arg4: number, arg5: zombie.iso.IsoGridSquare): void;
      isActive(): boolean;
      isDoAlpha(): boolean;
      isRemoved(): boolean;
      notify(): void;
      notifyAll(): void;
      remove(): void;
      removeTempSquareObjects(): void;
      setA(arg0: number): void;
      setActive(arg0: boolean): void;
      setAlpha(arg0: number): void;
      setAlphaMax(arg0: number): void;
      setAlphaMin(arg0: number): void;
      setB(arg0: number): void;
      setDoAlpha(arg0: boolean): void;
      setFadeSpeed(arg0: number): void;
      setG(arg0: number): void;
      setPos(arg0: number, arg1: number, arg2: number): void;
      setR(arg0: number): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.IsoMetaCell extends java.lang.Object
    export class IsoMetaCell {
      private constructor();
      readonly ChunkMap?: zombie.iso.IsoMetaChunk[];
      info?: zombie.iso.LotHeader;
      readonly mannequinZones?: java.util.ArrayList<zombie.iso.objects.IsoMannequin$MannequinZone>;
      readonly triggers?: java.util.ArrayList<zombie.iso.IsoMetaGrid$Trigger>;
      readonly vehicleZones?: java.util.ArrayList<zombie.iso.IsoMetaGrid$VehicleZone>;
  
      Dispose(): void;
      addRoom(arg0: zombie.iso.RoomDef, arg1: number, arg2: number): void;
      addTrigger(arg0: zombie.iso.BuildingDef, arg1: number, arg2: number, arg3: string): void;
      addZone(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number): void;
      checkTriggers(): void;
      equals(arg0: any): boolean;
      getChunk(arg0: number, arg1: number): zombie.iso.IsoMetaChunk;
      getClass(): java.lang.Class<any>;
      getRoomsIntersecting(arg0: number, arg1: number, arg2: number, arg3: number, arg4: java.util.ArrayList<zombie.iso.RoomDef>): void;
      getZonesIntersecting(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: java.util.ArrayList<zombie.iso.IsoMetaGrid$Zone>): void;
      getZonesUnique(arg0: java.util.Set<zombie.iso.IsoMetaGrid$Zone>): void;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      removeZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.IsoMetaChunk extends java.lang.Object
    export class IsoMetaChunk {
      private constructor();
      static readonly zombiesFullPerChunk: number;
      static readonly zombiesMinPerChunk: number;
  
      Dispose(): void;
      addRoom(arg0: zombie.iso.RoomDef): void;
      addZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      clearRooms(): void;
      clearZones(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getEmptyOutsideAt(arg0: number, arg1: number, arg2: number): zombie.iso.RoomDef;
      getLootZombieIntensity(): number;
      getNumRooms(): number;
      getRoomAt(arg0: number, arg1: number, arg2: number): zombie.iso.RoomDef;
      getRoomsIntersecting(arg0: number, arg1: number, arg2: number, arg3: number, arg4: java.util.ArrayList<zombie.iso.RoomDef>): void;
      getUnadjustedZombieIntensity(): number;
      getZombieIntensity(arg0: boolean): number;
      getZone(arg0: number): zombie.iso.IsoMetaGrid$Zone;
      getZoneAt(arg0: number, arg1: number, arg2: number): zombie.iso.IsoMetaGrid$Zone;
      getZonesAt(arg0: number, arg1: number, arg2: number, arg3: java.util.ArrayList<zombie.iso.IsoMetaGrid$Zone>): java.util.ArrayList<zombie.iso.IsoMetaGrid$Zone>;
      getZonesIntersecting(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: java.util.ArrayList<zombie.iso.IsoMetaGrid$Zone>): void;
      getZonesUnique(arg0: java.util.Set<zombie.iso.IsoMetaGrid$Zone>): void;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      numZones(): number;
      removeZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setZombieIntensity(arg0: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.IsoMetaGrid extends java.lang.Object
    export class IsoMetaGrid {
      private constructor();
      readonly Buildings?: java.util.ArrayList<zombie.iso.BuildingDef>;
      Grid?: zombie.iso.IsoMetaCell[][];
      readonly MetaCharacters?: java.util.ArrayList<zombie.characters.IsoGameCharacter>;
      readonly VehiclesZones?: java.util.ArrayList<zombie.iso.IsoMetaGrid$VehicleZone>;
      readonly Zones?: java.util.ArrayList<zombie.iso.IsoMetaGrid$Zone>;
      maxX: number;
      maxY: number;
      minX: number;
      minY: number;
  
      AddToMeta(arg0: zombie.characters.IsoGameCharacter): void;
      Create(): void;
      CreateStep1(): void;
      CreateStep2(): void;
      Dispose(): void;
      RemoveFromMeta(arg0: zombie.characters.IsoPlayer): void;
      checkVehiclesZones(): void;
      countNearbyBuildingsRooms(arg0: zombie.characters.IsoPlayer): number;
      countRoomsIntersecting(arg0: number, arg1: number, arg2: number, arg3: number): number;
      equals(arg0: any): boolean;
      getBuildingAt(arg0: number, arg1: number): zombie.iso.BuildingDef;
      getBuildingAtRelax(arg0: number, arg1: number): zombie.iso.BuildingDef;
      getCellData(arg0: number, arg1: number): zombie.iso.IsoMetaCell;
      getCellDataAbs(arg0: number, arg1: number): zombie.iso.IsoMetaCell;
      getChunkData(arg0: number, arg1: number): zombie.iso.IsoMetaChunk;
      getChunkDataFromTile(arg0: number, arg1: number): zombie.iso.IsoMetaChunk;
      getClass(): java.lang.Class<any>;
      getCurrentCellData(): zombie.iso.IsoMetaCell;
      getCurrentChunkData(): zombie.iso.IsoMetaChunk;
      getEmptyOutsideAt(arg0: number, arg1: number, arg2: number): zombie.iso.RoomDef;
      getHeight(): number;
      getLotDirectories(): java.util.ArrayList<string>;
      getMaxX(): number;
      getMaxY(): number;
      getMetaGridFromTile(arg0: number, arg1: number): zombie.iso.IsoMetaCell;
      getMinX(): number;
      getMinY(): number;
      getRandomIndoorCoord(): zombie.iso.Vector2;
      getRandomRoomBetweenRange(arg0: number, arg1: number, arg2: number, arg3: number): zombie.iso.RoomDef;
      getRandomRoomNotInRange(arg0: number, arg1: number, arg2: number): zombie.iso.RoomDef;
      getRoomAt(arg0: number, arg1: number, arg2: number): zombie.iso.RoomDef;
      getRoomsIntersecting(arg0: number, arg1: number, arg2: number, arg3: number, arg4: java.util.ArrayList<zombie.iso.RoomDef>): void;
      getVehicleZoneAt(arg0: number, arg1: number, arg2: number): zombie.iso.IsoMetaGrid$VehicleZone;
      getWidth(): number;
      getZoneAt(arg0: number, arg1: number, arg2: number): zombie.iso.IsoMetaGrid$Zone;
      getZonesAt(arg0: number, arg1: number, arg2: number, arg3: java.util.ArrayList<zombie.iso.IsoMetaGrid$Zone>): java.util.ArrayList<zombie.iso.IsoMetaGrid$Zone>;
      getZonesIntersecting(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): java.util.ArrayList<zombie.iso.IsoMetaGrid$Zone>;
      hashCode(): number;
      isPreferredZoneForSquare(arg0: string): boolean;
      isValidChunk(arg0: number, arg1: number): boolean;
      isValidSquare(arg0: number, arg1: number): boolean;
      load(arg0: java.nio.ByteBuffer): void;
      loadZone(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadZones(): void;
      notify(): void;
      notifyAll(): void;
      processZones(): void;
      registerGeometryZone(arg0: string, arg1: string, arg2: number, arg3: string, arg4: se.krka.kahlua.vm.KahluaTable, arg5: se.krka.kahlua.vm.KahluaTable): zombie.iso.IsoMetaGrid$Zone;
      registerMannequinZone(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: se.krka.kahlua.vm.KahluaTable): zombie.iso.IsoMetaGrid$Zone;
      registerVehiclesZone(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: se.krka.kahlua.vm.KahluaTable): zombie.iso.IsoMetaGrid$Zone;
      registerZone(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: zombie.iso.IsoMetaGrid$ZoneGeometryType, arg8: gnu.trove.list.array.TIntArrayList, arg9: number): zombie.iso.IsoMetaGrid$Zone;
      registerZoneNoOverlap(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): zombie.iso.IsoMetaGrid$Zone;
      removeZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      removeZonesForCell(arg0: number, arg1: number): void;
      removeZonesForLotDirectory(arg0: string): void;
      save(arg0: java.nio.ByteBuffer): void;
      savePart(arg0: java.nio.ByteBuffer, arg1: number, arg2: boolean): void;
      saveZone(arg0: java.nio.ByteBuffer): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.IsoMetaGrid$Trigger extends java.lang.Object
    export class IsoMetaGrid$Trigger {
      private constructor();
      data?: se.krka.kahlua.vm.KahluaTable;
      def?: zombie.iso.BuildingDef;
      triggerRange: number;
      triggered: boolean;
      type?: string;
      zombieExclusionRange: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.IsoMetaGrid$VehicleZone extends zombie.iso.IsoMetaGrid$Zone
    export class IsoMetaGrid$VehicleZone {
      private constructor();
      static readonly VZF_FaceDirection: number;
      dir?: zombie.iso.IsoDirections;
      flags: number;
      geometryType?: zombie.iso.IsoMetaGrid$ZoneGeometryType;
      h: number;
      haveConstruction: boolean;
      hourLastSeen: number;
      id?: number;
      isPreferredZoneForSquare: boolean;
      lastActionTimestamp: number;
      name?: string;
      pickedRZStory?: zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase;
      pickedXForZoneStory: number;
      pickedYForZoneStory: number;
      readonly points?: gnu.trove.list.array.TIntArrayList;
      polylineOutlinePoints?: number[];
      polylineWidth: number;
      spawnSpecialZombies?: boolean;
      readonly spawnedZombies?: java.util.HashMap<string, number>;
      triangles?: number[];
      type?: string;
      w: number;
      x: number;
      y: number;
      z: number;
      zombiesTypeToSpawn?: string;
  
      Dispose(): void;
      addSquare(arg0: zombie.iso.IsoGridSquare): void;
      contains(arg0: number, arg1: number, arg2: number): boolean;
      difference(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: java.util.ArrayList<zombie.iso.IsoMetaGrid$Zone>): boolean;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getClippedSegmentOfPolyline(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number[]): number;
      getHeight(): number;
      getHoursSinceLastSeen(): number;
      getLastActionTimestamp(): number;
      getName(): string;
      getOriginalName(): string;
      getPolygonTriangles(): number[];
      getPolylineLength(): number;
      getPolylineOutlineTriangles(): number[];
      getRandomSquareInZone(): zombie.iso.IsoGridSquare;
      getRandomUnseenSquareInZone(): zombie.iso.IsoGridSquare;
      getSquares(): java.util.ArrayList<zombie.iso.IsoGridSquare>;
      getType(): string;
      getWidth(): number;
      getX(): number;
      getY(): number;
      getZombieDensity(): number;
      hashCode(): number;
      haveCons(): boolean;
      intersects(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): boolean;
      isFaceDirection(): boolean;
      isPoint(): boolean;
      isPolygon(): boolean;
      isPolyline(): boolean;
      isRectangle(): boolean;
      notify(): void;
      notifyAll(): void;
      removeSquare(arg0: zombie.iso.IsoGridSquare): void;
      sendToServer(): void;
      setH(arg0: number): void;
      setHaveConstruction(arg0: boolean): void;
      setHourSeenToCurrent(): void;
      setLastActionTimestamp(arg0: number): void;
      setName(arg0: string): void;
      setOriginalName(arg0: string): void;
      setPickedXForZoneStory(arg0: number): void;
      setPickedYForZoneStory(arg0: number): void;
      setType(arg0: string): void;
      setW(arg0: number): void;
      setX(arg0: number): void;
      setY(arg0: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.IsoMetaGrid$Zone extends java.lang.Object
    export class IsoMetaGrid$Zone {
      private constructor();
      geometryType?: zombie.iso.IsoMetaGrid$ZoneGeometryType;
      h: number;
      haveConstruction: boolean;
      hourLastSeen: number;
      id?: number;
      isPreferredZoneForSquare: boolean;
      lastActionTimestamp: number;
      name?: string;
      pickedRZStory?: zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase;
      pickedXForZoneStory: number;
      pickedYForZoneStory: number;
      readonly points?: gnu.trove.list.array.TIntArrayList;
      polylineOutlinePoints?: number[];
      polylineWidth: number;
      spawnSpecialZombies?: boolean;
      readonly spawnedZombies?: java.util.HashMap<string, number>;
      triangles?: number[];
      type?: string;
      w: number;
      x: number;
      y: number;
      z: number;
      zombiesTypeToSpawn?: string;
  
      Dispose(): void;
      addSquare(arg0: zombie.iso.IsoGridSquare): void;
      contains(arg0: number, arg1: number, arg2: number): boolean;
      difference(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: java.util.ArrayList<zombie.iso.IsoMetaGrid$Zone>): boolean;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getClippedSegmentOfPolyline(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number[]): number;
      getHeight(): number;
      getHoursSinceLastSeen(): number;
      getLastActionTimestamp(): number;
      getName(): string;
      getOriginalName(): string;
      getPolygonTriangles(): number[];
      getPolylineLength(): number;
      getPolylineOutlineTriangles(): number[];
      getRandomSquareInZone(): zombie.iso.IsoGridSquare;
      getRandomUnseenSquareInZone(): zombie.iso.IsoGridSquare;
      getSquares(): java.util.ArrayList<zombie.iso.IsoGridSquare>;
      getType(): string;
      getWidth(): number;
      getX(): number;
      getY(): number;
      getZombieDensity(): number;
      hashCode(): number;
      haveCons(): boolean;
      intersects(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): boolean;
      isPoint(): boolean;
      isPolygon(): boolean;
      isPolyline(): boolean;
      isRectangle(): boolean;
      notify(): void;
      notifyAll(): void;
      removeSquare(arg0: zombie.iso.IsoGridSquare): void;
      sendToServer(): void;
      setH(arg0: number): void;
      setHaveConstruction(arg0: boolean): void;
      setHourSeenToCurrent(): void;
      setLastActionTimestamp(arg0: number): void;
      setName(arg0: string): void;
      setOriginalName(arg0: string): void;
      setPickedXForZoneStory(arg0: number): void;
      setPickedYForZoneStory(arg0: number): void;
      setType(arg0: string): void;
      setW(arg0: number): void;
      setX(arg0: number): void;
      setY(arg0: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.iso.IsoMetaGrid$ZoneGeometryType */
    export class IsoMetaGrid$ZoneGeometryType {
      /* ENUM VALUES */
      static readonly INVALID: IsoMetaGrid$ZoneGeometryType; 
      static readonly Point: IsoMetaGrid$ZoneGeometryType; 
      static readonly Polygon: IsoMetaGrid$ZoneGeometryType; 
      static readonly Polyline: IsoMetaGrid$ZoneGeometryType; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.iso.IsoMetaGrid$ZoneGeometryType[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): IsoMetaGrid$ZoneGeometryType;
      valueOf(arg0: string): zombie.iso.IsoMetaGrid$ZoneGeometryType;
      values(): zombie.iso.IsoMetaGrid$ZoneGeometryType[];
    }
    // zombie.iso.IsoMovingObject extends zombie.iso.IsoObject
    export class IsoMovingObject {
      private constructor();
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      static LowLightingQualityHack: boolean;
      static readonly MAX_WALL_SPLATS: number;
      static readonly MAX_ZOMBIES_EATING: number;
      NoPicking: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OutlineOnMouseover: boolean;
      bAlphaForced: boolean;
      bNeverDoneAlpha: boolean;
      readonly bOutline?: boolean[];
      static bmod: number;
      container?: zombie.inventory.ItemContainer;
      def?: zombie.iso.sprite.IsoSpriteInstance;
      dir?: zombie.iso.IsoDirections;
      doNotSync: boolean;
      emitter?: zombie.audio.BaseSoundEmitter;
      static gmod: number;
      highlightFlags: number;
      keyId: number;
      last?: zombie.iso.IsoGridSquare;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      lx: number;
      ly: number;
      lz: number;
      name?: string;
      noDamage: boolean;
      nx: number;
      ny: number;
      offsetX: number;
      offsetY: number;
      readonly outlineColor?: zombie.core.textures.ColorInfo[];
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      partialThumpDmg: number;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      sheetRope: boolean;
      sheetRopeHealth: number;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      square?: zombie.iso.IsoGridSquare;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      tintb: number;
      tintg: number;
      tintr: number;
      static treeSoundMgr?: zombie.iso.IsoMovingObject$TreeSoundManager;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
      x: number;
      y: number;
      z: number;
  
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number): void;
      Despawn(): void;
      DirtySlice(): void;
      DistTo(arg0: number, arg1: number): number;
      DistToProper(arg0: zombie.iso.IsoObject): number;
      DistToSquared(arg0: zombie.iso.IsoMovingObject): number;
      DoCollideNorS(): void;
      DoCollideWorE(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasTooltip(): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      Move(arg0: zombie.iso.Vector2): void;
      MoveUnmodded(arg0: zombie.iso.Vector2): void;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      addToWorld(): void;
      canAddSheetRope(): boolean;
      canHaveMultipleHits(): number;
      checkHaveElectricity(): void;
      cleanWallBlood(): void;
      clearAttachedAnimSprite(): void;
      collideWith(arg0: zombie.iso.IsoObject): void;
      compareToY(arg0: zombie.iso.IsoMovingObject): number;
      countAddSheetRope(): number;
      createContainersFromSpriteProperties(): void;
      customHashCode(): number;
      debugPrintout(): void;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      distToNearestCamCharacter(): number;
      doFindExternalWaterSource(): void;
      doStairs(): void;
      ensureOnTile(): void;
      equals(arg0: any): boolean;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      getAlpha(arg0: number): number;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getBuilding(): zombie.iso.areas.IsoBuilding;
      getBumpedType(arg0: zombie.characters.IsoGameCharacter): string;
      getCell(): zombie.iso.IsoCell;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getClass(): java.lang.Class<any>;
      getCollideType(): string;
      getCollidedObject(): zombie.iso.IsoObject;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getCurrentBuilding(): zombie.iso.areas.IsoBuilding;
      getCurrentSquare(): zombie.iso.IsoGridSquare;
      getCurrentZone(): zombie.iso.IsoMetaGrid$Zone;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getDamage(): number;
      getDir(): zombie.iso.IsoDirections;
      getDistanceSq(arg0: zombie.iso.IsoMovingObject): number;
      getEatingZombies(): java.util.ArrayList<zombie.characters.IsoZombie>;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getFeelerTile(arg0: number): zombie.iso.IsoGridSquare;
      getFeelersize(): number;
      getFuturWalkedSquare(): zombie.iso.IsoGridSquare;
      getGlobalMovementMod(arg0: boolean): number;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getHitDir(): zombie.iso.Vector2;
      getHitForce(): number;
      getHitFromAngle(): number;
      getID(): number;
      getIDCount(): number;
      getImpulsex(): number;
      getImpulsey(): number;
      getIsSurfaceNormalOffset(): boolean;
      getItemContainer(): zombie.inventory.ItemContainer;
      getKeyId(): number;
      getLastCollideTime(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getLastSquare(): zombie.iso.IsoGridSquare;
      getLastTargettedBy(): zombie.characters.IsoZombie;
      getLimpulsex(): number;
      getLimpulsey(): number;
      getLx(): number;
      getLy(): number;
      getLz(): number;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getMasterRegion(): zombie.iso.areas.isoregion.regions.IWorldRegion;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getMovementLastFrame(): zombie.iso.Vector2;
      getMovingObjectIndex(): number;
      getName(): string;
      getNew(): zombie.iso.IsoObject;
      getNoDamage(): boolean;
      getNx(): number;
      getNy(): number;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffsetX(): number;
      getOffsetY(): number;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPathFindIndex(): number;
      getPipedFuelAmount(): number;
      getPosition(arg0: zombie.iso.Vector3): zombie.iso.Vector3;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getScreenX(): number;
      getScreenY(): number;
      getScriptModule(): string;
      getScriptName(): string;
      getScriptnx(): number;
      getScriptny(): number;
      getSpecialObjectIndex(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSquare(): zombie.iso.IsoGridSquare;
      getStateEventDelayTimer(): number;
      getStaticMovingObjectIndex(): number;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTargetAlpha(arg0: number): number;
      getTextureName(): string;
      getThumpCondition(): number;
      getThumpTarget(): zombie.iso.objects.interfaces.Thumpable;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTile(): string;
      getTimeSinceZombieAttack(): number;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUsesExternalWaterSource(): boolean;
      getVectorFromDirection(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWeight(): number;
      getWidth(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWorldObjectIndex(): number;
      getX(): number;
      getY(): number;
      getZ(): number;
      hasExternalWaterSource(): boolean;
      hasModData(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isBlink(): boolean;
      isCharacter(): boolean;
      isCloseKilled(): boolean;
      isCollidable(): boolean;
      isCollided(): boolean;
      isCollidedE(): boolean;
      isCollidedN(): boolean;
      isCollidedS(): boolean;
      isCollidedThisFrame(): boolean;
      isCollidedW(): boolean;
      isCollidedWithDoor(): boolean;
      isCollidedWithVehicle(): boolean;
      isDestroyed(): boolean;
      isEatingOther(arg0: zombie.iso.IsoMovingObject): boolean;
      isExistInTheWorld(): boolean;
      isFirstUpdate(): boolean;
      isFloor(): boolean;
      isHighlighted(): boolean;
      isHoppable(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isMaskClicked(arg0: number, arg1: number, arg2: boolean): boolean;
      isMovedThumpable(): boolean;
      isNoPicking(): boolean;
      isNorthHoppable(): boolean;
      isOnFloor(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isPushableForSeparate(): boolean;
      isPushedByForSeparate(arg0: zombie.iso.IsoMovingObject): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isShootable(): boolean;
      isSolid(): boolean;
      isSolidForSeparate(): boolean;
      isSpriteInvisible(): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isZombie(): boolean;
      isZombiesDontAttack(): boolean;
      isbAltCollide(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      postupdate(): void;
      preupdate(): void;
      removeAllContainers(): void;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reset(): void;
      reuseGridSquare(): void;
      save(arg0: java.nio.ByteBuffer): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      separate(): void;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setBlink(arg0: boolean): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setCloseKilled(arg0: boolean): void;
      setCollidable(arg0: boolean): void;
      setCollideType(arg0: string): void;
      setCollidedE(arg0: boolean): void;
      setCollidedN(arg0: boolean): void;
      setCollidedObject(arg0: zombie.iso.IsoObject): void;
      setCollidedS(arg0: boolean): void;
      setCollidedThisFrame(arg0: boolean): void;
      setCollidedW(arg0: boolean): void;
      setCollidedWithDoor(arg0: boolean): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCurrent(arg0: zombie.iso.IsoGridSquare): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setDamage(arg0: number): void;
      setDefaultCondition(arg0: number): void;
      setDestroyed(arg0: boolean): void;
      setDir(arg0: zombie.iso.IsoDirections): void;
      setEatingZombies(arg0: java.util.ArrayList<zombie.characters.IsoZombie>): void;
      setFeelersize(arg0: number): void;
      setFirstUpdate(arg0: boolean): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setHitDir(arg0: zombie.iso.Vector2): void;
      setHitForce(arg0: number): void;
      setHitFromAngle(arg0: number): void;
      setID(arg0: number): void;
      setIDCount(arg0: number): void;
      setImpulsex(arg0: number): void;
      setImpulsey(arg0: number): void;
      setKeyId(arg0: number): void;
      setLast(arg0: zombie.iso.IsoGridSquare): void;
      setLastCollideTime(arg0: number): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setLastTargettedBy(arg0: zombie.characters.IsoZombie): void;
      setLimpulsex(arg0: number): void;
      setLimpulsey(arg0: number): void;
      setLx(arg0: number): void;
      setLy(arg0: number): void;
      setLz(arg0: number): void;
      setMovedThumpable(arg0: boolean): void;
      setMovementLastFrame(arg0: zombie.iso.Vector2): void;
      setMovingSquareNow(): void;
      setName(arg0: string): void;
      setNoDamage(arg0: boolean): void;
      setNoPicking(arg0: boolean): void;
      setNx(arg0: number): void;
      setNy(arg0: number): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOnFloor(arg0: boolean): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPathFindIndex(arg0: number): void;
      setPipedFuelAmount(arg0: number): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setScriptModule(arg0: string): void;
      setScriptnx(arg0: number): void;
      setScriptny(arg0: number): void;
      setShootable(arg0: boolean): void;
      setSolid(arg0: boolean): void;
      setSpecialTooltip(arg0: boolean): void;
      setSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setStateEventDelayTimer(arg0: number): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTaintedWater(arg0: boolean): void;
      setTargetAlpha(arg0: number): void;
      setThumpTarget(arg0: zombie.iso.objects.interfaces.Thumpable): void;
      setTimeSinceZombieAttack(arg0: number): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setWaterAmount(arg0: number): void;
      setWeight(arg0: number): void;
      setWidth(arg0: number): void;
      setX(arg0: number): void;
      setY(arg0: number): void;
      setZ(arg0: number): void;
      setZombiesDontAttack(arg0: boolean): void;
      setbAltCollide(arg0: boolean): void;
      softReset(): void;
      spotted(arg0: zombie.iso.IsoMovingObject, arg1: boolean): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection, arg3: java.nio.ByteBuffer): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      toString(): string;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitModData(): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      unsetOutlineHighlight(): void;
      update(): void;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    // zombie.iso.IsoMovingObject$TreeSoundManager extends java.lang.Object
    export class IsoMovingObject$TreeSoundManager {
      private constructor();
      addSquare(arg0: zombie.iso.IsoGridSquare): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.iso.IsoObject extends java.lang.Object
    export class IsoObject {
      private constructor();
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      static LowLightingQualityHack: boolean;
      static readonly MAX_WALL_SPLATS: number;
      NoPicking: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OutlineOnMouseover: boolean;
      bAlphaForced: boolean;
      bNeverDoneAlpha: boolean;
      static bmod: number;
      container?: zombie.inventory.ItemContainer;
      dir?: zombie.iso.IsoDirections;
      doNotSync: boolean;
      emitter?: zombie.audio.BaseSoundEmitter;
      static gmod: number;
      highlightFlags: number;
      keyId: number;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      name?: string;
      offsetX: number;
      offsetY: number;
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      partialThumpDmg: number;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      sheetRope: boolean;
      sheetRopeHealth: number;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      square?: zombie.iso.IsoGridSquare;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      tintb: number;
      tintg: number;
      tintr: number;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
  
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number): void;
      DirtySlice(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasTooltip(): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      addToWorld(): void;
      canAddSheetRope(): boolean;
      checkHaveElectricity(): void;
      cleanWallBlood(): void;
      clearAttachedAnimSprite(): void;
      countAddSheetRope(): number;
      createContainersFromSpriteProperties(): void;
      customHashCode(): number;
      debugPrintout(): void;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      doFindExternalWaterSource(): void;
      equals(arg0: any): boolean;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      getAlpha(arg0: number): number;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getCell(): zombie.iso.IsoCell;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getClass(): java.lang.Class<any>;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getDamage(): number;
      getDir(): zombie.iso.IsoDirections;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getIsSurfaceNormalOffset(): boolean;
      getItemContainer(): zombie.inventory.ItemContainer;
      getKeyId(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getMovingObjectIndex(): number;
      getName(): string;
      getNew(): zombie.iso.IsoObject;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffsetX(): number;
      getOffsetY(): number;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPipedFuelAmount(): number;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getScriptName(): string;
      getSpecialObjectIndex(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSquare(): zombie.iso.IsoGridSquare;
      getStaticMovingObjectIndex(): number;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTargetAlpha(arg0: number): number;
      getTextureName(): string;
      getThumpCondition(): number;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTile(): string;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUsesExternalWaterSource(): boolean;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWorldObjectIndex(): number;
      getX(): number;
      getY(): number;
      getZ(): number;
      hasExternalWaterSource(): boolean;
      hasModData(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isBlink(): boolean;
      isCharacter(): boolean;
      isDestroyed(): boolean;
      isExistInTheWorld(): boolean;
      isFloor(): boolean;
      isHighlighted(): boolean;
      isHoppable(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isMaskClicked(arg0: number, arg1: number, arg2: boolean): boolean;
      isMovedThumpable(): boolean;
      isNoPicking(): boolean;
      isNorthHoppable(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isSpriteInvisible(): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isZombie(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      removeAllContainers(): void;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reset(): void;
      reuseGridSquare(): void;
      save(arg0: java.nio.ByteBuffer, arg1: boolean): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setBlink(arg0: boolean): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setDamage(arg0: number): void;
      setDefaultCondition(arg0: number): void;
      setDir(arg0: zombie.iso.IsoDirections): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setKeyId(arg0: number): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setMovedThumpable(arg0: boolean): void;
      setName(arg0: string): void;
      setNoPicking(arg0: boolean): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPipedFuelAmount(arg0: number): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setSpecialTooltip(arg0: boolean): void;
      setSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTaintedWater(arg0: boolean): void;
      setTargetAlpha(arg0: number): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setWaterAmount(arg0: number): void;
      softReset(): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection, arg3: java.nio.ByteBuffer): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      toString(): string;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitModData(): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      unsetOutlineHighlight(): void;
      update(): void;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    // zombie.iso.IsoObject$IsoObjectFactory extends java.lang.Object
    export class IsoObject$IsoObjectFactory {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getClassID(): number;
      getObjectName(): string;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.IsoObject$OutlineShader extends java.lang.Object
    export class IsoObject$OutlineShader {
      private constructor();
      static readonly instance?: zombie.iso.IsoObject$OutlineShader;
  
      StartShader(): boolean;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      initShader(): void;
      notify(): void;
      notifyAll(): void;
      setOutlineColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setStepSize(arg0: number, arg1: number, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.iso.IsoObject$VisionResult */
    export class IsoObject$VisionResult {
      /* ENUM VALUES */
      static readonly Blocked: IsoObject$VisionResult; 
      static readonly NoEffect: IsoObject$VisionResult; 
      static readonly Unblocked: IsoObject$VisionResult; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.iso.IsoObject$VisionResult[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): IsoObject$VisionResult;
      valueOf(arg0: string): zombie.iso.IsoObject$VisionResult;
      values(): zombie.iso.IsoObject$VisionResult[];
    }
    // zombie.iso.IsoObjectPicker extends java.lang.Object
    export class IsoObjectPicker {
      private constructor();
      ClickObjectStore?: zombie.iso.IsoObjectPicker$ClickObject[];
      static readonly Instance?: zombie.iso.IsoObjectPicker;
      readonly ThisFrame?: java.util.ArrayList<zombie.iso.IsoObjectPicker$ClickObject>;
      count: number;
      counter: number;
      dirty: boolean;
      maxcount: number;
      wasDirty: boolean;
      xOffSinceDirty: number;
      yOffSinceDirty: number;
  
      Add(arg0: number, arg1: number, arg2: number, arg3: number, arg4: zombie.iso.IsoGridSquare, arg5: zombie.iso.IsoObject, arg6: boolean, arg7: number, arg8: number): void;
      ContextPick(arg0: number, arg1: number): zombie.iso.IsoObjectPicker$ClickObject;
      Init(): void;
      Pick(arg0: number, arg1: number): zombie.iso.IsoObjectPicker$ClickObject;
      PickCorpse(arg0: number, arg1: number): zombie.iso.IsoObject;
      PickDoor(arg0: number, arg1: number, arg2: boolean): zombie.iso.IsoObject;
      PickTarget(arg0: number, arg1: number): zombie.iso.IsoMovingObject;
      PickThumpable(arg0: number, arg1: number): zombie.iso.IsoObject;
      PickTree(arg0: number, arg1: number): zombie.iso.IsoObject;
      PickVehicle(arg0: number, arg1: number): zombie.vehicles.BaseVehicle;
      PickWindow(arg0: number, arg1: number): zombie.iso.IsoObject;
      PickWindowFrame(arg0: number, arg1: number): zombie.iso.IsoObject;
      StartRender(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getInstance(): zombie.iso.IsoObjectPicker;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.IsoObjectPicker$ClickObject extends java.lang.Object
    export class IsoObjectPicker$ClickObject {
      private constructor();
      height: number;
      lx: number;
      ly: number;
      scaleX: number;
      scaleY: number;
      square?: zombie.iso.IsoGridSquare;
      tile?: zombie.iso.IsoObject;
      width: number;
      x: number;
      y: number;
  
      calculateScore(): number;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getScore(): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.IsoPuddles extends java.lang.Object
    export class IsoPuddles {
      private constructor();
      static readonly BOOL_MAX: number;
      Effect?: zombie.core.opengl.Shader;
      static readonly FLOAT_MAX: number;
      static readonly FLOAT_MUDDYPUDDLES: number;
      static readonly FLOAT_PUDDLESSIZE: number;
      static readonly FLOAT_RAIN: number;
      static readonly FLOAT_RAININTENSITY: number;
      static readonly FLOAT_WETGROUND: number;
      static readonly VBOs?: zombie.core.opengl.SharedVertexBufferObjects;
      static leakingPuddlesInTheRoom: boolean;
  
      applyPuddlesQuality(): void;
      equals(arg0: any): boolean;
      getBoolMax(): number;
      getClass(): java.lang.Class<any>;
      getFloatMax(): number;
      getHMTexture(): zombie.interfaces.ITexture;
      getInstance(): zombie.iso.IsoPuddles;
      getPuddlesFloat(arg0: number): zombie.iso.IsoPuddles$PuddlesFloat;
      getPuddlesParams(arg0: number): java.nio.FloatBuffer;
      getPuddlesSize(): number;
      getRainIntensity(): number;
      getShaderEnable(): boolean;
      getShaderOffset(): org.joml.Vector4f;
      getShaderOffsetMain(): org.joml.Vector4f;
      getShaderTime(): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      puddlesGeometry(arg0: number): void;
      puddlesProjection(): void;
      render(arg0: java.util.ArrayList<zombie.iso.IsoGridSquare>, arg1: number): void;
      toString(): string;
      update(arg0: zombie.iso.weather.ClimateManager): void;
      wait(arg0: number): void;
    }
    // zombie.iso.IsoPuddles$PuddlesFloat extends java.lang.Object
    export class IsoPuddles$PuddlesFloat {
      private constructor();
      addFinalValue(arg0: number): void;
      addFinalValueForMax(arg0: number, arg1: number): void;
      equals(arg0: any): boolean;
      getAdminValue(): number;
      getClass(): java.lang.Class<any>;
      getFinalValue(): number;
      getID(): number;
      getMax(): number;
      getMin(): number;
      getName(): string;
      hashCode(): number;
      init(arg0: number, arg1: string): zombie.iso.IsoPuddles$PuddlesFloat;
      interpolateFinalValue(arg0: number): void;
      isEnableAdmin(): boolean;
      notify(): void;
      notifyAll(): void;
      setAdminValue(arg0: number): void;
      setEnableAdmin(arg0: boolean): void;
      setFinalValue(arg0: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.IsoPuddlesGeometry extends java.lang.Object
    export class IsoPuddlesGeometry {
      private constructor();
      static readonly pool?: zombie.popman.ObjectPool<zombie.iso.IsoPuddlesGeometry>;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      init(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoPuddlesGeometry;
      notify(): void;
      notifyAll(): void;
      recalcIfNeeded(): void;
      shouldRender(): boolean;
      toString(): string;
      updateLighting(arg0: number): void;
      wait(arg0: number): void;
    }
    // zombie.iso.IsoPushableObject extends zombie.iso.IsoMovingObject
    export class IsoPushableObject {
      private constructor();
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      static LowLightingQualityHack: boolean;
      static readonly MAX_WALL_SPLATS: number;
      static readonly MAX_ZOMBIES_EATING: number;
      NoPicking: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OutlineOnMouseover: boolean;
      bAlphaForced: boolean;
      bNeverDoneAlpha: boolean;
      readonly bOutline?: boolean[];
      static bmod: number;
      carryCapacity: number;
      connectList?: java.util.ArrayList<zombie.iso.IsoPushableObject>;
      container?: zombie.inventory.ItemContainer;
      def?: zombie.iso.sprite.IsoSpriteInstance;
      dir?: zombie.iso.IsoDirections;
      doNotSync: boolean;
      emitter?: zombie.audio.BaseSoundEmitter;
      emptyWeight: number;
      static gmod: number;
      highlightFlags: number;
      keyId: number;
      last?: zombie.iso.IsoGridSquare;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      lx: number;
      ly: number;
      lz: number;
      name?: string;
      noDamage: boolean;
      nx: number;
      ny: number;
      offsetX: number;
      offsetY: number;
      readonly outlineColor?: zombie.core.textures.ColorInfo[];
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      ox: number;
      oy: number;
      partialThumpDmg: number;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      sheetRope: boolean;
      sheetRopeHealth: number;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      square?: zombie.iso.IsoGridSquare;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      tintb: number;
      tintg: number;
      tintr: number;
      static treeSoundMgr?: zombie.iso.IsoMovingObject$TreeSoundManager;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
      x: number;
      y: number;
      z: number;
  
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number): void;
      Despawn(): void;
      DirtySlice(): void;
      DistTo(arg0: number, arg1: number): number;
      DistToProper(arg0: zombie.iso.IsoObject): number;
      DistToSquared(arg0: zombie.iso.IsoMovingObject): number;
      DoCollideNorS(): void;
      DoCollideWorE(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasTooltip(): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      Move(arg0: zombie.iso.Vector2): void;
      MoveUnmodded(arg0: zombie.iso.Vector2): void;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      addToWorld(): void;
      canAddSheetRope(): boolean;
      canHaveMultipleHits(): number;
      checkHaveElectricity(): void;
      cleanWallBlood(): void;
      clearAttachedAnimSprite(): void;
      collideWith(arg0: zombie.iso.IsoObject): void;
      compareToY(arg0: zombie.iso.IsoMovingObject): number;
      countAddSheetRope(): number;
      createContainersFromSpriteProperties(): void;
      customHashCode(): number;
      debugPrintout(): void;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      distToNearestCamCharacter(): number;
      doFindExternalWaterSource(): void;
      doStairs(): void;
      ensureOnTile(): void;
      equals(arg0: any): boolean;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      getAlpha(arg0: number): number;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getBuilding(): zombie.iso.areas.IsoBuilding;
      getBumpedType(arg0: zombie.characters.IsoGameCharacter): string;
      getCell(): zombie.iso.IsoCell;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getClass(): java.lang.Class<any>;
      getCollideType(): string;
      getCollidedObject(): zombie.iso.IsoObject;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getCurrentBuilding(): zombie.iso.areas.IsoBuilding;
      getCurrentSquare(): zombie.iso.IsoGridSquare;
      getCurrentZone(): zombie.iso.IsoMetaGrid$Zone;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getDamage(): number;
      getDir(): zombie.iso.IsoDirections;
      getDistanceSq(arg0: zombie.iso.IsoMovingObject): number;
      getEatingZombies(): java.util.ArrayList<zombie.characters.IsoZombie>;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getFeelerTile(arg0: number): zombie.iso.IsoGridSquare;
      getFeelersize(): number;
      getFuturWalkedSquare(): zombie.iso.IsoGridSquare;
      getGlobalMovementMod(arg0: boolean): number;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getHitDir(): zombie.iso.Vector2;
      getHitForce(): number;
      getHitFromAngle(): number;
      getID(): number;
      getIDCount(): number;
      getImpulsex(): number;
      getImpulsey(): number;
      getIsSurfaceNormalOffset(): boolean;
      getItemContainer(): zombie.inventory.ItemContainer;
      getKeyId(): number;
      getLastCollideTime(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getLastSquare(): zombie.iso.IsoGridSquare;
      getLastTargettedBy(): zombie.characters.IsoZombie;
      getLimpulsex(): number;
      getLimpulsey(): number;
      getLx(): number;
      getLy(): number;
      getLz(): number;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getMasterRegion(): zombie.iso.areas.isoregion.regions.IWorldRegion;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getMovementLastFrame(): zombie.iso.Vector2;
      getMovingObjectIndex(): number;
      getName(): string;
      getNew(): zombie.iso.IsoObject;
      getNoDamage(): boolean;
      getNx(): number;
      getNy(): number;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffsetX(): number;
      getOffsetY(): number;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPathFindIndex(): number;
      getPipedFuelAmount(): number;
      getPosition(arg0: zombie.iso.Vector3): zombie.iso.Vector3;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getScreenX(): number;
      getScreenY(): number;
      getScriptModule(): string;
      getScriptName(): string;
      getScriptnx(): number;
      getScriptny(): number;
      getSpecialObjectIndex(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSquare(): zombie.iso.IsoGridSquare;
      getStateEventDelayTimer(): number;
      getStaticMovingObjectIndex(): number;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTargetAlpha(arg0: number): number;
      getTextureName(): string;
      getThumpCondition(): number;
      getThumpTarget(): zombie.iso.objects.interfaces.Thumpable;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTile(): string;
      getTimeSinceZombieAttack(): number;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUsesExternalWaterSource(): boolean;
      getVectorFromDirection(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWeight(): number;
      getWidth(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWorldObjectIndex(): number;
      getX(): number;
      getY(): number;
      getZ(): number;
      hasExternalWaterSource(): boolean;
      hasModData(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isBlink(): boolean;
      isCharacter(): boolean;
      isCloseKilled(): boolean;
      isCollidable(): boolean;
      isCollided(): boolean;
      isCollidedE(): boolean;
      isCollidedN(): boolean;
      isCollidedS(): boolean;
      isCollidedThisFrame(): boolean;
      isCollidedW(): boolean;
      isCollidedWithDoor(): boolean;
      isCollidedWithVehicle(): boolean;
      isDestroyed(): boolean;
      isEatingOther(arg0: zombie.iso.IsoMovingObject): boolean;
      isExistInTheWorld(): boolean;
      isFirstUpdate(): boolean;
      isFloor(): boolean;
      isHighlighted(): boolean;
      isHoppable(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isMaskClicked(arg0: number, arg1: number, arg2: boolean): boolean;
      isMovedThumpable(): boolean;
      isNoPicking(): boolean;
      isNorthHoppable(): boolean;
      isOnFloor(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isPushableForSeparate(): boolean;
      isPushedByForSeparate(arg0: zombie.iso.IsoMovingObject): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isShootable(): boolean;
      isSolid(): boolean;
      isSolidForSeparate(): boolean;
      isSpriteInvisible(): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isZombie(): boolean;
      isZombiesDontAttack(): boolean;
      isbAltCollide(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      postupdate(): void;
      preupdate(): void;
      removeAllContainers(): void;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reset(): void;
      reuseGridSquare(): void;
      save(arg0: java.nio.ByteBuffer): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      separate(): void;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setBlink(arg0: boolean): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setCloseKilled(arg0: boolean): void;
      setCollidable(arg0: boolean): void;
      setCollideType(arg0: string): void;
      setCollidedE(arg0: boolean): void;
      setCollidedN(arg0: boolean): void;
      setCollidedObject(arg0: zombie.iso.IsoObject): void;
      setCollidedS(arg0: boolean): void;
      setCollidedThisFrame(arg0: boolean): void;
      setCollidedW(arg0: boolean): void;
      setCollidedWithDoor(arg0: boolean): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCurrent(arg0: zombie.iso.IsoGridSquare): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setDamage(arg0: number): void;
      setDefaultCondition(arg0: number): void;
      setDestroyed(arg0: boolean): void;
      setDir(arg0: zombie.iso.IsoDirections): void;
      setEatingZombies(arg0: java.util.ArrayList<zombie.characters.IsoZombie>): void;
      setFeelersize(arg0: number): void;
      setFirstUpdate(arg0: boolean): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setHitDir(arg0: zombie.iso.Vector2): void;
      setHitForce(arg0: number): void;
      setHitFromAngle(arg0: number): void;
      setID(arg0: number): void;
      setIDCount(arg0: number): void;
      setImpulsex(arg0: number): void;
      setImpulsey(arg0: number): void;
      setKeyId(arg0: number): void;
      setLast(arg0: zombie.iso.IsoGridSquare): void;
      setLastCollideTime(arg0: number): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setLastTargettedBy(arg0: zombie.characters.IsoZombie): void;
      setLimpulsex(arg0: number): void;
      setLimpulsey(arg0: number): void;
      setLx(arg0: number): void;
      setLy(arg0: number): void;
      setLz(arg0: number): void;
      setMovedThumpable(arg0: boolean): void;
      setMovementLastFrame(arg0: zombie.iso.Vector2): void;
      setMovingSquareNow(): void;
      setName(arg0: string): void;
      setNoDamage(arg0: boolean): void;
      setNoPicking(arg0: boolean): void;
      setNx(arg0: number): void;
      setNy(arg0: number): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOnFloor(arg0: boolean): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPathFindIndex(arg0: number): void;
      setPipedFuelAmount(arg0: number): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setScriptModule(arg0: string): void;
      setScriptnx(arg0: number): void;
      setScriptny(arg0: number): void;
      setShootable(arg0: boolean): void;
      setSolid(arg0: boolean): void;
      setSpecialTooltip(arg0: boolean): void;
      setSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setStateEventDelayTimer(arg0: number): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTaintedWater(arg0: boolean): void;
      setTargetAlpha(arg0: number): void;
      setThumpTarget(arg0: zombie.iso.objects.interfaces.Thumpable): void;
      setTimeSinceZombieAttack(arg0: number): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setWaterAmount(arg0: number): void;
      setWeight(arg0: number): void;
      setWidth(arg0: number): void;
      setX(arg0: number): void;
      setY(arg0: number): void;
      setZ(arg0: number): void;
      setZombiesDontAttack(arg0: boolean): void;
      setbAltCollide(arg0: boolean): void;
      softReset(): void;
      spotted(arg0: zombie.iso.IsoMovingObject, arg1: boolean): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection, arg3: java.nio.ByteBuffer): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      toString(): string;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitModData(): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      unsetOutlineHighlight(): void;
      update(): void;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    // zombie.iso.IsoRoomLight extends java.lang.Object
    export class IsoRoomLight {
      private constructor();
      ID: number;
      static NextID: number;
      b: number;
      bActive: boolean;
      bActiveJNI: boolean;
      bHydroPowered: boolean;
      g: number;
      height: number;
      r: number;
      room?: zombie.iso.areas.IsoRoom;
      width: number;
      x: number;
      y: number;
      z: number;
  
      addInfluence(): void;
      clearInfluence(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      isInBounds(): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.IsoUtils extends java.lang.Object
    export class IsoUtils {
      private constructor();
      DistanceManhatten(arg0: number, arg1: number, arg2: number, arg3: number): number;
      DistanceManhattenSquare(arg0: number, arg1: number, arg2: number, arg3: number): number;
      DistanceTo(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): number;
      DistanceTo2D(arg0: number, arg1: number, arg2: number, arg3: number): number;
      DistanceToSquared(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): number;
      XToIso(arg0: number, arg1: number, arg2: number): number;
      XToIsoTrue(arg0: number, arg1: number, arg2: number): number;
      XToScreen(arg0: number, arg1: number, arg2: number, arg3: number): number;
      XToScreenExact(arg0: number, arg1: number, arg2: number, arg3: number): number;
      XToScreenInt(arg0: number, arg1: number, arg2: number, arg3: number): number;
      YToIso(arg0: number, arg1: number, arg2: number): number;
      YToScreen(arg0: number, arg1: number, arg2: number, arg3: number): number;
      YToScreenExact(arg0: number, arg1: number, arg2: number, arg3: number): number;
      YToScreenInt(arg0: number, arg1: number, arg2: number, arg3: number): number;
      clamp(arg0: number, arg1: number, arg2: number): number;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      isSimilarDirection(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): boolean;
      lerp(arg0: number, arg1: number, arg2: number): number;
      notify(): void;
      notifyAll(): void;
      smoothstep(arg0: number, arg1: number, arg2: number): number;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.IsoWallBloodSplat extends java.lang.Object
    export class IsoWallBloodSplat {
      private constructor();
      sprite?: zombie.iso.sprite.IsoSprite;
      worldAge: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      notify(): void;
      notifyAll(): void;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      save(arg0: java.nio.ByteBuffer): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.IsoWaterGeometry extends java.lang.Object
    export class IsoWaterGeometry {
      private constructor();
      static readonly pool?: zombie.popman.ObjectPool<zombie.iso.IsoWaterGeometry>;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getFlow(): number;
      hashCode(): number;
      init(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoWaterGeometry;
      isShore(): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.IsoWorld extends java.lang.Object
    export class IsoWorld {
      private constructor();
      AddCoopPlayers?: java.util.ArrayList<zombie.util.AddCoopPlayer>;
      readonly Characters?: java.util.ArrayList<zombie.characters.IsoGameCharacter>;
      CurrentCell?: zombie.iso.IsoCell;
      readonly MetaGrid?: zombie.iso.IsoMetaGrid;
      static NoZombies: boolean;
      static readonly PropertyValueMap?: java.util.HashMap<string, java.util.ArrayList<string>>;
      static SavedWorldVersion: number;
      SurvivorDescriptors?: java.util.HashMap<number, zombie.characters.SurvivorDesc>;
      SurvivorSurvivalRecord: number;
      TotalSurvivorNights: number;
      TotalSurvivorsDead: number;
      static TotalWorldVersion: number;
      static readonly WorldVersion: number;
      static readonly WorldVersion_AlarmClockRingSince: number;
      static readonly WorldVersion_AllPatches: number;
      static readonly WorldVersion_AlreadyReadBooks1: number;
      static readonly WorldVersion_AlreadyReadBooks2: number;
      static readonly WorldVersion_AttachedSlotType: number;
      static readonly WorldVersion_Barricade: number;
      static readonly WorldVersion_BodyLocation: number;
      static readonly WorldVersion_CanUpgradePerk: number;
      static readonly WorldVersion_CharacterModelData: number;
      static readonly WorldVersion_CharacterModelData2: number;
      static readonly WorldVersion_CharacterModelData3: number;
      static readonly WorldVersion_ChunkSpawnedRooms: number;
      static readonly WorldVersion_ChunkVehicles: number;
      static readonly WorldVersion_ClimateAdded: number;
      static readonly WorldVersion_ClimateColors: number;
      static readonly WorldVersion_ClothingPatchSaveLoad: number;
      static readonly WorldVersion_CompostLastUpdated: number;
      static readonly WorldVersion_ContainerMaxCapacity: number;
      static readonly WorldVersion_DayLengthHours: number;
      static readonly WorldVersion_DeadBodyAngle: number;
      static readonly WorldVersion_DeadBodyFakeDead: number;
      static readonly WorldVersion_DeadBodyPersistentOutfitID: number;
      static readonly WorldVersion_DeadBodyZombieRotStage: number;
      static readonly WorldVersion_DeathDragDown: number;
      static readonly WorldVersion_Fitness: number;
      static readonly WorldVersion_Fitness2: number;
      static readonly WorldVersion_FliesSound: number;
      static readonly WorldVersion_GeneratorFuelFloat: number;
      static readonly WorldVersion_HumanVisualBlood: number;
      static readonly WorldVersion_InfectionTime: number;
      static readonly WorldVersion_ItemContainerIdenticalItems: number;
      static readonly WorldVersion_ItemContainerIdenticalItemsInt: number;
      static readonly WorldVersion_ItemVisualFullType: number;
      static readonly WorldVersion_KateBobStorm: number;
      static readonly WorldVersion_LampOnPillar: number;
      static readonly WorldVersion_LampOnPillar2: number;
      static readonly WorldVersion_LootRespawn: number;
      static readonly WorldVersion_MediaDisksAndTapes: number;
      static readonly WorldVersion_NewFog: number;
      static readonly WorldVersion_NewSandboxLootModifier: number;
      static readonly WorldVersion_NoiseMakerDuration: number;
      static readonly WorldVersion_OverlappingGenerators: number;
      static readonly WorldVersion_PerkName: number;
      static readonly WorldVersion_PlayerVehicleSeat: number;
      static readonly WorldVersion_PolygonZone: number;
      static readonly WorldVersion_PolylineZone: number;
      static readonly WorldVersion_SandboxOptions: number;
      static readonly WorldVersion_Thermos: number;
      static readonly WorldVersion_TimedActionInstantCheat: number;
      static readonly WorldVersion_VehicleBlood: number;
      static readonly WorldVersion_VehicleJNITransform: number;
      static readonly WorldVersion_VehicleLightFocusing: number;
      static readonly WorldVersion_VehicleSirenStartTime: number;
      static readonly WorldVersion_VehicleTowAttachment: number;
      static readonly WorldVersion_VehicleTowingID: number;
      static readonly WorldVersion_ZombieRotStage: number;
      bDoChunkMapUpdate: boolean;
      emitterUpdate: boolean;
      readonly helicopter?: zombie.iso.Helicopter;
      static instance?: zombie.iso.IsoWorld;
      static mapPath?: string;
      static mapUseJar: boolean;
      static saveoffsetx: number;
      static saveoffsety: number;
      sky?: zombie.iso.sprite.SkyBox;
      x: number;
      y: number;
  
      CreateRandomSurvivor(arg0: zombie.characters.SurvivorDesc, arg1: zombie.iso.IsoGridSquare, arg2: zombie.characters.IsoPlayer): zombie.characters.IsoSurvivor;
      CreateSwarm(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      ForceKillAllZombies(): void;
      KillCell(): void;
      LoadPlayerForInfo(): boolean;
      LoadTileDefinitions(arg0: zombie.iso.sprite.IsoSpriteManager, arg1: string, arg2: number): void;
      LoadTileDefinitionsPropertyStrings(arg0: zombie.iso.sprite.IsoSpriteManager, arg1: string, arg2: number): void;
      addLuaTrait(arg0: string): void;
      checkVehiclesZones(): void;
      equals(arg0: any): boolean;
      getAllTiles(arg0: string): java.util.ArrayList<string>;
      getAllTilesName(): java.util.ArrayList<string>;
      getCell(): zombie.iso.IsoCell;
      getClass(): java.lang.Class<any>;
      getClimateManager(): zombie.iso.weather.ClimateManager;
      getDifficulty(): string;
      getFrameNo(): number;
      getFreeEmitter(): zombie.audio.BaseSoundEmitter;
      getGameMode(): string;
      getGlobalTemperature(): number;
      getItemFromXYZIndexBuffer(arg0: java.nio.ByteBuffer): zombie.iso.IsoObject;
      getLuaPlayerDesc(): zombie.characters.SurvivorDesc;
      getLuaPosX(): number;
      getLuaPosY(): number;
      getLuaPosZ(): number;
      getLuaSpawnCellX(): number;
      getLuaSpawnCellY(): number;
      getLuaTraits(): java.util.ArrayList<string>;
      getMap(): string;
      getMetaChunk(arg0: number, arg1: number): zombie.iso.IsoMetaChunk;
      getMetaChunkFromTile(arg0: number, arg1: number): zombie.iso.IsoMetaChunk;
      getMetaGrid(): zombie.iso.IsoMetaGrid;
      getPuddlesManager(): zombie.iso.IsoPuddles;
      getRBBasic(): zombie.randomizedWorld.randomizedBuilding.RandomizedBuildingBase;
      getRandomizedBuildingList(): java.util.ArrayList<zombie.randomizedWorld.randomizedBuilding.RandomizedBuildingBase>;
      getRandomizedVehicleStoryByName(arg0: string): zombie.randomizedWorld.randomizedVehicleStory.RandomizedVehicleStoryBase;
      getRandomizedVehicleStoryList(): java.util.ArrayList<zombie.randomizedWorld.randomizedVehicleStory.RandomizedVehicleStoryBase>;
      getRandomizedZoneList(): java.util.ArrayList<zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase>;
      getSpawnedZombieZone(): java.util.HashMap<string, java.util.ArrayList<number>>;
      getTimeSinceLastSurvivorInHorde(): number;
      getWeather(): string;
      getWorld(): string;
      getWorldAgeDays(): number;
      getWorldSquareX(): number;
      getWorldSquareY(): number;
      getWorldVersion(): number;
      getZombiesDisabled(): boolean;
      getZombiesEnabled(): boolean;
      hashCode(): number;
      init(): void;
      isAnimRecorderActive(): boolean;
      isAnimRecorderDiscardTriggered(): boolean;
      isValidSquare(arg0: number, arg1: number, arg2: number): boolean;
      notify(): void;
      notifyAll(): void;
      readInt(arg0: java.io.RandomAccessFile): number;
      readString(arg0: java.io.InputStream): string;
      registerMannequinZone(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: se.krka.kahlua.vm.KahluaTable): zombie.iso.IsoMetaGrid$Zone;
      registerSpawnOrigin(arg0: number, arg1: number, arg2: number, arg3: number, arg4: se.krka.kahlua.vm.KahluaTable): void;
      registerVehiclesZone(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: se.krka.kahlua.vm.KahluaTable): zombie.iso.IsoMetaGrid$Zone;
      registerWaterFlow(arg0: number, arg1: number, arg2: number, arg3: number): void;
      registerWaterZone(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
      registerZone(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): zombie.iso.IsoMetaGrid$Zone;
      registerZoneNoOverlap(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): zombie.iso.IsoMetaGrid$Zone;
      removeZonesForLotDirectory(arg0: string): void;
      render(): void;
      renderTerrain(): void;
      returnOwnershipOfEmitter(arg0: zombie.audio.BaseSoundEmitter): void;
      sceneCullZombies(): void;
      setDifficulty(arg0: string): void;
      setDrawWorld(arg0: boolean): void;
      setEmitterOwner(arg0: zombie.audio.BaseSoundEmitter, arg1: zombie.iso.IsoObject): void;
      setGameMode(arg0: string): void;
      setGlobalTemperature(arg0: number): void;
      setLuaPlayerDesc(arg0: zombie.characters.SurvivorDesc): void;
      setLuaPosX(arg0: number): void;
      setLuaPosY(arg0: number): void;
      setLuaPosZ(arg0: number): void;
      setLuaSpawnCellX(arg0: number): void;
      setLuaSpawnCellY(arg0: number): void;
      setMap(arg0: string): void;
      setTimeSinceLastSurvivorInHorde(arg0: number): void;
      setWeather(arg0: string): void;
      setWorld(arg0: string): void;
      takeOwnershipOfEmitter(arg0: zombie.audio.BaseSoundEmitter): void;
      toString(): string;
      transmitWeather(): void;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.iso.IsoWorld$Frame extends java.lang.Object
    export class IsoWorld$Frame {
      private constructor();
      Type?: java.util.ArrayList<number>;
      xPos?: java.util.ArrayList<number>;
      yPos?: java.util.ArrayList<number>;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.IsoWorld$MetaCell extends java.lang.Object
    export class IsoWorld$MetaCell {
      private constructor();
      from?: number[][];
      x: number;
      y: number;
      zombieCount: number;
      zombieMigrateDirection?: zombie.iso.IsoDirections;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.LosUtil extends java.lang.Object
    export class LosUtil {
      private constructor();
      static XSIZE: number;
      static YSIZE: number;
      static ZSIZE: number;
      static cachecleared?: boolean[];
      static cachedresults?: number[][][][];
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      init(arg0: number, arg1: number): void;
      lineClear(arg0: zombie.iso.IsoCell, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: boolean, arg8: number): zombie.iso.LosUtil$TestResults;
      lineClearCached(arg0: zombie.iso.IsoCell, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: boolean, arg8: number): zombie.iso.LosUtil$TestResults;
      lineClearCollide(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean): boolean;
      lineClearCollideCount(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoCell, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.iso.LosUtil$TestResults */
    export class LosUtil$TestResults {
      /* ENUM VALUES */
      static readonly Blocked: LosUtil$TestResults; 
      static readonly Clear: LosUtil$TestResults; 
      static readonly ClearThroughClosedDoor: LosUtil$TestResults; 
      static readonly ClearThroughOpenDoor: LosUtil$TestResults; 
      static readonly ClearThroughWindow: LosUtil$TestResults; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.iso.LosUtil$TestResults[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): LosUtil$TestResults;
      valueOf(arg0: string): zombie.iso.LosUtil$TestResults;
      values(): zombie.iso.LosUtil$TestResults[];
    }
    // zombie.iso.LotHeader extends java.lang.Object
    export class LotHeader {
      private constructor();
      readonly Buildings?: java.util.ArrayList<zombie.iso.BuildingDef>;
      readonly RoomList?: java.util.ArrayList<zombie.iso.RoomDef>;
      readonly Rooms?: java.util.HashMap<number, zombie.iso.RoomDef>;
      bFixed2x: boolean;
      height: number;
      readonly isoBuildings?: java.util.HashMap<number, zombie.iso.areas.IsoBuilding>;
      readonly isoRooms?: java.util.HashMap<number, zombie.iso.areas.IsoRoom>;
      levels: number;
      version: number;
      width: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getHeight(): number;
      getLevels(): number;
      getRoom(arg0: number): zombie.iso.areas.IsoRoom;
      getRoomAt(arg0: number, arg1: number, arg2: number): number;
      getWidth(): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.MetaObject extends java.lang.Object
    export class MetaObject {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getRoom(): zombie.iso.RoomDef;
      getType(): number;
      getUsed(): boolean;
      getX(): number;
      getY(): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      setUsed(arg0: boolean): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.MultiStageBuilding extends java.lang.Object
    export class MultiStageBuilding {
      private constructor();
      static readonly stages?: java.util.ArrayList<zombie.iso.MultiStageBuilding$Stage>;
  
      addStage(arg0: zombie.iso.MultiStageBuilding$Stage): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getStages(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoObject, arg2: boolean): java.util.ArrayList<zombie.iso.MultiStageBuilding$Stage>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.MultiStageBuilding$Stage extends java.lang.Object
    export class MultiStageBuilding$Stage {
      private constructor();
      ID?: string;
      bonusHealth: number;
      bonusHealthSkill: boolean;
      canBarricade: boolean;
      canBePlastered: boolean;
      completionSound?: string;
      craftingSound?: string;
      items?: java.util.HashMap<string, number>;
      itemsToKeep?: java.util.ArrayList<string>;
      knownRecipe?: string;
      name?: string;
      northSprite?: string;
      perks?: java.util.HashMap<string, number>;
      previousStage?: java.util.ArrayList<string>;
      recipeName?: string;
      sprite?: string;
      thumpSound?: string;
      timeNeeded: number;
      wallType?: string;
      xp?: java.util.HashMap<string, number>;
  
      Load(arg0: string, arg1: string[]): void;
      canBeDone(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoObject, arg2: boolean): boolean;
      doStage(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.objects.IsoThumpable, arg2: boolean): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getCraftingSound(): string;
      getDisplayName(): string;
      getItemsLua(): se.krka.kahlua.vm.KahluaTable;
      getItemsToKeep(): java.util.ArrayList<string>;
      getKnownRecipe(): string;
      getName(): string;
      getNorthSprite(): string;
      getPerksLua(): se.krka.kahlua.vm.KahluaTable;
      getPreviousStages(): java.util.ArrayList<string>;
      getRecipeName(): string;
      getSprite(): string;
      getThumpSound(): string;
      getTimeNeeded(arg0: zombie.characters.IsoGameCharacter): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.NearestWalls extends java.lang.Object
    export class NearestWalls {
      private constructor();
      ClosestWallDistance(arg0: zombie.iso.IsoChunk, arg1: number, arg2: number, arg3: number): number;
      chunkLoaded(arg0: zombie.iso.IsoChunk): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      render(arg0: number, arg1: number, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.NearestWalls$ChunkData extends java.lang.Object
    export class NearestWalls$ChunkData {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.PlayerCamera extends java.lang.Object
    export class PlayerCamera {
      private constructor();
      DeferedX: number;
      DeferedY: number;
      OffX: number;
      OffY: number;
      OffscreenHeight: number;
      OffscreenWidth: number;
      RightClickTargetX: number;
      RightClickTargetY: number;
      RightClickX: number;
      RightClickY: number;
      TOffX: number;
      TOffY: number;
      lastOffX: number;
      lastOffY: number;
      readonly playerIndex: number;
      zoom: number;
  
      XToIso(arg0: number, arg1: number, arg2: number): number;
      XToScreenExact(arg0: number, arg1: number, arg2: number, arg3: number): number;
      YToIso(arg0: number, arg1: number, arg2: number): number;
      YToScreenExact(arg0: number, arg1: number, arg2: number, arg3: number): number;
      center(): void;
      copyFrom(arg0: zombie.iso.PlayerCamera): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getLastOffX(): number;
      getLastOffY(): number;
      getOffX(): number;
      getOffY(): number;
      getTOffX(): number;
      getTOffY(): number;
      hashCode(): number;
      initFromIsoCamera(arg0: number): void;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.iso.RoomDef extends java.lang.Object
    export class RoomDef {
      private constructor();
      ID: number;
      IndoorZombies: number;
      area: number;
      bDoneSpawn: boolean;
      bExplored: boolean;
      bLightsActive: boolean;
      building?: zombie.iso.BuildingDef;
      level: number;
      name?: string;
      readonly objects?: java.util.ArrayList<zombie.iso.MetaObject>;
      readonly rects?: java.util.ArrayList<zombie.iso.RoomDef$RoomRect>;
      spawnCount: number;
      x: number;
      x2: number;
      y: number;
      y2: number;
  
      CalculateBounds(): void;
      Dispose(): void;
      equals(arg0: any): boolean;
      forEachChunk(arg0: java.util._function.BiConsumer<zombie.iso.RoomDef, zombie.iso.IsoChunk>): void;
      getArea(): number;
      getAreaOverlapping(arg0: zombie.iso.IsoChunk): number;
      getBuilding(): zombie.iso.BuildingDef;
      getClass(): java.lang.Class<any>;
      getFreeSquare(): zombie.iso.IsoGridSquare;
      getH(): number;
      getID(): number;
      getIsoRoom(): zombie.iso.areas.IsoRoom;
      getMetaObjects(): java.util.ArrayList<zombie.iso.MetaObject>;
      getName(): string;
      getObjects(): java.util.ArrayList<zombie.iso.MetaObject>;
      getProceduralSpawnedContainer(): java.util.HashMap<string, number>;
      getRandomSquare(arg0: java.util._function.Predicate<zombie.iso.IsoGridSquare>): zombie.iso.IsoGridSquare;
      getRects(): java.util.ArrayList<zombie.iso.RoomDef$RoomRect>;
      getW(): number;
      getX(): number;
      getX2(): number;
      getY(): number;
      getY2(): number;
      getZ(): number;
      hashCode(): number;
      intersects(arg0: number, arg1: number, arg2: number, arg3: number): boolean;
      isEmptyOutside(): boolean;
      isExplored(): boolean;
      isInside(arg0: number, arg1: number, arg2: number): boolean;
      isRoofFixed(): boolean;
      notify(): void;
      notifyAll(): void;
      refreshSquares(): void;
      setBuilding(arg0: zombie.iso.BuildingDef): void;
      setExplored(arg0: boolean): void;
      setRoofFixed(arg0: boolean): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.RoomDef$RoomRect extends java.lang.Object
    export class RoomDef$RoomRect {
      private constructor();
      h: number;
      w: number;
      x: number;
      y: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getH(): number;
      getW(): number;
      getX(): number;
      getX2(): number;
      getY(): number;
      getY2(): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.SearchMode extends java.lang.Object
    export class SearchMode {
      private constructor();
      equals(arg0: any): boolean;
      getBlur(arg0: number): zombie.iso.SearchMode$SearchModeFloat;
      getClass(): java.lang.Class<any>;
      getDarkness(arg0: number): zombie.iso.SearchMode$SearchModeFloat;
      getDesat(arg0: number): zombie.iso.SearchMode$SearchModeFloat;
      getFadeTime(): number;
      getGradientWidth(arg0: number): zombie.iso.SearchMode$SearchModeFloat;
      getInstance(): zombie.iso.SearchMode;
      getRadius(arg0: number): zombie.iso.SearchMode$SearchModeFloat;
      getSearchModeForPlayer(arg0: number): zombie.iso.SearchMode$PlayerSearchMode;
      hashCode(): number;
      isEnabled(arg0: number): boolean;
      isOverride(arg0: number): boolean;
      notify(): void;
      notifyAll(): void;
      reset(): void;
      setEnabled(arg0: number, arg1: boolean): void;
      setFadeTime(arg0: number): void;
      setOverride(arg0: number, arg1: boolean): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.iso.SearchMode$PlayerSearchMode extends java.lang.Object
    export class SearchMode$PlayerSearchMode {
      private constructor();
      equals(arg0: any): boolean;
      getBlur(): zombie.iso.SearchMode$SearchModeFloat;
      getClass(): java.lang.Class<any>;
      getDarkness(): zombie.iso.SearchMode$SearchModeFloat;
      getDesat(): zombie.iso.SearchMode$SearchModeFloat;
      getGradientWidth(): zombie.iso.SearchMode$SearchModeFloat;
      getRadius(): zombie.iso.SearchMode$SearchModeFloat;
      getShaderBlur(): number;
      getShaderDarkness(): number;
      getShaderDesat(): number;
      getShaderGradientWidth(): number;
      getShaderRadius(): number;
      hashCode(): number;
      isShaderEnabled(): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.SearchMode$SearchModeFloat extends java.lang.Object
    export class SearchMode$SearchModeFloat {
      private constructor();
      equalise(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getExterior(): number;
      getInterior(): number;
      getMax(): number;
      getMin(): number;
      getStepsize(): number;
      getTargetExterior(): number;
      getTargetInterior(): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      reset(): void;
      set(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setExterior(arg0: number): void;
      setInterior(arg0: number): void;
      setTargetExterior(arg0: number): void;
      setTargetInterior(arg0: number): void;
      setTargets(arg0: number, arg1: number): void;
      toString(): string;
      update(arg0: number): void;
      wait(arg0: number): void;
    }
    // zombie.iso.SliceY extends java.lang.Object
    export class SliceY {
      private constructor();
      static readonly SliceBuffer?: java.nio.ByteBuffer;
      static readonly SliceBufferLock?: any;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.TileOverlays extends java.lang.Object
    export class TileOverlays {
      private constructor();
      static readonly instance?: zombie.iso.TileOverlays;
  
      Reset(): void;
      addOverlays(arg0: se.krka.kahlua.j2se.KahluaTableImpl): void;
      equals(arg0: any): boolean;
      fixTableTopOverlays(arg0: zombie.iso.IsoGridSquare): void;
      getClass(): java.lang.Class<any>;
      hasOverlays(arg0: zombie.iso.IsoObject): boolean;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      updateTileOverlaySprite(arg0: zombie.iso.IsoObject): void;
      wait(arg0: number): void;
    }
    // zombie.iso.Vector2 extends java.lang.Object
    export class Vector2 {
      private constructor();
      x: number;
      y: number;
  
      add(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      addScaled(arg0: zombie.iso.Vector2, arg1: zombie.iso.Vector2, arg2: number, arg3: zombie.iso.Vector2): zombie.iso.Vector2;
      aimAt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      angleBetween(arg0: zombie.iso.Vector2): number;
      angleTo(arg0: zombie.iso.Vector2): number;
      clone(): zombie.iso.Vector2;
      distanceTo(arg0: zombie.iso.Vector2): number;
      dot(arg0: number, arg1: number, arg2: number, arg3: number): number;
      equals(arg0: any): boolean;
      fromAwtPoint(arg0: java.awt.Point): zombie.iso.Vector2;
      fromLengthDirection(arg0: number, arg1: number): zombie.iso.Vector2;
      getClass(): java.lang.Class<any>;
      getDirection(): number;
      getDirectionNeg(): number;
      getLength(): number;
      getLengthSquared(): number;
      getX(): number;
      getY(): number;
      hashCode(): number;
      normalize(): number;
      notify(): void;
      notifyAll(): void;
      rotate(arg0: number): void;
      scale(arg0: zombie.iso.Vector2, arg1: number): zombie.iso.Vector2;
      set(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      setDirection(arg0: number): zombie.iso.Vector2;
      setLength(arg0: number): zombie.iso.Vector2;
      setLengthAndDirection(arg0: number, arg1: number): zombie.iso.Vector2;
      setX(arg0: number): void;
      setY(arg0: number): void;
      tangent(): void;
      toAwtDimension(): java.awt.Dimension;
      toAwtPoint(): java.awt.Point;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.Vector3 extends java.lang.Object
    export class Vector3 {
      private constructor();
      x: number;
      y: number;
      z: number;
  
      add(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      addToThis(arg0: zombie.iso.Vector3): zombie.iso.Vector3;
      aimAt(arg0: zombie.iso.Vector2): zombie.iso.Vector3;
      angleTo(arg0: zombie.iso.Vector2): number;
      clone(): zombie.iso.Vector3;
      distanceTo(arg0: zombie.iso.Vector2): number;
      div(arg0: number): zombie.iso.Vector3;
      dot(arg0: number, arg1: number, arg2: number, arg3: number): number;
      dot3d(arg0: zombie.iso.Vector3): number;
      equals(arg0: any): boolean;
      fromAwtPoint(arg0: java.awt.Point): zombie.iso.Vector2;
      fromLengthDirection(arg0: number, arg1: number): zombie.iso.Vector2;
      getClass(): java.lang.Class<any>;
      getDirection(): number;
      getLength(): number;
      getLengthSq(): number;
      hashCode(): number;
      normalize(): void;
      notify(): void;
      notifyAll(): void;
      rotate(arg0: number): void;
      rotatey(arg0: number): void;
      set(arg0: number, arg1: number, arg2: number): zombie.iso.Vector3;
      setDirection(arg0: number): zombie.iso.Vector3;
      setLength(arg0: number): zombie.iso.Vector3;
      setLengthAndDirection(arg0: number, arg1: number): zombie.iso.Vector3;
      sub(arg0: zombie.iso.Vector3, arg1: zombie.iso.Vector3, arg2: zombie.iso.Vector3): zombie.iso.Vector3;
      toAwtDimension(): java.awt.Dimension;
      toAwtPoint(): java.awt.Point;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.WorldMarkers extends java.lang.Object
    export class WorldMarkers {
      private constructor();
      static readonly instance?: zombie.iso.WorldMarkers;
  
      addDirectionArrow(arg0: zombie.characters.IsoPlayer, arg1: number, arg2: number, arg3: number, arg4: string, arg5: number, arg6: number, arg7: number, arg8: number): zombie.iso.WorldMarkers$DirectionArrow;
      addGridSquareMarker(arg0: zombie.iso.IsoGridSquare, arg1: number, arg2: number, arg3: number, arg4: boolean, arg5: number): zombie.iso.WorldMarkers$GridSquareMarker;
      addPlayerHomingPoint(arg0: zombie.characters.IsoPlayer, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): zombie.iso.WorldMarkers$PlayerHomingPoint;
      debugRender(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDirectionArrow(arg0: number): zombie.iso.WorldMarkers$DirectionArrow;
      getGridSquareMarker(arg0: number): zombie.iso.WorldMarkers$GridSquareMarker;
      getHomingPoint(arg0: number): zombie.iso.WorldMarkers$PlayerHomingPoint;
      hashCode(): number;
      init(): void;
      intersectLineSegments(arg0: zombie.iso.WorldMarkers$Line, arg1: zombie.iso.WorldMarkers$Line, arg2: zombie.iso.WorldMarkers$Point): boolean;
      notify(): void;
      notifyAll(): void;
      removeAllDirectionArrows(arg0: zombie.characters.IsoPlayer): void;
      removeAllHomingPoints(arg0: zombie.characters.IsoPlayer): void;
      removeDirectionArrow(arg0: zombie.iso.WorldMarkers$DirectionArrow): boolean;
      removeGridSquareMarker(arg0: number): boolean;
      removeHomingPoint(arg0: number): boolean;
      removePlayerDirectionArrow(arg0: zombie.characters.IsoPlayer, arg1: zombie.iso.WorldMarkers$DirectionArrow): boolean;
      removePlayerHomingPoint(arg0: zombie.characters.IsoPlayer, arg1: number): boolean;
      render(): void;
      renderDirectionArrow(arg0: boolean): void;
      renderGridSquareMarkers(arg0: zombie.iso.IsoCell$PerPlayerRender, arg1: number, arg2: number): void;
      renderHomingPoint(): void;
      reset(): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.iso.WorldMarkers$DirectionArrow extends java.lang.Object
    export class WorldMarkers$DirectionArrow {
      private constructor();
      static readonly doDebug: boolean;
  
      equals(arg0: any): boolean;
      getA(): number;
      getB(): number;
      getClass(): java.lang.Class<any>;
      getG(): number;
      getID(): number;
      getR(): number;
      getRenderHeight(): number;
      getRenderWidth(): number;
      getX(): number;
      getY(): number;
      getZ(): number;
      hashCode(): number;
      isActive(): boolean;
      isRemoved(): boolean;
      notify(): void;
      notifyAll(): void;
      remove(): void;
      setA(arg0: number): void;
      setActive(arg0: boolean): void;
      setB(arg0: number): void;
      setG(arg0: number): void;
      setR(arg0: number): void;
      setRGBA(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setRenderHeight(arg0: number): void;
      setRenderWidth(arg0: number): void;
      setTexDown(arg0: string): void;
      setTexStairsDown(arg0: string): void;
      setTexStairsUp(arg0: string): void;
      setTexture(arg0: string): void;
      setX(arg0: number): void;
      setY(arg0: number): void;
      setZ(arg0: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.WorldMarkers$GridSquareMarker extends java.lang.Object
    export class WorldMarkers$GridSquareMarker {
      private constructor();
      equals(arg0: any): boolean;
      getA(): number;
      getAlpha(): number;
      getAlphaMax(): number;
      getAlphaMin(): number;
      getB(): number;
      getClass(): java.lang.Class<any>;
      getFadeSpeed(): number;
      getG(): number;
      getID(): number;
      getR(): number;
      getSize(): number;
      getX(): number;
      getY(): number;
      getZ(): number;
      hashCode(): number;
      init(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number): void;
      isActive(): boolean;
      isDoAlpha(): boolean;
      isDoBlink(): boolean;
      isRemoved(): boolean;
      isScaleCircleTexture(): boolean;
      notify(): void;
      notifyAll(): void;
      remove(): void;
      setA(arg0: number): void;
      setActive(arg0: boolean): void;
      setAlpha(arg0: number): void;
      setAlphaMax(arg0: number): void;
      setAlphaMin(arg0: number): void;
      setB(arg0: number): void;
      setDoAlpha(arg0: boolean): void;
      setDoBlink(arg0: boolean): void;
      setFadeSpeed(arg0: number): void;
      setG(arg0: number): void;
      setPos(arg0: number, arg1: number, arg2: number): void;
      setPosAndSize(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setR(arg0: number): void;
      setScaleCircleTexture(arg0: boolean): void;
      setSize(arg0: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.WorldMarkers$Line extends java.lang.Object
    export class WorldMarkers$Line {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.WorldMarkers$PlayerHomingPoint extends java.lang.Object
    export class WorldMarkers$PlayerHomingPoint {
      private constructor();
      equals(arg0: any): boolean;
      getA(): number;
      getAngleLerpVal(): number;
      getB(): number;
      getClass(): java.lang.Class<any>;
      getG(): number;
      getHomeOnOffsetX(): number;
      getHomeOnOffsetY(): number;
      getHomeOnTargetDist(): number;
      getID(): number;
      getMovementLerpVal(): number;
      getR(): number;
      getRenderHeight(): number;
      getRenderOffsetX(): number;
      getRenderOffsetY(): number;
      getRenderWidth(): number;
      getStickToCharDist(): number;
      getTargetAngle(): number;
      getX(): number;
      getY(): number;
      hashCode(): number;
      isActive(): boolean;
      isCustomTargetAngle(): boolean;
      isHomeOnTargetInView(): boolean;
      isRemoved(): boolean;
      notify(): void;
      notifyAll(): void;
      remove(): void;
      setA(arg0: number): void;
      setActive(arg0: boolean): void;
      setAngleLerpVal(arg0: number): void;
      setB(arg0: number): void;
      setCustomTargetAngle(arg0: boolean): void;
      setG(arg0: number): void;
      setHighCounter(): void;
      setHomeOnOffsetX(arg0: number): void;
      setHomeOnOffsetY(arg0: number): void;
      setHomeOnTargetDist(arg0: number): void;
      setHomeOnTargetInView(arg0: boolean): void;
      setMovementLerpVal(arg0: number): void;
      setR(arg0: number): void;
      setRenderHeight(arg0: number): void;
      setRenderOffsetX(arg0: number): void;
      setRenderOffsetY(arg0: number): void;
      setRenderWidth(arg0: number): void;
      setStickToCharDist(arg0: number): void;
      setTableSurface(): void;
      setTargetAngle(arg0: number): void;
      setTexture(arg0: string): void;
      setX(arg0: number): void;
      setXOffsetScaled(arg0: number): void;
      setY(arg0: number): void;
      setYOffsetScaled(arg0: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.WorldMarkers$Point extends java.lang.Object
    export class WorldMarkers$Point {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notInfinite(): boolean;
      notify(): void;
      notifyAll(): void;
      set(arg0: number, arg1: number): zombie.iso.WorldMarkers$Point;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.iso.SpriteDetails {
    /** [ENUM] zombie.iso.SpriteDetails.IsoFlagType */
    export class IsoFlagType {
      /* ENUM VALUES */
      static readonly CantClimb: IsoFlagType; 
      static readonly DoorWallN: IsoFlagType; 
      static readonly DoorWallW: IsoFlagType; 
      static readonly FloorHeightOneThird: IsoFlagType; 
      static readonly FloorHeightTwoThirds: IsoFlagType; 
      static readonly FloorOverlay: IsoFlagType; 
      static readonly ForceAmbient: IsoFlagType; 
      static readonly HasRainSplashes: IsoFlagType; 
      static readonly HasRaindrop: IsoFlagType; 
      static readonly HoppableN: IsoFlagType; 
      static readonly HoppableW: IsoFlagType; 
      static readonly MAX: IsoFlagType; 
      static readonly NoWallLighting: IsoFlagType; 
      static readonly SpearOnlyAttackThrough: IsoFlagType; 
      static readonly TallHoppableN: IsoFlagType; 
      static readonly TallHoppableW: IsoFlagType; 
      static readonly WallN: IsoFlagType; 
      static readonly WallNTrans: IsoFlagType; 
      static readonly WallNW: IsoFlagType; 
      static readonly WallOverlay: IsoFlagType; 
      static readonly WallSE: IsoFlagType; 
      static readonly WallW: IsoFlagType; 
      static readonly WallWTrans: IsoFlagType; 
      static readonly WindowN: IsoFlagType; 
      static readonly WindowW: IsoFlagType; 
      static readonly alwaysDraw: IsoFlagType; 
      static readonly attachedCeiling: IsoFlagType; 
      static readonly attachedE: IsoFlagType; 
      static readonly attachedFloor: IsoFlagType; 
      static readonly attachedN: IsoFlagType; 
      static readonly attachedNW: IsoFlagType; 
      static readonly attachedS: IsoFlagType; 
      static readonly attachedSE: IsoFlagType; 
      static readonly attachedSurface: IsoFlagType; 
      static readonly attachedW: IsoFlagType; 
      static readonly attachtostairs: IsoFlagType; 
      static readonly bed: IsoFlagType; 
      static readonly blocksight: IsoFlagType; 
      static readonly blueprint: IsoFlagType; 
      static readonly burning: IsoFlagType; 
      static readonly burntOut: IsoFlagType; 
      static readonly canBeCut: IsoFlagType; 
      static readonly canBeRemoved: IsoFlagType; 
      static readonly canPathN: IsoFlagType; 
      static readonly canPathW: IsoFlagType; 
      static readonly climbSheetE: IsoFlagType; 
      static readonly climbSheetN: IsoFlagType; 
      static readonly climbSheetS: IsoFlagType; 
      static readonly climbSheetTopE: IsoFlagType; 
      static readonly climbSheetTopN: IsoFlagType; 
      static readonly climbSheetTopS: IsoFlagType; 
      static readonly climbSheetTopW: IsoFlagType; 
      static readonly climbSheetW: IsoFlagType; 
      static readonly collideN: IsoFlagType; 
      static readonly collideW: IsoFlagType; 
      static readonly container: IsoFlagType; 
      static readonly cutN: IsoFlagType; 
      static readonly cutW: IsoFlagType; 
      static readonly diamondFloor: IsoFlagType; 
      static readonly doorN: IsoFlagType; 
      static readonly doorW: IsoFlagType; 
      static readonly exterior: IsoFlagType; 
      static readonly floorE: IsoFlagType; 
      static readonly floorS: IsoFlagType; 
      static readonly forceRender: IsoFlagType; 
      static readonly halfheight: IsoFlagType; 
      static readonly hidewalls: IsoFlagType; 
      static readonly invisible: IsoFlagType; 
      static readonly makeWindowInvincible: IsoFlagType; 
      static readonly noStart: IsoFlagType; 
      static readonly ontable: IsoFlagType; 
      static readonly pushable: IsoFlagType; 
      static readonly sheetCurtains: IsoFlagType; 
      static readonly shelfE: IsoFlagType; 
      static readonly shelfS: IsoFlagType; 
      static readonly smoke: IsoFlagType; 
      static readonly solid: IsoFlagType; 
      static readonly solidfloor: IsoFlagType; 
      static readonly solidtrans: IsoFlagType; 
      static readonly tableE: IsoFlagType; 
      static readonly tableN: IsoFlagType; 
      static readonly tableNE: IsoFlagType; 
      static readonly tableNW: IsoFlagType; 
      static readonly tableS: IsoFlagType; 
      static readonly tableSE: IsoFlagType; 
      static readonly tableSW: IsoFlagType; 
      static readonly tableW: IsoFlagType; 
      static readonly taintedWater: IsoFlagType; 
      static readonly trans: IsoFlagType; 
      static readonly transparentFloor: IsoFlagType; 
      static readonly transparentN: IsoFlagType; 
      static readonly transparentW: IsoFlagType; 
      static readonly unflamable: IsoFlagType; 
      static readonly vegitation: IsoFlagType; 
      static readonly water: IsoFlagType; 
      static readonly waterPiped: IsoFlagType; 
      static readonly windowN: IsoFlagType; 
      static readonly windowW: IsoFlagType; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.iso.SpriteDetails.IsoFlagType[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): IsoFlagType;
      FromString(arg0: string): zombie.iso.SpriteDetails.IsoFlagType;
      fromIndex(arg0: number): zombie.iso.SpriteDetails.IsoFlagType;
      index(): number;
      valueOf(arg0: string): zombie.iso.SpriteDetails.IsoFlagType;
      values(): zombie.iso.SpriteDetails.IsoFlagType[];
    }
    /** [ENUM] zombie.iso.SpriteDetails.IsoObjectType */
    export class IsoObjectType {
      /* ENUM VALUES */
      static readonly MAX: IsoObjectType; 
      static readonly UNUSED10: IsoObjectType; 
      static readonly UNUSED24: IsoObjectType; 
      static readonly UNUSED9: IsoObjectType; 
      static readonly WestRoofB: IsoObjectType; 
      static readonly WestRoofM: IsoObjectType; 
      static readonly WestRoofT: IsoObjectType; 
      static readonly curtainE: IsoObjectType; 
      static readonly curtainN: IsoObjectType; 
      static readonly curtainS: IsoObjectType; 
      static readonly curtainW: IsoObjectType; 
      static readonly doorFrN: IsoObjectType; 
      static readonly doorFrW: IsoObjectType; 
      static readonly doorN: IsoObjectType; 
      static readonly doorW: IsoObjectType; 
      static readonly isMoveAbleObject: IsoObjectType; 
      static readonly jukebox: IsoObjectType; 
      static readonly lightswitch: IsoObjectType; 
      static readonly normal: IsoObjectType; 
      static readonly radio: IsoObjectType; 
      static readonly stairsBN: IsoObjectType; 
      static readonly stairsBW: IsoObjectType; 
      static readonly stairsMN: IsoObjectType; 
      static readonly stairsMW: IsoObjectType; 
      static readonly stairsTN: IsoObjectType; 
      static readonly stairsTW: IsoObjectType; 
      static readonly tree: IsoObjectType; 
      static readonly wall: IsoObjectType; 
      static readonly windowFN: IsoObjectType; 
      static readonly windowFW: IsoObjectType; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.iso.SpriteDetails.IsoObjectType[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): IsoObjectType;
      FromString(arg0: string): zombie.iso.SpriteDetails.IsoObjectType;
      fromIndex(arg0: number): zombie.iso.SpriteDetails.IsoObjectType;
      index(): number;
      valueOf(arg0: string): zombie.iso.SpriteDetails.IsoObjectType;
      values(): zombie.iso.SpriteDetails.IsoObjectType[];
    }
  }
  export namespace zombie.iso.areas {
    // zombie.iso.areas.BuildingScore extends java.lang.Object
    export class BuildingScore {
      private constructor();
      building?: zombie.iso.areas.IsoBuilding;
      defense: number;
      food: number;
      safety: number;
      size: number;
      weapons: number;
      wood: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.areas.IsoBuilding extends zombie.iso.areas.IsoArea
    export class IsoBuilding {
      private constructor();
      static Doobo: boolean;
      readonly Exits?: java.util.Vector<zombie.iso.areas.IsoRoomExit>;
      static GoodBuildingScore: number;
      ID: number;
      static IDMax: number;
      IsResidence: boolean;
      static PoorBuildingScore: number;
      readonly Rooms?: java.util.Vector<zombie.iso.areas.IsoRoom>;
      readonly Windows?: java.util.Vector<zombie.iso.objects.IsoWindow>;
      bSeenInside: boolean;
      bounds?: java.awt.Rectangle;
      readonly container?: java.util.ArrayList<zombie.inventory.ItemContainer>;
      def?: zombie.iso.BuildingDef;
      lights?: java.util.ArrayList<zombie.iso.IsoLightSource>;
      safety: number;
      scoreUpdate: number;
      transparentWalls: number;
      static version?: string;
  
      AddRoom(arg0: zombie.iso.areas.IsoRoom): void;
      Ardo(arg0: string): string;
      CalculateExits(): void;
      CalculateWindows(): void;
      ContainsAllItems(arg0: java.util.Stack<string>): boolean;
      CreateFrom(arg0: zombie.iso.BuildingDef, arg1: zombie.iso.LotHeader): void;
      FillContainers(): void;
      ScoreBuildingPersonSpecific(arg0: zombie.characters.SurvivorDesc, arg1: boolean): number;
      Thigglewhat(): boolean;
      Thigglewhat2(arg0: string, arg1: string): boolean;
      Thigglewhat22(arg0: string): string;
      TriggerAlarm(): void;
      addDoor(arg0: zombie.iso.objects.IsoDoor, arg1: boolean, arg2: zombie.iso.IsoGridSquare, arg3: zombie.iso.areas.IsoBuilding): void;
      addWindow(arg0: zombie.iso.objects.IsoWindow, arg1: boolean): void;
      asasa(arg0: string): number[];
      containsRoom(arg0: string): boolean;
      equals(arg0: any): boolean;
      forceAwake(): void;
      getClass(): java.lang.Class<any>;
      getContainerWith(arg0: zombie.inventory.ItemType): zombie.inventory.ItemContainer;
      getDef(): zombie.iso.BuildingDef;
      getFreeTile(): zombie.iso.IsoGridSquare;
      getID(): number;
      getRandomContainer(arg0: string): zombie.inventory.ItemContainer;
      getRandomFirstFloorWindow(): zombie.iso.objects.IsoWindow;
      getRandomRoom(): zombie.iso.areas.IsoRoom;
      getRoomsNumber(): number;
      hasWater(): boolean;
      hashCode(): number;
      isAllExplored(): boolean;
      isResidential(): boolean;
      isToxic(): boolean;
      notify(): void;
      notifyAll(): void;
      setAllExplored(arg0: boolean): void;
      setToxic(arg0: boolean): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.iso.areas.IsoRoom extends java.lang.Object
    export class IsoRoom {
      private constructor();
      readonly Beds?: java.util.Vector<zombie.iso.IsoGridSquare>;
      readonly Containers?: java.util.ArrayList<zombie.inventory.ItemContainer>;
      readonly Exits?: java.util.Vector<zombie.iso.areas.IsoRoomExit>;
      RoomDef?: string;
      readonly Squares?: java.util.ArrayList<zombie.iso.IsoGridSquare>;
      readonly TileList?: java.util.Vector<zombie.iso.IsoGridSquare>;
      readonly WaterSources?: java.util.ArrayList<zombie.iso.IsoObject>;
      readonly Windows?: java.util.ArrayList<zombie.iso.objects.IsoWindow>;
      bounds?: java.awt.Rectangle;
      building?: zombie.iso.areas.IsoBuilding;
      def?: zombie.iso.RoomDef;
      layer: number;
      readonly lightSwitches?: java.util.ArrayList<zombie.iso.objects.IsoLightSwitch>;
      readonly rects?: java.util.ArrayList<zombie.iso.RoomDef$RoomRect>;
      readonly roomLights?: java.util.ArrayList<zombie.iso.IsoRoomLight>;
      seen: number;
      transparentWalls: number;
      visited: number;
  
      CreateBuilding(arg0: zombie.iso.IsoCell): zombie.iso.areas.IsoBuilding;
      addSquare(arg0: zombie.iso.IsoGridSquare): void;
      createLights(arg0: boolean): void;
      equals(arg0: any): boolean;
      getBuilding(): zombie.iso.areas.IsoBuilding;
      getClass(): java.lang.Class<any>;
      getContainer(): java.util.ArrayList<zombie.inventory.ItemContainer>;
      getFreeTile(): zombie.iso.IsoGridSquare;
      getLightSwitches(): java.util.ArrayList<zombie.iso.objects.IsoLightSwitch>;
      getName(): string;
      getRandomFreeSquare(): zombie.iso.IsoGridSquare;
      getRandomSquare(): zombie.iso.IsoGridSquare;
      getRoomDef(): zombie.iso.RoomDef;
      getSquares(): java.util.ArrayList<zombie.iso.IsoGridSquare>;
      getTileList(): java.util.Vector<zombie.iso.IsoGridSquare>;
      getWaterSources(): java.util.ArrayList<zombie.iso.IsoObject>;
      getWindows(): java.util.ArrayList<zombie.iso.objects.IsoWindow>;
      hasLightSwitches(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      isInside(arg0: number, arg1: number, arg2: number): boolean;
      notify(): void;
      notifyAll(): void;
      onSee(): void;
      refreshSquares(): void;
      removeSquare(arg0: zombie.iso.IsoGridSquare): void;
      setWaterSources(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      spawnZombies(): void;
      toString(): string;
      useWater(): void;
      wait(arg0: number): void;
    }
    // zombie.iso.areas.IsoRoomExit extends java.lang.Object
    export class IsoRoomExit {
      private constructor();
      From?: zombie.iso.areas.IsoRoom;
      static ThiggleQ?: string;
      To?: zombie.iso.areas.IsoRoomExit;
      layer: number;
      type?: zombie.iso.areas.IsoRoomExit$ExitType;
      x: number;
      y: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDoor(arg0: zombie.iso.IsoCell): zombie.iso.IsoObject;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.iso.areas.IsoRoomExit$ExitType */
    export class IsoRoomExit$ExitType {
      /* ENUM VALUES */
      static readonly Door: IsoRoomExit$ExitType; 
      static readonly Window: IsoRoomExit$ExitType; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.iso.areas.IsoRoomExit$ExitType[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): IsoRoomExit$ExitType;
      valueOf(arg0: string): zombie.iso.areas.IsoRoomExit$ExitType;
      values(): zombie.iso.areas.IsoRoomExit$ExitType[];
    }
    // zombie.iso.areas.NonPvpZone extends java.lang.Object
    export class NonPvpZone {
      private constructor();
      static readonly nonPvpZoneList?: java.util.ArrayList<zombie.iso.areas.NonPvpZone>;
  
      addNonPvpZone(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number): zombie.iso.areas.NonPvpZone;
      equals(arg0: any): boolean;
      getAllZones(): java.util.ArrayList<zombie.iso.areas.NonPvpZone>;
      getClass(): java.lang.Class<any>;
      getNonPvpZone(arg0: number, arg1: number): zombie.iso.areas.NonPvpZone;
      getSize(): number;
      getTitle(): string;
      getX(): number;
      getX2(): number;
      getY(): number;
      getY2(): number;
      getZoneByTitle(arg0: string): zombie.iso.areas.NonPvpZone;
      hashCode(): number;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      notify(): void;
      notifyAll(): void;
      removeNonPvpZone(arg0: string, arg1: boolean): void;
      save(arg0: java.nio.ByteBuffer): void;
      setSize(arg0: number): void;
      setTitle(arg0: string): void;
      setX(arg0: number): void;
      setX2(arg0: number): void;
      setY(arg0: number): void;
      setY2(arg0: number): void;
      syncNonPvpZone(arg0: boolean): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.areas.SafeHouse extends java.lang.Object
    export class SafeHouse {
      private constructor();
      playersRespawn?: java.util.ArrayList<string>;
  
      addPlayer(arg0: string): void;
      addSafeHouse(arg0: zombie.iso.IsoGridSquare, arg1: zombie.characters.IsoPlayer): zombie.iso.areas.SafeHouse;
      allowSafeHouse(arg0: zombie.characters.IsoPlayer): boolean;
      alreadyHaveSafehouse(arg0: string): zombie.iso.areas.SafeHouse;
      canBeSafehouse(arg0: zombie.iso.IsoGridSquare, arg1: zombie.characters.IsoPlayer): string;
      checkTrespass(arg0: zombie.characters.IsoPlayer): void;
      clearSafehouseList(): void;
      containsLocation(arg0: number, arg1: number): boolean;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getH(): number;
      getId(): string;
      getLastVisited(): number;
      getOpenTimer(): number;
      getOwner(): string;
      getPlayerConnected(): number;
      getPlayers(): java.util.ArrayList<string>;
      getSafeHouse(arg0: zombie.iso.IsoGridSquare): zombie.iso.areas.SafeHouse;
      getSafehouseList(): java.util.ArrayList<zombie.iso.areas.SafeHouse>;
      getTitle(): string;
      getW(): number;
      getX(): number;
      getX2(): number;
      getY(): number;
      getY2(): number;
      hasSafehouse(arg0: zombie.characters.IsoPlayer): zombie.iso.areas.SafeHouse;
      hashCode(): number;
      init(): void;
      isOwner(arg0: zombie.characters.IsoPlayer): boolean;
      isPlayerAllowedOnSquare(arg0: zombie.characters.IsoPlayer, arg1: zombie.iso.IsoGridSquare): boolean;
      isRespawnInSafehouse(arg0: string): boolean;
      isSafeHouse(arg0: zombie.iso.IsoGridSquare, arg1: string, arg2: boolean): zombie.iso.areas.SafeHouse;
      kickOutOfSafehouse(arg0: zombie.characters.IsoPlayer): void;
      load(arg0: java.nio.ByteBuffer, arg1: number): zombie.iso.areas.SafeHouse;
      notify(): void;
      notifyAll(): void;
      playerAllowed(arg0: string): boolean;
      removePlayer(arg0: string): void;
      removeSafeHouse(arg0: zombie.characters.IsoPlayer, arg1: boolean): void;
      save(arg0: java.nio.ByteBuffer): void;
      setH(arg0: number): void;
      setLastVisited(arg0: number): void;
      setOpenTimer(arg0: number): void;
      setOwner(arg0: string): void;
      setPlayerConnected(arg0: number): void;
      setPlayers(arg0: java.util.ArrayList<string>): void;
      setRespawnInSafehouse(arg0: boolean, arg1: string): void;
      setTitle(arg0: string): void;
      setW(arg0: number): void;
      setX(arg0: number): void;
      setY(arg0: number): void;
      syncSafehouse(): void;
      toString(): string;
      updatePlayersConnected(): void;
      updateSafehouse(arg0: zombie.characters.IsoPlayer): void;
      updateSafehousePlayersConnected(): void;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.iso.areas.isoregion {
    /** [ENUM] zombie.iso.areas.isoregion.IsoRegionLogType */
    export class IsoRegionLogType {
      /* ENUM VALUES */
      static readonly Normal: IsoRegionLogType; 
      static readonly Warn: IsoRegionLogType; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.iso.areas.isoregion.IsoRegionLogType[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): IsoRegionLogType;
      valueOf(arg0: string): zombie.iso.areas.isoregion.IsoRegionLogType;
      values(): zombie.iso.areas.isoregion.IsoRegionLogType[];
    }
    // zombie.iso.areas.isoregion.IsoRegions extends java.lang.Object
    export class IsoRegions {
      private constructor();
      static readonly BIT_EMPTY: number;
      static readonly BIT_HAS_FLOOR: number;
      static readonly BIT_HAS_ROOF: number;
      static readonly BIT_PATH_WALL_N: number;
      static readonly BIT_PATH_WALL_W: number;
      static readonly BIT_STAIRCASE: number;
      static readonly BIT_WALL_N: number;
      static readonly BIT_WALL_W: number;
      static readonly CELL_CHUNK_DIM: number;
      static readonly CELL_DIM: number;
      static readonly CHUNKS_DATA_PACKET_SIZE: number;
      static readonly CHUNK_DIM: number;
      static readonly CHUNK_MAX_Z: number;
      static readonly DIR_2D_MAX: number;
      static readonly DIR_2D_NW: number;
      static readonly DIR_BOT: number;
      static readonly DIR_E: number;
      static readonly DIR_MAX: number;
      static readonly DIR_N: number;
      static readonly DIR_NONE: number;
      static readonly DIR_S: number;
      static readonly DIR_TOP: number;
      static readonly DIR_W: number;
      static readonly FILE_DIR?: string;
      static readonly FILE_EXT?: string;
      static readonly FILE_PRE?: string;
      static readonly FILE_SEP?: string;
      static PRINT_D: boolean;
      static readonly SINGLE_CHUNK_PACKET_SIZE: number;
  
      GetOppositeDir(arg0: number): number;
      ResetAllDataDebug(): void;
      equals(arg0: any): boolean;
      getChunkFile(arg0: number, arg1: number): java.io.File;
      getChunkRegion(arg0: number, arg1: number, arg2: number): zombie.iso.areas.isoregion.regions.IChunkRegion;
      getClass(): java.lang.Class<any>;
      getDataChunk(arg0: number, arg1: number): zombie.iso.areas.isoregion.data.DataChunk;
      getDirectory(): java.io.File;
      getHeaderFile(): java.io.File;
      getIsoWorldRegion(arg0: number, arg1: number, arg2: number): zombie.iso.areas.isoregion.regions.IWorldRegion;
      getLogger(): zombie.iso.areas.isoregion.IsoRegionsLogger;
      getSquareFlags(arg0: number, arg1: number, arg2: number): number;
      hash(arg0: number, arg1: number): number;
      hashCode(): number;
      init(): void;
      isDebugLoadAllChunks(): boolean;
      log(arg0: string, arg1: zombie.core.Color): void;
      notify(): void;
      notifyAll(): void;
      receiveClientRequestFullDataChunks(arg0: java.nio.ByteBuffer, arg1: zombie.core.raknet.UdpConnection): void;
      receiveServerUpdatePacket(arg0: java.nio.ByteBuffer): void;
      reset(): void;
      setDebugLoadAllChunks(arg0: boolean): void;
      setPreviousFlags(arg0: zombie.iso.IsoGridSquare): void;
      squareChanged(arg0: zombie.iso.IsoGridSquare, arg1: boolean): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
      warn(arg0: string): void;
    }
    // zombie.iso.areas.isoregion.IsoRegionsLogger extends java.lang.Object
    export class IsoRegionsLogger {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getLogs(): java.util.ArrayList<zombie.iso.areas.isoregion.IsoRegionsLogger$IsoRegionLog>;
      hashCode(): number;
      isDirtyUI(): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      unsetDirtyUI(): void;
      wait(arg0: number): void;
    }
    // zombie.iso.areas.isoregion.IsoRegionsLogger$IsoRegionLog extends java.lang.Object
    export class IsoRegionsLogger$IsoRegionLog {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getColor(): zombie.core.Color;
      getStr(): string;
      getType(): zombie.iso.areas.isoregion.IsoRegionLogType;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.areas.isoregion.IsoRegionsRenderer extends java.lang.Object
    export class IsoRegionsRenderer {
      private constructor();
      editRotate(): void;
      editSquare(arg0: number, arg1: number): void;
      equals(arg0: any): boolean;
      getBoolean(arg0: string): boolean;
      getChunkRegion(arg0: number, arg1: number): zombie.iso.areas.isoregion.regions.IsoChunkRegion;
      getClass(): java.lang.Class<any>;
      getEditOptionByIndex(arg0: number): zombie.config.ConfigOption;
      getEditOptionByName(arg0: string): zombie.config.ConfigOption;
      getEditOptionCount(): number;
      getOptionByIndex(arg0: number): zombie.config.ConfigOption;
      getOptionByName(arg0: string): zombie.config.ConfigOption;
      getOptionCount(): number;
      getZLevel(): number;
      getZLevelOptionByIndex(arg0: number): zombie.config.ConfigOption;
      getZLevelOptionByName(arg0: string): zombie.config.ConfigOption;
      getZLevelOptionCount(): number;
      hasChunkRegion(arg0: number, arg1: number): boolean;
      hashCode(): number;
      isEditingEnabled(): boolean;
      isHasSelected(): boolean;
      load(): void;
      notify(): void;
      notifyAll(): void;
      outlineRect(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      recalcSurroundings(): void;
      render(arg0: zombie.ui.UIElement, arg1: number, arg2: number, arg3: number): void;
      renderCellInfo(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      renderEntity(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      renderLine(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      renderRect(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      renderSquare(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
      renderString(arg0: number, arg1: number, arg2: string, arg3: number, arg4: number, arg5: number, arg6: number): void;
      renderStringUI(arg0: number, arg1: number, arg2: string, arg3: zombie.core.Color): void;
      renderZombie(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      save(): void;
      setBoolean(arg0: string, arg1: boolean): void;
      setEditOption(arg0: number, arg1: boolean): void;
      setEditSquareCoord(arg0: number, arg1: number): void;
      setSelected(arg0: number, arg1: number): void;
      setSelectedWorld(arg0: number, arg1: number): void;
      setZLevelOption(arg0: number, arg1: boolean): void;
      toString(): string;
      uiToWorldX(arg0: number): number;
      uiToWorldY(arg0: number): number;
      unsetSelected(): void;
      wait(arg0: number): void;
      worldToScreenX(arg0: number): number;
      worldToScreenY(arg0: number): number;
    }
    // zombie.iso.areas.isoregion.IsoRegionsRenderer$BooleanDebugOption extends zombie.config.BooleanConfigOption
    export class IsoRegionsRenderer$BooleanDebugOption {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDefaultValue(): boolean;
      getIndex(): number;
      getName(): string;
      getTooltip(): string;
      getType(): string;
      getValue(): boolean;
      getValueAsLuaString(): string;
      getValueAsObject(): any;
      getValueAsString(): string;
      hashCode(): number;
      isValidString(arg0: string): boolean;
      notify(): void;
      notifyAll(): void;
      parse(arg0: string): void;
      resetToDefault(): void;
      setDefaultToCurrentValue(): void;
      setValue(arg0: boolean): void;
      setValueFromObject(arg0: any): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.iso.areas.isoregion.data {
    // zombie.iso.areas.isoregion.data.DataCell extends java.lang.Object
    export class DataCell {
      private constructor();
      readonly dataRoot?: zombie.iso.areas.isoregion.data.DataRoot;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.areas.isoregion.data.DataChunk extends java.lang.Object
    export class DataChunk {
      private constructor();
      equals(arg0: any): boolean;
      getChunkX(): number;
      getChunkY(): number;
      getClass(): java.lang.Class<any>;
      getIsoChunkRegion(arg0: number, arg1: number, arg2: number): zombie.iso.areas.isoregion.regions.IsoChunkRegion;
      getLastUpdateStamp(): number;
      getSquare(arg0: number, arg1: number, arg2: number, arg3: boolean): number;
      hashCode(): number;
      load(arg0: java.nio.ByteBuffer, arg1: number, arg2: boolean): void;
      notify(): void;
      notifyAll(): void;
      save(arg0: java.nio.ByteBuffer): void;
      selectedHasFlags(arg0: number): boolean;
      setDirtyAllActive(): void;
      setLastUpdateStamp(arg0: number): void;
      setRegion(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setSelectedFlags(arg0: number, arg1: number, arg2: number): void;
      squareGetFlags(arg0: number, arg1: number, arg2: number): number;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.areas.isoregion.data.DataRoot extends java.lang.Object
    export class DataRoot {
      private constructor();
      readonly regionManager?: zombie.iso.areas.isoregion.regions.IsoRegionManager;
      readonly select?: zombie.iso.areas.isoregion.data.DataRoot$SelectInfo;
  
      DequeueDirtyIsoWorldRegion(arg0: zombie.iso.areas.isoregion.regions.IsoWorldRegion): void;
      EnqueueDirtyDataChunk(arg0: zombie.iso.areas.isoregion.data.DataChunk): void;
      EnqueueDirtyIsoWorldRegion(arg0: zombie.iso.areas.isoregion.regions.IsoWorldRegion): void;
      equals(arg0: any): boolean;
      getAllChunks(arg0: java.util.List<zombie.iso.areas.isoregion.data.DataChunk>): void;
      getClass(): java.lang.Class<any>;
      getDataChunk(arg0: number, arg1: number): zombie.iso.areas.isoregion.data.DataChunk;
      getIsoChunkRegion(arg0: number, arg1: number, arg2: number): zombie.iso.areas.isoregion.regions.IsoChunkRegion;
      getIsoWorldRegion(arg0: number, arg1: number, arg2: number): zombie.iso.areas.isoregion.regions.IsoWorldRegion;
      getSquareFlags(arg0: number, arg1: number, arg2: number): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      processDirtyChunks(): void;
      resetAllData(): void;
      toString(): string;
      updateExistingSquare(arg0: number, arg1: number, arg2: number, arg3: number): void;
      wait(arg0: number): void;
    }
    // zombie.iso.areas.isoregion.data.DataRoot$SelectInfo extends java.lang.Object
    export class DataRoot$SelectInfo {
      private constructor();
      cell?: zombie.iso.areas.isoregion.data.DataCell;
      cellID: number;
      cellx: number;
      celly: number;
      chunk?: zombie.iso.areas.isoregion.data.DataChunk;
      chunkID: number;
      chunkSquareX: number;
      chunkSquareY: number;
      chunkx: number;
      chunky: number;
      square: number;
      x: number;
      y: number;
      z: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      reset(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.iso.areas.isoregion.regions {
    // zombie.iso.areas.isoregion.regions.IChunkRegion
    export class IChunkRegion {
      private constructor();
    }
    // zombie.iso.areas.isoregion.regions.IWorldRegion
    export class IWorldRegion {
      private constructor();
      getDebugConnectedNeighborCopy(): java.util.ArrayList<zombie.iso.areas.isoregion.regions.IsoWorldRegion>;
      getDebugIsoChunkRegionCopy(): java.util.ArrayList<zombie.iso.areas.isoregion.regions.IsoChunkRegion>;
      getNeighbors(): java.util.ArrayList<zombie.iso.areas.isoregion.regions.IsoWorldRegion>;
      getRoofCnt(): number;
      getSquareSize(): number;
      isFogMask(): boolean;
      isFullyRoofed(): boolean;
      isPlayerRoom(): boolean;
    }
    // zombie.iso.areas.isoregion.regions.IsoChunkRegion extends java.lang.Object
    export class IsoChunkRegion {
      private constructor();
      addChunkBorderSquaresCnt(): void;
      addConnectedNeighbor(arg0: zombie.iso.areas.isoregion.regions.IsoChunkRegion): void;
      addNeighbor(arg0: zombie.iso.areas.isoregion.regions.IsoChunkRegion): void;
      addRoof(): void;
      addSquareCount(): void;
      containsConnectedNeighbor(arg0: zombie.iso.areas.isoregion.regions.IsoChunkRegion): boolean;
      containsConnectedNeighborID(arg0: number): boolean;
      equals(arg0: any): boolean;
      getChunkBorderSquaresCnt(): number;
      getClass(): java.lang.Class<any>;
      getColor(): zombie.core.Color;
      getConnectedNeighborWithLargestIsoWorldRegion(): zombie.iso.areas.isoregion.regions.IsoChunkRegion;
      getConnectedNeighbors(): java.util.ArrayList<zombie.iso.areas.isoregion.regions.IsoChunkRegion>;
      getDebugConnectedNeighborCopy(): java.util.ArrayList<zombie.iso.areas.isoregion.regions.IsoChunkRegion>;
      getID(): number;
      getIsEnclosed(): boolean;
      getIsoWorldRegion(): zombie.iso.areas.isoregion.regions.IsoWorldRegion;
      getNeighborCount(): number;
      getRoofCnt(): number;
      getSquareSize(): number;
      getzLayer(): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      resetRoofCnt(): void;
      setEnclosed(arg0: number, arg1: boolean): void;
      setIsoWorldRegion(arg0: zombie.iso.areas.isoregion.regions.IsoWorldRegion): void;
      toString(): string;
      unlinkFromIsoWorldRegion(): zombie.iso.areas.isoregion.regions.IsoWorldRegion;
      wait(arg0: number): void;
    }
    // zombie.iso.areas.isoregion.regions.IsoRegionManager extends java.lang.Object
    export class IsoRegionManager {
      private constructor();
      allocIsoChunkRegion(arg0: number): zombie.iso.areas.isoregion.regions.IsoChunkRegion;
      allocIsoWorldRegion(): zombie.iso.areas.isoregion.regions.IsoWorldRegion;
      equals(arg0: any): boolean;
      getChunkRegionCount(): number;
      getClass(): java.lang.Class<any>;
      getColor(): zombie.core.Color;
      getWorldRegionCount(): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      releaseIsoChunkRegion(arg0: zombie.iso.areas.isoregion.regions.IsoChunkRegion): void;
      releaseIsoWorldRegion(arg0: zombie.iso.areas.isoregion.regions.IsoWorldRegion): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.areas.isoregion.regions.IsoWorldRegion extends java.lang.Object
    export class IsoWorldRegion {
      private constructor();
      addIsoChunkRegion(arg0: zombie.iso.areas.isoregion.regions.IsoChunkRegion): void;
      containsIsoChunkRegion(arg0: zombie.iso.areas.isoregion.regions.IsoChunkRegion): boolean;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getColor(): zombie.core.Color;
      getDebugConnectedNeighborCopy(): java.util.ArrayList<zombie.iso.areas.isoregion.regions.IsoWorldRegion>;
      getDebugIsoChunkRegionCopy(): java.util.ArrayList<zombie.iso.areas.isoregion.regions.IsoChunkRegion>;
      getID(): number;
      getNeighbors(): java.util.ArrayList<zombie.iso.areas.isoregion.regions.IsoWorldRegion>;
      getRoofCnt(): number;
      getRoofedPercentage(): number;
      getSquareSize(): number;
      hashCode(): number;
      isEnclosed(): boolean;
      isFogMask(): boolean;
      isFullyRoofed(): boolean;
      isPlayerRoom(): boolean;
      linkNeighbors(): void;
      merge(arg0: zombie.iso.areas.isoregion.regions.IsoWorldRegion): void;
      notify(): void;
      notifyAll(): void;
      size(): number;
      swapIsoChunkRegions(arg0: java.util.ArrayList<zombie.iso.areas.isoregion.regions.IsoChunkRegion>): java.util.ArrayList<zombie.iso.areas.isoregion.regions.IsoChunkRegion>;
      toString(): string;
      unlinkNeighbors(): void;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.iso.objects {
    // zombie.iso.objects.BSFurnace extends zombie.iso.IsoObject
    export class BSFurnace {
      private constructor();
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      static LowLightingQualityHack: boolean;
      static readonly MAX_WALL_SPLATS: number;
      NoPicking: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OutlineOnMouseover: boolean;
      bAlphaForced: boolean;
      bNeverDoneAlpha: boolean;
      static bmod: number;
      container?: zombie.inventory.ItemContainer;
      dir?: zombie.iso.IsoDirections;
      doNotSync: boolean;
      emitter?: zombie.audio.BaseSoundEmitter;
      fireStarted: boolean;
      fuelAmount: number;
      fuelDecrease: number;
      static gmod: number;
      heat: number;
      heatDecrease: number;
      heatIncrease: number;
      highlightFlags: number;
      keyId: number;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      name?: string;
      offsetX: number;
      offsetY: number;
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      partialThumpDmg: number;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      sLitSprite?: string;
      sSprite?: string;
      sheetRope: boolean;
      sheetRopeHealth: number;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      square?: zombie.iso.IsoGridSquare;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      tintb: number;
      tintg: number;
      tintr: number;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
  
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number): void;
      DirtySlice(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasTooltip(): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addFuel(arg0: number): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      addToWorld(): void;
      canAddSheetRope(): boolean;
      checkHaveElectricity(): void;
      cleanWallBlood(): void;
      clearAttachedAnimSprite(): void;
      countAddSheetRope(): number;
      createContainersFromSpriteProperties(): void;
      customHashCode(): number;
      debugPrintout(): void;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      doFindExternalWaterSource(): void;
      equals(arg0: any): boolean;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      getAlpha(arg0: number): number;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getCell(): zombie.iso.IsoCell;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getClass(): java.lang.Class<any>;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getDamage(): number;
      getDir(): zombie.iso.IsoDirections;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getFuelAmount(): number;
      getFuelDecrease(): number;
      getHeat(): number;
      getHeatDecrease(): number;
      getHeatIncrease(): number;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getIsSurfaceNormalOffset(): boolean;
      getItemContainer(): zombie.inventory.ItemContainer;
      getKeyId(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getMeltingSkill(arg0: zombie.inventory.InventoryItem): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getMovingObjectIndex(): number;
      getName(): string;
      getNew(): zombie.iso.IsoObject;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffsetX(): number;
      getOffsetY(): number;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPipedFuelAmount(): number;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getScriptName(): string;
      getSpecialObjectIndex(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSquare(): zombie.iso.IsoGridSquare;
      getStaticMovingObjectIndex(): number;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTargetAlpha(arg0: number): number;
      getTextureName(): string;
      getThumpCondition(): number;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTile(): string;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUsesExternalWaterSource(): boolean;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWorldObjectIndex(): number;
      getX(): number;
      getY(): number;
      getZ(): number;
      hasExternalWaterSource(): boolean;
      hasModData(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isBlink(): boolean;
      isCharacter(): boolean;
      isDestroyed(): boolean;
      isExistInTheWorld(): boolean;
      isFireStarted(): boolean;
      isFloor(): boolean;
      isHighlighted(): boolean;
      isHoppable(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isMaskClicked(arg0: number, arg1: number, arg2: boolean): boolean;
      isMovedThumpable(): boolean;
      isNoPicking(): boolean;
      isNorthHoppable(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isSpriteInvisible(): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isZombie(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      removeAllContainers(): void;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reset(): void;
      reuseGridSquare(): void;
      save(arg0: java.nio.ByteBuffer): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setBlink(arg0: boolean): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setDamage(arg0: number): void;
      setDefaultCondition(arg0: number): void;
      setDir(arg0: zombie.iso.IsoDirections): void;
      setFireStarted(arg0: boolean): void;
      setFuelAmount(arg0: number): void;
      setFuelDecrease(arg0: number): void;
      setHeat(arg0: number): void;
      setHeatDecrease(arg0: number): void;
      setHeatIncrease(arg0: number): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setKeyId(arg0: number): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setMovedThumpable(arg0: boolean): void;
      setName(arg0: string): void;
      setNoPicking(arg0: boolean): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPipedFuelAmount(arg0: number): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setSpecialTooltip(arg0: boolean): void;
      setSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTaintedWater(arg0: boolean): void;
      setTargetAlpha(arg0: number): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setWaterAmount(arg0: number): void;
      softReset(): void;
      syncFurnace(): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection, arg3: java.nio.ByteBuffer): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      toString(): string;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitModData(): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      unsetOutlineHighlight(): void;
      update(): void;
      updateLight(): void;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    // zombie.iso.objects.IsoBarbecue extends zombie.iso.IsoObject
    export class IsoBarbecue {
      private constructor();
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      static LowLightingQualityHack: boolean;
      static readonly MAX_WALL_SPLATS: number;
      NoPicking: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OutlineOnMouseover: boolean;
      bAlphaForced: boolean;
      bNeverDoneAlpha: boolean;
      static bmod: number;
      container?: zombie.inventory.ItemContainer;
      dir?: zombie.iso.IsoDirections;
      doNotSync: boolean;
      emitter?: zombie.audio.BaseSoundEmitter;
      static gmod: number;
      highlightFlags: number;
      keyId: number;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      name?: string;
      offsetX: number;
      offsetY: number;
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      partialThumpDmg: number;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      sheetRope: boolean;
      sheetRopeHealth: number;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      square?: zombie.iso.IsoGridSquare;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      tintb: number;
      tintg: number;
      tintr: number;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
  
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number): void;
      DirtySlice(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasTooltip(): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addFuel(arg0: number): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      addToWorld(): void;
      canAddSheetRope(): boolean;
      checkHaveElectricity(): void;
      cleanWallBlood(): void;
      clearAttachedAnimSprite(): void;
      countAddSheetRope(): number;
      createContainersFromSpriteProperties(): void;
      customHashCode(): number;
      debugPrintout(): void;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      doFindExternalWaterSource(): void;
      equals(arg0: any): boolean;
      extinguish(): void;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      getAlpha(arg0: number): number;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getCell(): zombie.iso.IsoCell;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getClass(): java.lang.Class<any>;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getDamage(): number;
      getDir(): zombie.iso.IsoDirections;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getFuelAmount(): number;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getIsSurfaceNormalOffset(): boolean;
      getItemContainer(): zombie.inventory.ItemContainer;
      getKeyId(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getMovingObjectIndex(): number;
      getName(): string;
      getNew(): zombie.iso.IsoObject;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffsetX(): number;
      getOffsetY(): number;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPipedFuelAmount(): number;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getScriptName(): string;
      getSpecialObjectIndex(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSquare(): zombie.iso.IsoGridSquare;
      getStaticMovingObjectIndex(): number;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTargetAlpha(arg0: number): number;
      getTemperature(): number;
      getTextureName(): string;
      getThumpCondition(): number;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTile(): string;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUsesExternalWaterSource(): boolean;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWorldObjectIndex(): number;
      getX(): number;
      getY(): number;
      getZ(): number;
      hasExternalWaterSource(): boolean;
      hasFuel(): boolean;
      hasModData(): boolean;
      hasPropaneTank(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isBlink(): boolean;
      isCharacter(): boolean;
      isDestroyed(): boolean;
      isExistInTheWorld(): boolean;
      isFloor(): boolean;
      isHighlighted(): boolean;
      isHoppable(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isLit(): boolean;
      isMaskClicked(arg0: number, arg1: number, arg2: boolean): boolean;
      isMovedThumpable(): boolean;
      isNoPicking(): boolean;
      isNorthHoppable(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isPropaneBBQ(): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isSmouldering(): boolean;
      isSpriteInvisible(): boolean;
      isSpriteWithPropaneTank(arg0: zombie.iso.sprite.IsoSprite): boolean;
      isSpriteWithoutPropaneTank(arg0: zombie.iso.sprite.IsoSprite): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isZombie(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      removeAllContainers(): void;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removePropaneTank(): zombie.inventory.InventoryItem;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reset(): void;
      reuseGridSquare(): void;
      save(arg0: java.nio.ByteBuffer): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setBlink(arg0: boolean): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setDamage(arg0: number): void;
      setDefaultCondition(arg0: number): void;
      setDir(arg0: zombie.iso.IsoDirections): void;
      setFuelAmount(arg0: number): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setKeyId(arg0: number): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setLit(arg0: boolean): void;
      setMovedThumpable(arg0: boolean): void;
      setName(arg0: string): void;
      setNoPicking(arg0: boolean): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPipedFuelAmount(arg0: number): void;
      setPropaneTank(arg0: zombie.inventory.InventoryItem): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setSpecialTooltip(arg0: boolean): void;
      setSprite(arg0: string): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTaintedWater(arg0: boolean): void;
      setTargetAlpha(arg0: number): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setWaterAmount(arg0: number): void;
      softReset(): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection, arg3: java.nio.ByteBuffer): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      toString(): string;
      toggle(): void;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitModData(): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      turnOff(): void;
      turnOn(): void;
      unsetOutlineHighlight(): void;
      update(): void;
      useFuel(arg0: number): number;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    // zombie.iso.objects.IsoBarricade extends zombie.iso.IsoObject
    export class IsoBarricade {
      private constructor();
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      static LowLightingQualityHack: boolean;
      static readonly MAX_PLANKS: number;
      static readonly MAX_WALL_SPLATS: number;
      static readonly METAL_BAR_HEALTH: number;
      static readonly METAL_HEALTH: number;
      static readonly METAL_HEALTH_DAMAGED: number;
      NoPicking: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OutlineOnMouseover: boolean;
      static readonly PLANK_HEALTH: number;
      bAlphaForced: boolean;
      bNeverDoneAlpha: boolean;
      static bmod: number;
      container?: zombie.inventory.ItemContainer;
      dir?: zombie.iso.IsoDirections;
      doNotSync: boolean;
      emitter?: zombie.audio.BaseSoundEmitter;
      static gmod: number;
      highlightFlags: number;
      keyId: number;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      name?: string;
      offsetX: number;
      offsetY: number;
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      partialThumpDmg: number;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      sheetRope: boolean;
      sheetRopeHealth: number;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      square?: zombie.iso.IsoGridSquare;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      tintb: number;
      tintg: number;
      tintr: number;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
  
      AddBarricadeToObject(arg0: zombie.iso.objects.interfaces.BarricadeAble, arg1: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoBarricade;
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number): void;
      DamageBarricade(arg0: number): void;
      DirtySlice(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      GetBarricadeForCharacter(arg0: zombie.iso.objects.interfaces.BarricadeAble, arg1: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoBarricade;
      GetBarricadeOnSquare(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoDirections): zombie.iso.objects.IsoBarricade;
      GetBarricadeOppositeCharacter(arg0: zombie.iso.objects.interfaces.BarricadeAble, arg1: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoBarricade;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasTooltip(): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addMetal(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.InventoryItem): void;
      addMetalBar(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.InventoryItem): void;
      addPlank(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.InventoryItem): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      addToWorld(): void;
      canAddPlank(): boolean;
      canAddSheetRope(): boolean;
      checkHaveElectricity(): void;
      cleanWallBlood(): void;
      clearAttachedAnimSprite(): void;
      countAddSheetRope(): number;
      createContainersFromSpriteProperties(): void;
      customHashCode(): number;
      debugPrintout(): void;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      doFindExternalWaterSource(): void;
      equals(arg0: any): boolean;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      getAlpha(arg0: number): number;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getBarricadedObject(): zombie.iso.objects.interfaces.BarricadeAble;
      getCell(): zombie.iso.IsoCell;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getClass(): java.lang.Class<any>;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getDamage(): number;
      getDir(): zombie.iso.IsoDirections;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getIsSurfaceNormalOffset(): boolean;
      getItemContainer(): zombie.inventory.ItemContainer;
      getKeyId(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getMovingObjectIndex(): number;
      getName(): string;
      getNew(): zombie.iso.IsoObject;
      getNumPlanks(): number;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffsetX(): number;
      getOffsetY(): number;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPipedFuelAmount(): number;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getScriptName(): string;
      getSpecialObjectIndex(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSquare(): zombie.iso.IsoGridSquare;
      getStaticMovingObjectIndex(): number;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTargetAlpha(arg0: number): number;
      getTextureName(): string;
      getThumpCondition(): number;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTile(): string;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUsesExternalWaterSource(): boolean;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWorldObjectIndex(): number;
      getX(): number;
      getY(): number;
      getZ(): number;
      hasExternalWaterSource(): boolean;
      hasModData(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isBlink(): boolean;
      isBlockVision(): boolean;
      isCharacter(): boolean;
      isDestroyed(): boolean;
      isExistInTheWorld(): boolean;
      isFloor(): boolean;
      isHighlighted(): boolean;
      isHoppable(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isMaskClicked(arg0: number, arg1: number, arg2: boolean): boolean;
      isMetal(): boolean;
      isMetalBar(): boolean;
      isMovedThumpable(): boolean;
      isNoPicking(): boolean;
      isNorthHoppable(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isSpriteInvisible(): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isZombie(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      removeAllContainers(): void;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removeMetal(arg0: zombie.characters.IsoGameCharacter): zombie.inventory.InventoryItem;
      removeMetalBar(arg0: zombie.characters.IsoGameCharacter): zombie.inventory.InventoryItem;
      removePlank(arg0: zombie.characters.IsoGameCharacter): zombie.inventory.InventoryItem;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reset(): void;
      reuseGridSquare(): void;
      save(arg0: java.nio.ByteBuffer): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setBlink(arg0: boolean): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setDamage(arg0: number): void;
      setDefaultCondition(arg0: number): void;
      setDir(arg0: zombie.iso.IsoDirections): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setKeyId(arg0: number): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setMovedThumpable(arg0: boolean): void;
      setName(arg0: string): void;
      setNoPicking(arg0: boolean): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPipedFuelAmount(arg0: number): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setSpecialTooltip(arg0: boolean): void;
      setSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTaintedWater(arg0: boolean): void;
      setTargetAlpha(arg0: number): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setWaterAmount(arg0: number): void;
      softReset(): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection, arg3: java.nio.ByteBuffer): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      toString(): string;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitModData(): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      unsetOutlineHighlight(): void;
      update(): void;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    // zombie.iso.objects.IsoBrokenGlass extends zombie.iso.IsoObject
    export class IsoBrokenGlass {
      private constructor();
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      static LowLightingQualityHack: boolean;
      static readonly MAX_WALL_SPLATS: number;
      NoPicking: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OutlineOnMouseover: boolean;
      bAlphaForced: boolean;
      bNeverDoneAlpha: boolean;
      static bmod: number;
      container?: zombie.inventory.ItemContainer;
      dir?: zombie.iso.IsoDirections;
      doNotSync: boolean;
      emitter?: zombie.audio.BaseSoundEmitter;
      static gmod: number;
      highlightFlags: number;
      keyId: number;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      name?: string;
      offsetX: number;
      offsetY: number;
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      partialThumpDmg: number;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      sheetRope: boolean;
      sheetRopeHealth: number;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      square?: zombie.iso.IsoGridSquare;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      tintb: number;
      tintg: number;
      tintr: number;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
  
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number): void;
      DirtySlice(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasTooltip(): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      addToWorld(): void;
      canAddSheetRope(): boolean;
      checkHaveElectricity(): void;
      cleanWallBlood(): void;
      clearAttachedAnimSprite(): void;
      countAddSheetRope(): number;
      createContainersFromSpriteProperties(): void;
      customHashCode(): number;
      debugPrintout(): void;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      doFindExternalWaterSource(): void;
      equals(arg0: any): boolean;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      getAlpha(arg0: number): number;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getCell(): zombie.iso.IsoCell;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getClass(): java.lang.Class<any>;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getDamage(): number;
      getDir(): zombie.iso.IsoDirections;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getIsSurfaceNormalOffset(): boolean;
      getItemContainer(): zombie.inventory.ItemContainer;
      getKeyId(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getMovingObjectIndex(): number;
      getName(): string;
      getNew(): zombie.iso.IsoObject;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffsetX(): number;
      getOffsetY(): number;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPipedFuelAmount(): number;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getScriptName(): string;
      getSpecialObjectIndex(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSquare(): zombie.iso.IsoGridSquare;
      getStaticMovingObjectIndex(): number;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTargetAlpha(arg0: number): number;
      getTextureName(): string;
      getThumpCondition(): number;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTile(): string;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUsesExternalWaterSource(): boolean;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWorldObjectIndex(): number;
      getX(): number;
      getY(): number;
      getZ(): number;
      hasExternalWaterSource(): boolean;
      hasModData(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isBlink(): boolean;
      isCharacter(): boolean;
      isDestroyed(): boolean;
      isExistInTheWorld(): boolean;
      isFloor(): boolean;
      isHighlighted(): boolean;
      isHoppable(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isMaskClicked(arg0: number, arg1: number, arg2: boolean): boolean;
      isMovedThumpable(): boolean;
      isNoPicking(): boolean;
      isNorthHoppable(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isSpriteInvisible(): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isZombie(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      removeAllContainers(): void;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reset(): void;
      reuseGridSquare(): void;
      save(arg0: java.nio.ByteBuffer): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setBlink(arg0: boolean): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setDamage(arg0: number): void;
      setDefaultCondition(arg0: number): void;
      setDir(arg0: zombie.iso.IsoDirections): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setKeyId(arg0: number): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setMovedThumpable(arg0: boolean): void;
      setName(arg0: string): void;
      setNoPicking(arg0: boolean): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPipedFuelAmount(arg0: number): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setSpecialTooltip(arg0: boolean): void;
      setSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTaintedWater(arg0: boolean): void;
      setTargetAlpha(arg0: number): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setWaterAmount(arg0: number): void;
      softReset(): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection, arg3: java.nio.ByteBuffer): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      toString(): string;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitModData(): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      unsetOutlineHighlight(): void;
      update(): void;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    // zombie.iso.objects.IsoCarBatteryCharger extends zombie.iso.IsoObject
    export class IsoCarBatteryCharger {
      private constructor();
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      static LowLightingQualityHack: boolean;
      static readonly MAX_WALL_SPLATS: number;
      NoPicking: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OutlineOnMouseover: boolean;
      bAlphaForced: boolean;
      bNeverDoneAlpha: boolean;
      static bmod: number;
      container?: zombie.inventory.ItemContainer;
      dir?: zombie.iso.IsoDirections;
      doNotSync: boolean;
      emitter?: zombie.audio.BaseSoundEmitter;
      static gmod: number;
      highlightFlags: number;
      keyId: number;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      name?: string;
      offsetX: number;
      offsetY: number;
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      partialThumpDmg: number;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      sheetRope: boolean;
      sheetRopeHealth: number;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      square?: zombie.iso.IsoGridSquare;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      tintb: number;
      tintg: number;
      tintr: number;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
  
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number): void;
      DirtySlice(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasTooltip(): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      addToWorld(): void;
      canAddSheetRope(): boolean;
      checkHaveElectricity(): void;
      cleanWallBlood(): void;
      clearAttachedAnimSprite(): void;
      countAddSheetRope(): number;
      createContainersFromSpriteProperties(): void;
      customHashCode(): number;
      debugPrintout(): void;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      doFindExternalWaterSource(): void;
      equals(arg0: any): boolean;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      getAlpha(arg0: number): number;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getBattery(): zombie.inventory.InventoryItem;
      getCell(): zombie.iso.IsoCell;
      getChargeRate(): number;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getClass(): java.lang.Class<any>;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getDamage(): number;
      getDir(): zombie.iso.IsoDirections;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getIsSurfaceNormalOffset(): boolean;
      getItem(): zombie.inventory.InventoryItem;
      getItemContainer(): zombie.inventory.ItemContainer;
      getKeyId(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getMovingObjectIndex(): number;
      getName(): string;
      getNew(): zombie.iso.IsoObject;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffsetX(): number;
      getOffsetY(): number;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPipedFuelAmount(): number;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getScriptName(): string;
      getSpecialObjectIndex(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSquare(): zombie.iso.IsoGridSquare;
      getStaticMovingObjectIndex(): number;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTargetAlpha(arg0: number): number;
      getTextureName(): string;
      getThumpCondition(): number;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTile(): string;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUsesExternalWaterSource(): boolean;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWorldObjectIndex(): number;
      getX(): number;
      getY(): number;
      getZ(): number;
      hasExternalWaterSource(): boolean;
      hasModData(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      isActivated(): boolean;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isBlink(): boolean;
      isCharacter(): boolean;
      isDestroyed(): boolean;
      isExistInTheWorld(): boolean;
      isFloor(): boolean;
      isHighlighted(): boolean;
      isHoppable(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isMaskClicked(arg0: number, arg1: number, arg2: boolean): boolean;
      isMovedThumpable(): boolean;
      isNoPicking(): boolean;
      isNorthHoppable(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isSpriteInvisible(): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isZombie(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      removeAllContainers(): void;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reset(): void;
      reuseGridSquare(): void;
      save(arg0: java.nio.ByteBuffer): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      setActivated(arg0: boolean): void;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setBattery(arg0: zombie.inventory.InventoryItem): void;
      setBlink(arg0: boolean): void;
      setChargeRate(arg0: number): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setDamage(arg0: number): void;
      setDefaultCondition(arg0: number): void;
      setDir(arg0: zombie.iso.IsoDirections): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setKeyId(arg0: number): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setMovedThumpable(arg0: boolean): void;
      setName(arg0: string): void;
      setNoPicking(arg0: boolean): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPipedFuelAmount(arg0: number): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setSpecialTooltip(arg0: boolean): void;
      setSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTaintedWater(arg0: boolean): void;
      setTargetAlpha(arg0: number): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setWaterAmount(arg0: number): void;
      softReset(): void;
      sync(): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection, arg3: java.nio.ByteBuffer): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      toString(): string;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitModData(): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      unsetOutlineHighlight(): void;
      update(): void;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    // zombie.iso.objects.IsoClothingDryer extends zombie.iso.IsoObject
    export class IsoClothingDryer {
      private constructor();
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      static LowLightingQualityHack: boolean;
      static readonly MAX_WALL_SPLATS: number;
      NoPicking: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OutlineOnMouseover: boolean;
      bAlphaForced: boolean;
      bNeverDoneAlpha: boolean;
      static bmod: number;
      container?: zombie.inventory.ItemContainer;
      dir?: zombie.iso.IsoDirections;
      doNotSync: boolean;
      emitter?: zombie.audio.BaseSoundEmitter;
      static gmod: number;
      highlightFlags: number;
      keyId: number;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      name?: string;
      offsetX: number;
      offsetY: number;
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      partialThumpDmg: number;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      sheetRope: boolean;
      sheetRopeHealth: number;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      square?: zombie.iso.IsoGridSquare;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      tintb: number;
      tintg: number;
      tintr: number;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
  
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number): void;
      DirtySlice(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasTooltip(): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      addToWorld(): void;
      canAddSheetRope(): boolean;
      checkHaveElectricity(): void;
      cleanWallBlood(): void;
      clearAttachedAnimSprite(): void;
      countAddSheetRope(): number;
      createContainersFromSpriteProperties(): void;
      customHashCode(): number;
      debugPrintout(): void;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      doFindExternalWaterSource(): void;
      equals(arg0: any): boolean;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      getAlpha(arg0: number): number;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getCell(): zombie.iso.IsoCell;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getClass(): java.lang.Class<any>;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getDamage(): number;
      getDir(): zombie.iso.IsoDirections;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getIsSurfaceNormalOffset(): boolean;
      getItemContainer(): zombie.inventory.ItemContainer;
      getKeyId(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getMovingObjectIndex(): number;
      getName(): string;
      getNew(): zombie.iso.IsoObject;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffsetX(): number;
      getOffsetY(): number;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPipedFuelAmount(): number;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getScriptName(): string;
      getSpecialObjectIndex(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSquare(): zombie.iso.IsoGridSquare;
      getStaticMovingObjectIndex(): number;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTargetAlpha(arg0: number): number;
      getTextureName(): string;
      getThumpCondition(): number;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTile(): string;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUsesExternalWaterSource(): boolean;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWorldObjectIndex(): number;
      getX(): number;
      getY(): number;
      getZ(): number;
      hasExternalWaterSource(): boolean;
      hasModData(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      isActivated(): boolean;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isBlink(): boolean;
      isCharacter(): boolean;
      isDestroyed(): boolean;
      isExistInTheWorld(): boolean;
      isFloor(): boolean;
      isHighlighted(): boolean;
      isHoppable(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isMaskClicked(arg0: number, arg1: number, arg2: boolean): boolean;
      isMovedThumpable(): boolean;
      isNoPicking(): boolean;
      isNorthHoppable(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isSpriteInvisible(): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isZombie(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      removeAllContainers(): void;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reset(): void;
      reuseGridSquare(): void;
      save(arg0: java.nio.ByteBuffer): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      setActivated(arg0: boolean): void;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setBlink(arg0: boolean): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setDamage(arg0: number): void;
      setDefaultCondition(arg0: number): void;
      setDir(arg0: zombie.iso.IsoDirections): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setKeyId(arg0: number): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setMovedThumpable(arg0: boolean): void;
      setName(arg0: string): void;
      setNoPicking(arg0: boolean): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPipedFuelAmount(arg0: number): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setSpecialTooltip(arg0: boolean): void;
      setSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTaintedWater(arg0: boolean): void;
      setTargetAlpha(arg0: number): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setWaterAmount(arg0: number): void;
      softReset(): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection, arg3: java.nio.ByteBuffer): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      toString(): string;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitModData(): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      unsetOutlineHighlight(): void;
      update(): void;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    // zombie.iso.objects.IsoClothingWasher extends zombie.iso.IsoObject
    export class IsoClothingWasher {
      private constructor();
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      static LowLightingQualityHack: boolean;
      static readonly MAX_WALL_SPLATS: number;
      NoPicking: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OutlineOnMouseover: boolean;
      bAlphaForced: boolean;
      bNeverDoneAlpha: boolean;
      static bmod: number;
      container?: zombie.inventory.ItemContainer;
      dir?: zombie.iso.IsoDirections;
      doNotSync: boolean;
      emitter?: zombie.audio.BaseSoundEmitter;
      static gmod: number;
      highlightFlags: number;
      keyId: number;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      name?: string;
      offsetX: number;
      offsetY: number;
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      partialThumpDmg: number;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      sheetRope: boolean;
      sheetRopeHealth: number;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      square?: zombie.iso.IsoGridSquare;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      tintb: number;
      tintg: number;
      tintr: number;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
  
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number): void;
      DirtySlice(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasTooltip(): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      addToWorld(): void;
      canAddSheetRope(): boolean;
      checkHaveElectricity(): void;
      cleanWallBlood(): void;
      clearAttachedAnimSprite(): void;
      countAddSheetRope(): number;
      createContainersFromSpriteProperties(): void;
      customHashCode(): number;
      debugPrintout(): void;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      doFindExternalWaterSource(): void;
      equals(arg0: any): boolean;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      getAlpha(arg0: number): number;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getCell(): zombie.iso.IsoCell;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getClass(): java.lang.Class<any>;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getDamage(): number;
      getDir(): zombie.iso.IsoDirections;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getIsSurfaceNormalOffset(): boolean;
      getItemContainer(): zombie.inventory.ItemContainer;
      getKeyId(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getMovingObjectIndex(): number;
      getName(): string;
      getNew(): zombie.iso.IsoObject;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffsetX(): number;
      getOffsetY(): number;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPipedFuelAmount(): number;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getScriptName(): string;
      getSpecialObjectIndex(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSquare(): zombie.iso.IsoGridSquare;
      getStaticMovingObjectIndex(): number;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTargetAlpha(arg0: number): number;
      getTextureName(): string;
      getThumpCondition(): number;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTile(): string;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUsesExternalWaterSource(): boolean;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWorldObjectIndex(): number;
      getX(): number;
      getY(): number;
      getZ(): number;
      hasExternalWaterSource(): boolean;
      hasModData(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      isActivated(): boolean;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isBlink(): boolean;
      isCharacter(): boolean;
      isDestroyed(): boolean;
      isExistInTheWorld(): boolean;
      isFloor(): boolean;
      isHighlighted(): boolean;
      isHoppable(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isMaskClicked(arg0: number, arg1: number, arg2: boolean): boolean;
      isMovedThumpable(): boolean;
      isNoPicking(): boolean;
      isNorthHoppable(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isSpriteInvisible(): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isZombie(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      removeAllContainers(): void;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reset(): void;
      reuseGridSquare(): void;
      save(arg0: java.nio.ByteBuffer): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      setActivated(arg0: boolean): void;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setBlink(arg0: boolean): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setDamage(arg0: number): void;
      setDefaultCondition(arg0: number): void;
      setDir(arg0: zombie.iso.IsoDirections): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setKeyId(arg0: number): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setMovedThumpable(arg0: boolean): void;
      setName(arg0: string): void;
      setNoPicking(arg0: boolean): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPipedFuelAmount(arg0: number): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setSpecialTooltip(arg0: boolean): void;
      setSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTaintedWater(arg0: boolean): void;
      setTargetAlpha(arg0: number): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setWaterAmount(arg0: number): void;
      softReset(): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection, arg3: java.nio.ByteBuffer): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      toString(): string;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitModData(): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      unsetOutlineHighlight(): void;
      update(): void;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    // zombie.iso.objects.IsoCombinationWasherDryer extends zombie.iso.IsoObject
    export class IsoCombinationWasherDryer {
      private constructor();
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      static LowLightingQualityHack: boolean;
      static readonly MAX_WALL_SPLATS: number;
      NoPicking: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OutlineOnMouseover: boolean;
      bAlphaForced: boolean;
      bNeverDoneAlpha: boolean;
      static bmod: number;
      container?: zombie.inventory.ItemContainer;
      dir?: zombie.iso.IsoDirections;
      doNotSync: boolean;
      emitter?: zombie.audio.BaseSoundEmitter;
      static gmod: number;
      highlightFlags: number;
      keyId: number;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      name?: string;
      offsetX: number;
      offsetY: number;
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      partialThumpDmg: number;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      sheetRope: boolean;
      sheetRopeHealth: number;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      square?: zombie.iso.IsoGridSquare;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      tintb: number;
      tintg: number;
      tintr: number;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
  
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number): void;
      DirtySlice(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasTooltip(): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      addToWorld(): void;
      canAddSheetRope(): boolean;
      checkHaveElectricity(): void;
      cleanWallBlood(): void;
      clearAttachedAnimSprite(): void;
      countAddSheetRope(): number;
      createContainersFromSpriteProperties(): void;
      customHashCode(): number;
      debugPrintout(): void;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      doFindExternalWaterSource(): void;
      equals(arg0: any): boolean;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      getAlpha(arg0: number): number;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getCell(): zombie.iso.IsoCell;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getClass(): java.lang.Class<any>;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getDamage(): number;
      getDir(): zombie.iso.IsoDirections;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getIsSurfaceNormalOffset(): boolean;
      getItemContainer(): zombie.inventory.ItemContainer;
      getKeyId(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getMovingObjectIndex(): number;
      getName(): string;
      getNew(): zombie.iso.IsoObject;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffsetX(): number;
      getOffsetY(): number;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPipedFuelAmount(): number;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getScriptName(): string;
      getSpecialObjectIndex(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSquare(): zombie.iso.IsoGridSquare;
      getStaticMovingObjectIndex(): number;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTargetAlpha(arg0: number): number;
      getTextureName(): string;
      getThumpCondition(): number;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTile(): string;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUsesExternalWaterSource(): boolean;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWorldObjectIndex(): number;
      getX(): number;
      getY(): number;
      getZ(): number;
      hasExternalWaterSource(): boolean;
      hasModData(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      isActivated(): boolean;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isBlink(): boolean;
      isCharacter(): boolean;
      isDestroyed(): boolean;
      isExistInTheWorld(): boolean;
      isFloor(): boolean;
      isHighlighted(): boolean;
      isHoppable(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isMaskClicked(arg0: number, arg1: number, arg2: boolean): boolean;
      isModeDryer(): boolean;
      isModeWasher(): boolean;
      isMovedThumpable(): boolean;
      isNoPicking(): boolean;
      isNorthHoppable(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isSpriteInvisible(): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isZombie(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      removeAllContainers(): void;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reset(): void;
      reuseGridSquare(): void;
      save(arg0: java.nio.ByteBuffer): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      setActivated(arg0: boolean): void;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setBlink(arg0: boolean): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setDamage(arg0: number): void;
      setDefaultCondition(arg0: number): void;
      setDir(arg0: zombie.iso.IsoDirections): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setKeyId(arg0: number): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setModeDryer(): void;
      setModeWasher(): void;
      setMovedThumpable(arg0: boolean): void;
      setName(arg0: string): void;
      setNoPicking(arg0: boolean): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPipedFuelAmount(arg0: number): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setSpecialTooltip(arg0: boolean): void;
      setSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTaintedWater(arg0: boolean): void;
      setTargetAlpha(arg0: number): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setWaterAmount(arg0: number): void;
      softReset(): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection, arg3: java.nio.ByteBuffer): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      toString(): string;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitModData(): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      unsetOutlineHighlight(): void;
      update(): void;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    // zombie.iso.objects.IsoCompost extends zombie.iso.IsoObject
    export class IsoCompost {
      private constructor();
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      static LowLightingQualityHack: boolean;
      static readonly MAX_WALL_SPLATS: number;
      NoPicking: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OutlineOnMouseover: boolean;
      bAlphaForced: boolean;
      bNeverDoneAlpha: boolean;
      static bmod: number;
      container?: zombie.inventory.ItemContainer;
      dir?: zombie.iso.IsoDirections;
      doNotSync: boolean;
      emitter?: zombie.audio.BaseSoundEmitter;
      static gmod: number;
      highlightFlags: number;
      keyId: number;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      name?: string;
      offsetX: number;
      offsetY: number;
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      partialThumpDmg: number;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      sheetRope: boolean;
      sheetRopeHealth: number;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      square?: zombie.iso.IsoGridSquare;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      tintb: number;
      tintg: number;
      tintr: number;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
  
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number): void;
      DirtySlice(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasTooltip(): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      addToWorld(): void;
      canAddSheetRope(): boolean;
      checkHaveElectricity(): void;
      cleanWallBlood(): void;
      clearAttachedAnimSprite(): void;
      countAddSheetRope(): number;
      createContainersFromSpriteProperties(): void;
      customHashCode(): number;
      debugPrintout(): void;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      doFindExternalWaterSource(): void;
      equals(arg0: any): boolean;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      getAlpha(arg0: number): number;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getCell(): zombie.iso.IsoCell;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getClass(): java.lang.Class<any>;
      getCompost(): number;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getDamage(): number;
      getDir(): zombie.iso.IsoDirections;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getIsSurfaceNormalOffset(): boolean;
      getItemContainer(): zombie.inventory.ItemContainer;
      getKeyId(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getMovingObjectIndex(): number;
      getName(): string;
      getNew(): zombie.iso.IsoObject;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffsetX(): number;
      getOffsetY(): number;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPipedFuelAmount(): number;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getScriptName(): string;
      getSpecialObjectIndex(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSquare(): zombie.iso.IsoGridSquare;
      getStaticMovingObjectIndex(): number;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTargetAlpha(arg0: number): number;
      getTextureName(): string;
      getThumpCondition(): number;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTile(): string;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUsesExternalWaterSource(): boolean;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWorldObjectIndex(): number;
      getX(): number;
      getY(): number;
      getZ(): number;
      hasExternalWaterSource(): boolean;
      hasModData(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isBlink(): boolean;
      isCharacter(): boolean;
      isDestroyed(): boolean;
      isExistInTheWorld(): boolean;
      isFloor(): boolean;
      isHighlighted(): boolean;
      isHoppable(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isMaskClicked(arg0: number, arg1: number, arg2: boolean): boolean;
      isMovedThumpable(): boolean;
      isNoPicking(): boolean;
      isNorthHoppable(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isSpriteInvisible(): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isZombie(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      remove(): void;
      removeAllContainers(): void;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reset(): void;
      reuseGridSquare(): void;
      save(arg0: java.nio.ByteBuffer): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setBlink(arg0: boolean): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setCompost(arg0: number): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setDamage(arg0: number): void;
      setDefaultCondition(arg0: number): void;
      setDir(arg0: zombie.iso.IsoDirections): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setKeyId(arg0: number): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setMovedThumpable(arg0: boolean): void;
      setName(arg0: string): void;
      setNoPicking(arg0: boolean): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPipedFuelAmount(arg0: number): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setSpecialTooltip(arg0: boolean): void;
      setSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTaintedWater(arg0: boolean): void;
      setTargetAlpha(arg0: number): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setWaterAmount(arg0: number): void;
      softReset(): void;
      syncCompost(): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection, arg3: java.nio.ByteBuffer): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      toString(): string;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitModData(): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      unsetOutlineHighlight(): void;
      update(): void;
      updateSprite(): void;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    // zombie.iso.objects.IsoCurtain extends zombie.iso.IsoObject
    export class IsoCurtain {
      private constructor();
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      Barricaded: boolean;
      BarricideMaxStrength?: number;
      BarricideStrength?: number;
      Health?: number;
      Locked: boolean;
      static LowLightingQualityHack: boolean;
      static readonly MAX_WALL_SPLATS: number;
      MaxHealth?: number;
      NoPicking: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OutlineOnMouseover: boolean;
      PushedMaxStrength?: number;
      PushedStrength?: number;
      bAlphaForced: boolean;
      bNeverDoneAlpha: boolean;
      static bmod: number;
      container?: zombie.inventory.ItemContainer;
      dir?: zombie.iso.IsoDirections;
      doNotSync: boolean;
      emitter?: zombie.audio.BaseSoundEmitter;
      static gmod: number;
      highlightFlags: number;
      keyId: number;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      name?: string;
      north: boolean;
      offsetX: number;
      offsetY: number;
      open: boolean;
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      partialThumpDmg: number;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      sheetRope: boolean;
      sheetRopeHealth: number;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      square?: zombie.iso.IsoGridSquare;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      tintb: number;
      tintg: number;
      tintr: number;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
  
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number): void;
      DirtySlice(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasTooltip(): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      IsOpen(): boolean;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      ToggleDoor(arg0: zombie.characters.IsoGameCharacter): void;
      ToggleDoorSilent(): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      addToWorld(): void;
      canAddSheetRope(): boolean;
      canInteractWith(arg0: zombie.characters.IsoGameCharacter): boolean;
      checkHaveElectricity(): void;
      cleanWallBlood(): void;
      clearAttachedAnimSprite(): void;
      countAddSheetRope(): number;
      createContainersFromSpriteProperties(): void;
      customHashCode(): number;
      debugPrintout(): void;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      doFindExternalWaterSource(): void;
      equals(arg0: any): boolean;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      getAlpha(arg0: number): number;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getCell(): zombie.iso.IsoCell;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getClass(): java.lang.Class<any>;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getDamage(): number;
      getDir(): zombie.iso.IsoDirections;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getIsSurfaceNormalOffset(): boolean;
      getItemContainer(): zombie.inventory.ItemContainer;
      getKeyId(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getMovingObjectIndex(): number;
      getName(): string;
      getNew(): zombie.iso.IsoObject;
      getNorth(): boolean;
      getObjectAttachedTo(): zombie.iso.IsoObject;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffsetX(): number;
      getOffsetY(): number;
      getOppositeSquare(): zombie.iso.IsoGridSquare;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPipedFuelAmount(): number;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getScriptName(): string;
      getSoundPrefix(): string;
      getSpecialObjectIndex(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSquare(): zombie.iso.IsoGridSquare;
      getStaticMovingObjectIndex(): number;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTargetAlpha(arg0: number): number;
      getTextureName(): string;
      getThumpCondition(): number;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTile(): string;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUsesExternalWaterSource(): boolean;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWorldObjectIndex(): number;
      getX(): number;
      getY(): number;
      getZ(): number;
      hasExternalWaterSource(): boolean;
      hasModData(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      isAdjacentToSquare(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): boolean;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isBlink(): boolean;
      isCharacter(): boolean;
      isDestroyed(): boolean;
      isExistInTheWorld(): boolean;
      isFloor(): boolean;
      isHighlighted(): boolean;
      isHoppable(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isMaskClicked(arg0: number, arg1: number, arg2: boolean): boolean;
      isMovedThumpable(): boolean;
      isNoPicking(): boolean;
      isNorthHoppable(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isSheet(arg0: zombie.iso.IsoObject): boolean;
      isSpriteInvisible(): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isZombie(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      removeAllContainers(): void;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSheet(arg0: zombie.characters.IsoGameCharacter): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reset(): void;
      reuseGridSquare(): void;
      save(arg0: java.nio.ByteBuffer): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setBlink(arg0: boolean): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setDamage(arg0: number): void;
      setDefaultCondition(arg0: number): void;
      setDir(arg0: zombie.iso.IsoDirections): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setKeyId(arg0: number): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setMovedThumpable(arg0: boolean): void;
      setName(arg0: string): void;
      setNoPicking(arg0: boolean): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPipedFuelAmount(arg0: number): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setSpecialTooltip(arg0: boolean): void;
      setSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTaintedWater(arg0: boolean): void;
      setTargetAlpha(arg0: number): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setWaterAmount(arg0: number): void;
      softReset(): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      toString(): string;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitModData(): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      unsetOutlineHighlight(): void;
      update(): void;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    // zombie.iso.objects.IsoDeadBody extends zombie.iso.IsoMovingObject
    export class IsoDeadBody {
      private constructor();
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      static LowLightingQualityHack: boolean;
      static readonly MAX_ROT_STAGES: number;
      static readonly MAX_WALL_SPLATS: number;
      static readonly MAX_ZOMBIES_EATING: number;
      NoPicking: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OutlineOnMouseover: boolean;
      Speaking: boolean;
      atlasTex?: zombie.core.textures.Texture;
      bAlphaForced: boolean;
      bNeverDoneAlpha: boolean;
      readonly bOutline?: boolean[];
      static bmod: number;
      container?: zombie.inventory.ItemContainer;
      def?: zombie.iso.sprite.IsoSpriteInstance;
      dir?: zombie.iso.IsoDirections;
      doNotSync: boolean;
      emitter?: zombie.audio.BaseSoundEmitter;
      static gmod: number;
      highlightFlags: number;
      keyId: number;
      last?: zombie.iso.IsoGridSquare;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      lx: number;
      ly: number;
      lz: number;
      name?: string;
      noDamage: boolean;
      nx: number;
      ny: number;
      offsetX: number;
      offsetY: number;
      readonly outlineColor?: zombie.core.textures.ColorInfo[];
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      partialThumpDmg: number;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      sayLine?: string;
      sheetRope: boolean;
      sheetRopeHealth: number;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      square?: zombie.iso.IsoGridSquare;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      tintb: number;
      tintg: number;
      tintr: number;
      static treeSoundMgr?: zombie.iso.IsoMovingObject$TreeSoundManager;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
      x: number;
      y: number;
      z: number;
  
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      Burn(): void;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number): void;
      Despawn(): void;
      DirtySlice(): void;
      DistTo(arg0: number, arg1: number): number;
      DistToProper(arg0: zombie.iso.IsoObject): number;
      DistToSquared(arg0: zombie.iso.IsoMovingObject): number;
      DoCollideNorS(): void;
      DoCollideWorE(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasTooltip(): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      IsSpeaking(): boolean;
      Move(arg0: zombie.iso.Vector2): void;
      MoveUnmodded(arg0: zombie.iso.Vector2): void;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      Reset(): void;
      Say(arg0: string): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      addToWorld(): void;
      canAddSheetRope(): boolean;
      canHaveMultipleHits(): number;
      checkClothing(arg0: zombie.inventory.InventoryItem): void;
      checkHaveElectricity(): void;
      cleanWallBlood(): void;
      clearAttachedAnimSprite(): void;
      collideWith(arg0: zombie.iso.IsoObject): void;
      compareToY(arg0: zombie.iso.IsoMovingObject): number;
      countAddSheetRope(): number;
      createContainersFromSpriteProperties(): void;
      customHashCode(): number;
      debugPrintout(): void;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      distToNearestCamCharacter(): number;
      doFindExternalWaterSource(): void;
      doStairs(): void;
      ensureOnTile(): void;
      equals(arg0: any): boolean;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      getAlpha(arg0: number): number;
      getAngle(): number;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getAttachedItems(): zombie.characters.AttachedItems.AttachedItems;
      getBuilding(): zombie.iso.areas.IsoBuilding;
      getBumpedType(arg0: zombie.characters.IsoGameCharacter): string;
      getCell(): zombie.iso.IsoCell;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getClass(): java.lang.Class<any>;
      getCollideType(): string;
      getCollidedObject(): zombie.iso.IsoObject;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getCurrentBuilding(): zombie.iso.areas.IsoBuilding;
      getCurrentSquare(): zombie.iso.IsoGridSquare;
      getCurrentZone(): zombie.iso.IsoMetaGrid$Zone;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getDamage(): number;
      getDir(): zombie.iso.IsoDirections;
      getDistanceSq(arg0: zombie.iso.IsoMovingObject): number;
      getEatingZombies(): java.util.ArrayList<zombie.characters.IsoZombie>;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getFeelerTile(arg0: number): zombie.iso.IsoGridSquare;
      getFeelersize(): number;
      getFuturWalkedSquare(): zombie.iso.IsoGridSquare;
      getGlobalMovementMod(arg0: boolean): number;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getHitDir(): zombie.iso.Vector2;
      getHitForce(): number;
      getHitFromAngle(): number;
      getHumanVisual(): zombie.core.skinnedmodel.visual.HumanVisual;
      getID(): number;
      getIDCount(): number;
      getImpulsex(): number;
      getImpulsey(): number;
      getIsSurfaceNormalOffset(): boolean;
      getItem(): zombie.inventory.InventoryItem;
      getItemContainer(): zombie.inventory.ItemContainer;
      getItemVisuals(arg0: zombie.core.skinnedmodel.visual.ItemVisuals): void;
      getKeyId(): number;
      getLastCollideTime(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getLastSquare(): zombie.iso.IsoGridSquare;
      getLastTargettedBy(): zombie.characters.IsoZombie;
      getLimpulsex(): number;
      getLimpulsey(): number;
      getLx(): number;
      getLy(): number;
      getLz(): number;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getMasterRegion(): zombie.iso.areas.isoregion.regions.IWorldRegion;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getMovementLastFrame(): zombie.iso.Vector2;
      getMovingObjectIndex(): number;
      getName(): string;
      getNew(): zombie.iso.IsoObject;
      getNoDamage(): boolean;
      getNx(): number;
      getNy(): number;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffsetX(): number;
      getOffsetY(): number;
      getOnlineID(): number;
      getOutfitName(): string;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPathFindIndex(): number;
      getPipedFuelAmount(): number;
      getPosition(arg0: zombie.iso.Vector3): zombie.iso.Vector3;
      getPrimaryHandItem(): zombie.inventory.InventoryItem;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getSayLine(): string;
      getScreenX(): number;
      getScreenY(): number;
      getScriptModule(): string;
      getScriptName(): string;
      getScriptnx(): number;
      getScriptny(): number;
      getSecondaryHandItem(): zombie.inventory.InventoryItem;
      getSpecialObjectIndex(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSquare(): zombie.iso.IsoGridSquare;
      getStateEventDelayTimer(): number;
      getStaticMovingObjectIndex(): number;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTalkerType(): string;
      getTargetAlpha(arg0: number): number;
      getTextureName(): string;
      getThumpCondition(): number;
      getThumpTarget(): zombie.iso.objects.interfaces.Thumpable;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTile(): string;
      getTimeSinceZombieAttack(): number;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUsesExternalWaterSource(): boolean;
      getVectorFromDirection(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWeight(): number;
      getWidth(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWorldObjectIndex(): number;
      getWornItems(): zombie.characters.WornItems.WornItems;
      getX(): number;
      getY(): number;
      getZ(): number;
      hasExternalWaterSource(): boolean;
      hasModData(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isBlink(): boolean;
      isCharacter(): boolean;
      isCloseKilled(): boolean;
      isCollidable(): boolean;
      isCollided(): boolean;
      isCollidedE(): boolean;
      isCollidedN(): boolean;
      isCollidedS(): boolean;
      isCollidedThisFrame(): boolean;
      isCollidedW(): boolean;
      isCollidedWithDoor(): boolean;
      isCollidedWithVehicle(): boolean;
      isCrawling(): boolean;
      isDead(arg0: number): boolean;
      isDestroyed(): boolean;
      isEatingOther(arg0: zombie.iso.IsoMovingObject): boolean;
      isExistInTheWorld(): boolean;
      isFakeDead(): boolean;
      isFallOnFront(): boolean;
      isFemale(): boolean;
      isFirstUpdate(): boolean;
      isFloor(): boolean;
      isHighlighted(): boolean;
      isHoppable(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isMaskClicked(arg0: number, arg1: number, arg2: boolean): boolean;
      isMouseOver(arg0: number, arg1: number): boolean;
      isMovedThumpable(): boolean;
      isNoPicking(): boolean;
      isNorthHoppable(): boolean;
      isOnFloor(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isPushableForSeparate(): boolean;
      isPushedByForSeparate(arg0: zombie.iso.IsoMovingObject): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isShootable(): boolean;
      isSkeleton(): boolean;
      isSolid(): boolean;
      isSolidForSeparate(): boolean;
      isSpriteInvisible(): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isZombie(): boolean;
      isZombiesDontAttack(): boolean;
      isbAltCollide(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      postupdate(): void;
      preupdate(): void;
      readInventory(arg0: java.nio.ByteBuffer): string;
      reanimate(): void;
      reanimateLater(): void;
      reanimateNow(): void;
      removeAllContainers(): void;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderShadow(): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reset(): void;
      reuseGridSquare(): void;
      save(arg0: java.nio.ByteBuffer): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      separate(): void;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setAttachedItems(arg0: zombie.characters.AttachedItems.AttachedItems): void;
      setBlink(arg0: boolean): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setCloseKilled(arg0: boolean): void;
      setCollidable(arg0: boolean): void;
      setCollideType(arg0: string): void;
      setCollidedE(arg0: boolean): void;
      setCollidedN(arg0: boolean): void;
      setCollidedObject(arg0: zombie.iso.IsoObject): void;
      setCollidedS(arg0: boolean): void;
      setCollidedThisFrame(arg0: boolean): void;
      setCollidedW(arg0: boolean): void;
      setCollidedWithDoor(arg0: boolean): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCrawling(arg0: boolean): void;
      setCurrent(arg0: zombie.iso.IsoGridSquare): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setDamage(arg0: number): void;
      setDefaultCondition(arg0: number): void;
      setDestroyed(arg0: boolean): void;
      setDir(arg0: zombie.iso.IsoDirections): void;
      setEatingZombies(arg0: java.util.ArrayList<zombie.characters.IsoZombie>): void;
      setFakeDead(arg0: boolean): void;
      setFallOnFront(arg0: boolean): void;
      setFeelersize(arg0: number): void;
      setFirstUpdate(arg0: boolean): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setHitDir(arg0: zombie.iso.Vector2): void;
      setHitForce(arg0: number): void;
      setHitFromAngle(arg0: number): void;
      setID(arg0: number): void;
      setIDCount(arg0: number): void;
      setImpulsex(arg0: number): void;
      setImpulsey(arg0: number): void;
      setKeyId(arg0: number): void;
      setLast(arg0: zombie.iso.IsoGridSquare): void;
      setLastCollideTime(arg0: number): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setLastTargettedBy(arg0: zombie.characters.IsoZombie): void;
      setLimpulsex(arg0: number): void;
      setLimpulsey(arg0: number): void;
      setLx(arg0: number): void;
      setLy(arg0: number): void;
      setLz(arg0: number): void;
      setMovedThumpable(arg0: boolean): void;
      setMovementLastFrame(arg0: zombie.iso.Vector2): void;
      setMovingSquareNow(): void;
      setName(arg0: string): void;
      setNoDamage(arg0: boolean): void;
      setNoPicking(arg0: boolean): void;
      setNx(arg0: number): void;
      setNy(arg0: number): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOnFloor(arg0: boolean): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPathFindIndex(arg0: number): void;
      setPipedFuelAmount(arg0: number): void;
      setPrimaryHandItem(arg0: zombie.inventory.InventoryItem): void;
      setReanimateTime(arg0: number): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setScriptModule(arg0: string): void;
      setScriptnx(arg0: number): void;
      setScriptny(arg0: number): void;
      setSecondaryHandItem(arg0: zombie.inventory.InventoryItem): void;
      setShootable(arg0: boolean): void;
      setSolid(arg0: boolean): void;
      setSpecialTooltip(arg0: boolean): void;
      setSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setStateEventDelayTimer(arg0: number): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTaintedWater(arg0: boolean): void;
      setTargetAlpha(arg0: number): void;
      setThumpTarget(arg0: zombie.iso.objects.interfaces.Thumpable): void;
      setTimeSinceZombieAttack(arg0: number): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setWaterAmount(arg0: number): void;
      setWeight(arg0: number): void;
      setWidth(arg0: number): void;
      setWornItems(arg0: zombie.characters.WornItems.WornItems): void;
      setX(arg0: number): void;
      setY(arg0: number): void;
      setZ(arg0: number): void;
      setZombiesDontAttack(arg0: boolean): void;
      setbAltCollide(arg0: boolean): void;
      softReset(): void;
      spotted(arg0: zombie.iso.IsoMovingObject, arg1: boolean): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection, arg3: java.nio.ByteBuffer): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      toString(): string;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitModData(): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      unsetOutlineHighlight(): void;
      update(): void;
      updateBodies(): void;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    // zombie.iso.objects.IsoDoor extends zombie.iso.IsoObject
    export class IsoDoor {
      private constructor();
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      Health: number;
      Locked: boolean;
      static LowLightingQualityHack: boolean;
      static readonly MAX_WALL_SPLATS: number;
      MaxHealth: number;
      NoPicking: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OutlineOnMouseover: boolean;
      PushedMaxStrength: number;
      PushedStrength: number;
      bAlphaForced: boolean;
      bNeverDoneAlpha: boolean;
      static bmod: number;
      container?: zombie.inventory.ItemContainer;
      dir?: zombie.iso.IsoDirections;
      doNotSync: boolean;
      emitter?: zombie.audio.BaseSoundEmitter;
      static gmod: number;
      highlightFlags: number;
      keyId: number;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      lockedByKey: boolean;
      name?: string;
      north: boolean;
      offsetX: number;
      offsetY: number;
      open: boolean;
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      partialThumpDmg: number;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      sheetRope: boolean;
      sheetRopeHealth: number;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      square?: zombie.iso.IsoGridSquare;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      static readonly tempo?: zombie.iso.Vector2;
      tintb: number;
      tintg: number;
      tintr: number;
      type?: zombie.iso.objects.IsoDoor$DoorType;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
  
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number): void;
      DirtySlice(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasCurtains(): zombie.iso.objects.IsoDoor;
      HasTooltip(): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      IsOpen(): boolean;
      IsStrengthenedByPushedItems(): boolean;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      ToggleDoor(arg0: zombie.characters.IsoGameCharacter): void;
      ToggleDoorActual(arg0: zombie.characters.IsoGameCharacter): void;
      ToggleDoorSilent(): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addRandomBarricades(): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheet(arg0: zombie.characters.IsoGameCharacter): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      addToWorld(): void;
      canAddSheetRope(): boolean;
      canClimbOver(arg0: zombie.characters.IsoGameCharacter): boolean;
      checkHaveElectricity(): void;
      checkKeyId(): number;
      cleanWallBlood(): void;
      clearAttachedAnimSprite(): void;
      countAddSheetRope(): number;
      createContainersFromSpriteProperties(): void;
      customHashCode(): number;
      debugPrintout(): void;
      destroy(): void;
      destroyDoubleDoor(arg0: zombie.iso.IsoObject): boolean;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      destroyGarageDoor(arg0: zombie.iso.IsoObject): boolean;
      doFindExternalWaterSource(): void;
      equals(arg0: any): boolean;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      getAddSheetSquare(arg0: zombie.characters.IsoGameCharacter): zombie.iso.IsoGridSquare;
      getAlpha(arg0: number): number;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getBarricadeForCharacter(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoBarricade;
      getBarricadeOnOppositeSquare(): zombie.iso.objects.IsoBarricade;
      getBarricadeOnSameSquare(): zombie.iso.objects.IsoBarricade;
      getBarricadeOppositeCharacter(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoBarricade;
      getCell(): zombie.iso.IsoCell;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getClass(): java.lang.Class<any>;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getDamage(): number;
      getDir(): zombie.iso.IsoDirections;
      getDoubleDoorIndex(arg0: zombie.iso.IsoObject): number;
      getDoubleDoorObject(arg0: zombie.iso.IsoObject, arg1: number): zombie.iso.IsoObject;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getGarageDoorFirst(arg0: zombie.iso.IsoObject): zombie.iso.IsoObject;
      getGarageDoorIndex(arg0: zombie.iso.IsoObject): number;
      getGarageDoorNext(arg0: zombie.iso.IsoObject): zombie.iso.IsoObject;
      getGarageDoorPrev(arg0: zombie.iso.IsoObject): zombie.iso.IsoObject;
      getHealth(): number;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getIsSurfaceNormalOffset(): boolean;
      getItemContainer(): zombie.inventory.ItemContainer;
      getKeyId(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getMaxHealth(): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getMovingObjectIndex(): number;
      getName(): string;
      getNew(): zombie.iso.IsoObject;
      getNorth(): boolean;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffsetX(): number;
      getOffsetY(): number;
      getOpenSprite(): zombie.iso.sprite.IsoSprite;
      getOppositeSquare(): zombie.iso.IsoGridSquare;
      getOtherSideOfDoor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.IsoGridSquare;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPipedFuelAmount(): number;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getScriptName(): string;
      getSheetSquare(): zombie.iso.IsoGridSquare;
      getSpecialObjectIndex(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteEdge(arg0: boolean): zombie.iso.IsoDirections;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSquare(): zombie.iso.IsoGridSquare;
      getStaticMovingObjectIndex(): number;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTargetAlpha(arg0: number): number;
      getTextureName(): string;
      getThumpCondition(): number;
      getThumpSound(): string;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTile(): string;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUsesExternalWaterSource(): boolean;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWorldObjectIndex(): number;
      getX(): number;
      getY(): number;
      getZ(): number;
      hasExternalWaterSource(): boolean;
      hasModData(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveKey(): boolean;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      isAdjacentToSquare(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isBarricadeAllowed(): boolean;
      isBarricaded(): boolean;
      isBlink(): boolean;
      isCharacter(): boolean;
      isCurtainOpen(): boolean;
      isDestroyed(): boolean;
      isDoorObstructed(arg0: zombie.iso.IsoObject): boolean;
      isDoubleDoorObstructed(arg0: zombie.iso.IsoObject): boolean;
      isExistInTheWorld(): boolean;
      isExteriorDoor(arg0: zombie.characters.IsoGameCharacter): boolean;
      isFacingSheet(arg0: zombie.characters.IsoGameCharacter): boolean;
      isFloor(): boolean;
      isHighlighted(): boolean;
      isHoppable(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isLocked(): boolean;
      isLockedByKey(): boolean;
      isMaskClicked(arg0: number, arg1: number, arg2: boolean): boolean;
      isMovedThumpable(): boolean;
      isNoPicking(): boolean;
      isNorthHoppable(): boolean;
      isObstructed(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isSpriteInvisible(): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isZombie(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      removeAllContainers(): void;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSheet(arg0: zombie.characters.IsoGameCharacter): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reset(): void;
      reuseGridSquare(): void;
      save(arg0: java.nio.ByteBuffer): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setBlink(arg0: boolean): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCurtainOpen(arg0: boolean): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setDamage(arg0: number): void;
      setDefaultCondition(arg0: number): void;
      setDir(arg0: zombie.iso.IsoDirections): void;
      setHaveKey(arg0: boolean): void;
      setHealth(arg0: number): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setIsLocked(arg0: boolean): void;
      setKeyId(arg0: number): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setLocked(arg0: boolean): void;
      setLockedByKey(arg0: boolean): void;
      setMovedThumpable(arg0: boolean): void;
      setName(arg0: string): void;
      setNoPicking(arg0: boolean): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOpenSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPipedFuelAmount(arg0: number): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setSpecialTooltip(arg0: boolean): void;
      setSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTaintedWater(arg0: boolean): void;
      setTargetAlpha(arg0: number): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setWaterAmount(arg0: number): void;
      softReset(): void;
      syncDoorKey(): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection, arg3: java.nio.ByteBuffer): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      toString(): string;
      toggleCurtain(): void;
      toggleDoubleDoor(arg0: zombie.iso.IsoObject, arg1: boolean): void;
      toggleGarageDoor(arg0: zombie.iso.IsoObject, arg1: boolean): void;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitModData(): void;
      transmitSetCurtainOpen(arg0: boolean): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      unsetOutlineHighlight(): void;
      update(): void;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    /** [ENUM] zombie.iso.objects.IsoDoor$DoorType */
    export class IsoDoor$DoorType {
      /* ENUM VALUES */
      static readonly StrongWooden: IsoDoor$DoorType; 
      static readonly WeakWooden: IsoDoor$DoorType; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.iso.objects.IsoDoor$DoorType[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): IsoDoor$DoorType;
      valueOf(arg0: string): zombie.iso.objects.IsoDoor$DoorType;
      values(): zombie.iso.objects.IsoDoor$DoorType[];
    }
    // zombie.iso.objects.IsoFire extends zombie.iso.IsoObject
    export class IsoFire {
      private constructor();
      Age: number;
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      Energy: number;
      Life: number;
      LifeStage: number;
      LifeStageDuration: number;
      LifeStageTimer: number;
      LightOscillator: number;
      LightRadius: number;
      LightSource?: zombie.iso.IsoLightSource;
      static LowLightingQualityHack: boolean;
      static readonly MAX_WALL_SPLATS: number;
      MaxLife: number;
      MinLife: number;
      NoPicking: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OutlineOnMouseover: boolean;
      SpreadDelay: number;
      SpreadTimer: number;
      bAlphaForced: boolean;
      bNeverDoneAlpha: boolean;
      bSmoke: boolean;
      static bmod: number;
      container?: zombie.inventory.ItemContainer;
      dir?: zombie.iso.IsoDirections;
      doNotSync: boolean;
      emitter?: zombie.audio.BaseSoundEmitter;
      static gmod: number;
      highlightFlags: number;
      keyId: number;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      name?: string;
      numFlameParticles: number;
      offsetX: number;
      offsetY: number;
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      partialThumpDmg: number;
      perm: boolean;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      sheetRope: boolean;
      sheetRopeHealth: number;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      square?: zombie.iso.IsoGridSquare;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      tintb: number;
      tintg: number;
      tintr: number;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
  
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      CanAddFire(arg0: zombie.iso.IsoGridSquare, arg1: boolean): boolean;
      CanAddSmoke(arg0: zombie.iso.IsoGridSquare, arg1: boolean): boolean;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number): void;
      DirtySlice(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      Fire_IsSquareFlamable(arg0: zombie.iso.IsoGridSquare): boolean;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasTooltip(): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      Spread(): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      addToWorld(): void;
      canAddSheetRope(): boolean;
      checkHaveElectricity(): void;
      cleanWallBlood(): void;
      clearAttachedAnimSprite(): void;
      countAddSheetRope(): number;
      createContainersFromSpriteProperties(): void;
      customHashCode(): number;
      debugPrintout(): void;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      doFindExternalWaterSource(): void;
      equals(arg0: any): boolean;
      extinctFire(): void;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      getAlpha(arg0: number): number;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getCell(): zombie.iso.IsoCell;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getClass(): java.lang.Class<any>;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getDamage(): number;
      getDir(): zombie.iso.IsoDirections;
      getEnergy(): number;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getIsSurfaceNormalOffset(): boolean;
      getItemContainer(): zombie.inventory.ItemContainer;
      getKeyId(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getLife(): number;
      getLightRadius(): number;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getMovingObjectIndex(): number;
      getName(): string;
      getNew(): zombie.iso.IsoObject;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffsetX(): number;
      getOffsetY(): number;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPipedFuelAmount(): number;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getScriptName(): string;
      getSpecialObjectIndex(): number;
      getSpreadDelay(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSquare(): zombie.iso.IsoGridSquare;
      getStaticMovingObjectIndex(): number;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTargetAlpha(arg0: number): number;
      getTextureName(): string;
      getThumpCondition(): number;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTile(): string;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUsesExternalWaterSource(): boolean;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWorldObjectIndex(): number;
      getX(): number;
      getY(): number;
      getZ(): number;
      hasExternalWaterSource(): boolean;
      hasModData(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isBlink(): boolean;
      isCharacter(): boolean;
      isDestroyed(): boolean;
      isExistInTheWorld(): boolean;
      isFloor(): boolean;
      isHighlighted(): boolean;
      isHoppable(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isMaskClicked(arg0: number, arg1: number, arg2: boolean): boolean;
      isMovedThumpable(): boolean;
      isNoPicking(): boolean;
      isNorthHoppable(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isPermanent(): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isSpriteInvisible(): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isZombie(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      removeAllContainers(): void;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reset(): void;
      reuseGridSquare(): void;
      save(arg0: java.nio.ByteBuffer): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setBlink(arg0: boolean): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setDamage(arg0: number): void;
      setDefaultCondition(arg0: number): void;
      setDir(arg0: zombie.iso.IsoDirections): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setKeyId(arg0: number): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setLife(arg0: number): void;
      setLifeStage(arg0: number): void;
      setLightRadius(arg0: number): void;
      setMovedThumpable(arg0: boolean): void;
      setName(arg0: string): void;
      setNoPicking(arg0: boolean): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPipedFuelAmount(arg0: number): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setSpecialTooltip(arg0: boolean): void;
      setSpreadDelay(arg0: number): void;
      setSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTaintedWater(arg0: boolean): void;
      setTargetAlpha(arg0: number): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setWaterAmount(arg0: number): void;
      softReset(): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection, arg3: java.nio.ByteBuffer): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      toString(): string;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitModData(): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      unsetOutlineHighlight(): void;
      update(): void;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    // zombie.iso.objects.IsoFireManager extends java.lang.Object
    export class IsoFireManager {
      private constructor();
      static Blue_Oscilator: number;
      static Blue_Oscilator_Rate: number;
      static Blue_Oscilator_Val: number;
      static readonly CharactersOnFire_Stack?: java.util.ArrayList<zombie.characters.IsoGameCharacter>;
      static FireAlpha: number;
      static FireAnimDelay: number;
      static FireRecalc: number;
      static FireRecalcDelay: number;
      static readonly FireStack?: java.util.ArrayList<zombie.iso.objects.IsoFire>;
      static FireTintMod?: zombie.core.textures.ColorInfo;
      static Green_Oscilator: number;
      static Green_Oscilator_Rate: number;
      static Green_Oscilator_Val: number;
      static LightCalcFromBurningCharacters: boolean;
      static MaxFireObjects: number;
      static OscilatorEffectScalar: number;
      static OscilatorSpeedScalar: number;
      static Red_Oscilator: number;
      static Red_Oscilator_Rate: number;
      static Red_Oscilator_Val: number;
      static SmokeAlpha: number;
      static SmokeAnimDelay: number;
      static SmokeTintMod?: zombie.core.textures.ColorInfo;
  
      Add(arg0: zombie.iso.objects.IsoFire): void;
      AddBurningCharacter(arg0: zombie.characters.IsoGameCharacter): void;
      Fire_LightCalc(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare, arg2: number): void;
      LightTileWithFire(arg0: zombie.iso.IsoGridSquare): void;
      MolotovSmash(arg0: zombie.iso.IsoCell, arg1: zombie.iso.IsoGridSquare): void;
      Remove(arg0: zombie.iso.objects.IsoFire): void;
      RemoveAllOn(arg0: zombie.iso.IsoGridSquare): void;
      RemoveBurningCharacter(arg0: zombie.characters.IsoGameCharacter): void;
      Reset(): void;
      StartFire(arg0: zombie.iso.IsoCell, arg1: zombie.iso.IsoGridSquare, arg2: boolean, arg3: number, arg4: number): void;
      StartSmoke(arg0: zombie.iso.IsoCell, arg1: zombie.iso.IsoGridSquare, arg2: boolean, arg3: number, arg4: number): void;
      Update(): void;
      addCharacterOnFire(arg0: zombie.characters.IsoGameCharacter): void;
      deleteCharacterOnFire(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      explode(arg0: zombie.iso.IsoCell, arg1: zombie.iso.IsoGridSquare, arg2: number): void;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      stopSound(arg0: zombie.iso.objects.IsoFire): void;
      toString(): string;
      updateSound(arg0: zombie.iso.objects.IsoFire): void;
      wait(arg0: number): void;
    }
    // zombie.iso.objects.IsoFireplace extends zombie.iso.IsoObject
    export class IsoFireplace {
      private constructor();
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      static LowLightingQualityHack: boolean;
      static readonly MAX_WALL_SPLATS: number;
      NoPicking: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OutlineOnMouseover: boolean;
      bAlphaForced: boolean;
      bNeverDoneAlpha: boolean;
      static bmod: number;
      container?: zombie.inventory.ItemContainer;
      dir?: zombie.iso.IsoDirections;
      doNotSync: boolean;
      emitter?: zombie.audio.BaseSoundEmitter;
      static gmod: number;
      highlightFlags: number;
      keyId: number;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      name?: string;
      offsetX: number;
      offsetY: number;
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      partialThumpDmg: number;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      sheetRope: boolean;
      sheetRopeHealth: number;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      square?: zombie.iso.IsoGridSquare;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      tintb: number;
      tintg: number;
      tintr: number;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
  
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number): void;
      DirtySlice(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasTooltip(): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addFuel(arg0: number): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      addToWorld(): void;
      canAddSheetRope(): boolean;
      checkHaveElectricity(): void;
      cleanWallBlood(): void;
      clearAttachedAnimSprite(): void;
      countAddSheetRope(): number;
      createContainersFromSpriteProperties(): void;
      customHashCode(): number;
      debugPrintout(): void;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      doFindExternalWaterSource(): void;
      equals(arg0: any): boolean;
      extinguish(): void;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      getAlpha(arg0: number): number;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getCell(): zombie.iso.IsoCell;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getClass(): java.lang.Class<any>;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getDamage(): number;
      getDir(): zombie.iso.IsoDirections;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getFuelAmount(): number;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getIsSurfaceNormalOffset(): boolean;
      getItemContainer(): zombie.inventory.ItemContainer;
      getKeyId(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getMovingObjectIndex(): number;
      getName(): string;
      getNew(): zombie.iso.IsoObject;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffsetX(): number;
      getOffsetY(): number;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPipedFuelAmount(): number;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getScriptName(): string;
      getSpecialObjectIndex(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSquare(): zombie.iso.IsoGridSquare;
      getStaticMovingObjectIndex(): number;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTargetAlpha(arg0: number): number;
      getTemperature(): number;
      getTextureName(): string;
      getThumpCondition(): number;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTile(): string;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUsesExternalWaterSource(): boolean;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWorldObjectIndex(): number;
      getX(): number;
      getY(): number;
      getZ(): number;
      hasExternalWaterSource(): boolean;
      hasFuel(): boolean;
      hasModData(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isBlink(): boolean;
      isCharacter(): boolean;
      isDestroyed(): boolean;
      isExistInTheWorld(): boolean;
      isFloor(): boolean;
      isHighlighted(): boolean;
      isHoppable(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isLit(): boolean;
      isMaskClicked(arg0: number, arg1: number, arg2: boolean): boolean;
      isMovedThumpable(): boolean;
      isNoPicking(): boolean;
      isNorthHoppable(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isSmouldering(): boolean;
      isSpriteInvisible(): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isZombie(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      removeAllContainers(): void;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reset(): void;
      reuseGridSquare(): void;
      save(arg0: java.nio.ByteBuffer): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setBlink(arg0: boolean): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setDamage(arg0: number): void;
      setDefaultCondition(arg0: number): void;
      setDir(arg0: zombie.iso.IsoDirections): void;
      setFuelAmount(arg0: number): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setKeyId(arg0: number): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setLit(arg0: boolean): void;
      setMovedThumpable(arg0: boolean): void;
      setName(arg0: string): void;
      setNoPicking(arg0: boolean): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPipedFuelAmount(arg0: number): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setSpecialTooltip(arg0: boolean): void;
      setSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTaintedWater(arg0: boolean): void;
      setTargetAlpha(arg0: number): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setWaterAmount(arg0: number): void;
      softReset(): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection, arg3: java.nio.ByteBuffer): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      toString(): string;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitModData(): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      unsetOutlineHighlight(): void;
      update(): void;
      useFuel(arg0: number): number;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    // zombie.iso.objects.IsoGenerator extends zombie.iso.IsoObject
    export class IsoGenerator {
      private constructor();
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      static LowLightingQualityHack: boolean;
      static readonly MAX_WALL_SPLATS: number;
      NoPicking: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OutlineOnMouseover: boolean;
      activated: boolean;
      bAlphaForced: boolean;
      bNeverDoneAlpha: boolean;
      static bmod: number;
      condition: number;
      connected: boolean;
      container?: zombie.inventory.ItemContainer;
      dir?: zombie.iso.IsoDirections;
      doNotSync: boolean;
      emitter?: zombie.audio.BaseSoundEmitter;
      fuel: number;
      static gmod: number;
      highlightFlags: number;
      keyId: number;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      name?: string;
      offsetX: number;
      offsetY: number;
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      partialThumpDmg: number;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      sheetRope: boolean;
      sheetRopeHealth: number;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      square?: zombie.iso.IsoGridSquare;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      tintb: number;
      tintg: number;
      tintr: number;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
  
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number): void;
      DirtySlice(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasTooltip(): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      Reset(): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      addToWorld(): void;
      canAddSheetRope(): boolean;
      checkHaveElectricity(): void;
      chunkLoaded(arg0: zombie.iso.IsoChunk): void;
      cleanWallBlood(): void;
      clearAttachedAnimSprite(): void;
      countAddSheetRope(): number;
      createContainersFromSpriteProperties(): void;
      customHashCode(): number;
      debugPrintout(): void;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      doFindExternalWaterSource(): void;
      equals(arg0: any): boolean;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      failToStart(): void;
      getAlpha(arg0: number): number;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getCell(): zombie.iso.IsoCell;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getClass(): java.lang.Class<any>;
      getCondition(): number;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getDamage(): number;
      getDir(): zombie.iso.IsoDirections;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getFuel(): number;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getIsSurfaceNormalOffset(): boolean;
      getItemContainer(): zombie.inventory.ItemContainer;
      getItemsPowered(): java.util.ArrayList<string>;
      getKeyId(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getMovingObjectIndex(): number;
      getName(): string;
      getNew(): zombie.iso.IsoObject;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffsetX(): number;
      getOffsetY(): number;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPipedFuelAmount(): number;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getScriptName(): string;
      getSpecialObjectIndex(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSquare(): zombie.iso.IsoGridSquare;
      getStaticMovingObjectIndex(): number;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTargetAlpha(arg0: number): number;
      getTextureName(): string;
      getThumpCondition(): number;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTile(): string;
      getTotalPowerUsing(): number;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUsesExternalWaterSource(): boolean;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWorldObjectIndex(): number;
      getX(): number;
      getY(): number;
      getZ(): number;
      hasExternalWaterSource(): boolean;
      hasModData(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      isActivated(): boolean;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isBlink(): boolean;
      isCharacter(): boolean;
      isConnected(): boolean;
      isDestroyed(): boolean;
      isExistInTheWorld(): boolean;
      isFloor(): boolean;
      isHighlighted(): boolean;
      isHoppable(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isMaskClicked(arg0: number, arg1: number, arg2: boolean): boolean;
      isMovedThumpable(): boolean;
      isNoPicking(): boolean;
      isNorthHoppable(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isPoweringSquare(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isSpriteInvisible(): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isZombie(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      remove(): void;
      removeAllContainers(): void;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reset(): void;
      reuseGridSquare(): void;
      save(arg0: java.nio.ByteBuffer): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      setActivated(arg0: boolean): void;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setBlink(arg0: boolean): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setCondition(arg0: number): void;
      setConnected(arg0: boolean): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setDamage(arg0: number): void;
      setDefaultCondition(arg0: number): void;
      setDir(arg0: zombie.iso.IsoDirections): void;
      setFuel(arg0: number): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setInfoFromItem(arg0: zombie.inventory.InventoryItem): void;
      setKeyId(arg0: number): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setMovedThumpable(arg0: boolean): void;
      setName(arg0: string): void;
      setNoPicking(arg0: boolean): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPipedFuelAmount(arg0: number): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setSpecialTooltip(arg0: boolean): void;
      setSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setSurroundingElectricity(): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTaintedWater(arg0: boolean): void;
      setTargetAlpha(arg0: number): void;
      setTotalPowerUsing(arg0: number): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setWaterAmount(arg0: number): void;
      softReset(): void;
      sync(arg0: number, arg1: number, arg2: boolean, arg3: boolean): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection, arg3: java.nio.ByteBuffer): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      toString(): string;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitModData(): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      unsetOutlineHighlight(): void;
      update(): void;
      updateGenerator(arg0: zombie.iso.IsoGridSquare): void;
      updateSurroundingNow(): void;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    // zombie.iso.objects.IsoJukebox extends zombie.iso.IsoObject
    export class IsoJukebox {
      private constructor();
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      static LowLightingQualityHack: boolean;
      static readonly MAX_WALL_SPLATS: number;
      NoPicking: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OutlineOnMouseover: boolean;
      bAlphaForced: boolean;
      bNeverDoneAlpha: boolean;
      static bmod: number;
      container?: zombie.inventory.ItemContainer;
      dir?: zombie.iso.IsoDirections;
      doNotSync: boolean;
      emitter?: zombie.audio.BaseSoundEmitter;
      static gmod: number;
      highlightFlags: number;
      keyId: number;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      name?: string;
      offsetX: number;
      offsetY: number;
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      partialThumpDmg: number;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      sheetRope: boolean;
      sheetRopeHealth: number;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      square?: zombie.iso.IsoGridSquare;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      tintb: number;
      tintg: number;
      tintr: number;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
  
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number): void;
      DirtySlice(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasTooltip(): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      SetPlaying(arg0: boolean): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      addToWorld(): void;
      canAddSheetRope(): boolean;
      checkHaveElectricity(): void;
      cleanWallBlood(): void;
      clearAttachedAnimSprite(): void;
      countAddSheetRope(): number;
      createContainersFromSpriteProperties(): void;
      customHashCode(): number;
      debugPrintout(): void;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      doFindExternalWaterSource(): void;
      equals(arg0: any): boolean;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      getAlpha(arg0: number): number;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getCell(): zombie.iso.IsoCell;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getClass(): java.lang.Class<any>;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getDamage(): number;
      getDir(): zombie.iso.IsoDirections;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getIsSurfaceNormalOffset(): boolean;
      getItemContainer(): zombie.inventory.ItemContainer;
      getKeyId(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getMovingObjectIndex(): number;
      getName(): string;
      getNew(): zombie.iso.IsoObject;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffsetX(): number;
      getOffsetY(): number;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPipedFuelAmount(): number;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getScriptName(): string;
      getSpecialObjectIndex(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSquare(): zombie.iso.IsoGridSquare;
      getStaticMovingObjectIndex(): number;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTargetAlpha(arg0: number): number;
      getTextureName(): string;
      getThumpCondition(): number;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTile(): string;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUsesExternalWaterSource(): boolean;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWorldObjectIndex(): number;
      getX(): number;
      getY(): number;
      getZ(): number;
      hasExternalWaterSource(): boolean;
      hasModData(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isBlink(): boolean;
      isCharacter(): boolean;
      isDestroyed(): boolean;
      isExistInTheWorld(): boolean;
      isFloor(): boolean;
      isHighlighted(): boolean;
      isHoppable(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isMaskClicked(arg0: number, arg1: number, arg2: boolean): boolean;
      isMovedThumpable(): boolean;
      isNoPicking(): boolean;
      isNorthHoppable(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isSpriteInvisible(): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isZombie(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      removeAllContainers(): void;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reset(): void;
      reuseGridSquare(): void;
      save(arg0: java.nio.ByteBuffer, arg1: boolean): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setBlink(arg0: boolean): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setDamage(arg0: number): void;
      setDefaultCondition(arg0: number): void;
      setDir(arg0: zombie.iso.IsoDirections): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setKeyId(arg0: number): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setMovedThumpable(arg0: boolean): void;
      setName(arg0: string): void;
      setNoPicking(arg0: boolean): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPipedFuelAmount(arg0: number): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setSpecialTooltip(arg0: boolean): void;
      setSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTaintedWater(arg0: boolean): void;
      setTargetAlpha(arg0: number): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setWaterAmount(arg0: number): void;
      softReset(): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection, arg3: java.nio.ByteBuffer): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      toString(): string;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitModData(): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      unsetOutlineHighlight(): void;
      update(): void;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    // zombie.iso.objects.IsoLightSwitch extends zombie.iso.IsoObject
    export class IsoLightSwitch {
      private constructor();
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      static LowLightingQualityHack: boolean;
      static readonly MAX_WALL_SPLATS: number;
      NoPicking: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OutlineOnMouseover: boolean;
      RoomID: number;
      bAlphaForced: boolean;
      bNeverDoneAlpha: boolean;
      bStreetLight: boolean;
      static bmod: number;
      container?: zombie.inventory.ItemContainer;
      dir?: zombie.iso.IsoDirections;
      doNotSync: boolean;
      emitter?: zombie.audio.BaseSoundEmitter;
      static gmod: number;
      highlightFlags: number;
      keyId: number;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      lightRoom: boolean;
      readonly lights?: java.util.ArrayList<zombie.iso.IsoLightSource>;
      name?: string;
      offsetX: number;
      offsetY: number;
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      partialThumpDmg: number;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      sheetRope: boolean;
      sheetRopeHealth: number;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      square?: zombie.iso.IsoGridSquare;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      tintb: number;
      tintg: number;
      tintr: number;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
  
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number): void;
      DirtySlice(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasTooltip(): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      addBattery(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.InventoryItem): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addLightBulb(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.InventoryItem): void;
      addLightSourceFromSprite(): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      addToWorld(): void;
      canAddSheetRope(): boolean;
      canSwitchLight(): boolean;
      checkHaveElectricity(): void;
      chunkLoaded(arg0: zombie.iso.IsoChunk): void;
      cleanWallBlood(): void;
      clearAttachedAnimSprite(): void;
      countAddSheetRope(): number;
      createContainersFromSpriteProperties(): void;
      customHashCode(): number;
      debugPrintout(): void;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      doFindExternalWaterSource(): void;
      equals(arg0: any): boolean;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      getAlpha(arg0: number): number;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getBulbItem(): string;
      getCanBeModified(): boolean;
      getCell(): zombie.iso.IsoCell;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getClass(): java.lang.Class<any>;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getCustomSettingsFromItem(arg0: zombie.inventory.InventoryItem): void;
      getDamage(): number;
      getDelta(): number;
      getDir(): zombie.iso.IsoDirections;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getHasBattery(): boolean;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getIsSurfaceNormalOffset(): boolean;
      getItemContainer(): zombie.inventory.ItemContainer;
      getKeyId(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getLights(): java.util.ArrayList<zombie.iso.IsoLightSource>;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getMovingObjectIndex(): number;
      getName(): string;
      getNew(): zombie.iso.IsoObject;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffsetX(): number;
      getOffsetY(): number;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPipedFuelAmount(): number;
      getPower(): number;
      getPrimaryB(): number;
      getPrimaryG(): number;
      getPrimaryR(): number;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getScriptName(): string;
      getSpecialObjectIndex(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSquare(): zombie.iso.IsoGridSquare;
      getStaticMovingObjectIndex(): number;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTargetAlpha(arg0: number): number;
      getTextureName(): string;
      getThumpCondition(): number;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTile(): string;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUseBattery(): boolean;
      getUsesExternalWaterSource(): boolean;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWorldObjectIndex(): number;
      getX(): number;
      getY(): number;
      getZ(): number;
      hasExternalWaterSource(): boolean;
      hasLightBulb(): boolean;
      hasModData(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      isActivated(): boolean;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isBlink(): boolean;
      isCharacter(): boolean;
      isDestroyed(): boolean;
      isExistInTheWorld(): boolean;
      isFloor(): boolean;
      isHighlighted(): boolean;
      isHoppable(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isMaskClicked(arg0: number, arg1: number, arg2: boolean): boolean;
      isMovedThumpable(): boolean;
      isNoPicking(): boolean;
      isNorthHoppable(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isSpriteInvisible(): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isZombie(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      receiveSyncCustomizedSettings(arg0: java.nio.ByteBuffer, arg1: zombie.core.raknet.UdpConnection): void;
      removeAllContainers(): void;
      removeBattery(arg0: zombie.characters.IsoGameCharacter): zombie.inventory.types.DrainableComboItem;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removeLightBulb(arg0: zombie.characters.IsoGameCharacter): zombie.inventory.InventoryItem;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reset(): void;
      reuseGridSquare(): void;
      save(arg0: java.nio.ByteBuffer): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      setActive(arg0: boolean): boolean;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setBlink(arg0: boolean): void;
      setBulbItemRaw(arg0: string): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setCustomSettingsToItem(arg0: zombie.inventory.InventoryItem): void;
      setDamage(arg0: number): void;
      setDefaultCondition(arg0: number): void;
      setDelta(arg0: number): void;
      setDir(arg0: zombie.iso.IsoDirections): void;
      setHasBatteryRaw(arg0: boolean): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setKeyId(arg0: number): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setMovedThumpable(arg0: boolean): void;
      setName(arg0: string): void;
      setNoPicking(arg0: boolean): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPipedFuelAmount(arg0: number): void;
      setPower(arg0: number): void;
      setPrimaryB(arg0: number): void;
      setPrimaryG(arg0: number): void;
      setPrimaryR(arg0: number): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setSpecialTooltip(arg0: boolean): void;
      setSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTaintedWater(arg0: boolean): void;
      setTargetAlpha(arg0: number): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUseBattery(arg0: boolean): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setWaterAmount(arg0: number): void;
      softReset(): void;
      switchLight(arg0: boolean): void;
      syncCustomizedSettings(arg0: zombie.core.raknet.UdpConnection): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection, arg3: java.nio.ByteBuffer): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      toString(): string;
      toggle(): boolean;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitModData(): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      unsetOutlineHighlight(): void;
      update(): void;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    // zombie.iso.objects.IsoMannequin extends zombie.iso.IsoObject
    export class IsoMannequin {
      private constructor();
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      static LowLightingQualityHack: boolean;
      static readonly MAX_WALL_SPLATS: number;
      NoPicking: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OutlineOnMouseover: boolean;
      bAlphaForced: boolean;
      bNeverDoneAlpha: boolean;
      static bmod: number;
      container?: zombie.inventory.ItemContainer;
      dir?: zombie.iso.IsoDirections;
      doNotSync: boolean;
      emitter?: zombie.audio.BaseSoundEmitter;
      static gmod: number;
      highlightFlags: number;
      keyId: number;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      name?: string;
      offsetX: number;
      offsetY: number;
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      partialThumpDmg: number;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      sheetRope: boolean;
      sheetRopeHealth: number;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      square?: zombie.iso.IsoGridSquare;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      tintb: number;
      tintg: number;
      tintr: number;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
  
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number): void;
      DirtySlice(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasTooltip(): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      addToWorld(): void;
      canAddSheetRope(): boolean;
      checkClothing(arg0: zombie.inventory.InventoryItem): void;
      checkHaveElectricity(): void;
      cleanWallBlood(): void;
      clearAttachedAnimSprite(): void;
      countAddSheetRope(): number;
      createContainersFromSpriteProperties(): void;
      customHashCode(): number;
      debugPrintout(): void;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      doFindExternalWaterSource(): void;
      equals(arg0: any): boolean;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      getAlpha(arg0: number): number;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getCell(): zombie.iso.IsoCell;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getClass(): java.lang.Class<any>;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getCustomSettingsFromItem(arg0: zombie.inventory.InventoryItem): void;
      getDamage(): number;
      getDir(): zombie.iso.IsoDirections;
      getDirectionFromItem(arg0: zombie.inventory.types.Moveable, arg1: number): zombie.iso.IsoDirections;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getHumanVisual(): zombie.core.skinnedmodel.visual.HumanVisual;
      getIsSurfaceNormalOffset(): boolean;
      getItemContainer(): zombie.inventory.ItemContainer;
      getItemVisuals(arg0: zombie.core.skinnedmodel.visual.ItemVisuals): void;
      getKeyId(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getMovingObjectIndex(): number;
      getName(): string;
      getNew(): zombie.iso.IsoObject;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffsetX(): number;
      getOffsetY(): number;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPipedFuelAmount(): number;
      getPose(): string;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getScriptName(): string;
      getSpecialObjectIndex(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSquare(): zombie.iso.IsoGridSquare;
      getStaticMovingObjectIndex(): number;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTargetAlpha(arg0: number): number;
      getTextureName(): string;
      getThumpCondition(): number;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTile(): string;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUsesExternalWaterSource(): boolean;
      getVariables(arg0: java.util.Map<string, string>): void;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWorldObjectIndex(): number;
      getX(): number;
      getY(): number;
      getZ(): number;
      hasExternalWaterSource(): boolean;
      hasModData(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isBlink(): boolean;
      isCharacter(): boolean;
      isDestroyed(): boolean;
      isExistInTheWorld(): boolean;
      isFemale(): boolean;
      isFloor(): boolean;
      isHighlighted(): boolean;
      isHoppable(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isMannequinSprite(arg0: zombie.iso.sprite.IsoSprite): boolean;
      isMaskClicked(arg0: number, arg1: number, arg2: boolean): boolean;
      isMovedThumpable(): boolean;
      isNoPicking(): boolean;
      isNorthHoppable(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isSkeleton(): boolean;
      isSpriteInvisible(): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isZombie(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      removeAllContainers(): void;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderMoveableItem(arg0: zombie.inventory.types.Moveable, arg1: number, arg2: number, arg3: number, arg4: zombie.iso.IsoDirections): void;
      renderMoveableObject(arg0: zombie.iso.objects.IsoMannequin, arg1: number, arg2: number, arg3: number, arg4: zombie.iso.IsoDirections): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reset(): void;
      reuseGridSquare(): void;
      rotate(arg0: zombie.iso.IsoDirections): void;
      save(arg0: java.nio.ByteBuffer): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setBlink(arg0: boolean): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setCustomSettingsToItem(arg0: zombie.inventory.InventoryItem): void;
      setDamage(arg0: number): void;
      setDefaultCondition(arg0: number): void;
      setDir(arg0: zombie.iso.IsoDirections): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setKeyId(arg0: number): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setMovedThumpable(arg0: boolean): void;
      setName(arg0: string): void;
      setNoPicking(arg0: boolean): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPipedFuelAmount(arg0: number): void;
      setRenderDirection(arg0: zombie.iso.IsoDirections): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setSpecialTooltip(arg0: boolean): void;
      setSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTaintedWater(arg0: boolean): void;
      setTargetAlpha(arg0: number): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setWaterAmount(arg0: number): void;
      softReset(): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection, arg3: java.nio.ByteBuffer): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      toString(): string;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitModData(): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      unsetOutlineHighlight(): void;
      update(): void;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      wearItem(arg0: zombie.inventory.InventoryItem, arg1: zombie.characters.IsoGameCharacter): void;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    // zombie.iso.objects.IsoMannequin$MannequinZone extends zombie.iso.IsoMetaGrid$Zone
    export class IsoMannequin$MannequinZone {
      private constructor();
      bFemale: number;
      dir?: zombie.iso.IsoDirections;
      geometryType?: zombie.iso.IsoMetaGrid$ZoneGeometryType;
      h: number;
      haveConstruction: boolean;
      hourLastSeen: number;
      id?: number;
      isPreferredZoneForSquare: boolean;
      lastActionTimestamp: number;
      name?: string;
      pickedRZStory?: zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase;
      pickedXForZoneStory: number;
      pickedYForZoneStory: number;
      readonly points?: gnu.trove.list.array.TIntArrayList;
      polylineOutlinePoints?: number[];
      polylineWidth: number;
      pose?: string;
      skin?: string;
      spawnSpecialZombies?: boolean;
      readonly spawnedZombies?: java.util.HashMap<string, number>;
      triangles?: number[];
      type?: string;
      w: number;
      x: number;
      y: number;
      z: number;
      zombiesTypeToSpawn?: string;
  
      Dispose(): void;
      addSquare(arg0: zombie.iso.IsoGridSquare): void;
      contains(arg0: number, arg1: number, arg2: number): boolean;
      difference(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: java.util.ArrayList<zombie.iso.IsoMetaGrid$Zone>): boolean;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getClippedSegmentOfPolyline(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number[]): number;
      getHeight(): number;
      getHoursSinceLastSeen(): number;
      getLastActionTimestamp(): number;
      getName(): string;
      getOriginalName(): string;
      getPolygonTriangles(): number[];
      getPolylineLength(): number;
      getPolylineOutlineTriangles(): number[];
      getRandomSquareInZone(): zombie.iso.IsoGridSquare;
      getRandomUnseenSquareInZone(): zombie.iso.IsoGridSquare;
      getSquares(): java.util.ArrayList<zombie.iso.IsoGridSquare>;
      getType(): string;
      getWidth(): number;
      getX(): number;
      getY(): number;
      getZombieDensity(): number;
      hashCode(): number;
      haveCons(): boolean;
      intersects(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): boolean;
      isPoint(): boolean;
      isPolygon(): boolean;
      isPolyline(): boolean;
      isRectangle(): boolean;
      notify(): void;
      notifyAll(): void;
      removeSquare(arg0: zombie.iso.IsoGridSquare): void;
      sendToServer(): void;
      setH(arg0: number): void;
      setHaveConstruction(arg0: boolean): void;
      setHourSeenToCurrent(): void;
      setLastActionTimestamp(arg0: number): void;
      setName(arg0: string): void;
      setOriginalName(arg0: string): void;
      setPickedXForZoneStory(arg0: number): void;
      setPickedYForZoneStory(arg0: number): void;
      setType(arg0: string): void;
      setW(arg0: number): void;
      setX(arg0: number): void;
      setY(arg0: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.objects.IsoMolotovCocktail extends zombie.iso.IsoPhysicsObject
    export class IsoMolotovCocktail {
      private constructor();
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      static LowLightingQualityHack: boolean;
      static readonly MAX_WALL_SPLATS: number;
      static readonly MAX_ZOMBIES_EATING: number;
      NoPicking: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OutlineOnMouseover: boolean;
      bAlphaForced: boolean;
      bNeverDoneAlpha: boolean;
      readonly bOutline?: boolean[];
      static bmod: number;
      container?: zombie.inventory.ItemContainer;
      def?: zombie.iso.sprite.IsoSpriteInstance;
      dir?: zombie.iso.IsoDirections;
      doNotSync: boolean;
      emitter?: zombie.audio.BaseSoundEmitter;
      static gmod: number;
      highlightFlags: number;
      keyId: number;
      last?: zombie.iso.IsoGridSquare;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      lx: number;
      ly: number;
      lz: number;
      name?: string;
      noDamage: boolean;
      nx: number;
      ny: number;
      offsetX: number;
      offsetY: number;
      readonly outlineColor?: zombie.core.textures.ColorInfo[];
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      partialThumpDmg: number;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      sheetRope: boolean;
      sheetRopeHealth: number;
      speedMod: number;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      square?: zombie.iso.IsoGridSquare;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      terminalVelocity: number;
      tintb: number;
      tintg: number;
      tintr: number;
      static treeSoundMgr?: zombie.iso.IsoMovingObject$TreeSoundManager;
      velX: number;
      velY: number;
      velZ: number;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
      x: number;
      y: number;
      z: number;
  
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number): void;
      Despawn(): void;
      DirtySlice(): void;
      DistTo(arg0: number, arg1: number): number;
      DistToProper(arg0: zombie.iso.IsoObject): number;
      DistToSquared(arg0: zombie.iso.IsoMovingObject): number;
      DoCollideNorS(): void;
      DoCollideWorE(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasTooltip(): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      Move(arg0: zombie.iso.Vector2): void;
      MoveUnmodded(arg0: zombie.iso.Vector2): void;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      addToWorld(): void;
      canAddSheetRope(): boolean;
      canHaveMultipleHits(): number;
      checkHaveElectricity(): void;
      cleanWallBlood(): void;
      clearAttachedAnimSprite(): void;
      collideCharacter(): void;
      collideGround(): void;
      collideWall(): void;
      collideWith(arg0: zombie.iso.IsoObject): void;
      compareToY(arg0: zombie.iso.IsoMovingObject): number;
      countAddSheetRope(): number;
      createContainersFromSpriteProperties(): void;
      customHashCode(): number;
      debugPrintout(): void;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      distToNearestCamCharacter(): number;
      doFindExternalWaterSource(): void;
      doStairs(): void;
      ensureOnTile(): void;
      equals(arg0: any): boolean;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      getAlpha(arg0: number): number;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getBuilding(): zombie.iso.areas.IsoBuilding;
      getBumpedType(arg0: zombie.characters.IsoGameCharacter): string;
      getCell(): zombie.iso.IsoCell;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getClass(): java.lang.Class<any>;
      getCollideType(): string;
      getCollidedObject(): zombie.iso.IsoObject;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getCurrentBuilding(): zombie.iso.areas.IsoBuilding;
      getCurrentSquare(): zombie.iso.IsoGridSquare;
      getCurrentZone(): zombie.iso.IsoMetaGrid$Zone;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getDamage(): number;
      getDir(): zombie.iso.IsoDirections;
      getDistanceSq(arg0: zombie.iso.IsoMovingObject): number;
      getEatingZombies(): java.util.ArrayList<zombie.characters.IsoZombie>;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getFeelerTile(arg0: number): zombie.iso.IsoGridSquare;
      getFeelersize(): number;
      getFuturWalkedSquare(): zombie.iso.IsoGridSquare;
      getGlobalMovementMod(): number;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getHitDir(): zombie.iso.Vector2;
      getHitForce(): number;
      getHitFromAngle(): number;
      getID(): number;
      getIDCount(): number;
      getImpulsex(): number;
      getImpulsey(): number;
      getIsSurfaceNormalOffset(): boolean;
      getItemContainer(): zombie.inventory.ItemContainer;
      getKeyId(): number;
      getLastCollideTime(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getLastSquare(): zombie.iso.IsoGridSquare;
      getLastTargettedBy(): zombie.characters.IsoZombie;
      getLimpulsex(): number;
      getLimpulsey(): number;
      getLx(): number;
      getLy(): number;
      getLz(): number;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getMasterRegion(): zombie.iso.areas.isoregion.regions.IWorldRegion;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getMovementLastFrame(): zombie.iso.Vector2;
      getMovingObjectIndex(): number;
      getName(): string;
      getNew(): zombie.iso.IsoObject;
      getNoDamage(): boolean;
      getNx(): number;
      getNy(): number;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffsetX(): number;
      getOffsetY(): number;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPathFindIndex(): number;
      getPipedFuelAmount(): number;
      getPosition(arg0: zombie.iso.Vector3): zombie.iso.Vector3;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getScreenX(): number;
      getScreenY(): number;
      getScriptModule(): string;
      getScriptName(): string;
      getScriptnx(): number;
      getScriptny(): number;
      getSpecialObjectIndex(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSquare(): zombie.iso.IsoGridSquare;
      getStateEventDelayTimer(): number;
      getStaticMovingObjectIndex(): number;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTargetAlpha(arg0: number): number;
      getTextureName(): string;
      getThumpCondition(): number;
      getThumpTarget(): zombie.iso.objects.interfaces.Thumpable;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTile(): string;
      getTimeSinceZombieAttack(): number;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUsesExternalWaterSource(): boolean;
      getVectorFromDirection(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWeight(): number;
      getWidth(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWorldObjectIndex(): number;
      getX(): number;
      getY(): number;
      getZ(): number;
      hasExternalWaterSource(): boolean;
      hasModData(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isBlink(): boolean;
      isCharacter(): boolean;
      isCloseKilled(): boolean;
      isCollidable(): boolean;
      isCollided(): boolean;
      isCollidedE(): boolean;
      isCollidedN(): boolean;
      isCollidedS(): boolean;
      isCollidedThisFrame(): boolean;
      isCollidedW(): boolean;
      isCollidedWithDoor(): boolean;
      isCollidedWithVehicle(): boolean;
      isDestroyed(): boolean;
      isEatingOther(arg0: zombie.iso.IsoMovingObject): boolean;
      isExistInTheWorld(): boolean;
      isFirstUpdate(): boolean;
      isFloor(): boolean;
      isHighlighted(): boolean;
      isHoppable(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isMaskClicked(arg0: number, arg1: number, arg2: boolean): boolean;
      isMovedThumpable(): boolean;
      isNoPicking(): boolean;
      isNorthHoppable(): boolean;
      isOnFloor(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isPushableForSeparate(): boolean;
      isPushedByForSeparate(arg0: zombie.iso.IsoMovingObject): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isShootable(): boolean;
      isSolid(): boolean;
      isSolidForSeparate(): boolean;
      isSpriteInvisible(): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isZombie(): boolean;
      isZombiesDontAttack(): boolean;
      isbAltCollide(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      postupdate(): void;
      preupdate(): void;
      removeAllContainers(): void;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reset(): void;
      reuseGridSquare(): void;
      save(arg0: java.nio.ByteBuffer): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      separate(): void;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setBlink(arg0: boolean): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setCloseKilled(arg0: boolean): void;
      setCollidable(arg0: boolean): void;
      setCollideType(arg0: string): void;
      setCollidedE(arg0: boolean): void;
      setCollidedN(arg0: boolean): void;
      setCollidedObject(arg0: zombie.iso.IsoObject): void;
      setCollidedS(arg0: boolean): void;
      setCollidedThisFrame(arg0: boolean): void;
      setCollidedW(arg0: boolean): void;
      setCollidedWithDoor(arg0: boolean): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCurrent(arg0: zombie.iso.IsoGridSquare): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setDamage(arg0: number): void;
      setDefaultCondition(arg0: number): void;
      setDestroyed(arg0: boolean): void;
      setDir(arg0: zombie.iso.IsoDirections): void;
      setEatingZombies(arg0: java.util.ArrayList<zombie.characters.IsoZombie>): void;
      setFeelersize(arg0: number): void;
      setFirstUpdate(arg0: boolean): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setHitDir(arg0: zombie.iso.Vector2): void;
      setHitForce(arg0: number): void;
      setHitFromAngle(arg0: number): void;
      setID(arg0: number): void;
      setIDCount(arg0: number): void;
      setImpulsex(arg0: number): void;
      setImpulsey(arg0: number): void;
      setKeyId(arg0: number): void;
      setLast(arg0: zombie.iso.IsoGridSquare): void;
      setLastCollideTime(arg0: number): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setLastTargettedBy(arg0: zombie.characters.IsoZombie): void;
      setLimpulsex(arg0: number): void;
      setLimpulsey(arg0: number): void;
      setLx(arg0: number): void;
      setLy(arg0: number): void;
      setLz(arg0: number): void;
      setMovedThumpable(arg0: boolean): void;
      setMovementLastFrame(arg0: zombie.iso.Vector2): void;
      setMovingSquareNow(): void;
      setName(arg0: string): void;
      setNoDamage(arg0: boolean): void;
      setNoPicking(arg0: boolean): void;
      setNx(arg0: number): void;
      setNy(arg0: number): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOnFloor(arg0: boolean): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPathFindIndex(arg0: number): void;
      setPipedFuelAmount(arg0: number): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setScriptModule(arg0: string): void;
      setScriptnx(arg0: number): void;
      setScriptny(arg0: number): void;
      setShootable(arg0: boolean): void;
      setSolid(arg0: boolean): void;
      setSpecialTooltip(arg0: boolean): void;
      setSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setStateEventDelayTimer(arg0: number): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTaintedWater(arg0: boolean): void;
      setTargetAlpha(arg0: number): void;
      setThumpTarget(arg0: zombie.iso.objects.interfaces.Thumpable): void;
      setTimeSinceZombieAttack(arg0: number): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setWaterAmount(arg0: number): void;
      setWeight(arg0: number): void;
      setWidth(arg0: number): void;
      setX(arg0: number): void;
      setY(arg0: number): void;
      setZ(arg0: number): void;
      setZombiesDontAttack(arg0: boolean): void;
      setbAltCollide(arg0: boolean): void;
      softReset(): void;
      spotted(arg0: zombie.iso.IsoMovingObject, arg1: boolean): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection, arg3: java.nio.ByteBuffer): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      toString(): string;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitModData(): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      unsetOutlineHighlight(): void;
      update(): void;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    // zombie.iso.objects.IsoRadio extends zombie.iso.objects.IsoWaveSignal
    export class IsoRadio {
      private constructor();
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      static LowLightingQualityHack: boolean;
      static readonly MAX_WALL_SPLATS: number;
      NoPicking: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OutlineOnMouseover: boolean;
      bAlphaForced: boolean;
      bNeverDoneAlpha: boolean;
      static bmod: number;
      container?: zombie.inventory.ItemContainer;
      dir?: zombie.iso.IsoDirections;
      doNotSync: boolean;
      emitter?: zombie.audio.BaseSoundEmitter;
      static gmod: number;
      highlightFlags: number;
      keyId: number;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      name?: string;
      offsetX: number;
      offsetY: number;
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      partialThumpDmg: number;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      sheetRope: boolean;
      sheetRopeHealth: number;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      square?: zombie.iso.IsoGridSquare;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      tintb: number;
      tintg: number;
      tintr: number;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
  
      AddDeviceText(arg0: zombie.characters.IsoPlayer, arg1: string, arg2: number, arg3: number, arg4: number, arg5: string, arg6: number): void;
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number): void;
      DirtySlice(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasPlayerInRange(): boolean;
      HasTooltip(): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      IsSpeaking(): boolean;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      Say(arg0: string): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      addToWorld(): void;
      canAddSheetRope(): boolean;
      checkHaveElectricity(): void;
      cleanWallBlood(): void;
      clearAttachedAnimSprite(): void;
      cloneDeviceDataFromItem(arg0: string): zombie.radio.devices.DeviceData;
      countAddSheetRope(): number;
      createContainersFromSpriteProperties(): void;
      customHashCode(): number;
      debugPrintout(): void;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      doFindExternalWaterSource(): void;
      equals(arg0: any): boolean;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      getAlpha(arg0: number): number;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getCell(): zombie.iso.IsoCell;
      getChatElement(): zombie.chat.ChatElement;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getClass(): java.lang.Class<any>;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getDamage(): number;
      getDelta(): number;
      getDeviceData(): zombie.radio.devices.DeviceData;
      getDir(): zombie.iso.IsoDirections;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getIsSurfaceNormalOffset(): boolean;
      getItemContainer(): zombie.inventory.ItemContainer;
      getKeyId(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getMovingObjectIndex(): number;
      getName(): string;
      getNew(): zombie.iso.IsoObject;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffsetX(): number;
      getOffsetY(): number;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPipedFuelAmount(): number;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getSayLine(): string;
      getScriptName(): string;
      getSpecialObjectIndex(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSquare(): zombie.iso.IsoGridSquare;
      getStaticMovingObjectIndex(): number;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTalkerType(): string;
      getTargetAlpha(arg0: number): number;
      getTextureName(): string;
      getThumpCondition(): number;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTile(): string;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUsesExternalWaterSource(): boolean;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWorldObjectIndex(): number;
      getX(): number;
      getY(): number;
      getZ(): number;
      hasChatToDisplay(): boolean;
      hasExternalWaterSource(): boolean;
      hasModData(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isBlink(): boolean;
      isCharacter(): boolean;
      isDestroyed(): boolean;
      isExistInTheWorld(): boolean;
      isFloor(): boolean;
      isHighlighted(): boolean;
      isHoppable(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isMaskClicked(arg0: number, arg1: number, arg2: boolean): boolean;
      isMovedThumpable(): boolean;
      isNoPicking(): boolean;
      isNorthHoppable(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isSpriteInvisible(): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isZombie(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      removeAllContainers(): void;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      renderlastold2(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reset(): void;
      reuseGridSquare(): void;
      save(arg0: java.nio.ByteBuffer): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setBlink(arg0: boolean): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setDamage(arg0: number): void;
      setDefaultCondition(arg0: number): void;
      setDelta(arg0: number): void;
      setDeviceData(arg0: zombie.radio.devices.DeviceData): void;
      setDir(arg0: zombie.iso.IsoDirections): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setKeyId(arg0: number): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setMovedThumpable(arg0: boolean): void;
      setName(arg0: string): void;
      setNoPicking(arg0: boolean): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPipedFuelAmount(arg0: number): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setSpecialTooltip(arg0: boolean): void;
      setSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTaintedWater(arg0: boolean): void;
      setTalkerType(arg0: string): void;
      setTargetAlpha(arg0: number): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setWaterAmount(arg0: number): void;
      softReset(): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection, arg3: java.nio.ByteBuffer): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      toString(): string;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitModData(): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      unsetOutlineHighlight(): void;
      update(): void;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    // zombie.iso.objects.IsoRainSplash extends zombie.iso.IsoObject
    export class IsoRainSplash {
      private constructor();
      Age: number;
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      static LowLightingQualityHack: boolean;
      static readonly MAX_WALL_SPLATS: number;
      NoPicking: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OutlineOnMouseover: boolean;
      bAlphaForced: boolean;
      bNeverDoneAlpha: boolean;
      static bmod: number;
      container?: zombie.inventory.ItemContainer;
      dir?: zombie.iso.IsoDirections;
      doNotSync: boolean;
      emitter?: zombie.audio.BaseSoundEmitter;
      static gmod: number;
      highlightFlags: number;
      keyId: number;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      name?: string;
      offsetX: number;
      offsetY: number;
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      partialThumpDmg: number;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      sheetRope: boolean;
      sheetRopeHealth: number;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      square?: zombie.iso.IsoGridSquare;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      tintb: number;
      tintg: number;
      tintr: number;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
  
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      ChangeTintMod(arg0: zombie.core.textures.ColorInfo): void;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number): void;
      DirtySlice(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasTooltip(): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      addToWorld(): void;
      canAddSheetRope(): boolean;
      checkHaveElectricity(): void;
      cleanWallBlood(): void;
      clearAttachedAnimSprite(): void;
      countAddSheetRope(): number;
      createContainersFromSpriteProperties(): void;
      customHashCode(): number;
      debugPrintout(): void;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      doFindExternalWaterSource(): void;
      equals(arg0: any): boolean;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      getAlpha(arg0: number): number;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getCell(): zombie.iso.IsoCell;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getClass(): java.lang.Class<any>;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getDamage(): number;
      getDir(): zombie.iso.IsoDirections;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getIsSurfaceNormalOffset(): boolean;
      getItemContainer(): zombie.inventory.ItemContainer;
      getKeyId(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getMovingObjectIndex(): number;
      getName(): string;
      getNew(): zombie.iso.IsoObject;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffsetX(): number;
      getOffsetY(): number;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPipedFuelAmount(): number;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getScriptName(): string;
      getSpecialObjectIndex(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSquare(): zombie.iso.IsoGridSquare;
      getStaticMovingObjectIndex(): number;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTargetAlpha(arg0: number): number;
      getTextureName(): string;
      getThumpCondition(): number;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTile(): string;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUsesExternalWaterSource(): boolean;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWorldObjectIndex(): number;
      getX(): number;
      getY(): number;
      getZ(): number;
      hasExternalWaterSource(): boolean;
      hasModData(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isBlink(): boolean;
      isCharacter(): boolean;
      isDestroyed(): boolean;
      isExistInTheWorld(): boolean;
      isFloor(): boolean;
      isHighlighted(): boolean;
      isHoppable(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isMaskClicked(arg0: number, arg1: number, arg2: boolean): boolean;
      isMovedThumpable(): boolean;
      isNoPicking(): boolean;
      isNorthHoppable(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isSpriteInvisible(): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isZombie(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      removeAllContainers(): void;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reset(): void;
      reuseGridSquare(): void;
      save(arg0: java.nio.ByteBuffer, arg1: boolean): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setBlink(arg0: boolean): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setDamage(arg0: number): void;
      setDefaultCondition(arg0: number): void;
      setDir(arg0: zombie.iso.IsoDirections): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setKeyId(arg0: number): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setMovedThumpable(arg0: boolean): void;
      setName(arg0: string): void;
      setNoPicking(arg0: boolean): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPipedFuelAmount(arg0: number): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setSpecialTooltip(arg0: boolean): void;
      setSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTaintedWater(arg0: boolean): void;
      setTargetAlpha(arg0: number): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setWaterAmount(arg0: number): void;
      softReset(): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection, arg3: java.nio.ByteBuffer): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      toString(): string;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitModData(): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      unsetOutlineHighlight(): void;
      update(): void;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    // zombie.iso.objects.IsoRaindrop extends zombie.iso.IsoObject
    export class IsoRaindrop {
      private constructor();
      AnimSpriteIndex: number;
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      GravMod: number;
      Life: number;
      static LowLightingQualityHack: boolean;
      static readonly MAX_WALL_SPLATS: number;
      NoPicking: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OffsetY: number;
      OutlineOnMouseover: boolean;
      SplashY: number;
      Vel_Y: number;
      bAlphaForced: boolean;
      bNeverDoneAlpha: boolean;
      static bmod: number;
      container?: zombie.inventory.ItemContainer;
      dir?: zombie.iso.IsoDirections;
      doNotSync: boolean;
      emitter?: zombie.audio.BaseSoundEmitter;
      static gmod: number;
      highlightFlags: number;
      keyId: number;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      name?: string;
      offsetX: number;
      offsetY: number;
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      partialThumpDmg: number;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      sheetRope: boolean;
      sheetRopeHealth: number;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      square?: zombie.iso.IsoGridSquare;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      tintb: number;
      tintg: number;
      tintr: number;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
  
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      ChangeTintMod(arg0: zombie.core.textures.ColorInfo): void;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number): void;
      DirtySlice(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasTooltip(): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      addToWorld(): void;
      canAddSheetRope(): boolean;
      checkHaveElectricity(): void;
      cleanWallBlood(): void;
      clearAttachedAnimSprite(): void;
      countAddSheetRope(): number;
      createContainersFromSpriteProperties(): void;
      customHashCode(): number;
      debugPrintout(): void;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      doFindExternalWaterSource(): void;
      equals(arg0: any): boolean;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      getAlpha(arg0: number): number;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getCell(): zombie.iso.IsoCell;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getClass(): java.lang.Class<any>;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getDamage(): number;
      getDir(): zombie.iso.IsoDirections;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getIsSurfaceNormalOffset(): boolean;
      getItemContainer(): zombie.inventory.ItemContainer;
      getKeyId(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getMovingObjectIndex(): number;
      getName(): string;
      getNew(): zombie.iso.IsoObject;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffsetX(): number;
      getOffsetY(): number;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPipedFuelAmount(): number;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getScriptName(): string;
      getSpecialObjectIndex(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSquare(): zombie.iso.IsoGridSquare;
      getStaticMovingObjectIndex(): number;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTargetAlpha(arg0: number): number;
      getTextureName(): string;
      getThumpCondition(): number;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTile(): string;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUsesExternalWaterSource(): boolean;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWorldObjectIndex(): number;
      getX(): number;
      getY(): number;
      getZ(): number;
      hasExternalWaterSource(): boolean;
      hasModData(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isBlink(): boolean;
      isCharacter(): boolean;
      isDestroyed(): boolean;
      isExistInTheWorld(): boolean;
      isFloor(): boolean;
      isHighlighted(): boolean;
      isHoppable(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isMaskClicked(arg0: number, arg1: number, arg2: boolean): boolean;
      isMovedThumpable(): boolean;
      isNoPicking(): boolean;
      isNorthHoppable(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isSpriteInvisible(): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isZombie(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      removeAllContainers(): void;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reset(): void;
      reuseGridSquare(): void;
      save(arg0: java.nio.ByteBuffer, arg1: boolean): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setBlink(arg0: boolean): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setDamage(arg0: number): void;
      setDefaultCondition(arg0: number): void;
      setDir(arg0: zombie.iso.IsoDirections): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setKeyId(arg0: number): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setMovedThumpable(arg0: boolean): void;
      setName(arg0: string): void;
      setNoPicking(arg0: boolean): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPipedFuelAmount(arg0: number): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setSpecialTooltip(arg0: boolean): void;
      setSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTaintedWater(arg0: boolean): void;
      setTargetAlpha(arg0: number): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setWaterAmount(arg0: number): void;
      softReset(): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection, arg3: java.nio.ByteBuffer): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      toString(): string;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitModData(): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      unsetOutlineHighlight(): void;
      update(): void;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    // zombie.iso.objects.IsoStackedWasherDryer extends zombie.iso.IsoObject
    export class IsoStackedWasherDryer {
      private constructor();
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      static LowLightingQualityHack: boolean;
      static readonly MAX_WALL_SPLATS: number;
      NoPicking: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OutlineOnMouseover: boolean;
      bAlphaForced: boolean;
      bNeverDoneAlpha: boolean;
      static bmod: number;
      container?: zombie.inventory.ItemContainer;
      dir?: zombie.iso.IsoDirections;
      doNotSync: boolean;
      emitter?: zombie.audio.BaseSoundEmitter;
      static gmod: number;
      highlightFlags: number;
      keyId: number;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      name?: string;
      offsetX: number;
      offsetY: number;
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      partialThumpDmg: number;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      sheetRope: boolean;
      sheetRopeHealth: number;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      square?: zombie.iso.IsoGridSquare;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      tintb: number;
      tintg: number;
      tintr: number;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
  
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number): void;
      DirtySlice(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasTooltip(): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      addToWorld(): void;
      canAddSheetRope(): boolean;
      checkHaveElectricity(): void;
      cleanWallBlood(): void;
      clearAttachedAnimSprite(): void;
      countAddSheetRope(): number;
      createContainersFromSpriteProperties(): void;
      customHashCode(): number;
      debugPrintout(): void;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      doFindExternalWaterSource(): void;
      equals(arg0: any): boolean;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      getAlpha(arg0: number): number;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getCell(): zombie.iso.IsoCell;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getClass(): java.lang.Class<any>;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getDamage(): number;
      getDir(): zombie.iso.IsoDirections;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getIsSurfaceNormalOffset(): boolean;
      getItemContainer(): zombie.inventory.ItemContainer;
      getKeyId(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getMovingObjectIndex(): number;
      getName(): string;
      getNew(): zombie.iso.IsoObject;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffsetX(): number;
      getOffsetY(): number;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPipedFuelAmount(): number;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getScriptName(): string;
      getSpecialObjectIndex(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSquare(): zombie.iso.IsoGridSquare;
      getStaticMovingObjectIndex(): number;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTargetAlpha(arg0: number): number;
      getTextureName(): string;
      getThumpCondition(): number;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTile(): string;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUsesExternalWaterSource(): boolean;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWorldObjectIndex(): number;
      getX(): number;
      getY(): number;
      getZ(): number;
      hasExternalWaterSource(): boolean;
      hasModData(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isBlink(): boolean;
      isCharacter(): boolean;
      isDestroyed(): boolean;
      isDryerActivated(): boolean;
      isExistInTheWorld(): boolean;
      isFloor(): boolean;
      isHighlighted(): boolean;
      isHoppable(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isMaskClicked(arg0: number, arg1: number, arg2: boolean): boolean;
      isMovedThumpable(): boolean;
      isNoPicking(): boolean;
      isNorthHoppable(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isSpriteInvisible(): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isWasherActivated(): boolean;
      isZombie(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      removeAllContainers(): void;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reset(): void;
      reuseGridSquare(): void;
      save(arg0: java.nio.ByteBuffer): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setBlink(arg0: boolean): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setDamage(arg0: number): void;
      setDefaultCondition(arg0: number): void;
      setDir(arg0: zombie.iso.IsoDirections): void;
      setDryerActivated(arg0: boolean): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setKeyId(arg0: number): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setMovedThumpable(arg0: boolean): void;
      setName(arg0: string): void;
      setNoPicking(arg0: boolean): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPipedFuelAmount(arg0: number): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setSpecialTooltip(arg0: boolean): void;
      setSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTaintedWater(arg0: boolean): void;
      setTargetAlpha(arg0: number): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setWasherActivated(arg0: boolean): void;
      setWaterAmount(arg0: number): void;
      softReset(): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection, arg3: java.nio.ByteBuffer): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      toString(): string;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitModData(): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      unsetOutlineHighlight(): void;
      update(): void;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    // zombie.iso.objects.IsoStove extends zombie.iso.IsoObject
    export class IsoStove {
      private constructor();
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      static LowLightingQualityHack: boolean;
      static readonly MAX_WALL_SPLATS: number;
      NoPicking: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OutlineOnMouseover: boolean;
      bAlphaForced: boolean;
      bNeverDoneAlpha: boolean;
      static bmod: number;
      container?: zombie.inventory.ItemContainer;
      dir?: zombie.iso.IsoDirections;
      doNotSync: boolean;
      emitter?: zombie.audio.BaseSoundEmitter;
      static gmod: number;
      highlightFlags: number;
      keyId: number;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      name?: string;
      offsetX: number;
      offsetY: number;
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      partialThumpDmg: number;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      sheetRope: boolean;
      sheetRopeHealth: number;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      square?: zombie.iso.IsoGridSquare;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      tintb: number;
      tintg: number;
      tintr: number;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
  
      Activated(): boolean;
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number): void;
      DirtySlice(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasTooltip(): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      Toggle(): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      addToWorld(): void;
      canAddSheetRope(): boolean;
      checkHaveElectricity(): void;
      cleanWallBlood(): void;
      clearAttachedAnimSprite(): void;
      countAddSheetRope(): number;
      createContainersFromSpriteProperties(): void;
      customHashCode(): number;
      debugPrintout(): void;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      doFindExternalWaterSource(): void;
      equals(arg0: any): boolean;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      getActivatableType(): string;
      getAlpha(arg0: number): number;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getCell(): zombie.iso.IsoCell;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getClass(): java.lang.Class<any>;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getCurrentTemperature(): number;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getDamage(): number;
      getDir(): zombie.iso.IsoDirections;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getIsSurfaceNormalOffset(): boolean;
      getItemContainer(): zombie.inventory.ItemContainer;
      getKeyId(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getMaxTemperature(): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getMovingObjectIndex(): number;
      getName(): string;
      getNew(): zombie.iso.IsoObject;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffsetX(): number;
      getOffsetY(): number;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPipedFuelAmount(): number;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getScriptName(): string;
      getSpecialObjectIndex(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSquare(): zombie.iso.IsoGridSquare;
      getStaticMovingObjectIndex(): number;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTargetAlpha(arg0: number): number;
      getTextureName(): string;
      getThumpCondition(): number;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTile(): string;
      getTimer(): number;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUsesExternalWaterSource(): boolean;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWorldObjectIndex(): number;
      getX(): number;
      getY(): number;
      getZ(): number;
      hasExternalWaterSource(): boolean;
      hasModData(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isBlink(): boolean;
      isBroken(): boolean;
      isCharacter(): boolean;
      isDestroyed(): boolean;
      isExistInTheWorld(): boolean;
      isFloor(): boolean;
      isHighlighted(): boolean;
      isHoppable(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isMaskClicked(arg0: number, arg1: number, arg2: boolean): boolean;
      isMicrowave(): boolean;
      isMovedThumpable(): boolean;
      isNoPicking(): boolean;
      isNorthHoppable(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isRunningFor(): number;
      isSpriteInvisible(): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isTemperatureChanging(): boolean;
      isZombie(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      removeAllContainers(): void;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reset(): void;
      reuseGridSquare(): void;
      save(arg0: java.nio.ByteBuffer): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      setActivated(arg0: boolean): void;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setBlink(arg0: boolean): void;
      setBroken(arg0: boolean): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setDamage(arg0: number): void;
      setDefaultCondition(arg0: number): void;
      setDir(arg0: zombie.iso.IsoDirections): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setKeyId(arg0: number): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setMaxTemperature(arg0: number): void;
      setMovedThumpable(arg0: boolean): void;
      setName(arg0: string): void;
      setNoPicking(arg0: boolean): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPipedFuelAmount(arg0: number): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setSpecialTooltip(arg0: boolean): void;
      setSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTaintedWater(arg0: boolean): void;
      setTargetAlpha(arg0: number): void;
      setTimer(arg0: number): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setWaterAmount(arg0: number): void;
      softReset(): void;
      sync(): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection, arg3: java.nio.ByteBuffer): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      syncSpriteGridObjects(arg0: boolean, arg1: boolean): void;
      toString(): string;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitModData(): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      unsetOutlineHighlight(): void;
      update(): void;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    // zombie.iso.objects.IsoTelevision extends zombie.iso.objects.IsoWaveSignal
    export class IsoTelevision {
      private constructor();
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      static LowLightingQualityHack: boolean;
      static readonly MAX_WALL_SPLATS: number;
      NoPicking: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OutlineOnMouseover: boolean;
      bAlphaForced: boolean;
      bNeverDoneAlpha: boolean;
      static bmod: number;
      container?: zombie.inventory.ItemContainer;
      dir?: zombie.iso.IsoDirections;
      doNotSync: boolean;
      emitter?: zombie.audio.BaseSoundEmitter;
      static gmod: number;
      highlightFlags: number;
      keyId: number;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      name?: string;
      offsetX: number;
      offsetY: number;
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      partialThumpDmg: number;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      sheetRope: boolean;
      sheetRopeHealth: number;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      square?: zombie.iso.IsoGridSquare;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      tintb: number;
      tintg: number;
      tintr: number;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
  
      AddDeviceText(arg0: zombie.characters.IsoPlayer, arg1: string, arg2: number, arg3: number, arg4: number, arg5: string, arg6: number): void;
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number): void;
      DirtySlice(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasPlayerInRange(): boolean;
      HasTooltip(): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      IsSpeaking(): boolean;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      Say(arg0: string): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      addToWorld(): void;
      addTvScreenSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      canAddSheetRope(): boolean;
      checkHaveElectricity(): void;
      cleanWallBlood(): void;
      clearAttachedAnimSprite(): void;
      clearTvScreenSprites(): void;
      cloneDeviceDataFromItem(arg0: string): zombie.radio.devices.DeviceData;
      countAddSheetRope(): number;
      createContainersFromSpriteProperties(): void;
      customHashCode(): number;
      debugPrintout(): void;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      doFindExternalWaterSource(): void;
      equals(arg0: any): boolean;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      getAlpha(arg0: number): number;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getCell(): zombie.iso.IsoCell;
      getChatElement(): zombie.chat.ChatElement;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getClass(): java.lang.Class<any>;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getDamage(): number;
      getDelta(): number;
      getDeviceData(): zombie.radio.devices.DeviceData;
      getDir(): zombie.iso.IsoDirections;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getIsSurfaceNormalOffset(): boolean;
      getItemContainer(): zombie.inventory.ItemContainer;
      getKeyId(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getMovingObjectIndex(): number;
      getName(): string;
      getNew(): zombie.iso.IsoObject;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffsetX(): number;
      getOffsetY(): number;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPipedFuelAmount(): number;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getSayLine(): string;
      getScriptName(): string;
      getSpecialObjectIndex(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSquare(): zombie.iso.IsoGridSquare;
      getStaticMovingObjectIndex(): number;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTalkerType(): string;
      getTargetAlpha(arg0: number): number;
      getTextureName(): string;
      getThumpCondition(): number;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTile(): string;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUsesExternalWaterSource(): boolean;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWorldObjectIndex(): number;
      getX(): number;
      getY(): number;
      getZ(): number;
      hasChatToDisplay(): boolean;
      hasExternalWaterSource(): boolean;
      hasModData(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isBlink(): boolean;
      isCharacter(): boolean;
      isDestroyed(): boolean;
      isExistInTheWorld(): boolean;
      isFacing(arg0: zombie.characters.IsoPlayer): boolean;
      isFloor(): boolean;
      isHighlighted(): boolean;
      isHoppable(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isMaskClicked(arg0: number, arg1: number, arg2: boolean): boolean;
      isMovedThumpable(): boolean;
      isNoPicking(): boolean;
      isNorthHoppable(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isSpriteInvisible(): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isZombie(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      removeAllContainers(): void;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      removeTvScreenSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      renderlastold2(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reset(): void;
      reuseGridSquare(): void;
      save(arg0: java.nio.ByteBuffer): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setBlink(arg0: boolean): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setDamage(arg0: number): void;
      setDefaultCondition(arg0: number): void;
      setDelta(arg0: number): void;
      setDeviceData(arg0: zombie.radio.devices.DeviceData): void;
      setDir(arg0: zombie.iso.IsoDirections): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setKeyId(arg0: number): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setMovedThumpable(arg0: boolean): void;
      setName(arg0: string): void;
      setNoPicking(arg0: boolean): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPipedFuelAmount(arg0: number): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setSpecialTooltip(arg0: boolean): void;
      setSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTaintedWater(arg0: boolean): void;
      setTalkerType(arg0: string): void;
      setTargetAlpha(arg0: number): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setWaterAmount(arg0: number): void;
      softReset(): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection, arg3: java.nio.ByteBuffer): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      toString(): string;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitModData(): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      unsetOutlineHighlight(): void;
      update(): void;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    // zombie.iso.objects.IsoThumpable extends zombie.iso.IsoObject
    export class IsoThumpable {
      private constructor();
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      Health: number;
      Locked: boolean;
      static LowLightingQualityHack: boolean;
      static readonly MAX_WALL_SPLATS: number;
      MaxHealth: number;
      NoPicking: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OldNumPlanks: number;
      OutlineOnMouseover: boolean;
      PushedMaxStrength: number;
      PushedStrength: number;
      bAlphaForced: boolean;
      bNeverDoneAlpha: boolean;
      static bmod: number;
      breakSound?: string;
      canPassThrough: boolean;
      container?: zombie.inventory.ItemContainer;
      dir?: zombie.iso.IsoDirections;
      doNotSync: boolean;
      emitter?: zombie.audio.BaseSoundEmitter;
      static gmod: number;
      highlightFlags: number;
      keyId: number;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      lockedByCode: number;
      lockedByPadlock: boolean;
      name?: string;
      north: boolean;
      offsetX: number;
      offsetY: number;
      open: boolean;
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      partialThumpDmg: number;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      sheetRope: boolean;
      sheetRopeHealth: number;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      square?: zombie.iso.IsoGridSquare;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      static readonly tempo?: zombie.iso.Vector2;
      thumpSound?: string;
      tintb: number;
      tintg: number;
      tintr: number;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
  
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number): void;
      DirtySlice(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasCurtains(): zombie.iso.objects.IsoCurtain;
      HasTooltip(): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      IsOpen(): boolean;
      IsStrengthenedByPushedItems(): boolean;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      ToggleDoor(arg0: zombie.characters.IsoGameCharacter): void;
      ToggleDoorActual(arg0: zombie.characters.IsoGameCharacter): void;
      ToggleDoorSilent(): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheet(arg0: zombie.characters.IsoGameCharacter): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      addToWorld(): void;
      canAddSheetRope(): boolean;
      canBeLockByPadlock(): boolean;
      canBePlastered(): boolean;
      canClimbOver(arg0: zombie.characters.IsoGameCharacter): boolean;
      canClimbThrough(arg0: zombie.characters.IsoGameCharacter): boolean;
      checkHaveElectricity(): void;
      cleanWallBlood(): void;
      clearAttachedAnimSprite(): void;
      countAddSheetRope(): number;
      createContainersFromSpriteProperties(): void;
      createLightSource(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: zombie.inventory.InventoryItem, arg7: zombie.characters.IsoGameCharacter): void;
      customHashCode(): number;
      debugPrintout(): void;
      destroy(): void;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      doFindExternalWaterSource(): void;
      equals(arg0: any): boolean;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      getAddSheetSquare(arg0: zombie.characters.IsoGameCharacter): zombie.iso.IsoGridSquare;
      getAlpha(arg0: number): number;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getBarricadeForCharacter(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoBarricade;
      getBarricadeOnOppositeSquare(): zombie.iso.objects.IsoBarricade;
      getBarricadeOnSameSquare(): zombie.iso.objects.IsoBarricade;
      getBarricadeOppositeCharacter(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoBarricade;
      getBreakSound(): string;
      getCanBarricade(): boolean;
      getCell(): zombie.iso.IsoCell;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getClass(): java.lang.Class<any>;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getCrossSpeed(): number;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getDamage(): number;
      getDir(): zombie.iso.IsoDirections;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getHealth(): number;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getIndoorSquare(): zombie.iso.IsoGridSquare;
      getInsideSquare(): zombie.iso.IsoGridSquare;
      getIsSurfaceNormalOffset(): boolean;
      getItemContainer(): zombie.inventory.ItemContainer;
      getKeyId(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getLifeDelta(): number;
      getLifeLeft(): number;
      getLightSource(): zombie.iso.IsoLightSource;
      getLightSourceFuel(): string;
      getLightSourceLife(): number;
      getLightSourceRadius(): number;
      getLightSourceXOffset(): number;
      getLightSourceYOffset(): number;
      getLockedByCode(): number;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getMaxHealth(): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getMovingObjectIndex(): number;
      getName(): string;
      getNew(): zombie.iso.IsoObject;
      getNorth(): boolean;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffsetX(): number;
      getOffsetY(): number;
      getOpenSprite(): zombie.iso.sprite.IsoSprite;
      getOppositeSquare(): zombie.iso.IsoGridSquare;
      getOtherSideOfDoor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.IsoGridSquare;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPipedFuelAmount(): number;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getScriptName(): string;
      getSpecialObjectIndex(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteEdge(arg0: boolean): zombie.iso.IsoDirections;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSquare(): zombie.iso.IsoGridSquare;
      getStaticMovingObjectIndex(): number;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTargetAlpha(arg0: number): number;
      getTextureName(): string;
      getThumpCondition(): number;
      getThumpDmg(): number;
      getThumpSound(): string;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTile(): string;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUsesExternalWaterSource(): boolean;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWorldObjectIndex(): number;
      getX(): number;
      getY(): number;
      getZ(): number;
      hasExternalWaterSource(): boolean;
      hasModData(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveFuel(): boolean;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      insertNewFuel(arg0: zombie.inventory.InventoryItem, arg1: zombie.characters.IsoGameCharacter): zombie.inventory.InventoryItem;
      isAdjacentToSquare(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isBarricadeAllowed(): boolean;
      isBarricaded(): boolean;
      isBlink(): boolean;
      isBlockAllTheSquare(): boolean;
      isCanPassThrough(): boolean;
      isCharacter(): boolean;
      isCorner(): boolean;
      isDestroyed(): boolean;
      isDismantable(): boolean;
      isDoor(): boolean;
      isDoorFrame(): boolean;
      isExistInTheWorld(): boolean;
      isFloor(): boolean;
      isHighlighted(): boolean;
      isHoppable(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isLightSourceOn(): boolean;
      isLocked(): boolean;
      isLockedByKey(): boolean;
      isLockedByPadlock(): boolean;
      isLockedToCharacter(arg0: zombie.characters.IsoGameCharacter): boolean;
      isMaskClicked(arg0: number, arg1: number, arg2: boolean): boolean;
      isMovedThumpable(): boolean;
      isNoPicking(): boolean;
      isNorthHoppable(): boolean;
      isObstructed(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isPaintable(): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isSpriteInvisible(): boolean;
      isStairs(): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isThumpable(): boolean;
      isWindow(): boolean;
      isZombie(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      removeAllContainers(): void;
      removeCurrentFuel(arg0: zombie.characters.IsoGameCharacter): zombie.inventory.InventoryItem;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reset(): void;
      reuseGridSquare(): void;
      save(arg0: java.nio.ByteBuffer): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setBlink(arg0: boolean): void;
      setBlockAllTheSquare(arg0: boolean): void;
      setBreakSound(arg0: string): void;
      setCanBarricade(arg0: boolean): void;
      setCanBeLockByPadlock(arg0: boolean): void;
      setCanBePlastered(arg0: boolean): void;
      setCanPassThrough(arg0: boolean): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setClosedSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCorner(arg0: boolean): void;
      setCrossSpeed(arg0: number): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setDamage(arg0: number): void;
      setDefaultCondition(arg0: number): void;
      setDir(arg0: zombie.iso.IsoDirections): void;
      setHaveFuel(arg0: boolean): void;
      setHealth(arg0: number): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setHoppable(arg0: boolean): void;
      setIsContainer(arg0: boolean): void;
      setIsDismantable(arg0: boolean): void;
      setIsDoor(arg0: boolean): void;
      setIsDoorFrame(arg0: boolean): void;
      setIsFloor(arg0: boolean): void;
      setIsHoppable(arg0: boolean): void;
      setIsLocked(arg0: boolean): void;
      setIsStairs(arg0: boolean): void;
      setIsThumpable(arg0: boolean): void;
      setKeyId(arg0: number, arg1: boolean): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setLifeDelta(arg0: number): void;
      setLifeLeft(arg0: number): void;
      setLightSource(arg0: zombie.iso.IsoLightSource): void;
      setLightSourceFuel(arg0: string): void;
      setLightSourceLife(arg0: number): void;
      setLightSourceOn(arg0: boolean): void;
      setLightSourceRadius(arg0: number): void;
      setLightSourceXOffset(arg0: number): void;
      setLightSourceYOffset(arg0: number): void;
      setLockedByCode(arg0: number): void;
      setLockedByKey(arg0: boolean): void;
      setLockedByPadlock(arg0: boolean): void;
      setMaxHealth(arg0: number): void;
      setModData(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setMovedThumpable(arg0: boolean): void;
      setName(arg0: string): void;
      setNoPicking(arg0: boolean): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOpenSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPaintable(arg0: boolean): void;
      setPipedFuelAmount(arg0: number): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setSpecialTooltip(arg0: boolean): void;
      setSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTaintedWater(arg0: boolean): void;
      setTargetAlpha(arg0: number): void;
      setThumpDmg(arg0: number): void;
      setThumpSound(arg0: string): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setWaterAmount(arg0: number): void;
      softReset(): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection, arg3: java.nio.ByteBuffer): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      syncIsoThumpable(): void;
      toString(): string;
      toggleLightSource(arg0: boolean): void;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitModData(): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      unsetOutlineHighlight(): void;
      update(): void;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    // zombie.iso.objects.IsoTrap extends zombie.iso.IsoObject
    export class IsoTrap {
      private constructor();
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      static LowLightingQualityHack: boolean;
      static readonly MAX_WALL_SPLATS: number;
      NoPicking: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OutlineOnMouseover: boolean;
      bAlphaForced: boolean;
      bNeverDoneAlpha: boolean;
      static bmod: number;
      container?: zombie.inventory.ItemContainer;
      dir?: zombie.iso.IsoDirections;
      doNotSync: boolean;
      emitter?: zombie.audio.BaseSoundEmitter;
      static gmod: number;
      highlightFlags: number;
      keyId: number;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      name?: string;
      offsetX: number;
      offsetY: number;
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      partialThumpDmg: number;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      sheetRope: boolean;
      sheetRopeHealth: number;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      square?: zombie.iso.IsoGridSquare;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      tintb: number;
      tintg: number;
      tintr: number;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
  
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number): void;
      DirtySlice(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasTooltip(): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      addToWorld(): void;
      canAddSheetRope(): boolean;
      checkHaveElectricity(): void;
      cleanWallBlood(): void;
      clearAttachedAnimSprite(): void;
      countAddSheetRope(): number;
      createContainersFromSpriteProperties(): void;
      customHashCode(): number;
      debugPrintout(): void;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      doFindExternalWaterSource(): void;
      equals(arg0: any): boolean;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      getAlpha(arg0: number): number;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getCell(): zombie.iso.IsoCell;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getClass(): java.lang.Class<any>;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getCountDownSound(): string;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getDamage(): number;
      getDir(): zombie.iso.IsoDirections;
      getExplosionPower(): number;
      getExplosionRange(): number;
      getExplosionSound(): string;
      getExtraDamage(): number;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getFirePower(): number;
      getFireRange(): number;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getIsSurfaceNormalOffset(): boolean;
      getItem(): zombie.inventory.InventoryItem;
      getItemContainer(): zombie.inventory.ItemContainer;
      getKeyId(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getMovingObjectIndex(): number;
      getName(): string;
      getNew(): zombie.iso.IsoObject;
      getNoiseDuration(): number;
      getNoiseRange(): number;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffsetX(): number;
      getOffsetY(): number;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPipedFuelAmount(): number;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRemoteControlID(): number;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getScriptName(): string;
      getSensorRange(): number;
      getSmokeRange(): number;
      getSpecialObjectIndex(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSquare(): zombie.iso.IsoGridSquare;
      getStaticMovingObjectIndex(): number;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTargetAlpha(arg0: number): number;
      getTextureName(): string;
      getThumpCondition(): number;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTile(): string;
      getTimerBeforeExplosion(): number;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUsesExternalWaterSource(): boolean;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWorldObjectIndex(): number;
      getX(): number;
      getY(): number;
      getZ(): number;
      hasExternalWaterSource(): boolean;
      hasModData(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isBlink(): boolean;
      isCharacter(): boolean;
      isDestroyed(): boolean;
      isExistInTheWorld(): boolean;
      isFloor(): boolean;
      isHighlighted(): boolean;
      isHoppable(): boolean;
      isInstantExplosion(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isMaskClicked(arg0: number, arg1: number, arg2: boolean): boolean;
      isMovedThumpable(): boolean;
      isNoPicking(): boolean;
      isNorthHoppable(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isSpriteInvisible(): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isZombie(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      playExplosionSound(): void;
      removeAllContainers(): void;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reset(): void;
      reuseGridSquare(): void;
      save(arg0: java.nio.ByteBuffer): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setBlink(arg0: boolean): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCountDownSound(arg0: string): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setDamage(arg0: number): void;
      setDefaultCondition(arg0: number): void;
      setDir(arg0: zombie.iso.IsoDirections): void;
      setExplosionPower(arg0: number): void;
      setExplosionRange(arg0: number): void;
      setExplosionSound(arg0: string): void;
      setExtraDamage(arg0: number): void;
      setFirePower(arg0: number): void;
      setFireRange(arg0: number): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setKeyId(arg0: number): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setMovedThumpable(arg0: boolean): void;
      setName(arg0: string): void;
      setNoPicking(arg0: boolean): void;
      setNoiseDuration(arg0: number): void;
      setNoiseRange(arg0: number): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPipedFuelAmount(arg0: number): void;
      setRemoteControlID(arg0: number): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setSensorRange(arg0: number): void;
      setSmokeRange(arg0: number): void;
      setSpecialTooltip(arg0: boolean): void;
      setSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTaintedWater(arg0: boolean): void;
      setTargetAlpha(arg0: number): void;
      setTimerBeforeExplosion(arg0: number): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setWaterAmount(arg0: number): void;
      softReset(): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection, arg3: java.nio.ByteBuffer): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      toString(): string;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitModData(): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      triggerExplosion(arg0: boolean): void;
      triggerRemote(arg0: zombie.characters.IsoPlayer, arg1: number, arg2: number): void;
      unsetOutlineHighlight(): void;
      update(): void;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    /** [ENUM] zombie.iso.objects.IsoTrap$ExplosionMode */
    export class IsoTrap$ExplosionMode {
      /* ENUM VALUES */
      static readonly Explosion: IsoTrap$ExplosionMode; 
      static readonly Fire: IsoTrap$ExplosionMode; 
      static readonly Sensor: IsoTrap$ExplosionMode; 
      static readonly Smoke: IsoTrap$ExplosionMode; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.iso.objects.IsoTrap$ExplosionMode[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): IsoTrap$ExplosionMode;
      valueOf(arg0: string): zombie.iso.objects.IsoTrap$ExplosionMode;
      values(): zombie.iso.objects.IsoTrap$ExplosionMode[];
    }
    // zombie.iso.objects.IsoTree extends zombie.iso.IsoObject
    export class IsoTree {
      private constructor();
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      LogYield: number;
      static LowLightingQualityHack: boolean;
      static readonly MAX_SIZE: number;
      static readonly MAX_WALL_SPLATS: number;
      NoPicking: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OutlineOnMouseover: boolean;
      bAlphaForced: boolean;
      bNeverDoneAlpha: boolean;
      bRenderFlag: boolean;
      static bmod: number;
      container?: zombie.inventory.ItemContainer;
      damage: number;
      dir?: zombie.iso.IsoDirections;
      doNotSync: boolean;
      emitter?: zombie.audio.BaseSoundEmitter;
      fadeAlpha: number;
      static gmod: number;
      highlightFlags: number;
      keyId: number;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      name?: string;
      offsetX: number;
      offsetY: number;
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      partialThumpDmg: number;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      sheetRope: boolean;
      sheetRopeHealth: number;
      size: number;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      square?: zombie.iso.IsoGridSquare;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      tintb: number;
      tintg: number;
      tintr: number;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
  
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number): void;
      DirtySlice(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasTooltip(): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      addToWorld(): void;
      canAddSheetRope(): boolean;
      checkHaveElectricity(): void;
      cleanWallBlood(): void;
      clearAttachedAnimSprite(): void;
      countAddSheetRope(): number;
      createContainersFromSpriteProperties(): void;
      customHashCode(): number;
      debugPrintout(): void;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      doFindExternalWaterSource(): void;
      equals(arg0: any): boolean;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      getAlpha(arg0: number): number;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getCell(): zombie.iso.IsoCell;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getClass(): java.lang.Class<any>;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getDamage(): number;
      getDir(): zombie.iso.IsoDirections;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getHealth(): number;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getIsSurfaceNormalOffset(): boolean;
      getItemContainer(): zombie.inventory.ItemContainer;
      getKeyId(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getMaxHealth(): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getMovingObjectIndex(): number;
      getName(): string;
      getNew(arg0: zombie.iso.IsoGridSquare, arg1: string, arg2: string, arg3: boolean): zombie.iso.IsoObject;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffsetX(): number;
      getOffsetY(): number;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPipedFuelAmount(): number;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getScriptName(): string;
      getSize(): number;
      getSlowFactor(arg0: zombie.iso.IsoMovingObject): number;
      getSpecialObjectIndex(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSquare(): zombie.iso.IsoGridSquare;
      getStaticMovingObjectIndex(): number;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTargetAlpha(arg0: number): number;
      getTextureName(): string;
      getThumpCondition(): number;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTile(): string;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUsesExternalWaterSource(): boolean;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWorldObjectIndex(): number;
      getX(): number;
      getY(): number;
      getZ(): number;
      hasExternalWaterSource(): boolean;
      hasModData(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      initTree(): void;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isBlink(): boolean;
      isCharacter(): boolean;
      isDestroyed(): boolean;
      isExistInTheWorld(): boolean;
      isFloor(): boolean;
      isHighlighted(): boolean;
      isHoppable(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isMaskClicked(arg0: number, arg1: number): boolean;
      isMovedThumpable(): boolean;
      isNoPicking(): boolean;
      isNorthHoppable(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isSpriteInvisible(): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isZombie(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      removeAllContainers(): void;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderChopTreeIndicators(): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reset(): void;
      reuseGridSquare(): void;
      save(arg0: java.nio.ByteBuffer): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setBlink(arg0: boolean): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setChopTreeCursorLocation(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setDamage(arg0: number): void;
      setDefaultCondition(arg0: number): void;
      setDir(arg0: zombie.iso.IsoDirections): void;
      setHealth(arg0: number): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setKeyId(arg0: number): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setMovedThumpable(arg0: boolean): void;
      setName(arg0: string): void;
      setNoPicking(arg0: boolean): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPipedFuelAmount(arg0: number): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setSpecialTooltip(arg0: boolean): void;
      setSprite(arg0: string): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTaintedWater(arg0: boolean): void;
      setTargetAlpha(arg0: number): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setWaterAmount(arg0: number): void;
      softReset(): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection, arg3: java.nio.ByteBuffer): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      toString(): string;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitModData(): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      unsetOutlineHighlight(): void;
      update(): void;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    // zombie.iso.objects.IsoTree$TreeShader extends java.lang.Object
    export class IsoTree$TreeShader {
      private constructor();
      static readonly instance?: zombie.iso.objects.IsoTree$TreeShader;
  
      StartShader(): boolean;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      initShader(): void;
      notify(): void;
      notifyAll(): void;
      setOutlineColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setStepSize(arg0: number, arg1: number, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.objects.IsoWaveSignal extends zombie.iso.IsoObject
    export class IsoWaveSignal {
      private constructor();
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      static LowLightingQualityHack: boolean;
      static readonly MAX_WALL_SPLATS: number;
      NoPicking: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OutlineOnMouseover: boolean;
      bAlphaForced: boolean;
      bNeverDoneAlpha: boolean;
      static bmod: number;
      container?: zombie.inventory.ItemContainer;
      dir?: zombie.iso.IsoDirections;
      doNotSync: boolean;
      emitter?: zombie.audio.BaseSoundEmitter;
      static gmod: number;
      highlightFlags: number;
      keyId: number;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      name?: string;
      offsetX: number;
      offsetY: number;
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      partialThumpDmg: number;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      sheetRope: boolean;
      sheetRopeHealth: number;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      square?: zombie.iso.IsoGridSquare;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      tintb: number;
      tintg: number;
      tintr: number;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
  
      AddDeviceText(arg0: zombie.characters.IsoPlayer, arg1: string, arg2: number, arg3: number, arg4: number, arg5: string, arg6: number): void;
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number): void;
      DirtySlice(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasPlayerInRange(): boolean;
      HasTooltip(): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      IsSpeaking(): boolean;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      Say(arg0: string): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      addToWorld(): void;
      canAddSheetRope(): boolean;
      checkHaveElectricity(): void;
      cleanWallBlood(): void;
      clearAttachedAnimSprite(): void;
      cloneDeviceDataFromItem(arg0: string): zombie.radio.devices.DeviceData;
      countAddSheetRope(): number;
      createContainersFromSpriteProperties(): void;
      customHashCode(): number;
      debugPrintout(): void;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      doFindExternalWaterSource(): void;
      equals(arg0: any): boolean;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      getAlpha(arg0: number): number;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getCell(): zombie.iso.IsoCell;
      getChatElement(): zombie.chat.ChatElement;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getClass(): java.lang.Class<any>;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getDamage(): number;
      getDelta(): number;
      getDeviceData(): zombie.radio.devices.DeviceData;
      getDir(): zombie.iso.IsoDirections;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getIsSurfaceNormalOffset(): boolean;
      getItemContainer(): zombie.inventory.ItemContainer;
      getKeyId(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getMovingObjectIndex(): number;
      getName(): string;
      getNew(): zombie.iso.IsoObject;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffsetX(): number;
      getOffsetY(): number;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPipedFuelAmount(): number;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getSayLine(): string;
      getScriptName(): string;
      getSpecialObjectIndex(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSquare(): zombie.iso.IsoGridSquare;
      getStaticMovingObjectIndex(): number;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTalkerType(): string;
      getTargetAlpha(arg0: number): number;
      getTextureName(): string;
      getThumpCondition(): number;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTile(): string;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUsesExternalWaterSource(): boolean;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWorldObjectIndex(): number;
      getX(): number;
      getY(): number;
      getZ(): number;
      hasChatToDisplay(): boolean;
      hasExternalWaterSource(): boolean;
      hasModData(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isBlink(): boolean;
      isCharacter(): boolean;
      isDestroyed(): boolean;
      isExistInTheWorld(): boolean;
      isFloor(): boolean;
      isHighlighted(): boolean;
      isHoppable(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isMaskClicked(arg0: number, arg1: number, arg2: boolean): boolean;
      isMovedThumpable(): boolean;
      isNoPicking(): boolean;
      isNorthHoppable(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isSpriteInvisible(): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isZombie(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      removeAllContainers(): void;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      renderlastold2(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reset(): void;
      reuseGridSquare(): void;
      save(arg0: java.nio.ByteBuffer): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setBlink(arg0: boolean): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setDamage(arg0: number): void;
      setDefaultCondition(arg0: number): void;
      setDelta(arg0: number): void;
      setDeviceData(arg0: zombie.radio.devices.DeviceData): void;
      setDir(arg0: zombie.iso.IsoDirections): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setKeyId(arg0: number): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setMovedThumpable(arg0: boolean): void;
      setName(arg0: string): void;
      setNoPicking(arg0: boolean): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPipedFuelAmount(arg0: number): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setSpecialTooltip(arg0: boolean): void;
      setSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTaintedWater(arg0: boolean): void;
      setTalkerType(arg0: string): void;
      setTargetAlpha(arg0: number): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setWaterAmount(arg0: number): void;
      softReset(): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection, arg3: java.nio.ByteBuffer): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      toString(): string;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitModData(): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      unsetOutlineHighlight(): void;
      update(): void;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    // zombie.iso.objects.IsoWheelieBin extends zombie.iso.IsoPushableObject
    export class IsoWheelieBin {
      private constructor();
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      static LowLightingQualityHack: boolean;
      static readonly MAX_WALL_SPLATS: number;
      static readonly MAX_ZOMBIES_EATING: number;
      NoPicking: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OutlineOnMouseover: boolean;
      bAlphaForced: boolean;
      bNeverDoneAlpha: boolean;
      readonly bOutline?: boolean[];
      static bmod: number;
      carryCapacity: number;
      connectList?: java.util.ArrayList<zombie.iso.IsoPushableObject>;
      container?: zombie.inventory.ItemContainer;
      def?: zombie.iso.sprite.IsoSpriteInstance;
      dir?: zombie.iso.IsoDirections;
      doNotSync: boolean;
      emitter?: zombie.audio.BaseSoundEmitter;
      emptyWeight: number;
      static gmod: number;
      highlightFlags: number;
      keyId: number;
      last?: zombie.iso.IsoGridSquare;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      lx: number;
      ly: number;
      lz: number;
      name?: string;
      noDamage: boolean;
      nx: number;
      ny: number;
      offsetX: number;
      offsetY: number;
      readonly outlineColor?: zombie.core.textures.ColorInfo[];
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      ox: number;
      oy: number;
      partialThumpDmg: number;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      sheetRope: boolean;
      sheetRopeHealth: number;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      square?: zombie.iso.IsoGridSquare;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      tintb: number;
      tintg: number;
      tintr: number;
      static treeSoundMgr?: zombie.iso.IsoMovingObject$TreeSoundManager;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
      x: number;
      y: number;
      z: number;
  
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number): void;
      Despawn(): void;
      DirtySlice(): void;
      DistTo(arg0: number, arg1: number): number;
      DistToProper(arg0: zombie.iso.IsoObject): number;
      DistToSquared(arg0: zombie.iso.IsoMovingObject): number;
      DoCollideNorS(): void;
      DoCollideWorE(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasTooltip(): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      Move(arg0: zombie.iso.Vector2): void;
      MoveUnmodded(arg0: zombie.iso.Vector2): void;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      addToWorld(): void;
      canAddSheetRope(): boolean;
      canHaveMultipleHits(): number;
      checkHaveElectricity(): void;
      cleanWallBlood(): void;
      clearAttachedAnimSprite(): void;
      collideWith(arg0: zombie.iso.IsoObject): void;
      compareToY(arg0: zombie.iso.IsoMovingObject): number;
      countAddSheetRope(): number;
      createContainersFromSpriteProperties(): void;
      customHashCode(): number;
      debugPrintout(): void;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      distToNearestCamCharacter(): number;
      doFindExternalWaterSource(): void;
      doStairs(): void;
      ensureOnTile(): void;
      equals(arg0: any): boolean;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      getAlpha(arg0: number): number;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getBuilding(): zombie.iso.areas.IsoBuilding;
      getBumpedType(arg0: zombie.characters.IsoGameCharacter): string;
      getCell(): zombie.iso.IsoCell;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getClass(): java.lang.Class<any>;
      getCollideType(): string;
      getCollidedObject(): zombie.iso.IsoObject;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getCurrentBuilding(): zombie.iso.areas.IsoBuilding;
      getCurrentSquare(): zombie.iso.IsoGridSquare;
      getCurrentZone(): zombie.iso.IsoMetaGrid$Zone;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getDamage(): number;
      getDir(): zombie.iso.IsoDirections;
      getDistanceSq(arg0: zombie.iso.IsoMovingObject): number;
      getEatingZombies(): java.util.ArrayList<zombie.characters.IsoZombie>;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getFeelerTile(arg0: number): zombie.iso.IsoGridSquare;
      getFeelersize(): number;
      getFuturWalkedSquare(): zombie.iso.IsoGridSquare;
      getGlobalMovementMod(arg0: boolean): number;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getHitDir(): zombie.iso.Vector2;
      getHitForce(): number;
      getHitFromAngle(): number;
      getID(): number;
      getIDCount(): number;
      getImpulsex(): number;
      getImpulsey(): number;
      getIsSurfaceNormalOffset(): boolean;
      getItemContainer(): zombie.inventory.ItemContainer;
      getKeyId(): number;
      getLastCollideTime(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getLastSquare(): zombie.iso.IsoGridSquare;
      getLastTargettedBy(): zombie.characters.IsoZombie;
      getLimpulsex(): number;
      getLimpulsey(): number;
      getLx(): number;
      getLy(): number;
      getLz(): number;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getMasterRegion(): zombie.iso.areas.isoregion.regions.IWorldRegion;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getMovementLastFrame(): zombie.iso.Vector2;
      getMovingObjectIndex(): number;
      getName(): string;
      getNew(): zombie.iso.IsoObject;
      getNoDamage(): boolean;
      getNx(): number;
      getNy(): number;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffsetX(): number;
      getOffsetY(): number;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPathFindIndex(): number;
      getPipedFuelAmount(): number;
      getPosition(arg0: zombie.iso.Vector3): zombie.iso.Vector3;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getScreenX(): number;
      getScreenY(): number;
      getScriptModule(): string;
      getScriptName(): string;
      getScriptnx(): number;
      getScriptny(): number;
      getSpecialObjectIndex(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSquare(): zombie.iso.IsoGridSquare;
      getStateEventDelayTimer(): number;
      getStaticMovingObjectIndex(): number;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTargetAlpha(arg0: number): number;
      getTextureName(): string;
      getThumpCondition(): number;
      getThumpTarget(): zombie.iso.objects.interfaces.Thumpable;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTile(): string;
      getTimeSinceZombieAttack(): number;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUsesExternalWaterSource(): boolean;
      getVectorFromDirection(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWeight(): number;
      getWidth(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWorldObjectIndex(): number;
      getX(): number;
      getY(): number;
      getZ(): number;
      hasExternalWaterSource(): boolean;
      hasModData(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isBlink(): boolean;
      isCharacter(): boolean;
      isCloseKilled(): boolean;
      isCollidable(): boolean;
      isCollided(): boolean;
      isCollidedE(): boolean;
      isCollidedN(): boolean;
      isCollidedS(): boolean;
      isCollidedThisFrame(): boolean;
      isCollidedW(): boolean;
      isCollidedWithDoor(): boolean;
      isCollidedWithVehicle(): boolean;
      isDestroyed(): boolean;
      isEatingOther(arg0: zombie.iso.IsoMovingObject): boolean;
      isExistInTheWorld(): boolean;
      isFirstUpdate(): boolean;
      isFloor(): boolean;
      isHighlighted(): boolean;
      isHoppable(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isMaskClicked(arg0: number, arg1: number, arg2: boolean): boolean;
      isMovedThumpable(): boolean;
      isNoPicking(): boolean;
      isNorthHoppable(): boolean;
      isOnFloor(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isPushableForSeparate(): boolean;
      isPushedByForSeparate(arg0: zombie.iso.IsoMovingObject): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isShootable(): boolean;
      isSolid(): boolean;
      isSolidForSeparate(): boolean;
      isSpriteInvisible(): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isZombie(): boolean;
      isZombiesDontAttack(): boolean;
      isbAltCollide(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      postupdate(): void;
      preupdate(): void;
      removeAllContainers(): void;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reset(): void;
      reuseGridSquare(): void;
      save(arg0: java.nio.ByteBuffer): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      separate(): void;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setBlink(arg0: boolean): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setCloseKilled(arg0: boolean): void;
      setCollidable(arg0: boolean): void;
      setCollideType(arg0: string): void;
      setCollidedE(arg0: boolean): void;
      setCollidedN(arg0: boolean): void;
      setCollidedObject(arg0: zombie.iso.IsoObject): void;
      setCollidedS(arg0: boolean): void;
      setCollidedThisFrame(arg0: boolean): void;
      setCollidedW(arg0: boolean): void;
      setCollidedWithDoor(arg0: boolean): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCurrent(arg0: zombie.iso.IsoGridSquare): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setDamage(arg0: number): void;
      setDefaultCondition(arg0: number): void;
      setDestroyed(arg0: boolean): void;
      setDir(arg0: zombie.iso.IsoDirections): void;
      setEatingZombies(arg0: java.util.ArrayList<zombie.characters.IsoZombie>): void;
      setFeelersize(arg0: number): void;
      setFirstUpdate(arg0: boolean): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setHitDir(arg0: zombie.iso.Vector2): void;
      setHitForce(arg0: number): void;
      setHitFromAngle(arg0: number): void;
      setID(arg0: number): void;
      setIDCount(arg0: number): void;
      setImpulsex(arg0: number): void;
      setImpulsey(arg0: number): void;
      setKeyId(arg0: number): void;
      setLast(arg0: zombie.iso.IsoGridSquare): void;
      setLastCollideTime(arg0: number): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setLastTargettedBy(arg0: zombie.characters.IsoZombie): void;
      setLimpulsex(arg0: number): void;
      setLimpulsey(arg0: number): void;
      setLx(arg0: number): void;
      setLy(arg0: number): void;
      setLz(arg0: number): void;
      setMovedThumpable(arg0: boolean): void;
      setMovementLastFrame(arg0: zombie.iso.Vector2): void;
      setMovingSquareNow(): void;
      setName(arg0: string): void;
      setNoDamage(arg0: boolean): void;
      setNoPicking(arg0: boolean): void;
      setNx(arg0: number): void;
      setNy(arg0: number): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOnFloor(arg0: boolean): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPathFindIndex(arg0: number): void;
      setPipedFuelAmount(arg0: number): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setScriptModule(arg0: string): void;
      setScriptnx(arg0: number): void;
      setScriptny(arg0: number): void;
      setShootable(arg0: boolean): void;
      setSolid(arg0: boolean): void;
      setSpecialTooltip(arg0: boolean): void;
      setSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setStateEventDelayTimer(arg0: number): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTaintedWater(arg0: boolean): void;
      setTargetAlpha(arg0: number): void;
      setThumpTarget(arg0: zombie.iso.objects.interfaces.Thumpable): void;
      setTimeSinceZombieAttack(arg0: number): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setWaterAmount(arg0: number): void;
      setWeight(arg0: number): void;
      setWidth(arg0: number): void;
      setX(arg0: number): void;
      setY(arg0: number): void;
      setZ(arg0: number): void;
      setZombiesDontAttack(arg0: boolean): void;
      setbAltCollide(arg0: boolean): void;
      softReset(): void;
      spotted(arg0: zombie.iso.IsoMovingObject, arg1: boolean): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection, arg3: java.nio.ByteBuffer): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      toString(): string;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitModData(): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      unsetOutlineHighlight(): void;
      update(): void;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    // zombie.iso.objects.IsoWindow extends zombie.iso.IsoObject
    export class IsoWindow {
      private constructor();
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      Health: number;
      Locked: boolean;
      static LowLightingQualityHack: boolean;
      static readonly MAX_WALL_SPLATS: number;
      MaxHealth: number;
      NoPicking: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OldNumPlanks: number;
      OutlineOnMouseover: boolean;
      PermaLocked: boolean;
      bAlphaForced: boolean;
      bNeverDoneAlpha: boolean;
      static bmod: number;
      container?: zombie.inventory.ItemContainer;
      dir?: zombie.iso.IsoDirections;
      doNotSync: boolean;
      emitter?: zombie.audio.BaseSoundEmitter;
      static gmod: number;
      highlightFlags: number;
      keyId: number;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      name?: string;
      north: boolean;
      offsetX: number;
      offsetY: number;
      open: boolean;
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      partialThumpDmg: number;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      sheetRope: boolean;
      sheetRopeHealth: number;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      square?: zombie.iso.IsoGridSquare;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      tintb: number;
      tintg: number;
      tintr: number;
      type?: zombie.iso.objects.IsoWindow$WindowType;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
  
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number, arg1: zombie.iso.IsoMovingObject): void;
      DirtySlice(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasCurtains(): zombie.iso.objects.IsoCurtain;
      HasTooltip(): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      IsOpen(): boolean;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      ToggleWindow(arg0: zombie.characters.IsoGameCharacter): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      addBarricadesDebug(arg0: number, arg1: boolean): zombie.iso.objects.IsoBarricade;
      addBrokenGlass(arg0: boolean): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addRandomBarricades(): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheet(arg0: zombie.characters.IsoGameCharacter): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: zombie.iso.IsoGridSquare, arg2: boolean, arg3: string): boolean;
      addToWorld(): void;
      canAddSheetRope(): boolean;
      canClimbHere(arg0: zombie.iso.IsoGridSquare): boolean;
      canClimbThrough(arg0: zombie.characters.IsoGameCharacter): boolean;
      canClimbThroughHelper(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare, arg3: boolean): boolean;
      checkHaveElectricity(): void;
      cleanWallBlood(): void;
      clearAttachedAnimSprite(): void;
      countAddSheetRope(arg0: zombie.iso.IsoGridSquare, arg1: boolean): number;
      createContainersFromSpriteProperties(): void;
      customHashCode(): number;
      debugPrintout(): void;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      doFindExternalWaterSource(): void;
      equals(arg0: any): boolean;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      getAddSheetSquare(arg0: zombie.characters.IsoGameCharacter): zombie.iso.IsoGridSquare;
      getAlpha(arg0: number): number;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getBarricadeForCharacter(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoBarricade;
      getBarricadeOnOppositeSquare(): zombie.iso.objects.IsoBarricade;
      getBarricadeOnSameSquare(): zombie.iso.objects.IsoBarricade;
      getBarricadeOppositeCharacter(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoBarricade;
      getCell(): zombie.iso.IsoCell;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getClass(): java.lang.Class<any>;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getDamage(): number;
      getDir(): zombie.iso.IsoDirections;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getFirstCharacterClimbingThrough(arg0: zombie.iso.IsoGridSquare): zombie.characters.IsoGameCharacter;
      getFirstCharacterClosing(): zombie.characters.IsoGameCharacter;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getIndoorSquare(): zombie.iso.IsoGridSquare;
      getInsideSquare(): zombie.iso.IsoGridSquare;
      getIsSurfaceNormalOffset(): boolean;
      getItemContainer(): zombie.inventory.ItemContainer;
      getKeyId(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getMovingObjectIndex(): number;
      getName(): string;
      getNew(): zombie.iso.IsoObject;
      getNorth(): boolean;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffsetX(): number;
      getOffsetY(): number;
      getOpenSprite(): zombie.iso.sprite.IsoSprite;
      getOppositeSquare(): zombie.iso.IsoGridSquare;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPipedFuelAmount(): number;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getScriptName(): string;
      getSmashedSprite(): zombie.iso.sprite.IsoSprite;
      getSpecialObjectIndex(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSquare(): zombie.iso.IsoGridSquare;
      getStaticMovingObjectIndex(): number;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTargetAlpha(arg0: number): number;
      getTextureName(): string;
      getThumpCondition(): number;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTile(): string;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUsesExternalWaterSource(): boolean;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWorldObjectIndex(): number;
      getX(): number;
      getY(): number;
      getZ(): number;
      hasExternalWaterSource(): boolean;
      hasModData(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isBarricadeAllowed(): boolean;
      isBarricaded(): boolean;
      isBlink(): boolean;
      isCharacter(): boolean;
      isDestroyed(): boolean;
      isExistInTheWorld(): boolean;
      isFloor(): boolean;
      isGlassRemoved(): boolean;
      isHighlighted(): boolean;
      isHoppable(): boolean;
      isInvincible(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isLocked(): boolean;
      isMaskClicked(arg0: number, arg1: number, arg2: boolean): boolean;
      isMovedThumpable(): boolean;
      isNoPicking(): boolean;
      isNorthHoppable(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isPermaLocked(): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isSheetRopeHere(arg0: zombie.iso.IsoGridSquare): boolean;
      isSmashed(): boolean;
      isSpriteInvisible(): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isTopOfSheetRopeHere(arg0: zombie.iso.IsoGridSquare, arg1: boolean): boolean;
      isZombie(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      openCloseCurtain(arg0: zombie.characters.IsoGameCharacter): void;
      removeAllContainers(): void;
      removeBrokenGlass(): void;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSheet(arg0: zombie.characters.IsoGameCharacter): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reset(): void;
      reuseGridSquare(): void;
      save(arg0: java.nio.ByteBuffer): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setBlink(arg0: boolean): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setDamage(arg0: number): void;
      setDefaultCondition(arg0: number): void;
      setDir(arg0: zombie.iso.IsoDirections): void;
      setGlassRemoved(arg0: boolean): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setIsLocked(arg0: boolean): void;
      setKeyId(arg0: number): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setMovedThumpable(arg0: boolean): void;
      setName(arg0: string): void;
      setNoPicking(arg0: boolean): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOpenSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPermaLocked(arg0: boolean): void;
      setPipedFuelAmount(arg0: number): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setSmashed(arg0: boolean): void;
      setSmashedSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setSpecialTooltip(arg0: boolean): void;
      setSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTaintedWater(arg0: boolean): void;
      setTargetAlpha(arg0: number): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setWaterAmount(arg0: number): void;
      smashWindow(): void;
      softReset(): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection, arg3: java.nio.ByteBuffer): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      toString(): string;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitModData(): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      unsetOutlineHighlight(): void;
      update(): void;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    /** [ENUM] zombie.iso.objects.IsoWindow$WindowType */
    export class IsoWindow$WindowType {
      /* ENUM VALUES */
      static readonly DoublePane: IsoWindow$WindowType; 
      static readonly SinglePane: IsoWindow$WindowType; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.iso.objects.IsoWindow$WindowType[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): IsoWindow$WindowType;
      valueOf(arg0: string): zombie.iso.objects.IsoWindow$WindowType;
      values(): zombie.iso.objects.IsoWindow$WindowType[];
    }
    // zombie.iso.objects.IsoWindowFrame extends java.lang.Object
    export class IsoWindowFrame {
      private constructor();
      addSheet(arg0: zombie.iso.IsoObject, arg1: zombie.characters.IsoGameCharacter): void;
      addSheetRope(arg0: zombie.iso.IsoObject, arg1: zombie.characters.IsoPlayer, arg2: string): boolean;
      canAddSheetRope(arg0: zombie.iso.IsoObject): boolean;
      canClimbThrough(arg0: zombie.iso.IsoObject, arg1: zombie.characters.IsoGameCharacter): boolean;
      countAddSheetRope(arg0: zombie.iso.IsoObject): number;
      equals(arg0: any): boolean;
      getAddSheetSquare(arg0: zombie.iso.IsoObject, arg1: zombie.characters.IsoGameCharacter): zombie.iso.IsoGridSquare;
      getClass(): java.lang.Class<any>;
      getCurtain(arg0: zombie.iso.IsoObject): zombie.iso.objects.IsoCurtain;
      getIndoorSquare(arg0: zombie.iso.IsoObject): zombie.iso.IsoGridSquare;
      getOppositeSquare(arg0: zombie.iso.IsoObject): zombie.iso.IsoGridSquare;
      hashCode(): number;
      haveSheetRope(arg0: zombie.iso.IsoObject): boolean;
      isWindowFrame(arg0: zombie.iso.IsoObject): boolean;
      notify(): void;
      notifyAll(): void;
      removeSheetRope(arg0: zombie.iso.IsoObject, arg1: zombie.characters.IsoPlayer): boolean;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.objects.IsoWorldInventoryObject extends zombie.iso.IsoObject
    export class IsoWorldInventoryObject {
      private constructor();
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      static LowLightingQualityHack: boolean;
      static readonly MAX_WALL_SPLATS: number;
      NoPicking: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OutlineOnMouseover: boolean;
      bAlphaForced: boolean;
      bNeverDoneAlpha: boolean;
      static bmod: number;
      container?: zombie.inventory.ItemContainer;
      dir?: zombie.iso.IsoDirections;
      doNotSync: boolean;
      dropTime: number;
      emitter?: zombie.audio.BaseSoundEmitter;
      static gmod: number;
      highlightFlags: number;
      ignoreRemoveSandbox: boolean;
      item?: zombie.inventory.InventoryItem;
      keyId: number;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      name?: string;
      offsetX: number;
      offsetY: number;
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      partialThumpDmg: number;
      removeProcess: boolean;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      sheetRope: boolean;
      sheetRopeHealth: number;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      square?: zombie.iso.IsoGridSquare;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      tintb: number;
      tintg: number;
      tintr: number;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
      xoff: number;
      yoff: number;
      zoff: number;
  
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number): void;
      DirtySlice(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasTooltip(): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      addToWorld(): void;
      canAddSheetRope(): boolean;
      checkHaveElectricity(): void;
      cleanWallBlood(): void;
      clearAttachedAnimSprite(): void;
      countAddSheetRope(): number;
      createContainersFromSpriteProperties(): void;
      customHashCode(): number;
      debugPrintout(): void;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      doFindExternalWaterSource(): void;
      equals(arg0: any): boolean;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      finishupdate(): boolean;
      getAlpha(arg0: number): number;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getCell(): zombie.iso.IsoCell;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getClass(): java.lang.Class<any>;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getDamage(): number;
      getDir(): zombie.iso.IsoDirections;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getIsSurfaceNormalOffset(): boolean;
      getItem(): zombie.inventory.InventoryItem;
      getItemContainer(): zombie.inventory.ItemContainer;
      getKeyId(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getMovingObjectIndex(): number;
      getName(): string;
      getNew(): zombie.iso.IsoObject;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffsetX(): number;
      getOffsetY(): number;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPipedFuelAmount(): number;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getScreenPosX(arg0: number): number;
      getScreenPosY(arg0: number): number;
      getScriptName(): string;
      getSpecialObjectIndex(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSquare(): zombie.iso.IsoGridSquare;
      getStaticMovingObjectIndex(): number;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTargetAlpha(arg0: number): number;
      getTextureName(): string;
      getThumpCondition(): number;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTile(): string;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUsesExternalWaterSource(): boolean;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWorldObjectIndex(): number;
      getWorldPosX(): number;
      getWorldPosY(): number;
      getWorldPosZ(): number;
      getX(): number;
      getY(): number;
      getZ(): number;
      hasExternalWaterSource(): boolean;
      hasModData(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isBlink(): boolean;
      isCharacter(): boolean;
      isDestroyed(): boolean;
      isExistInTheWorld(): boolean;
      isFloor(): boolean;
      isHighlighted(): boolean;
      isHoppable(): boolean;
      isIgnoreRemoveSandbox(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isMaskClicked(arg0: number, arg1: number, arg2: boolean): boolean;
      isMovedThumpable(): boolean;
      isNoPicking(): boolean;
      isNorthHoppable(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isSpriteInvisible(): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isZombie(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      removeAllContainers(): void;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reset(): void;
      reuseGridSquare(): void;
      save(arg0: java.nio.ByteBuffer): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setBlink(arg0: boolean): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setDamage(arg0: number): void;
      setDefaultCondition(arg0: number): void;
      setDir(arg0: zombie.iso.IsoDirections): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setIgnoreRemoveSandbox(arg0: boolean): void;
      setKeyId(arg0: number): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setMovedThumpable(arg0: boolean): void;
      setName(arg0: string): void;
      setNoPicking(arg0: boolean): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPipedFuelAmount(arg0: number): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setSpecialTooltip(arg0: boolean): void;
      setSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTaintedWater(arg0: boolean): void;
      setTargetAlpha(arg0: number): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setWaterAmount(arg0: number): void;
      softReset(): void;
      swapItem(arg0: zombie.inventory.InventoryItem): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection, arg3: java.nio.ByteBuffer): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      toString(): string;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitModData(): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      unsetOutlineHighlight(): void;
      update(): void;
      updateSprite(): void;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    // zombie.iso.objects.IsoZombieGiblets extends zombie.iso.IsoPhysicsObject
    export class IsoZombieGiblets {
      private constructor();
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      static LowLightingQualityHack: boolean;
      static readonly MAX_WALL_SPLATS: number;
      static readonly MAX_ZOMBIES_EATING: number;
      NoPicking: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OutlineOnMouseover: boolean;
      bAlphaForced: boolean;
      bNeverDoneAlpha: boolean;
      readonly bOutline?: boolean[];
      static bmod: number;
      container?: zombie.inventory.ItemContainer;
      def?: zombie.iso.sprite.IsoSpriteInstance;
      dir?: zombie.iso.IsoDirections;
      doNotSync: boolean;
      emitter?: zombie.audio.BaseSoundEmitter;
      static gmod: number;
      highlightFlags: number;
      keyId: number;
      last?: zombie.iso.IsoGridSquare;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      lx: number;
      ly: number;
      lz: number;
      name?: string;
      noDamage: boolean;
      nx: number;
      ny: number;
      offsetX: number;
      offsetY: number;
      readonly outlineColor?: zombie.core.textures.ColorInfo[];
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      partialThumpDmg: number;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      sheetRope: boolean;
      sheetRopeHealth: number;
      speedMod: number;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      square?: zombie.iso.IsoGridSquare;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      terminalVelocity: number;
      time: number;
      tintb: number;
      tintg: number;
      tintr: number;
      static treeSoundMgr?: zombie.iso.IsoMovingObject$TreeSoundManager;
      velX: number;
      velY: number;
      velZ: number;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
      x: number;
      y: number;
      z: number;
  
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number): void;
      Despawn(): void;
      DirtySlice(): void;
      DistTo(arg0: number, arg1: number): number;
      DistToProper(arg0: zombie.iso.IsoObject): number;
      DistToSquared(arg0: zombie.iso.IsoMovingObject): number;
      DoCollideNorS(): void;
      DoCollideWorE(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasTooltip(): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      Move(arg0: zombie.iso.Vector2): void;
      MoveUnmodded(arg0: zombie.iso.Vector2): void;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      addToWorld(): void;
      canAddSheetRope(): boolean;
      canHaveMultipleHits(): number;
      checkHaveElectricity(): void;
      cleanWallBlood(): void;
      clearAttachedAnimSprite(): void;
      collideGround(): void;
      collideWall(): void;
      collideWith(arg0: zombie.iso.IsoObject): void;
      compareToY(arg0: zombie.iso.IsoMovingObject): number;
      countAddSheetRope(): number;
      createContainersFromSpriteProperties(): void;
      customHashCode(): number;
      debugPrintout(): void;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      distToNearestCamCharacter(): number;
      doFindExternalWaterSource(): void;
      doStairs(): void;
      ensureOnTile(): void;
      equals(arg0: any): boolean;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      getAlpha(arg0: number): number;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getBuilding(): zombie.iso.areas.IsoBuilding;
      getBumpedType(arg0: zombie.characters.IsoGameCharacter): string;
      getCell(): zombie.iso.IsoCell;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getClass(): java.lang.Class<any>;
      getCollideType(): string;
      getCollidedObject(): zombie.iso.IsoObject;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getCurrentBuilding(): zombie.iso.areas.IsoBuilding;
      getCurrentSquare(): zombie.iso.IsoGridSquare;
      getCurrentZone(): zombie.iso.IsoMetaGrid$Zone;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getDamage(): number;
      getDir(): zombie.iso.IsoDirections;
      getDistanceSq(arg0: zombie.iso.IsoMovingObject): number;
      getEatingZombies(): java.util.ArrayList<zombie.characters.IsoZombie>;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getFeelerTile(arg0: number): zombie.iso.IsoGridSquare;
      getFeelersize(): number;
      getFuturWalkedSquare(): zombie.iso.IsoGridSquare;
      getGlobalMovementMod(): number;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getHitDir(): zombie.iso.Vector2;
      getHitForce(): number;
      getHitFromAngle(): number;
      getID(): number;
      getIDCount(): number;
      getImpulsex(): number;
      getImpulsey(): number;
      getIsSurfaceNormalOffset(): boolean;
      getItemContainer(): zombie.inventory.ItemContainer;
      getKeyId(): number;
      getLastCollideTime(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getLastSquare(): zombie.iso.IsoGridSquare;
      getLastTargettedBy(): zombie.characters.IsoZombie;
      getLimpulsex(): number;
      getLimpulsey(): number;
      getLx(): number;
      getLy(): number;
      getLz(): number;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getMasterRegion(): zombie.iso.areas.isoregion.regions.IWorldRegion;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getMovementLastFrame(): zombie.iso.Vector2;
      getMovingObjectIndex(): number;
      getName(): string;
      getNew(): zombie.iso.IsoObject;
      getNoDamage(): boolean;
      getNx(): number;
      getNy(): number;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffsetX(): number;
      getOffsetY(): number;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPathFindIndex(): number;
      getPipedFuelAmount(): number;
      getPosition(arg0: zombie.iso.Vector3): zombie.iso.Vector3;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getScreenX(): number;
      getScreenY(): number;
      getScriptModule(): string;
      getScriptName(): string;
      getScriptnx(): number;
      getScriptny(): number;
      getSpecialObjectIndex(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSquare(): zombie.iso.IsoGridSquare;
      getStateEventDelayTimer(): number;
      getStaticMovingObjectIndex(): number;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTargetAlpha(arg0: number): number;
      getTextureName(): string;
      getThumpCondition(): number;
      getThumpTarget(): zombie.iso.objects.interfaces.Thumpable;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTile(): string;
      getTimeSinceZombieAttack(): number;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUsesExternalWaterSource(): boolean;
      getVectorFromDirection(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWeight(): number;
      getWidth(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWorldObjectIndex(): number;
      getX(): number;
      getY(): number;
      getZ(): number;
      hasExternalWaterSource(): boolean;
      hasModData(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isBlink(): boolean;
      isCharacter(): boolean;
      isCloseKilled(): boolean;
      isCollidable(): boolean;
      isCollided(): boolean;
      isCollidedE(): boolean;
      isCollidedN(): boolean;
      isCollidedS(): boolean;
      isCollidedThisFrame(): boolean;
      isCollidedW(): boolean;
      isCollidedWithDoor(): boolean;
      isCollidedWithVehicle(): boolean;
      isDestroyed(): boolean;
      isEatingOther(arg0: zombie.iso.IsoMovingObject): boolean;
      isExistInTheWorld(): boolean;
      isFirstUpdate(): boolean;
      isFloor(): boolean;
      isHighlighted(): boolean;
      isHoppable(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isMaskClicked(arg0: number, arg1: number, arg2: boolean): boolean;
      isMovedThumpable(): boolean;
      isNoPicking(): boolean;
      isNorthHoppable(): boolean;
      isOnFloor(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isPushableForSeparate(): boolean;
      isPushedByForSeparate(arg0: zombie.iso.IsoMovingObject): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isShootable(): boolean;
      isSolid(): boolean;
      isSolidForSeparate(): boolean;
      isSpriteInvisible(): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isZombie(): boolean;
      isZombiesDontAttack(): boolean;
      isbAltCollide(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      postupdate(): void;
      preupdate(): void;
      removeAllContainers(): void;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reset(): void;
      reuseGridSquare(): void;
      save(arg0: java.nio.ByteBuffer): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      separate(): void;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setBlink(arg0: boolean): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setCloseKilled(arg0: boolean): void;
      setCollidable(arg0: boolean): void;
      setCollideType(arg0: string): void;
      setCollidedE(arg0: boolean): void;
      setCollidedN(arg0: boolean): void;
      setCollidedObject(arg0: zombie.iso.IsoObject): void;
      setCollidedS(arg0: boolean): void;
      setCollidedThisFrame(arg0: boolean): void;
      setCollidedW(arg0: boolean): void;
      setCollidedWithDoor(arg0: boolean): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCurrent(arg0: zombie.iso.IsoGridSquare): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setDamage(arg0: number): void;
      setDefaultCondition(arg0: number): void;
      setDestroyed(arg0: boolean): void;
      setDir(arg0: zombie.iso.IsoDirections): void;
      setEatingZombies(arg0: java.util.ArrayList<zombie.characters.IsoZombie>): void;
      setFeelersize(arg0: number): void;
      setFirstUpdate(arg0: boolean): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setHitDir(arg0: zombie.iso.Vector2): void;
      setHitForce(arg0: number): void;
      setHitFromAngle(arg0: number): void;
      setID(arg0: number): void;
      setIDCount(arg0: number): void;
      setImpulsex(arg0: number): void;
      setImpulsey(arg0: number): void;
      setKeyId(arg0: number): void;
      setLast(arg0: zombie.iso.IsoGridSquare): void;
      setLastCollideTime(arg0: number): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setLastTargettedBy(arg0: zombie.characters.IsoZombie): void;
      setLimpulsex(arg0: number): void;
      setLimpulsey(arg0: number): void;
      setLx(arg0: number): void;
      setLy(arg0: number): void;
      setLz(arg0: number): void;
      setMovedThumpable(arg0: boolean): void;
      setMovementLastFrame(arg0: zombie.iso.Vector2): void;
      setMovingSquareNow(): void;
      setName(arg0: string): void;
      setNoDamage(arg0: boolean): void;
      setNoPicking(arg0: boolean): void;
      setNx(arg0: number): void;
      setNy(arg0: number): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOnFloor(arg0: boolean): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPathFindIndex(arg0: number): void;
      setPipedFuelAmount(arg0: number): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setScriptModule(arg0: string): void;
      setScriptnx(arg0: number): void;
      setScriptny(arg0: number): void;
      setShootable(arg0: boolean): void;
      setSolid(arg0: boolean): void;
      setSpecialTooltip(arg0: boolean): void;
      setSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setStateEventDelayTimer(arg0: number): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTaintedWater(arg0: boolean): void;
      setTargetAlpha(arg0: number): void;
      setThumpTarget(arg0: zombie.iso.objects.interfaces.Thumpable): void;
      setTimeSinceZombieAttack(arg0: number): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setWaterAmount(arg0: number): void;
      setWeight(arg0: number): void;
      setWidth(arg0: number): void;
      setX(arg0: number): void;
      setY(arg0: number): void;
      setZ(arg0: number): void;
      setZombiesDontAttack(arg0: boolean): void;
      setbAltCollide(arg0: boolean): void;
      softReset(): void;
      spotted(arg0: zombie.iso.IsoMovingObject, arg1: boolean): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection, arg3: java.nio.ByteBuffer): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      toString(): string;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitModData(): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      unsetOutlineHighlight(): void;
      update(): void;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    /** [ENUM] zombie.iso.objects.IsoZombieGiblets$GibletType */
    export class IsoZombieGiblets$GibletType {
      /* ENUM VALUES */
      static readonly A: IsoZombieGiblets$GibletType; 
      static readonly B: IsoZombieGiblets$GibletType; 
      static readonly Eye: IsoZombieGiblets$GibletType; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.iso.objects.IsoZombieGiblets$GibletType[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): IsoZombieGiblets$GibletType;
      valueOf(arg0: string): zombie.iso.objects.IsoZombieGiblets$GibletType;
      values(): zombie.iso.objects.IsoZombieGiblets$GibletType[];
    }
    // zombie.iso.objects.ObjectRenderEffects extends java.lang.Object
    export class ObjectRenderEffects {
      private constructor();
      static readonly ENABLED: boolean;
      x1: number;
      x2: number;
      x3: number;
      x4: number;
      y1: number;
      y2: number;
      y3: number;
      y4: number;
  
      add(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      alloc(): zombie.iso.objects.ObjectRenderEffects;
      copyMainFromOther(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getNew(arg0: zombie.iso.IsoObject, arg1: zombie.iso.objects.RenderEffectType, arg2: boolean): zombie.iso.objects.ObjectRenderEffects;
      getNextWindEffect(arg0: number, arg1: boolean): zombie.iso.objects.ObjectRenderEffects;
      hashCode(): number;
      init(): void;
      notify(): void;
      notifyAll(): void;
      release(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      toString(): string;
      update(): boolean;
      updateStatic(): void;
      wait(arg0: number): void;
    }
    // zombie.iso.objects.RainManager extends java.lang.Object
    export class RainManager {
      private constructor();
      static AddNewSplashesDelay: number;
      static AddNewSplashesTimer: number;
      static DarkRaindropTintMod?: zombie.core.textures.ColorInfo;
      static GravModMax: number;
      static GravModMin: number;
      static IsRaining: boolean;
      static MaxRainSplashObjects: number;
      static MaxRaindropObjects: number;
      static NumActiveRainSplashes: number;
      static NumActiveRaindrops: number;
      static PlayerLocation?: zombie.iso.IsoGridSquare[];
      static PlayerMoved: boolean;
      static PlayerOldLocation?: zombie.iso.IsoGridSquare[];
      static RainAmbient?: fmod.fmod.Audio;
      static RainDesiredIntensity: number;
      static RainIntensity: number;
      static RainRadius: number;
      static RainSplashAnimDelay: number;
      static RainSplashReuseStack?: java.util.Stack<zombie.iso.objects.IsoRainSplash>;
      static RainSplashStack?: java.util.ArrayList<zombie.iso.objects.IsoRainSplash>;
      static RainSplashTintMod?: zombie.core.textures.ColorInfo;
      static RaindropGravity: number;
      static RaindropReuseStack?: java.util.Stack<zombie.iso.objects.IsoRaindrop>;
      static RaindropStack?: java.util.ArrayList<zombie.iso.objects.IsoRaindrop>;
      static RaindropStartDistance: number;
      static RaindropTintMod?: zombie.core.textures.ColorInfo;
      static ThunderAmbient?: fmod.fmod.Audio;
      static randRainMax: number;
      static randRainMin: number;
  
      AddRainSplash(arg0: zombie.iso.objects.IsoRainSplash): void;
      AddRaindrop(arg0: zombie.iso.objects.IsoRaindrop): void;
      AddSplashes(): void;
      RemoveAllOn(arg0: zombie.iso.IsoGridSquare): void;
      RemoveRainSplash(arg0: zombie.iso.objects.IsoRainSplash): void;
      RemoveRaindrop(arg0: zombie.iso.objects.IsoRaindrop): void;
      SetPlayerLocation(arg0: number, arg1: zombie.iso.IsoGridSquare): void;
      StartRainSplash(arg0: zombie.iso.IsoCell, arg1: zombie.iso.IsoGridSquare, arg2: boolean): void;
      StartRaindrop(arg0: zombie.iso.IsoCell, arg1: zombie.iso.IsoGridSquare, arg2: boolean): void;
      Update(): void;
      UpdateServer(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getRainIntensity(): number;
      hashCode(): number;
      inBounds(arg0: zombie.iso.IsoGridSquare): boolean;
      isRaining(): boolean;
      notify(): void;
      notifyAll(): void;
      reset(): void;
      setRandRainMax(arg0: number): void;
      setRandRainMin(arg0: number): void;
      startRaining(): void;
      stopRaining(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.iso.objects.RenderEffectType */
    export class RenderEffectType {
      /* ENUM VALUES */
      static readonly Hit_Door: RenderEffectType; 
      static readonly Hit_Tree_Shudder: RenderEffectType; 
      static readonly Vegetation_Rustle: RenderEffectType; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.iso.objects.RenderEffectType[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): RenderEffectType;
      valueOf(arg0: string): zombie.iso.objects.RenderEffectType;
      values(): zombie.iso.objects.RenderEffectType[];
    }
  }
  export namespace zombie.iso.objects.interfaces {
    // zombie.iso.objects.interfaces.BarricadeAble
    export class BarricadeAble {
      private constructor();
      getBarricadeForCharacter(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoBarricade;
      getBarricadeOnOppositeSquare(): zombie.iso.objects.IsoBarricade;
      getBarricadeOnSameSquare(): zombie.iso.objects.IsoBarricade;
      getBarricadeOppositeCharacter(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoBarricade;
      getNorth(): boolean;
      getOppositeSquare(): zombie.iso.IsoGridSquare;
      getSquare(): zombie.iso.IsoGridSquare;
      isBarricadeAllowed(): boolean;
      isBarricaded(): boolean;
    }
    // zombie.iso.objects.interfaces.Thumpable
    export class Thumpable {
      private constructor();
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      getThumpCondition(): number;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      isDestroyed(): boolean;
    }
  }
  export namespace zombie.iso.sprite {
    // zombie.iso.sprite.IsoAnim extends java.lang.Object
    export class IsoAnim {
      private constructor();
      FinishUnloopedOnFrame: number;
      FrameDelay: number;
      readonly Frames?: java.util.ArrayList<zombie.iso.sprite.IsoDirectionFrame>;
      FramesArray?: zombie.iso.sprite.IsoDirectionFrame[];
      static readonly GlobalAnimMap?: java.util.HashMap<string, zombie.iso.sprite.IsoAnim>;
      ID: number;
      LastFrame: number;
      name?: string;
  
      DisposeAll(): void;
      LoadFrames(arg0: string, arg1: string, arg2: number): void;
      LoadFramesBitRepeatFrame(arg0: string, arg1: string, arg2: number): void;
      LoadFramesBits(arg0: string, arg1: string, arg2: string, arg3: number, arg4: string): void;
      LoadFramesPageSimple(arg0: string, arg1: string, arg2: string, arg3: string): void;
      LoadFramesPcx(arg0: string, arg1: string, arg2: number): void;
      LoadFramesReverseAltName(arg0: string, arg1: string, arg2: string, arg3: number): void;
      LoadFramesUseOtherFrame(arg0: string, arg1: string, arg2: string, arg3: string, arg4: number, arg5: string): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.sprite.IsoDirectionFrame extends java.lang.Object
    export class IsoDirectionFrame {
      private constructor();
      readonly directions?: zombie.core.textures.Texture[];
  
      SetAllDirections(arg0: zombie.core.textures.Texture): void;
      SetDirection(arg0: zombie.core.textures.Texture, arg1: zombie.iso.IsoDirections): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getTexture(arg0: zombie.iso.IsoDirections): zombie.core.textures.Texture;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      render(arg0: number, arg1: number, arg2: zombie.iso.IsoDirections, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderexplicit(arg0: number, arg1: number, arg2: zombie.iso.IsoDirections, arg3: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.sprite.IsoSprite extends java.lang.Object
    export class IsoSprite {
      private constructor();
      readonly AnimMap?: java.util.HashMap<string, zombie.iso.sprite.IsoAnim>;
      readonly AnimStack?: java.util.ArrayList<zombie.iso.sprite.IsoAnim>;
      Animate: boolean;
      CurrentAnim?: zombie.iso.sprite.IsoAnim;
      DeleteWhenFinished: boolean;
      ID: number;
      Loop: boolean;
      readonly Properties?: zombie.core.properties.PropertyContainer;
      static readonly RL_DEFAULT: number;
      static readonly RL_FLOOR: number;
      readonly TintMod?: zombie.core.textures.ColorInfo;
      static alphaStep: number;
      alwaysDraw: boolean;
      attachedFloor: boolean;
      burntTile?: string;
      canBeRemoved: boolean;
      cutN: boolean;
      cutW: boolean;
      def?: zombie.iso.sprite.IsoSpriteInstance;
      firerequirement: number;
      forceAmbient: boolean;
      forceRender: boolean;
      static globalOffsetX: number;
      static globalOffsetY: number;
      invisible: boolean;
      isBush: boolean;
      static maxCount: number;
      modelSlot?: zombie.core.skinnedmodel.ModelManager$ModelSlot;
      moveWithWind: boolean;
      name?: string;
      renderLayer: number;
      soffX: number;
      soffY: number;
      solid: boolean;
      solidTrans: boolean;
      solidfloor: boolean;
      tileSheetIndex: number;
      treatAsWallOrder: boolean;
      windType: number;
  
      AddProperties(arg0: zombie.iso.sprite.IsoSprite): void;
      CacheAnims(arg0: string): void;
      ChangeTintMod(arg0: zombie.core.textures.ColorInfo): void;
      CreateSprite(arg0: zombie.iso.sprite.IsoSpriteManager): zombie.iso.sprite.IsoSprite;
      CreateSpriteUsingCache(arg0: string, arg1: string, arg2: number): zombie.iso.sprite.IsoSprite;
      Dispose(): void;
      DisposeAll(): void;
      HasCache(arg0: string): boolean;
      LoadCache(arg0: string): void;
      LoadFrameExplicit(arg0: string): zombie.core.textures.Texture;
      LoadFrames(arg0: string, arg1: string, arg2: number): void;
      LoadFramesNoDirPage(arg0: string, arg1: string, arg2: number): void;
      LoadFramesNoDirPageDirect(arg0: string, arg1: string, arg2: number): void;
      LoadFramesNoDirPageSimple(arg0: string): void;
      LoadFramesPageSimple(arg0: string, arg1: string, arg2: string, arg3: string): void;
      LoadFramesPcx(arg0: string, arg1: string, arg2: number): void;
      LoadFramesReverseAltName(arg0: string, arg1: string, arg2: string, arg3: number): void;
      PlayAnim(arg0: string): void;
      PlayAnimUnlooped(arg0: string): void;
      RenderGhostTile(arg0: number, arg1: number, arg2: number): void;
      RenderGhostTileColor(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      RenderGhostTileRed(arg0: number, arg1: number, arg2: number): void;
      ReplaceCurrentAnimFrames(arg0: string): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getID(): number;
      getMaskClickedY(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: boolean): number;
      getName(): string;
      getParentObjectName(): string;
      getProperties(): zombie.core.properties.PropertyContainer;
      getSheetGridIdFromName(arg0: string): number;
      getSprite(arg0: zombie.iso.sprite.IsoSpriteManager, arg1: zombie.iso.sprite.IsoSprite, arg2: number): zombie.iso.sprite.IsoSprite;
      getSpriteGrid(): zombie.iso.sprite.IsoSpriteGrid;
      getTextureForCurrentFrame(arg0: zombie.iso.IsoDirections): zombie.core.textures.Texture;
      getTextureForFrame(arg0: number, arg1: zombie.iso.IsoDirections): zombie.core.textures.Texture;
      getTintMod(): zombie.core.textures.ColorInfo;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      hasActiveModel(): boolean;
      hashCode(): number;
      isMaskClicked(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number): boolean;
      isMoveWithWind(): boolean;
      load(arg0: java.io.DataInputStream): void;
      newInstance(): zombie.iso.sprite.IsoSpriteInstance;
      notify(): void;
      notifyAll(): void;
      render(arg0: zombie.iso.sprite.IsoSpriteInstance, arg1: zombie.iso.IsoObject, arg2: number, arg3: number, arg4: number, arg5: zombie.iso.IsoDirections, arg6: number, arg7: number, arg8: zombie.core.textures.ColorInfo, arg9: boolean, arg10: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderActiveModel(): void;
      renderBloodSplat(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderCurrentAnim(arg0: zombie.iso.sprite.IsoSpriteInstance, arg1: zombie.iso.IsoObject, arg2: number, arg3: number, arg4: number, arg5: zombie.iso.IsoDirections, arg6: number, arg7: number, arg8: zombie.core.textures.ColorInfo, arg9: boolean, arg10: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderObjectPicker(arg0: zombie.iso.sprite.IsoSpriteInstance, arg1: zombie.iso.IsoObject, arg2: zombie.iso.IsoDirections): void;
      renderVehicle(arg0: zombie.iso.sprite.IsoSpriteInstance, arg1: zombie.iso.IsoObject, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: zombie.core.textures.ColorInfo, arg8: boolean): void;
      save(arg0: java.io.DataOutputStream): void;
      setAnimate(arg0: boolean): void;
      setFromCache(arg0: string, arg1: string, arg2: number): zombie.iso.sprite.IsoSprite;
      setHideForWaterRender(): void;
      setName(arg0: string): void;
      setParentObjectName(arg0: string): void;
      setSpriteGrid(arg0: zombie.iso.sprite.IsoSpriteGrid): void;
      setSpriteID(arg0: zombie.iso.sprite.IsoSpriteManager, arg1: number, arg2: zombie.iso.sprite.IsoSprite): void;
      setTintMod(arg0: zombie.core.textures.ColorInfo): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.iso.sprite.IsoSpriteGrid extends java.lang.Object
    export class IsoSpriteGrid {
      private constructor();
      equals(arg0: any): boolean;
      getAnchorSprite(): zombie.iso.sprite.IsoSprite;
      getClass(): java.lang.Class<any>;
      getHeight(): number;
      getSprite(arg0: number, arg1: number): zombie.iso.sprite.IsoSprite;
      getSpriteCount(): number;
      getSpriteFromIndex(arg0: number): zombie.iso.sprite.IsoSprite;
      getSpriteGridPosX(arg0: zombie.iso.sprite.IsoSprite): number;
      getSpriteGridPosY(arg0: zombie.iso.sprite.IsoSprite): number;
      getSpriteIndex(arg0: zombie.iso.sprite.IsoSprite): number;
      getSprites(): zombie.iso.sprite.IsoSprite[];
      getWidth(): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      setSprite(arg0: number, arg1: number, arg2: zombie.iso.sprite.IsoSprite): void;
      toString(): string;
      validate(): boolean;
      wait(arg0: number): void;
    }
    // zombie.iso.sprite.IsoSpriteInstance extends java.lang.Object
    export class IsoSpriteInstance {
      private constructor();
      AnimFrameIncrease: number;
      Finished: boolean;
      Flip: boolean;
      Frame: number;
      Looped: boolean;
      NextFrame: boolean;
      alpha: number;
      bCopyTargetAlpha: boolean;
      bMultiplyObjectAlpha: boolean;
      offX: number;
      offY: number;
      offZ: number;
      parentSprite?: zombie.iso.sprite.IsoSprite;
      static readonly pool?: zombie.popman.ObjectPool<zombie.iso.sprite.IsoSpriteInstance>;
      scaleX: number;
      scaleY: number;
      targetAlpha: number;
      tintb: number;
      tintg: number;
      tintr: number;
  
      Dispose(): void;
      RenderGhostTileColor(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      SetAlpha(arg0: number): void;
      SetTargetAlpha(arg0: number): void;
      add(arg0: zombie.iso.sprite.IsoSpriteInstance): void;
      equals(arg0: any): boolean;
      get(arg0: zombie.iso.sprite.IsoSprite): zombie.iso.sprite.IsoSpriteInstance;
      getAlpha(): number;
      getClass(): java.lang.Class<any>;
      getFrame(): number;
      getID(): number;
      getName(): string;
      getParentSprite(): zombie.iso.sprite.IsoSprite;
      getScaleX(): number;
      getScaleY(): number;
      getTargetAlpha(): number;
      getTintB(): number;
      getTintG(): number;
      getTintR(): number;
      hashCode(): number;
      isCopyTargetAlpha(): boolean;
      isFinished(): boolean;
      isMultiplyObjectAlpha(): boolean;
      notify(): void;
      notifyAll(): void;
      render(arg0: zombie.iso.IsoObject, arg1: number, arg2: number, arg3: number, arg4: zombie.iso.IsoDirections, arg5: number, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      scaleAspect(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setFrameSpeedPerFrame(arg0: number): void;
      setScale(arg0: number, arg1: number): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.iso.sprite.IsoSpriteManager extends java.lang.Object
    export class IsoSpriteManager {
      private constructor();
      readonly IntMap?: gnu.trove.map.hash.TIntObjectHashMap<zombie.iso.sprite.IsoSprite>;
      readonly NamedMap?: java.util.HashMap<string, zombie.iso.sprite.IsoSprite>;
      static readonly instance?: zombie.iso.sprite.IsoSpriteManager;
  
      AddSprite(arg0: string): zombie.iso.sprite.IsoSprite;
      Dispose(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getOrAddSpriteCache(arg0: string, arg1: zombie.core.Color): zombie.iso.sprite.IsoSprite;
      getSprite(arg0: string): zombie.iso.sprite.IsoSprite;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.sprite.SkyBox extends zombie.iso.IsoObject
    export class SkyBox {
      private constructor();
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      Effect?: zombie.core.opengl.Shader;
      static LowLightingQualityHack: boolean;
      static readonly MAX_WALL_SPLATS: number;
      NoPicking: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OutlineOnMouseover: boolean;
      bAlphaForced: boolean;
      bNeverDoneAlpha: boolean;
      static bmod: number;
      container?: zombie.inventory.ItemContainer;
      def?: zombie.iso.sprite.IsoSpriteInstance;
      dir?: zombie.iso.IsoDirections;
      doNotSync: boolean;
      emitter?: zombie.audio.BaseSoundEmitter;
      static gmod: number;
      highlightFlags: number;
      keyId: number;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      name?: string;
      offsetX: number;
      offsetY: number;
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      partialThumpDmg: number;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      sheetRope: boolean;
      sheetRopeHealth: number;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      square?: zombie.iso.IsoGridSquare;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      tintb: number;
      tintg: number;
      tintr: number;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
  
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number): void;
      DirtySlice(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasTooltip(): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      addToWorld(): void;
      canAddSheetRope(): boolean;
      checkHaveElectricity(): void;
      cleanWallBlood(): void;
      clearAttachedAnimSprite(): void;
      countAddSheetRope(): number;
      createContainersFromSpriteProperties(): void;
      customHashCode(): number;
      debugPrintout(): void;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      doFindExternalWaterSource(): void;
      draw(): void;
      equals(arg0: any): boolean;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      getAlpha(arg0: number): number;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getCell(): zombie.iso.IsoCell;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getClass(): java.lang.Class<any>;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getDamage(): number;
      getDir(): zombie.iso.IsoDirections;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getInstance(): zombie.iso.sprite.SkyBox;
      getIsSurfaceNormalOffset(): boolean;
      getItemContainer(): zombie.inventory.ItemContainer;
      getKeyId(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getMovingObjectIndex(): number;
      getName(): string;
      getNew(): zombie.iso.IsoObject;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffsetX(): number;
      getOffsetY(): number;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPipedFuelAmount(): number;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getScriptName(): string;
      getShaderCloudCount(): number;
      getShaderCloudLight(): number;
      getShaderCloudSize(): number;
      getShaderFog(): number;
      getShaderSkyHColour(): zombie.core.Color;
      getShaderSkyLColour(): zombie.core.Color;
      getShaderStars(): number;
      getShaderSunColor(): zombie.core.Color;
      getShaderSunLight(): org.joml.Vector3f;
      getShaderTime(): number;
      getShaderWind(): org.joml.Vector3f;
      getSpecialObjectIndex(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSquare(): zombie.iso.IsoGridSquare;
      getStaticMovingObjectIndex(): number;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTargetAlpha(arg0: number): number;
      getTextureCurrent(): zombie.interfaces.ITexture;
      getTextureFBOPrev(): zombie.core.textures.TextureFBO;
      getTextureName(): string;
      getTexturePrev(): zombie.interfaces.ITexture;
      getTextureShift(): number;
      getThumpCondition(): number;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTile(): string;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUsesExternalWaterSource(): boolean;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWorldObjectIndex(): number;
      getX(): number;
      getY(): number;
      getZ(): number;
      hasExternalWaterSource(): boolean;
      hasModData(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isBlink(): boolean;
      isCharacter(): boolean;
      isDestroyed(): boolean;
      isExistInTheWorld(): boolean;
      isFloor(): boolean;
      isHighlighted(): boolean;
      isHoppable(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isMaskClicked(arg0: number, arg1: number, arg2: boolean): boolean;
      isMovedThumpable(): boolean;
      isNoPicking(): boolean;
      isNorthHoppable(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isSpriteInvisible(): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isZombie(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      removeAllContainers(): void;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reset(): void;
      reuseGridSquare(): void;
      save(arg0: java.nio.ByteBuffer, arg1: boolean): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setBlink(arg0: boolean): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setDamage(arg0: number): void;
      setDefaultCondition(arg0: number): void;
      setDir(arg0: zombie.iso.IsoDirections): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setKeyId(arg0: number): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setMovedThumpable(arg0: boolean): void;
      setName(arg0: string): void;
      setNoPicking(arg0: boolean): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPipedFuelAmount(arg0: number): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setSpecialTooltip(arg0: boolean): void;
      setSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTaintedWater(arg0: boolean): void;
      setTargetAlpha(arg0: number): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setWaterAmount(arg0: number): void;
      softReset(): void;
      swapTextureFBO(): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection, arg3: java.nio.ByteBuffer): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      toString(): string;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitModData(): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      unsetOutlineHighlight(): void;
      update(): void;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
    }
  }
  export namespace zombie.iso.sprite.shapers {
    // zombie.iso.sprite.shapers.WallShaperWhole extends zombie.iso.sprite.shapers.WallShaper
    export class WallShaperWhole {
      private constructor();
      readonly col?: number[];
      static readonly instance?: zombie.iso.sprite.shapers.WallShaperWhole;
  
      accept(arg0: any): void;
      andThen(arg0: java.util._function.Consumer<any>): java.util._function.Consumer<any>;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      setTintColor(arg0: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.iso.weather {
    // zombie.iso.weather.ClimateColorInfo extends java.lang.Object
    export class ClimateColorInfo {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getExterior(): zombie.core.Color;
      getInterior(): zombie.core.Color;
      hashCode(): number;
      interp(arg0: zombie.iso.weather.ClimateColorInfo, arg1: number, arg2: zombie.iso.weather.ClimateColorInfo): zombie.iso.weather.ClimateColorInfo;
      load(arg0: java.io.DataInputStream, arg1: number): void;
      notify(): void;
      notifyAll(): void;
      read(arg0: java.nio.ByteBuffer): void;
      save(arg0: java.io.DataOutputStream): void;
      scale(arg0: number): void;
      setExterior(arg0: zombie.core.Color): void;
      setInterior(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setTo(arg0: zombie.iso.weather.ClimateColorInfo): void;
      toString(): string;
      wait(arg0: number): void;
      write(arg0: java.nio.ByteBuffer): void;
      writeColorInfoConfig(): boolean;
    }
    // zombie.iso.weather.ClimateForecaster extends java.lang.Object
    export class ClimateForecaster {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDaysTillFirstWeather(): number;
      getForecast(arg0: number): zombie.iso.weather.ClimateForecaster$DayForecast;
      getForecasts(): java.util.ArrayList<zombie.iso.weather.ClimateForecaster$DayForecast>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.weather.ClimateForecaster$DayForecast extends java.lang.Object
    export class ClimateForecaster$DayForecast {
      private constructor();
      equals(arg0: any): boolean;
      getAirFront(): zombie.iso.weather.ClimateManager$AirFront;
      getAirFrontString(): string;
      getClass(): java.lang.Class<any>;
      getCloudiness(): zombie.iso.weather.ClimateForecaster$ForecastValue;
      getDawn(): number;
      getDayLightHours(): number;
      getDusk(): number;
      getFogDuration(): number;
      getFogStrength(): number;
      getHumidity(): zombie.iso.weather.ClimateForecaster$ForecastValue;
      getIndexOffset(): number;
      getMeanWindAngleString(): string;
      getName(): string;
      getTemperature(): zombie.iso.weather.ClimateForecaster$ForecastValue;
      getWeatherEndTime(): number;
      getWeatherOverlap(): zombie.iso.weather.ClimateForecaster$DayForecast;
      getWeatherPeriod(): zombie.iso.weather.WeatherPeriod;
      getWeatherStages(): java.util.ArrayList<number>;
      getWeatherStartTime(): number;
      getWindDirection(): zombie.iso.weather.ClimateForecaster$ForecastValue;
      getWindPower(): zombie.iso.weather.ClimateForecaster$ForecastValue;
      hashCode(): number;
      isChanceOnSnow(): boolean;
      isHasBlizzard(): boolean;
      isHasFog(): boolean;
      isHasHeavyRain(): boolean;
      isHasStorm(): boolean;
      isHasTropicalStorm(): boolean;
      isWeatherStarts(): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.weather.ClimateForecaster$ForecastValue extends java.lang.Object
    export class ClimateForecaster$ForecastValue {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDayMax(): number;
      getDayMean(): number;
      getDayMin(): number;
      getNightMax(): number;
      getNightMean(): number;
      getNightMin(): number;
      getTotalMax(): number;
      getTotalMean(): number;
      getTotalMin(): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.weather.ClimateHistory extends java.lang.Object
    export class ClimateHistory {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      init(arg0: zombie.iso.weather.ClimateManager): void;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      updateDayChange(arg0: zombie.iso.weather.ClimateManager): void;
      wait(arg0: number): void;
    }
    // (Unknown)
    export type ClimateManager = any;
    // zombie.iso.weather.ClimateManager$AirFront extends java.lang.Object
    export class ClimateManager$AirFront {
      private constructor();
      addDaySample(arg0: number): void;
      copyFrom(arg0: zombie.iso.weather.ClimateManager$AirFront): void;
      equals(arg0: any): boolean;
      getAngleDegrees(): number;
      getClass(): java.lang.Class<any>;
      getDays(): number;
      getMaxNoise(): number;
      getStrength(): number;
      getTotalNoise(): number;
      getType(): number;
      hashCode(): number;
      load(arg0: java.io.DataInputStream): void;
      notify(): void;
      notifyAll(): void;
      save(arg0: java.io.DataOutputStream): void;
      setFrontType(arg0: number): void;
      setStrength(arg0: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.weather.ClimateManager$ClimateBool extends java.lang.Object
    export class ClimateManager$ClimateBool {
      private constructor();
      equals(arg0: any): boolean;
      getAdminValue(): boolean;
      getClass(): java.lang.Class<any>;
      getID(): number;
      getInternalValue(): boolean;
      getModdedValue(): boolean;
      getName(): string;
      getOverride(): boolean;
      hashCode(): number;
      init(arg0: number, arg1: string): zombie.iso.weather.ClimateManager$ClimateBool;
      isEnableAdmin(): boolean;
      isEnableOverride(): boolean;
      notify(): void;
      notifyAll(): void;
      setAdminValue(arg0: boolean): void;
      setEnableAdmin(arg0: boolean): void;
      setEnableModded(arg0: boolean): void;
      setEnableOverride(arg0: boolean): void;
      setFinalValue(arg0: boolean): void;
      setModdedValue(arg0: boolean): void;
      setOverride(arg0: boolean): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.weather.ClimateManager$ClimateColor extends java.lang.Object
    export class ClimateManager$ClimateColor {
      private constructor();
      equals(arg0: any): boolean;
      getAdminValue(): zombie.iso.weather.ClimateColorInfo;
      getClass(): java.lang.Class<any>;
      getFinalValue(): zombie.iso.weather.ClimateColorInfo;
      getID(): number;
      getInternalValue(): zombie.iso.weather.ClimateColorInfo;
      getModdedValue(): zombie.iso.weather.ClimateColorInfo;
      getName(): string;
      getOverride(): zombie.iso.weather.ClimateColorInfo;
      getOverrideInterpolate(): number;
      hashCode(): number;
      init(arg0: number, arg1: string): zombie.iso.weather.ClimateManager$ClimateColor;
      isEnableAdmin(): boolean;
      isEnableOverride(): boolean;
      notify(): void;
      notifyAll(): void;
      setAdminValue(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      setAdminValueExterior(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setAdminValueInterior(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setEnableAdmin(arg0: boolean): void;
      setEnableModded(arg0: boolean): void;
      setEnableOverride(arg0: boolean): void;
      setFinalValue(arg0: zombie.iso.weather.ClimateColorInfo): void;
      setModdedInterpolate(arg0: number): void;
      setModdedValue(arg0: zombie.iso.weather.ClimateColorInfo): void;
      setOverride(arg0: java.nio.ByteBuffer, arg1: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.weather.ClimateManager$ClimateFloat extends java.lang.Object
    export class ClimateManager$ClimateFloat {
      private constructor();
      equals(arg0: any): boolean;
      getAdminValue(): number;
      getClass(): java.lang.Class<any>;
      getFinalValue(): number;
      getID(): number;
      getInternalValue(): number;
      getMax(): number;
      getMin(): number;
      getModdedValue(): number;
      getName(): string;
      getOverride(): number;
      getOverrideInterpolate(): number;
      hashCode(): number;
      init(arg0: number, arg1: string): zombie.iso.weather.ClimateManager$ClimateFloat;
      isEnableAdmin(): boolean;
      isEnableOverride(): boolean;
      notify(): void;
      notifyAll(): void;
      setAdminValue(arg0: number): void;
      setEnableAdmin(arg0: boolean): void;
      setEnableModded(arg0: boolean): void;
      setEnableOverride(arg0: boolean): void;
      setFinalValue(arg0: number): void;
      setModdedInterpolate(arg0: number): void;
      setModdedValue(arg0: number): void;
      setOverride(arg0: number, arg1: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.iso.weather.ClimateManager$ClimateNetAuth */
    export class ClimateManager$ClimateNetAuth {
      /* ENUM VALUES */
      static readonly ClientAndServer: ClimateManager$ClimateNetAuth; 
      static readonly ClientOnly: ClimateManager$ClimateNetAuth; 
      static readonly Denied: ClimateManager$ClimateNetAuth; 
      static readonly ServerOnly: ClimateManager$ClimateNetAuth; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.iso.weather.ClimateManager$ClimateNetAuth[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): ClimateManager$ClimateNetAuth;
      valueOf(arg0: string): zombie.iso.weather.ClimateManager$ClimateNetAuth;
      values(): zombie.iso.weather.ClimateManager$ClimateNetAuth[];
    }
    // zombie.iso.weather.ClimateManager$DayInfo extends java.lang.Object
    export class ClimateManager$DayInfo {
      private constructor();
      calendar?: java.util.GregorianCalendar;
      dateValue: number;
      day: number;
      hour: number;
      minutes: number;
      month: number;
      season?: zombie.erosion.season.ErosionSeason;
      year: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDateValue(): number;
      getDay(): number;
      getHour(): number;
      getMinutes(): number;
      getMonth(): number;
      getSeason(): zombie.erosion.season.ErosionSeason;
      getYear(): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      set(arg0: number, arg1: number, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.weather.ClimateMoon extends java.lang.Object
    export class ClimateMoon {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getCurrentMoonPhase(): number;
      getInstance(): zombie.iso.weather.ClimateMoon;
      getMoonFloat(): number;
      getPhaseName(): string;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      updatePhase(arg0: number, arg1: number, arg2: number): void;
      wait(arg0: number): void;
    }
    // zombie.iso.weather.ClimateValues extends java.lang.Object
    export class ClimateValues {
      private constructor();
      CopyValues(arg0: zombie.iso.weather.ClimateValues): void;
      equals(arg0: any): boolean;
      getAirFrontAirmass(): number;
      getAirMassNoiseFrequencyMod(): number;
      getAirMassTemperature(): number;
      getAmbient(): number;
      getBaseTemperature(): number;
      getCacheDay(): number;
      getCacheMonth(): number;
      getCacheWorldAgeHours(): number;
      getCacheYear(): number;
      getClass(): java.lang.Class<any>;
      getCloudIntensity(): number;
      getCloudyT(): number;
      getCopy(): zombie.iso.weather.ClimateValues;
      getDawn(): number;
      getDayFogDuration(): number;
      getDayFogStrength(): number;
      getDayLightLagged(): number;
      getDayLightStrength(): number;
      getDayLightStrengthBase(): number;
      getDayMeanTemperature(): number;
      getDesaturation(): number;
      getDusk(): number;
      getHumidity(): number;
      getLerpNight(): number;
      getNightLagged(): number;
      getNightStrength(): number;
      getNoiseAirmass(): number;
      getNoon(): number;
      getTemperature(): number;
      getTime(): number;
      getWindAngleDegrees(): number;
      getWindAngleIntensity(): number;
      getWindIntensity(): number;
      hashCode(): number;
      isDayDoFog(): boolean;
      isTemperatureIsSnow(): boolean;
      notify(): void;
      notifyAll(): void;
      pollDate(arg0: number, arg1: number, arg2: number, arg3: number): void;
      print(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.weather.Temperature extends java.lang.Object
    export class Temperature {
      private constructor();
      static readonly BodyMaxTemp: number;
      static readonly BodyMinTemp: number;
      static CELSIUS_POSTFIX?: string;
      static DO_DAYLEN_MOD: boolean;
      static DO_DEFAULT_BASE: boolean;
      static FAHRENHEIT_POSTFIX?: string;
      static readonly FavorableNakedTemp: number;
      static readonly FavorableRoomTemp: number;
      static readonly Hyperthermia_1: number;
      static readonly Hyperthermia_2: number;
      static readonly Hyperthermia_3: number;
      static readonly Hyperthermia_4: number;
      static readonly Hypothermia_1: number;
      static readonly Hypothermia_2: number;
      static readonly Hypothermia_3: number;
      static readonly Hypothermia_4: number;
      static readonly TrueInsulationMultiplier: number;
      static readonly TrueWindresistMultiplier: number;
      static readonly coreCelciusMax: number;
      static readonly coreCelciusMin: number;
      static readonly homeostasisDefault: number;
      static readonly neutralZone: number;
      static readonly skinCelciusFavorable: number;
      static readonly skinCelciusMax: number;
      static readonly skinCelciusMin: number;
  
      CelsiusToFahrenheit(arg0: number): number;
      FahrenheitToCelsius(arg0: number): number;
      WindchillCelsiusKph(arg0: number, arg1: number): number;
      equals(arg0: any): boolean;
      getCelsiusPostfix(): string;
      getClass(): java.lang.Class<any>;
      getFahrenheitPostfix(): string;
      getFractionForRealTimeRatePerMin(arg0: number): number;
      getTemperaturePostfix(): string;
      getTemperatureString(arg0: number): string;
      getTrueInsulationValue(arg0: number): number;
      getTrueWindresistanceValue(arg0: number): number;
      getValueColor(arg0: number): zombie.core.Color;
      getWindChillAmountForPlayer(arg0: zombie.characters.IsoPlayer): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      reset(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.weather.ThunderStorm extends java.lang.Object
    export class ThunderStorm {
      private constructor();
      static MAP_MAX_X: number;
      static MAP_MAX_Y: number;
      static MAP_MIN_X: number;
      static MAP_MIN_Y: number;
  
      HasActiveThunderClouds(): boolean;
      applyLightningForPlayer(arg0: zombie.core.opengl.RenderSettings$PlayerRenderSettings, arg1: number, arg2: zombie.characters.IsoPlayer): void;
      enqueueThunderEvent(arg0: number, arg1: number, arg2: boolean, arg3: boolean, arg4: boolean): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getClouds(): java.util.ArrayList<zombie.iso.weather.ThunderStorm$ThunderCloud>;
      getMapDiagonal(): number;
      hashCode(): number;
      isModifyingNight(): boolean;
      load(arg0: java.io.DataInputStream): void;
      noise(arg0: string): void;
      notify(): void;
      notifyAll(): void;
      readNetThunderEvent(arg0: java.nio.ByteBuffer): void;
      save(arg0: java.io.DataOutputStream): void;
      startThunderCloud(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number): zombie.iso.weather.ThunderStorm$ThunderCloud;
      stopAllClouds(): void;
      stopCloud(arg0: number): void;
      toString(): string;
      triggerThunderEvent(arg0: number, arg1: number, arg2: boolean, arg3: boolean, arg4: boolean): void;
      update(arg0: number): void;
      wait(arg0: number): void;
      writeNetThunderEvent(arg0: java.nio.ByteBuffer): void;
    }
    // zombie.iso.weather.ThunderStorm$ThunderCloud extends java.lang.Object
    export class ThunderStorm$ThunderCloud {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getCurrentX(): number;
      getCurrentY(): number;
      getRadius(): number;
      getStrength(): number;
      hashCode(): number;
      isRunning(): boolean;
      lifeTime(): number;
      notify(): void;
      notifyAll(): void;
      setCenter(arg0: number, arg1: number, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.weather.WeatherPeriod extends java.lang.Object
    export class WeatherPeriod {
      private constructor();
      static readonly FRONT_STRENGTH_THRESHOLD: number;
      static readonly STAGE_BLIZZARD: number;
      static readonly STAGE_CLEARING: number;
      static readonly STAGE_DRIZZLE: number;
      static readonly STAGE_HEAVY_PRECIP: number;
      static readonly STAGE_INTERMEZZO: number;
      static readonly STAGE_KATEBOB_STORM: number;
      static readonly STAGE_MAX: number;
      static readonly STAGE_MODDED: number;
      static readonly STAGE_MODERATE: number;
      static readonly STAGE_SHOWERS: number;
      static readonly STAGE_START: number;
      static readonly STAGE_STORM: number;
      static readonly STAGE_TROPICAL_STORM: number;
  
      createAndAddModdedStage(arg0: string, arg1: number): zombie.iso.weather.WeatherPeriod$WeatherStage;
      createAndAddStage(arg0: number, arg1: number): zombie.iso.weather.WeatherPeriod$WeatherStage;
      endCreateModdedPeriod(): boolean;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getCloudColor(): zombie.iso.weather.ClimateColorInfo;
      getCloudColorBlizzard(): zombie.iso.weather.ClimateColorInfo;
      getCloudColorBlueish(): zombie.iso.weather.ClimateColorInfo;
      getCloudColorGreenish(): zombie.iso.weather.ClimateColorInfo;
      getCloudColorPurplish(): zombie.iso.weather.ClimateColorInfo;
      getCloudColorReddish(): zombie.iso.weather.ClimateColorInfo;
      getCloudColorTropical(): zombie.iso.weather.ClimateColorInfo;
      getCurrentStage(): zombie.iso.weather.WeatherPeriod$WeatherStage;
      getCurrentStageID(): number;
      getCurrentStrength(): number;
      getDuration(): number;
      getFrontCache(): zombie.iso.weather.ClimateManager$AirFront;
      getFrontType(): number;
      getMaxTemperatureInfluence(): number;
      getPrecipitationFinal(): number;
      getPrintStuff(): boolean;
      getRainThreshold(): number;
      getStageForWorldAge(arg0: number): zombie.iso.weather.WeatherPeriod$WeatherStage;
      getStageProgress(): number;
      getTotalProgress(): number;
      getTotalStrength(): number;
      getWeatherNoise(): number;
      getWeatherStages(): java.util.ArrayList<zombie.iso.weather.WeatherPeriod$WeatherStage>;
      getWindAngleDegrees(): number;
      hasBlizzard(): boolean;
      hasHeavyRain(): boolean;
      hasStorm(): boolean;
      hasTropical(): boolean;
      hashCode(): number;
      initSimulationDebug(arg0: zombie.iso.weather.ClimateManager$AirFront, arg1: number): void;
      isBlizzard(): boolean;
      isRunning(): boolean;
      isThunderStorm(): boolean;
      isTropicalStorm(): boolean;
      load(arg0: java.io.DataInputStream, arg1: number): void;
      notify(): void;
      notifyAll(): void;
      readNetWeatherData(arg0: java.nio.ByteBuffer): void;
      save(arg0: java.io.DataOutputStream): void;
      setCloudColor(arg0: zombie.iso.weather.ClimateColorInfo): void;
      setDummy(arg0: boolean): void;
      setKateBobStormCoords(arg0: number, arg1: number): void;
      setKateBobStormProgress(arg0: number): void;
      setPrintStuff(arg0: boolean): void;
      startCreateModdedPeriod(arg0: boolean, arg1: number, arg2: number): boolean;
      stopWeatherPeriod(): void;
      toString(): string;
      update(arg0: number): void;
      wait(arg0: number): void;
      writeNetWeatherData(arg0: java.nio.ByteBuffer): void;
    }
    /** [ENUM] zombie.iso.weather.WeatherPeriod$StrLerpVal */
    export class WeatherPeriod$StrLerpVal {
      /* ENUM VALUES */
      static readonly Entry: WeatherPeriod$StrLerpVal; 
      static readonly NextTarget: WeatherPeriod$StrLerpVal; 
      static readonly None: WeatherPeriod$StrLerpVal; 
      static readonly Target: WeatherPeriod$StrLerpVal; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.iso.weather.WeatherPeriod$StrLerpVal[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): WeatherPeriod$StrLerpVal;
      fromValue(arg0: number): zombie.iso.weather.WeatherPeriod$StrLerpVal;
      getValue(): number;
      valueOf(arg0: string): zombie.iso.weather.WeatherPeriod$StrLerpVal;
      values(): zombie.iso.weather.WeatherPeriod$StrLerpVal[];
    }
    // zombie.iso.weather.WeatherPeriod$WeatherStage extends java.lang.Object
    export class WeatherPeriod$WeatherStage {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getHasStartedCloud(): boolean;
      getLinearT(): number;
      getModID(): string;
      getParabolicT(): number;
      getStageCurrentStrength(): number;
      getStageDuration(): number;
      getStageEnd(): number;
      getStageID(): number;
      getStageStart(): number;
      hashCode(): number;
      lerpEntryTo(arg0: number, arg1: number): void;
      load(arg0: java.io.DataInputStream, arg1: number): void;
      notify(): void;
      notifyAll(): void;
      save(arg0: java.io.DataOutputStream): void;
      setHasStartedCloud(arg0: boolean): void;
      setStageID(arg0: number): void;
      setTargetStrength(arg0: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.iso.weather.WorldFlares extends java.lang.Object
    export class WorldFlares {
      private constructor();
      static DEBUG_DRAW: boolean;
      static readonly ENABLED: boolean;
      static NEXT_ID: number;
  
      Clear(): void;
      applyFlaresForPlayer(arg0: zombie.core.opengl.RenderSettings$PlayerRenderSettings, arg1: number, arg2: zombie.characters.IsoPlayer): void;
      debugRender(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDebugDraw(): boolean;
      getFlare(arg0: number): zombie.iso.weather.WorldFlares$Flare;
      getFlareCount(): number;
      getFlareID(arg0: number): zombie.iso.weather.WorldFlares$Flare;
      hashCode(): number;
      launchFlare(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number): void;
      notify(): void;
      notifyAll(): void;
      setDebugDraw(arg0: boolean): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.iso.weather.WorldFlares$Flare extends java.lang.Object
    export class WorldFlares$Flare {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getColor(): zombie.iso.weather.ClimateColorInfo;
      getColorPlayer(arg0: number): zombie.iso.weather.ClimateColorInfo;
      getDistModPlayer(arg0: number): number;
      getId(): number;
      getIntensity(): number;
      getIntensityPlayer(arg0: number): number;
      getLerpPlayer(arg0: number): number;
      getLifeTime(): number;
      getMaxLifeTime(): number;
      getOutColorPlayer(arg0: number): zombie.iso.weather.ClimateColorInfo;
      getPercent(): number;
      getRange(): number;
      getWindSpeed(): number;
      getX(): number;
      getY(): number;
      hashCode(): number;
      isHasLaunched(): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.iso.weather.fog {
    // zombie.iso.weather.fog.ImprovedFog extends java.lang.Object
    export class ImprovedFog {
      private constructor();
      DrawSubTextureRGBA(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number, arg12: number): void;
      endRender(): void;
      equals(arg0: any): boolean;
      getAlphaCircleAlpha(): number;
      getAlphaCircleRad(): number;
      getBaseAlpha(): number;
      getBottomAlphaHeight(): number;
      getClass(): java.lang.Class<any>;
      getColorB(): number;
      getColorG(): number;
      getColorR(): number;
      getMaxXOffset(): number;
      getMaxYOffset(): number;
      getMinXOffset(): number;
      getOctaves(): number;
      getRenderEveryXRow(): number;
      getRenderXRowsFromCenter(): number;
      getScalingX(): number;
      getScalingY(): number;
      getSecondLayerAlpha(): number;
      getTopAlphaHeight(): number;
      hashCode(): number;
      isDrawDebugColors(): boolean;
      isEnableEditing(): boolean;
      isHighQuality(): boolean;
      isRenderCurrentLayerOnly(): boolean;
      isRenderEndOnly(): boolean;
      isRenderOnlyOneRow(): boolean;
      notify(): void;
      notifyAll(): void;
      renderRowsBehind(arg0: zombie.iso.IsoGridSquare): void;
      setAlphaCircleAlpha(arg0: number): void;
      setAlphaCircleRad(arg0: number): void;
      setBaseAlpha(arg0: number): void;
      setBottomAlphaHeight(arg0: number): void;
      setColorB(arg0: number): void;
      setColorG(arg0: number): void;
      setColorR(arg0: number): void;
      setDrawDebugColors(arg0: boolean): void;
      setEnableEditing(arg0: boolean): void;
      setHighQuality(arg0: boolean): void;
      setMaxXOffset(arg0: number): void;
      setMaxYOffset(arg0: number): void;
      setMinXOffset(arg0: number): void;
      setOctaves(arg0: number): void;
      setRenderCurrentLayerOnly(arg0: boolean): void;
      setRenderEndOnly(arg0: boolean): void;
      setRenderEveryXRow(arg0: number): void;
      setRenderOnlyOneRow(arg0: boolean): void;
      setRenderXRowsFromCenter(arg0: number): void;
      setScalingX(arg0: number): void;
      setScalingY(arg0: number): void;
      setSecondLayerAlpha(arg0: number): void;
      setTopAlphaHeight(arg0: number): void;
      startRender(arg0: number, arg1: number): void;
      toString(): string;
      update(): void;
      updateKeys(): void;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.iso.weather.fx {
    // zombie.iso.weather.fx.IsoWeatherFX extends java.lang.Object
    export class IsoWeatherFX {
      private constructor();
      static ZoomMod: number;
  
      clamp(arg0: number, arg1: number, arg2: number): number;
      clerp(arg0: number, arg1: number, arg2: number): number;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getCloudIntensity(): number;
      getFogIntensity(): number;
      getPrecipitationIntensity(): number;
      getPrecipitationIsSnow(): boolean;
      getRenderWindAngleRain(): number;
      getWindAngleIntensity(): number;
      getWindIntensity(): number;
      getWindPrecipIntensity(): number;
      hasCloudsToRender(): boolean;
      hasFogToRender(): boolean;
      hasPrecipitationToRender(): boolean;
      hashCode(): number;
      init(): void;
      isDebugBounds(): boolean;
      lerp(arg0: number, arg1: number, arg2: number): number;
      notify(): void;
      notifyAll(): void;
      render(): void;
      renderClouds(): void;
      renderFog(): void;
      renderLayered(arg0: boolean, arg1: boolean, arg2: boolean): void;
      renderPrecipitation(): void;
      setCloudIntensity(arg0: number): void;
      setDebugBounds(arg0: boolean): void;
      setFogIntensity(arg0: number): void;
      setPrecipitationIntensity(arg0: number): void;
      setPrecipitationIsSnow(arg0: boolean): void;
      setWindAngleIntensity(arg0: number): void;
      setWindIntensity(arg0: number): void;
      setWindPrecipIntensity(arg0: number): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.modding {
    // zombie.modding.ActiveMods extends java.lang.Object
    export class ActiveMods {
      private constructor();
      Reset(): void;
      checkMissingMaps(): void;
      checkMissingMods(): void;
      clear(): void;
      copyFrom(arg0: zombie.modding.ActiveMods): void;
      equals(arg0: any): boolean;
      getById(arg0: string): zombie.modding.ActiveMods;
      getByIndex(arg0: number): zombie.modding.ActiveMods;
      getClass(): java.lang.Class<any>;
      getMapOrder(): java.util.ArrayList<string>;
      getMods(): java.util.ArrayList<string>;
      hashCode(): number;
      indexOf(arg0: string): number;
      isModActive(arg0: string): boolean;
      notify(): void;
      notifyAll(): void;
      removeMapOrder(arg0: string): void;
      removeMod(arg0: string): void;
      renderUI(): void;
      requiresResetLua(arg0: zombie.modding.ActiveMods): boolean;
      setLoadedMods(arg0: zombie.modding.ActiveMods): void;
      setModActive(arg0: string, arg1: boolean): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.network {
    // zombie.network.BodyDamageSync extends java.lang.Object
    export class BodyDamageSync {
      private constructor();
      static readonly BD_BodyDamage: number;
      static readonly BD_Health: number;
      static readonly BD_IsBleedingStemmed: number;
      static readonly BD_IsCortorised: number;
      static readonly BD_IsFakeInfected: number;
      static readonly BD_IsInfected: number;
      static readonly BD_additionalPain: number;
      static readonly BD_alcoholLevel: number;
      static readonly BD_alcoholicBandage: number;
      static readonly BD_bandageLife: number;
      static readonly BD_bandageType: number;
      static readonly BD_bandaged: number;
      static readonly BD_biteTime: number;
      static readonly BD_bitten: number;
      static readonly BD_bleeding: number;
      static readonly BD_bleedingTime: number;
      static readonly BD_burnTime: number;
      static readonly BD_comfreyFactor: number;
      static readonly BD_cut: number;
      static readonly BD_cutTime: number;
      static readonly BD_deepWoundTime: number;
      static readonly BD_deepWounded: number;
      static readonly BD_fractureTime: number;
      static readonly BD_garlicFactor: number;
      static readonly BD_getBandageXp: number;
      static readonly BD_getSplintXp: number;
      static readonly BD_getStitchXp: number;
      static readonly BD_haveBullet: number;
      static readonly BD_haveGlass: number;
      static readonly BD_infectedWound: number;
      static readonly BD_lastTimeBurnWash: number;
      static readonly BD_needBurnWash: number;
      static readonly BD_plantainFactor: number;
      static readonly BD_scratchTime: number;
      static readonly BD_scratched: number;
      static readonly BD_splint: number;
      static readonly BD_splintFactor: number;
      static readonly BD_splintItem: number;
      static readonly BD_stitchTime: number;
      static readonly BD_stitched: number;
      static readonly BD_woundInfectionLevel: number;
      static instance?: zombie.network.BodyDamageSync;
  
      clientPacket(arg0: java.nio.ByteBuffer): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      serverPacket(arg0: java.nio.ByteBuffer): void;
      startReceivingUpdates(arg0: number): void;
      startSendingUpdates(arg0: number, arg1: number): void;
      stopReceivingUpdates(arg0: number): void;
      stopSendingUpdates(arg0: number, arg1: number): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.network.BodyDamageSync$Updater extends java.lang.Object
    export class BodyDamageSync$Updater {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      updateField(arg0: number, arg1: boolean): void;
      wait(arg0: number): void;
    }
    // zombie.network.ClientChunkRequest extends java.lang.Object
    export class ClientChunkRequest {
      private constructor();
      chunks?: java.util.ArrayList<zombie.network.ClientChunkRequest$Chunk>;
      static readonly freeBuffers?: java.util.concurrent.ConcurrentLinkedQueue<java.nio.ByteBuffer>;
      largeArea: boolean;
  
      equals(arg0: any): boolean;
      getByteBuffer(arg0: zombie.network.ClientChunkRequest$Chunk): void;
      getChunk(): zombie.network.ClientChunkRequest$Chunk;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      releaseBuffer(arg0: zombie.network.ClientChunkRequest$Chunk): void;
      releaseBuffers(): void;
      releaseChunk(arg0: zombie.network.ClientChunkRequest$Chunk): void;
      toString(): string;
      unpack(arg0: java.nio.ByteBuffer, arg1: zombie.core.raknet.UdpConnection): void;
      unpackLargeArea(arg0: java.nio.ByteBuffer, arg1: zombie.core.raknet.UdpConnection): void;
      wait(arg0: number): void;
    }
    // zombie.network.ClientChunkRequest$Chunk extends java.lang.Object
    export class ClientChunkRequest$Chunk {
      private constructor();
      bb?: java.nio.ByteBuffer;
      crc: number;
      requestNumber: number;
      wx: number;
      wy: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.network.ClientServerMap extends java.lang.Object
    export class ClientServerMap {
      private constructor();
      Reset(): void;
      characterIn(arg0: zombie.core.raknet.UdpConnection, arg1: number): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getMaxX(): number;
      getMaxY(): number;
      getMinX(): number;
      getMinY(): number;
      hashCode(): number;
      isChunkLoaded(arg0: number, arg1: number): boolean;
      isValidCell(arg0: number, arg1: number): boolean;
      notify(): void;
      notifyAll(): void;
      receivePacket(arg0: java.nio.ByteBuffer): void;
      render(arg0: number): void;
      sendPacket(arg0: zombie.core.raknet.UdpConnection): void;
      setLoaded(): boolean;
      setPlayerPosition(arg0: number, arg1: number): boolean;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.network.DBResult extends java.lang.Object
    export class DBResult {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getColumns(): java.util.ArrayList<string>;
      getTableName(): string;
      getType(): string;
      getValues(): java.util.HashMap<string, string>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      setColumns(arg0: java.util.ArrayList<string>): void;
      setTableName(arg0: string): void;
      setType(arg0: string): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.network.DBTicket extends java.lang.Object
    export class DBTicket {
      private constructor();
      equals(arg0: any): boolean;
      getAnswer(): zombie.network.DBTicket;
      getAuthor(): string;
      getClass(): java.lang.Class<any>;
      getMessage(): string;
      getTicketID(): number;
      hashCode(): number;
      isAnswer(): boolean;
      isViewed(): boolean;
      notify(): void;
      notifyAll(): void;
      setAnswer(arg0: zombie.network.DBTicket): void;
      setAuthor(arg0: string): void;
      setIsAnswer(arg0: boolean): void;
      setMessage(arg0: string): void;
      setTicketID(arg0: number): void;
      setViewed(arg0: boolean): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // (Unknown)
    export type GameClient = any;
    // zombie.network.NetworkAIParams extends java.lang.Object
    export class NetworkAIParams {
      private constructor();
      static readonly CHARACTER_EXTRAPOLATION_UPDATE_INTERVAL_MS: number;
      static readonly CHARACTER_PREDICTION_INTERVAL_MS: number;
      static readonly CHARACTER_UPDATE_RATE_MS: number;
      static readonly VEHICLE_SPEED_CAP: number;
      static readonly ZOMBIE_ANTICIPATORY_UPDATE_MULTIPLIER: number;
      static readonly ZOMBIE_MAX_UPDATE_INTERVAL_MS: number;
      static readonly ZOMBIE_MIN_UPDATE_INTERVAL_MS: number;
      static readonly ZOMBIE_REMOVE_INTERVAL_MS: number;
      static readonly ZOMBIE_TELEPORT_DISTANCE_SQ: number;
      static readonly ZOMBIE_TELEPORT_PLAYER: number;
      static readonly ZOMBIE_UPDATE_INFO_BUNCH_RATE_MS: number;
  
      Init(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.network.NetworkVariables$PredictionTypes */
    export class NetworkVariables$PredictionTypes {
      /* ENUM VALUES */
      static readonly Climb: NetworkVariables$PredictionTypes; 
      static readonly Lunge: NetworkVariables$PredictionTypes; 
      static readonly LungeHalf: NetworkVariables$PredictionTypes; 
      static readonly Moving: NetworkVariables$PredictionTypes; 
      static readonly None: NetworkVariables$PredictionTypes; 
      static readonly PathFind: NetworkVariables$PredictionTypes; 
      static readonly Static: NetworkVariables$PredictionTypes; 
      static readonly Thump: NetworkVariables$PredictionTypes; 
      static readonly Walk: NetworkVariables$PredictionTypes; 
      static readonly WalkHalf: NetworkVariables$PredictionTypes; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.network.NetworkVariables$PredictionTypes[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): NetworkVariables$PredictionTypes;
      fromByte(arg0: number): zombie.network.NetworkVariables$PredictionTypes;
      valueOf(arg0: string): zombie.network.NetworkVariables$PredictionTypes;
      values(): zombie.network.NetworkVariables$PredictionTypes[];
    }
    /** [ENUM] zombie.network.NetworkVariables$WalkType */
    export class NetworkVariables$WalkType {
      /* ENUM VALUES */
      static readonly WT1: NetworkVariables$WalkType; 
      static readonly WT2: NetworkVariables$WalkType; 
      static readonly WT3: NetworkVariables$WalkType; 
      static readonly WT4: NetworkVariables$WalkType; 
      static readonly WT5: NetworkVariables$WalkType; 
      static readonly WTSlow1: NetworkVariables$WalkType; 
      static readonly WTSlow2: NetworkVariables$WalkType; 
      static readonly WTSlow3: NetworkVariables$WalkType; 
      static readonly WTSprint1: NetworkVariables$WalkType; 
      static readonly WTSprint2: NetworkVariables$WalkType; 
      static readonly WTSprint3: NetworkVariables$WalkType; 
      static readonly WTSprint4: NetworkVariables$WalkType; 
      static readonly WTSprint5: NetworkVariables$WalkType; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.network.NetworkVariables$WalkType[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): NetworkVariables$WalkType;
      fromByte(arg0: number): zombie.network.NetworkVariables$WalkType;
      fromString(arg0: string): zombie.network.NetworkVariables$WalkType;
      toString(): string;
      valueOf(arg0: string): zombie.network.NetworkVariables$WalkType;
      values(): zombie.network.NetworkVariables$WalkType[];
    }
    /** [ENUM] zombie.network.NetworkVariables$ZombieState */
    export class NetworkVariables$ZombieState {
      /* ENUM VALUES */
      static readonly Attack: NetworkVariables$ZombieState; 
      static readonly AttackNetwork: NetworkVariables$ZombieState; 
      static readonly AttackVehicle: NetworkVariables$ZombieState; 
      static readonly AttackVehicleNetwork: NetworkVariables$ZombieState; 
      static readonly Bumped: NetworkVariables$ZombieState; 
      static readonly ClimbFence: NetworkVariables$ZombieState; 
      static readonly ClimbWindow: NetworkVariables$ZombieState; 
      static readonly EatBody: NetworkVariables$ZombieState; 
      static readonly FaceTarget: NetworkVariables$ZombieState; 
      static readonly FakeDead: NetworkVariables$ZombieState; 
      static readonly FakeDeadAttack: NetworkVariables$ZombieState; 
      static readonly FakeDeadAttackNetwork: NetworkVariables$ZombieState; 
      static readonly FakeZombieAttack: NetworkVariables$ZombieState; 
      static readonly FakeZombieNormal: NetworkVariables$ZombieState; 
      static readonly FakeZombieStay: NetworkVariables$ZombieState; 
      static readonly FallDown: NetworkVariables$ZombieState; 
      static readonly Falling: NetworkVariables$ZombieState; 
      static readonly GetDown: NetworkVariables$ZombieState; 
      static readonly Getup: NetworkVariables$ZombieState; 
      static readonly HitReaction: NetworkVariables$ZombieState; 
      static readonly HitReactionHit: NetworkVariables$ZombieState; 
      static readonly HitWhileStaggered: NetworkVariables$ZombieState; 
      static readonly Idle: NetworkVariables$ZombieState; 
      static readonly Lunge: NetworkVariables$ZombieState; 
      static readonly LungeNetwork: NetworkVariables$ZombieState; 
      static readonly OnGround: NetworkVariables$ZombieState; 
      static readonly PathFind: NetworkVariables$ZombieState; 
      static readonly Sitting: NetworkVariables$ZombieState; 
      static readonly StaggerBack: NetworkVariables$ZombieState; 
      static readonly Thump: NetworkVariables$ZombieState; 
      static readonly TurnAlerted: NetworkVariables$ZombieState; 
      static readonly WalkToward: NetworkVariables$ZombieState; 
      static readonly WalkTowardNetwork: NetworkVariables$ZombieState; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.network.NetworkVariables$ZombieState[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): NetworkVariables$ZombieState;
      fromByte(arg0: number): zombie.network.NetworkVariables$ZombieState;
      fromString(arg0: string): zombie.network.NetworkVariables$ZombieState;
      toString(): string;
      valueOf(arg0: string): zombie.network.NetworkVariables$ZombieState;
      values(): zombie.network.NetworkVariables$ZombieState[];
    }
    // zombie.network.PlayerDownloadServer extends java.lang.Object
    export class PlayerDownloadServer {
      private constructor();
      port: number;
  
      destroy(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getWaitingRequests(): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      receiveCancelRequest(arg0: java.nio.ByteBuffer): void;
      receiveRequestArray(arg0: java.nio.ByteBuffer): void;
      receiveRequestLargeArea(arg0: java.nio.ByteBuffer): void;
      startConnectionTest(): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.network.ReplayManager extends java.lang.Object
    export class ReplayManager {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getState(): zombie.network.ReplayManager$State;
      hashCode(): number;
      isPlay(): boolean;
      notify(): void;
      notifyAll(): void;
      recordPlayerPacket(arg0: zombie.network.packets.PlayerPacket): void;
      startPlayReplay(arg0: zombie.characters.IsoPlayer, arg1: string, arg2: zombie.core.raknet.UdpConnection): boolean;
      startRecordReplay(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      stopPlayReplay(): boolean;
      stopRecordReplay(): boolean;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.network.ReplayManager$State */
    export class ReplayManager$State {
      /* ENUM VALUES */
      static readonly Playing: ReplayManager$State; 
      static readonly Recording: ReplayManager$State; 
      static readonly Stop: ReplayManager$State; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.network.ReplayManager$State[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): ReplayManager$State;
      valueOf(arg0: string): zombie.network.ReplayManager$State;
      values(): zombie.network.ReplayManager$State[];
    }
    // zombie.network.Server extends java.lang.Object
    export class Server {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDescription(): string;
      getIp(): string;
      getLastUpdate(): number;
      getLocalIP(): string;
      getMaxPlayers(): string;
      getMods(): string;
      getName(): string;
      getPing(): string;
      getPlayers(): string;
      getPort(): string;
      getPwd(): string;
      getServerPassword(): string;
      getSteamId(): string;
      getUserName(): string;
      getVersion(): string;
      hashCode(): number;
      isHosted(): boolean;
      isOpen(): boolean;
      isPasswordProtected(): boolean;
      isPublic(): boolean;
      notify(): void;
      notifyAll(): void;
      setDescription(arg0: string): void;
      setHosted(arg0: boolean): void;
      setIp(arg0: string): void;
      setLastUpdate(arg0: number): void;
      setLocalIP(arg0: string): void;
      setMaxPlayers(arg0: string): void;
      setMods(arg0: string): void;
      setName(arg0: string): void;
      setOpen(arg0: boolean): void;
      setPasswordProtected(arg0: boolean): void;
      setPing(arg0: string): void;
      setPlayers(arg0: string): void;
      setPort(arg0: string): void;
      setPublic(arg0: boolean): void;
      setPwd(arg0: string): void;
      setServerPassword(arg0: string): void;
      setSteamId(arg0: string): void;
      setUserName(arg0: string): void;
      setVersion(arg0: string): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // (Unknown)
    export type ServerOptions = any;
    // zombie.network.ServerOptions$BooleanServerOption extends zombie.config.BooleanConfigOption
    export class ServerOptions$BooleanServerOption {
      private constructor();
      asConfigOption(): zombie.config.ConfigOption;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDefaultValue(): boolean;
      getName(): string;
      getTooltip(): string;
      getType(): string;
      getValue(): boolean;
      getValueAsLuaString(): string;
      getValueAsObject(): any;
      getValueAsString(): string;
      hashCode(): number;
      isValidString(arg0: string): boolean;
      notify(): void;
      notifyAll(): void;
      parse(arg0: string): void;
      resetToDefault(): void;
      setDefaultToCurrentValue(): void;
      setValue(arg0: boolean): void;
      setValueFromObject(arg0: any): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.network.ServerOptions$DoubleServerOption extends zombie.config.DoubleConfigOption
    export class ServerOptions$DoubleServerOption {
      private constructor();
      asConfigOption(): zombie.config.ConfigOption;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDefaultValue(): number;
      getMax(): number;
      getMin(): number;
      getName(): string;
      getTooltip(): string;
      getType(): string;
      getValue(): number;
      getValueAsLuaString(): string;
      getValueAsObject(): any;
      getValueAsString(): string;
      hashCode(): number;
      isValidString(arg0: string): boolean;
      notify(): void;
      notifyAll(): void;
      parse(arg0: string): void;
      resetToDefault(): void;
      setDefaultToCurrentValue(): void;
      setValue(arg0: number): void;
      setValueFromObject(arg0: any): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.network.ServerOptions$IntegerServerOption extends zombie.config.IntegerConfigOption
    export class ServerOptions$IntegerServerOption {
      private constructor();
      asConfigOption(): zombie.config.ConfigOption;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDefaultValue(): number;
      getMax(): number;
      getMin(): number;
      getName(): string;
      getTooltip(): string;
      getType(): string;
      getValue(): number;
      getValueAsLuaString(): string;
      getValueAsObject(): any;
      getValueAsString(): string;
      hashCode(): number;
      isValidString(arg0: string): boolean;
      notify(): void;
      notifyAll(): void;
      parse(arg0: string): void;
      resetToDefault(): void;
      setDefaultToCurrentValue(): void;
      setValue(arg0: number): void;
      setValueFromObject(arg0: any): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.network.ServerOptions$ServerOption
    export class ServerOptions$ServerOption {
      private constructor();
      asConfigOption(): zombie.config.ConfigOption;
      getTooltip(): string;
    }
    // zombie.network.ServerOptions$StringServerOption extends zombie.config.StringConfigOption
    export class ServerOptions$StringServerOption {
      private constructor();
      asConfigOption(): zombie.config.ConfigOption;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDefaultValue(): string;
      getName(): string;
      getTooltip(): string;
      getType(): string;
      getValue(): string;
      getValueAsLuaString(): string;
      getValueAsObject(): any;
      getValueAsString(): string;
      hashCode(): number;
      isValidString(arg0: string): boolean;
      notify(): void;
      notifyAll(): void;
      parse(arg0: string): void;
      resetToDefault(): void;
      setDefaultToCurrentValue(): void;
      setValue(arg0: string): void;
      setValueFromObject(arg0: any): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.network.ServerOptions$TextServerOption extends zombie.config.StringConfigOption
    export class ServerOptions$TextServerOption {
      private constructor();
      asConfigOption(): zombie.config.ConfigOption;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDefaultValue(): string;
      getName(): string;
      getTooltip(): string;
      getType(): string;
      getValue(): string;
      getValueAsLuaString(): string;
      getValueAsObject(): any;
      getValueAsString(): string;
      hashCode(): number;
      isValidString(arg0: string): boolean;
      notify(): void;
      notifyAll(): void;
      parse(arg0: string): void;
      resetToDefault(): void;
      setDefaultToCurrentValue(): void;
      setValue(arg0: string): void;
      setValueFromObject(arg0: any): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.network.ServerSettings extends java.lang.Object
    export class ServerSettings {
      private constructor();
      addSpawnRegion(arg0: string, arg1: string): void;
      clearSpawnRegions(): void;
      deleteFiles(): boolean;
      duplicateFiles(arg0: string): boolean;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getErrorMsg(): string;
      getName(): string;
      getNumSpawnRegions(): number;
      getSandboxOptions(): zombie.SandboxOptions;
      getServerOptions(): zombie.network.ServerOptions;
      getSpawnRegionFile(arg0: number): string;
      getSpawnRegionName(arg0: number): string;
      hashCode(): number;
      isValid(): boolean;
      loadFiles(): boolean;
      loadSpawnPointsFile(arg0: string): se.krka.kahlua.vm.KahluaTable;
      notify(): void;
      notifyAll(): void;
      removeSpawnRegion(arg0: number): void;
      rename(arg0: string): boolean;
      resetToDefault(): void;
      saveFiles(): boolean;
      saveSpawnPointsFile(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): boolean;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.network.ServerSettingsManager extends java.lang.Object
    export class ServerSettingsManager {
      private constructor();
      static readonly instance?: zombie.network.ServerSettingsManager;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getNameInSettingsFolder(arg0: string): string;
      getSettingsByIndex(arg0: number): zombie.network.ServerSettings;
      getSettingsCount(): number;
      getSettingsFolder(): string;
      getSuffixes(): java.util.ArrayList<string>;
      hashCode(): number;
      isValidName(arg0: string): boolean;
      isValidNewName(arg0: string): boolean;
      notify(): void;
      notifyAll(): void;
      readAllSettings(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.network.Userlog extends java.lang.Object
    export class Userlog {
      private constructor();
      equals(arg0: any): boolean;
      getAmount(): number;
      getClass(): java.lang.Class<any>;
      getIssuedBy(): string;
      getText(): string;
      getType(): string;
      getUsername(): string;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      setAmount(arg0: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.network.Userlog$UserlogType */
    export class Userlog$UserlogType {
      /* ENUM VALUES */
      static readonly AdminLog: Userlog$UserlogType; 
      static readonly Banned: Userlog$UserlogType; 
      static readonly DupeItem: Userlog$UserlogType; 
      static readonly Kicked: Userlog$UserlogType; 
      static readonly LuaChecksum: Userlog$UserlogType; 
      static readonly UnauthorizedPacket: Userlog$UserlogType; 
      static readonly WarningPoint: Userlog$UserlogType; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.network.Userlog$UserlogType[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): Userlog$UserlogType;
      FromString(arg0: string): zombie.network.Userlog$UserlogType;
      fromIndex(arg0: number): zombie.network.Userlog$UserlogType;
      index(): number;
      valueOf(arg0: string): zombie.network.Userlog$UserlogType;
      values(): zombie.network.Userlog$UserlogType[];
    }
  }
  export namespace zombie.network.chat {
    /** [ENUM] zombie.network.chat.ChatType */
    export class ChatType {
      /* ENUM VALUES */
      static readonly admin: ChatType; 
      static readonly faction: ChatType; 
      static readonly general: ChatType; 
      static readonly notDefined: ChatType; 
      static readonly radio: ChatType; 
      static readonly safehouse: ChatType; 
      static readonly say: ChatType; 
      static readonly server: ChatType; 
      static readonly shout: ChatType; 
      static readonly whisper: ChatType; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.network.chat.ChatType[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): ChatType;
      getTitleID(): string;
      getValue(): number;
      valueOf(arg0: string): zombie.network.chat.ChatType;
      values(): zombie.network.chat.ChatType[];
    }
  }
  export namespace zombie.network.packets {
    // zombie.network.packets.DeadCharacterPacket extends java.lang.Object
    export class DeadCharacterPacket {
      private constructor();
      id: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDeathDescription(): string;
      getDescription(): string;
      getPacketSizeBytes(): number;
      hashCode(): number;
      isConsistent(): boolean;
      notify(): void;
      notifyAll(): void;
      parse(arg0: java.nio.ByteBuffer, arg1: zombie.core.raknet.UdpConnection): void;
      parseDeadBodyInventory(arg0: java.nio.ByteBuffer): void;
      process(): void;
      set(arg0: zombie.characters.IsoGameCharacter): void;
      toString(): string;
      wait(arg0: number): void;
      write(arg0: zombie.core.network.ByteBufferWriter): void;
      writeCharacterInventory(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    // zombie.network.packets.EventPacket extends java.lang.Object
    export class EventPacket {
      private constructor();
      static readonly MAX_PLAYER_EVENTS: number;
      x: number;
      y: number;
      z: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDescription(): string;
      getPacketSizeBytes(): number;
      hashCode(): number;
      isConsistent(): boolean;
      isMovableEvent(): boolean;
      isRelevant(arg0: zombie.core.raknet.UdpConnection): boolean;
      isTimeout(): boolean;
      notify(): void;
      notifyAll(): void;
      parse(arg0: java.nio.ByteBuffer, arg1: zombie.core.raknet.UdpConnection): void;
      process(arg0: zombie.characters.IsoPlayer): boolean;
      set(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      toString(): string;
      tryProcess(): void;
      wait(arg0: number): void;
      write(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    /** [ENUM] zombie.network.packets.EventPacket$EventType */
    export class EventPacket$EventType {
      /* ENUM VALUES */
      static readonly ChargeSpearConnect: EventPacket$EventType; 
      static readonly EventClimbDownRope: EventPacket$EventType; 
      static readonly EventClimbFence: EventPacket$EventType; 
      static readonly EventClimbRope: EventPacket$EventType; 
      static readonly EventClimbWall: EventPacket$EventType; 
      static readonly EventClimbWindow: EventPacket$EventType; 
      static readonly EventCloseWindow: EventPacket$EventType; 
      static readonly EventEmote: EventPacket$EventType; 
      static readonly EventFallClimb: EventPacket$EventType; 
      static readonly EventFishing: EventPacket$EventType; 
      static readonly EventFitness: EventPacket$EventType; 
      static readonly EventOpenWindow: EventPacket$EventType; 
      static readonly EventOverrideItem: EventPacket$EventType; 
      static readonly EventSetActivatedPrimary: EventPacket$EventType; 
      static readonly EventSetActivatedSecondary: EventPacket$EventType; 
      static readonly EventSitOnGround: EventPacket$EventType; 
      static readonly EventSmashWindow: EventPacket$EventType; 
      static readonly EventUpdateFitness: EventPacket$EventType; 
      static readonly Unknown: EventPacket$EventType; 
      static readonly Update: EventPacket$EventType; 
      static readonly collideWithWall: EventPacket$EventType; 
      static readonly wasBumped: EventPacket$EventType; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.network.packets.EventPacket$EventType[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): EventPacket$EventType;
      valueOf(arg0: string): zombie.network.packets.EventPacket$EventType;
      values(): zombie.network.packets.EventPacket$EventType[];
    }
    // zombie.network.packets.PlayerPacket extends java.lang.Object
    export class PlayerPacket {
      private constructor();
      static readonly PACKET_SIZE_BYTES: number;
      VehicleID: number;
      VehicleSeat: number;
      bleedingLevel: number;
      booleanVariables: number;
      collidePointX: number;
      collidePointY: number;
      direction: number;
      footstepSoundRadius: number;
      id: number;
      moveType?: zombie.network.NetworkVariables$PredictionTypes;
      realdir: number;
      realt: number;
      realx: number;
      realy: number;
      realz: number;
      usePathFinder: boolean;
      variables?: zombie.network.packets.PlayerVariables;
      x: number;
      y: number;
      z: number;
  
      copy(arg0: zombie.network.packets.PlayerPacket): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDescription(): string;
      getPacketSizeBytes(): number;
      hashCode(): number;
      isConsistent(): boolean;
      notify(): void;
      notifyAll(): void;
      parse(arg0: java.nio.ByteBuffer, arg1: zombie.core.raknet.UdpConnection): void;
      set(arg0: zombie.characters.IsoPlayer): boolean;
      toString(): string;
      wait(arg0: number): void;
      write(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    // zombie.network.packets.PlayerPacket$l_receive extends java.lang.Object
    export class PlayerPacket$l_receive {
      private constructor();
      static playerPacket?: zombie.network.packets.PlayerPacket;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.network.packets.PlayerPacket$l_send extends java.lang.Object
    export class PlayerPacket$l_send {
      private constructor();
      static playerPacket?: zombie.network.packets.PlayerPacket;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.network.packets.PlayerVariables extends java.lang.Object
    export class PlayerVariables {
      private constructor();
      apply(arg0: zombie.characters.IsoPlayer): void;
      copy(arg0: zombie.network.packets.PlayerVariables): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDescription(): string;
      getPacketSizeBytes(): number;
      hashCode(): number;
      isConsistent(): boolean;
      notify(): void;
      notifyAll(): void;
      parse(arg0: java.nio.ByteBuffer, arg1: zombie.core.raknet.UdpConnection): void;
      set(arg0: zombie.characters.IsoPlayer): void;
      toString(): string;
      wait(arg0: number): void;
      write(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    // zombie.network.packets.ZombiePacket extends java.lang.Object
    export class ZombiePacket {
      private constructor();
      booleanVariables: number;
      descriptorID: number;
      id: number;
      moveType?: zombie.network.NetworkVariables$PredictionTypes;
      pfbTarget: number;
      pfbTargetX: number;
      pfbTargetY: number;
      pfbTargetZ: number;
      pfbType: number;
      realHealth: number;
      realState?: zombie.network.NetworkVariables$ZombieState;
      realX: number;
      realY: number;
      realZ: number;
      smParamTargetAngle: number;
      speedMod: number;
      target: number;
      timeSinceSeenFlesh: number;
      walkType?: zombie.network.NetworkVariables$WalkType;
      x: number;
      y: number;
      z: number;
  
      copy(arg0: zombie.network.packets.ZombiePacket): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDescription(): string;
      getPacketSizeBytes(): number;
      hashCode(): number;
      isConsistent(): boolean;
      notify(): void;
      notifyAll(): void;
      parse(arg0: java.nio.ByteBuffer, arg1: zombie.core.raknet.UdpConnection): void;
      set(arg0: zombie.characters.IsoZombie): void;
      toString(): string;
      wait(arg0: number): void;
      write(arg0: java.nio.ByteBuffer): void;
    }
  }
  export namespace zombie.network.packets.hit {
    // zombie.network.packets.hit.AttackVars extends java.lang.Object
    export class AttackVars {
      private constructor();
      bAimAtFloor: boolean;
      bCloseKill: boolean;
      bDoShove: boolean;
      recoilDelay: number;
      targetOnGround?: zombie.network.packets.hit.MovingObject;
      readonly targetsProne?: java.util.ArrayList<zombie.network.packets.hit.HitInfo>;
      readonly targetsStanding?: java.util.ArrayList<zombie.network.packets.hit.HitInfo>;
      useChargeDelta: number;
  
      clear(): void;
      copy(arg0: zombie.network.packets.hit.AttackVars): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDescription(): string;
      getPacketSizeBytes(): number;
      getWeapon(arg0: zombie.characters.IsoLivingCharacter): zombie.inventory.types.HandWeapon;
      hashCode(): number;
      isConsistent(): boolean;
      notify(): void;
      notifyAll(): void;
      parse(arg0: java.nio.ByteBuffer, arg1: zombie.core.raknet.UdpConnection): void;
      setWeapon(arg0: zombie.inventory.types.HandWeapon): void;
      toString(): string;
      wait(arg0: number): void;
      write(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    // zombie.network.packets.hit.HitCharacterPacket extends java.lang.Object
    export class HitCharacterPacket {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDescription(): string;
      getHitDescription(): string;
      getPacketSizeBytes(): number;
      hashCode(): number;
      isConsistent(): boolean;
      isRelevant(arg0: zombie.core.raknet.UdpConnection): boolean;
      notify(): void;
      notifyAll(): void;
      parse(arg0: java.nio.ByteBuffer, arg1: zombie.core.raknet.UdpConnection): void;
      process(arg0: java.nio.ByteBuffer): zombie.network.packets.hit.HitCharacterPacket;
      toString(): string;
      tryProcess(): void;
      tryProcessInternal(): void;
      validate(arg0: zombie.core.raknet.UdpConnection): boolean;
      wait(arg0: number): void;
      write(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    /** [ENUM] zombie.network.packets.hit.HitCharacterPacket$HitType */
    export class HitCharacterPacket$HitType {
      /* ENUM VALUES */
      static readonly Max: HitCharacterPacket$HitType; 
      static readonly Min: HitCharacterPacket$HitType; 
      static readonly PlayerHitPlayer: HitCharacterPacket$HitType; 
      static readonly PlayerHitSquare: HitCharacterPacket$HitType; 
      static readonly PlayerHitVehicle: HitCharacterPacket$HitType; 
      static readonly PlayerHitZombie: HitCharacterPacket$HitType; 
      static readonly VehicleHitPlayer: HitCharacterPacket$HitType; 
      static readonly VehicleHitZombie: HitCharacterPacket$HitType; 
      static readonly ZombieHitPlayer: HitCharacterPacket$HitType; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.network.packets.hit.HitCharacterPacket$HitType[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): HitCharacterPacket$HitType;
      valueOf(arg0: string): zombie.network.packets.hit.HitCharacterPacket$HitType;
      values(): zombie.network.packets.hit.HitCharacterPacket$HitType[];
    }
    // zombie.network.packets.hit.HitInfo extends java.lang.Object
    export class HitInfo {
      private constructor();
      chance: number;
      distSq: number;
      dot: number;
      object?: zombie.network.packets.hit.MovingObject;
      window?: zombie.network.packets.hit.NetObject;
      x: number;
      y: number;
      z: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDescription(): string;
      getObject(): zombie.iso.IsoMovingObject;
      getPacketSizeBytes(): number;
      hashCode(): number;
      init(arg0: zombie.iso.IsoMovingObject, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): zombie.network.packets.hit.HitInfo;
      isConsistent(): boolean;
      notify(): void;
      notifyAll(): void;
      parse(arg0: java.nio.ByteBuffer, arg1: zombie.core.raknet.UdpConnection): void;
      toString(): string;
      wait(arg0: number): void;
      write(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    // zombie.network.packets.hit.MovingObject extends java.lang.Object
    export class MovingObject {
      private constructor();
      readonly objectTypeNone: number;
      readonly objectTypeObject: number;
      readonly objectTypePlayer: number;
      readonly objectTypeVehicle: number;
      readonly objectTypeZombie: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDescription(): string;
      getMovingObject(): zombie.iso.IsoMovingObject;
      getPacketSizeBytes(): number;
      hashCode(): number;
      isConsistent(): boolean;
      notify(): void;
      notifyAll(): void;
      parse(arg0: java.nio.ByteBuffer, arg1: zombie.core.raknet.UdpConnection): void;
      setMovingObject(arg0: zombie.iso.IsoMovingObject): void;
      toString(): string;
      wait(arg0: number): void;
      write(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    // zombie.network.packets.hit.NetObject extends java.lang.Object
    export class NetObject {
      private constructor();
      readonly objectTypeNone: number;
      readonly objectTypeObject: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDescription(): string;
      getObject(): zombie.iso.IsoObject;
      getPacketSizeBytes(): number;
      hashCode(): number;
      isConsistent(): boolean;
      notify(): void;
      notifyAll(): void;
      parse(arg0: java.nio.ByteBuffer, arg1: zombie.core.raknet.UdpConnection): void;
      setObject(arg0: zombie.iso.IsoObject): void;
      toString(): string;
      wait(arg0: number): void;
      write(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    // zombie.network.packets.hit.Vehicle extends zombie.network.packets.hit.Instance
    export class Vehicle {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDescription(): string;
      getPacketSizeBytes(): number;
      getX(): number;
      getY(): number;
      hashCode(): number;
      isConsistent(): boolean;
      notify(): void;
      notifyAll(): void;
      parse(arg0: java.nio.ByteBuffer, arg1: zombie.core.raknet.UdpConnection): void;
      set(arg0: number): void;
      toString(): string;
      wait(arg0: number): void;
      write(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    // zombie.network.packets.hit.VehicleHitPacket extends zombie.network.packets.hit.HitCharacterPacket
    export class VehicleHitPacket {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDescription(): string;
      getHitDescription(): string;
      getPacketSizeBytes(): number;
      hashCode(): number;
      isConsistent(): boolean;
      isRelevant(arg0: zombie.core.raknet.UdpConnection): boolean;
      notify(): void;
      notifyAll(): void;
      parse(arg0: java.nio.ByteBuffer, arg1: zombie.core.raknet.UdpConnection): void;
      process(arg0: java.nio.ByteBuffer): zombie.network.packets.hit.HitCharacterPacket;
      set(arg0: zombie.characters.IsoPlayer, arg1: zombie.vehicles.BaseVehicle, arg2: boolean): void;
      toString(): string;
      tryProcess(): void;
      tryProcessInternal(): void;
      validate(arg0: zombie.core.raknet.UdpConnection): boolean;
      wait(arg0: number): void;
      write(arg0: zombie.core.network.ByteBufferWriter): void;
    }
  }
  export namespace zombie.popman {
    // zombie.popman.ObjectPool extends java.lang.Object
    export class ObjectPool<T> {
      private constructor();
      alloc(): T;
      clear(): void;
      equals(arg0: any): boolean;
      forEach(arg0: java.util._function.Consumer<T>): void;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      release(arg0: java.util.List<T>): void;
      releaseAll(arg0: java.util.List<T>): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.popman.ObjectPool$Allocator
    export class ObjectPool$Allocator<T> {
      private constructor();
      allocate(): T;
    }
    // zombie.popman.ZombiePopulationManager extends java.lang.Object
    export class ZombiePopulationManager {
      private constructor();
      static bDebugLoggingEnabled: boolean;
      static readonly instance?: zombie.popman.ZombiePopulationManager;
      radarCount: number;
      radarRenderFlag: boolean;
      radarRequestFlag: boolean;
      radarXY?: number[];
  
      addChunkToWorld(arg0: zombie.iso.IsoChunk): void;
      addWorldSound(arg0: zombie.WorldSoundManager$WorldSound, arg1: boolean): void;
      beginSaveRealZombies(): void;
      createHordeFromTo(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      createHordeInAreaTo(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      dbgClearZombies(arg0: number, arg1: number): void;
      dbgSpawnNow(arg0: number, arg1: number): void;
      dbgSpawnTimeToZero(arg0: number, arg1: number): void;
      endSaveRealZombies(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      init(): void;
      notify(): void;
      notifyAll(): void;
      onConfigReloaded(): void;
      playerSpawnedAt(arg0: number, arg1: number, arg2: number): void;
      registerSpawnOrigin(arg0: number, arg1: number, arg2: number, arg3: number, arg4: se.krka.kahlua.vm.KahluaTable): void;
      removeChunkFromWorld(arg0: zombie.iso.IsoChunk): void;
      save(): void;
      setAggroTarget(arg0: number, arg1: number, arg2: number): void;
      shouldWait(): boolean;
      sitAgainstWall(arg0: zombie.characters.IsoZombie, arg1: zombie.iso.IsoGridSquare): void;
      stop(): void;
      toString(): string;
      updateLoadedAreas(): void;
      updateMain(): void;
      updateThread(): void;
      virtualizeZombie(arg0: zombie.characters.IsoZombie): void;
      wait(arg0: number): void;
    }
    // zombie.popman.ZombiePopulationRenderer extends java.lang.Object
    export class ZombiePopulationRenderer {
      private constructor();
      equals(arg0: any): boolean;
      getBoolean(arg0: string): boolean;
      getClass(): java.lang.Class<any>;
      getOptionByIndex(arg0: number): zombie.config.ConfigOption;
      getOptionByName(arg0: string): zombie.config.ConfigOption;
      getOptionCount(): number;
      hashCode(): number;
      load(): void;
      notify(): void;
      notifyAll(): void;
      outlineRect(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      render(arg0: zombie.ui.UIElement, arg1: number, arg2: number, arg3: number): void;
      renderCellInfo(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      renderCircle(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      renderLine(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      renderRect(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      renderString(arg0: number, arg1: number, arg2: string, arg3: number, arg4: number, arg5: number, arg6: number): void;
      renderVehicle(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
      renderZombie(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      save(): void;
      setBoolean(arg0: string, arg1: boolean): void;
      setWallFollowerEnd(arg0: number, arg1: number): void;
      setWallFollowerStart(arg0: number, arg1: number): void;
      toString(): string;
      uiToWorldX(arg0: number): number;
      uiToWorldY(arg0: number): number;
      wait(arg0: number): void;
      wallFollowerMouseMove(arg0: number, arg1: number): void;
      worldToScreenX(arg0: number): number;
      worldToScreenY(arg0: number): number;
    }
    // zombie.popman.ZombiePopulationRenderer$BooleanDebugOption extends zombie.config.BooleanConfigOption
    export class ZombiePopulationRenderer$BooleanDebugOption {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDefaultValue(): boolean;
      getName(): string;
      getTooltip(): string;
      getType(): string;
      getValue(): boolean;
      getValueAsLuaString(): string;
      getValueAsObject(): any;
      getValueAsString(): string;
      hashCode(): number;
      isValidString(arg0: string): boolean;
      notify(): void;
      notifyAll(): void;
      parse(arg0: string): void;
      resetToDefault(): void;
      setDefaultToCurrentValue(): void;
      setValue(arg0: boolean): void;
      setValueFromObject(arg0: any): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.radio {
    /** [ENUM] zombie.radio.ChannelCategory */
    export class ChannelCategory {
      /* ENUM VALUES */
      static readonly Amateur: ChannelCategory; 
      static readonly Bandit: ChannelCategory; 
      static readonly Emergency: ChannelCategory; 
      static readonly Military: ChannelCategory; 
      static readonly Other: ChannelCategory; 
      static readonly Radio: ChannelCategory; 
      static readonly Television: ChannelCategory; 
      static readonly Undefined: ChannelCategory; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.radio.ChannelCategory[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): ChannelCategory;
      valueOf(arg0: string): zombie.radio.ChannelCategory;
      values(): zombie.radio.ChannelCategory[];
    }
    /** [ENUM] zombie.radio.GameMode */
    export class GameMode {
      /* ENUM VALUES */
      static readonly Client: GameMode; 
      static readonly Server: GameMode; 
      static readonly SinglePlayer: GameMode; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.radio.GameMode[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): GameMode;
      valueOf(arg0: string): zombie.radio.GameMode;
      values(): zombie.radio.GameMode[];
    }
    // zombie.radio.RadioAPI extends java.lang.Object
    export class RadioAPI {
      private constructor();
      equals(arg0: any): boolean;
      getChannels(arg0: string): se.krka.kahlua.vm.KahluaTable;
      getClass(): java.lang.Class<any>;
      getInstance(): zombie.radio.RadioAPI;
      hasInstance(): boolean;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      timeStampToDays(arg0: number): number;
      timeStampToHours(arg0: number): number;
      timeStampToMinutes(arg0: number): number;
      timeToTimeStamp(arg0: number, arg1: number, arg2: number): number;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.radio.RadioData extends java.lang.Object
    export class RadioData {
      private constructor();
      equals(arg0: any): boolean;
      fetchAllRadioData(): java.util.ArrayList<zombie.radio.RadioData>;
      getClass(): java.lang.Class<any>;
      getRadioChannels(): java.util.ArrayList<zombie.radio.scripting.RadioChannel>;
      getTranslatorNames(arg0: zombie.core.Language): java.util.ArrayList<string>;
      hashCode(): number;
      isVanilla(): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.radio.ZomboidRadio extends java.lang.Object
    export class ZomboidRadio {
      private constructor();
      static DEBUG_MODE: boolean;
      static DEBUG_SOUND: boolean;
      static DEBUG_XML: boolean;
      static DISABLE_BROADCASTING: boolean;
      static LOUISVILLE_OBFUSCATION: boolean;
      static POST_RADIO_SILENCE: boolean;
      static readonly SAVE_FILE?: string;
  
      GetChannelList(arg0: string): java.util.Map<number, string>;
      Init(arg0: number): void;
      Load(): boolean;
      ObfuscateChannelCheck(arg0: zombie.radio.scripting.RadioChannel): void;
      PlayerListensChannel(arg0: number, arg1: boolean, arg2: boolean): void;
      ReceiveTransmission(arg0: number, arg1: number, arg2: number, arg3: string, arg4: string, arg5: number, arg6: number, arg7: number, arg8: number, arg9: boolean): void;
      RegisterDevice(arg0: zombie.radio.devices.WaveSignalDevice): void;
      Reset(): void;
      Save(): void;
      SendTransmission(arg0: number, arg1: number, arg2: number, arg3: number, arg4: string, arg5: string, arg6: number, arg7: number, arg8: number, arg9: number, arg10: boolean): void;
      UnRegisterDevice(arg0: zombie.radio.devices.WaveSignalDevice): void;
      UpdateScripts(arg0: number, arg1: number): void;
      WriteRadioServerDataPacket(arg0: zombie.core.network.ByteBufferWriter): void;
      addChannelName(arg0: string, arg1: number, arg2: string, arg3: boolean): void;
      clone(): any;
      computerize(arg0: string): string;
      equals(arg0: any): boolean;
      getBroadcastDevices(): java.util.ArrayList<zombie.radio.devices.WaveSignalDevice>;
      getChannelName(arg0: number): string;
      getClass(): java.lang.Class<any>;
      getDaysSinceStart(): number;
      getDevices(): java.util.ArrayList<zombie.radio.devices.WaveSignalDevice>;
      getDisableBroadcasting(): boolean;
      getDisableMediaLineLearning(): boolean;
      getFullChannelList(): java.util.Map<string, java.util.Map<number, string>>;
      getGameMode(): zombie.radio.GameMode;
      getInstance(): zombie.radio.ZomboidRadio;
      getRandomBzztFzzt(): string;
      getRandomFrequency(): number;
      getRecordedMedia(): zombie.radio.media.RecordedMedia;
      getScriptManager(): zombie.radio.scripting.RadioScriptManager;
      hasInstance(): boolean;
      hashCode(): number;
      isStaticSound(arg0: string): boolean;
      notify(): void;
      notifyAll(): void;
      receiveRequestData(arg0: java.nio.ByteBuffer): void;
      removeChannelName(arg0: number): void;
      render(): void;
      scrambleString(arg0: string, arg1: number, arg2: boolean, arg3: string): string;
      sendRequestData(arg0: zombie.core.network.ByteBufferWriter): void;
      setDisableBroadcasting(arg0: boolean): void;
      setDisableMediaLineLearning(arg0: boolean): void;
      setHasRecievedServerData(arg0: boolean): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.radio.StorySounds {
    // zombie.radio.StorySounds.DataPoint extends java.lang.Object
    export class DataPoint {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getIntensity(): number;
      getTime(): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      setIntensity(arg0: number): void;
      setTime(arg0: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.radio.StorySounds.EventSound extends java.lang.Object
    export class EventSound {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getColor(): zombie.core.Color;
      getDataPoints(): java.util.ArrayList<zombie.radio.StorySounds.DataPoint>;
      getName(): string;
      getStorySounds(): java.util.ArrayList<zombie.radio.StorySounds.StorySound>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      setColor(arg0: zombie.core.Color): void;
      setDataPoints(arg0: java.util.ArrayList<zombie.radio.StorySounds.DataPoint>): void;
      setName(arg0: string): void;
      setStorySounds(arg0: java.util.ArrayList<zombie.radio.StorySounds.StorySound>): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.radio.StorySounds.SLSoundManager extends java.lang.Object
    export class SLSoundManager {
      private constructor();
      static DEBUG: boolean;
      static ENABLED: boolean;
      static Emitter?: zombie.radio.StorySounds.StoryEmitter;
      static LUA_DEBUG: boolean;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDebug(): boolean;
      getInstance(): zombie.radio.StorySounds.SLSoundManager;
      getLuaDebug(): boolean;
      getRandomBorderPosition(): zombie.iso.Vector2;
      getRandomBorderRange(): number;
      getStorySounds(): java.util.ArrayList<zombie.radio.StorySounds.StorySound>;
      hashCode(): number;
      init(): void;
      loadSounds(): void;
      notify(): void;
      notifyAll(): void;
      print(arg0: string): void;
      render(): void;
      renderDebug(): void;
      thunderTest(): void;
      toString(): string;
      update(arg0: number, arg1: number, arg2: number): void;
      updateKeys(): void;
      wait(arg0: number): void;
    }
    // zombie.radio.StorySounds.StoryEmitter extends java.lang.Object
    export class StoryEmitter {
      private constructor();
      Instances?: java.util.ArrayList<zombie.radio.StorySounds.StoryEmitter$Sound>;
      SoundStack?: java.util.Stack<zombie.radio.StorySounds.StoryEmitter$Sound>;
      ToStart?: java.util.ArrayList<zombie.radio.StorySounds.StoryEmitter$Sound>;
      coordinate3D: boolean;
      max: number;
      volumeMod: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      playSound(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): number;
      stopSound(arg0: number): number;
      tick(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.radio.StorySounds.StoryEmitter$Sound extends java.lang.Object
    export class StoryEmitter$Sound {
      private constructor();
      channel: number;
      maxRange: number;
      minRange: number;
      sound: number;
      volume: number;
      x: number;
      y: number;
      z: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.radio.StorySounds.StorySound extends java.lang.Object
    export class StorySound {
      private constructor();
      equals(arg0: any): boolean;
      getBaseVolume(): number;
      getClass(): java.lang.Class<any>;
      getClone(): zombie.radio.StorySounds.StorySound;
      getName(): string;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      playSound(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): number;
      setBaseVolume(arg0: number): void;
      setName(arg0: string): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.radio.StorySounds.StorySoundEvent extends java.lang.Object
    export class StorySoundEvent {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getEventSounds(): java.util.ArrayList<zombie.radio.StorySounds.EventSound>;
      getName(): string;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      setEventSounds(arg0: java.util.ArrayList<zombie.radio.StorySounds.EventSound>): void;
      setName(arg0: string): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.radio.devices {
    // zombie.radio.devices.DeviceData extends java.lang.Object
    export class DeviceData {
      private constructor();
      StartPlayMedia(): void;
      StopPlayMedia(): void;
      TriggerPlayerListening(arg0: boolean): void;
      addBattery(arg0: zombie.inventory.types.DrainableComboItem): void;
      addHeadphones(arg0: zombie.inventory.InventoryItem): void;
      addMediaItem(arg0: zombie.inventory.InventoryItem): void;
      canBePoweredHere(): boolean;
      cleanSoundsAndEmitter(): void;
      doReceiveMPSignal(arg0: number): void;
      doReceiveSignal(arg0: number): void;
      equals(arg0: any): boolean;
      generatePresets(): void;
      getBaseVolumeRange(): number;
      getBattery(arg0: zombie.inventory.ItemContainer): zombie.inventory.InventoryItem;
      getChannel(): number;
      getClass(): java.lang.Class<any>;
      getClone(): zombie.radio.devices.DeviceData;
      getDeviceName(): string;
      getDevicePresets(): zombie.radio.devices.DevicePresets;
      getDeviceSoundVolumeRange(): number;
      getDeviceVolume(): number;
      getDeviceVolumeRange(): number;
      getEmitter(): zombie.audio.BaseSoundEmitter;
      getHasBattery(): boolean;
      getHeadphoneType(): number;
      getHeadphones(arg0: zombie.inventory.ItemContainer): zombie.inventory.InventoryItem;
      getIsBatteryPowered(): boolean;
      getIsHighTier(): boolean;
      getIsPortable(): boolean;
      getIsTelevision(): boolean;
      getIsTurnedOn(): boolean;
      getIsTwoWay(): boolean;
      getLastRecordedDistance(): number;
      getMaxChannelRange(): number;
      getMediaData(): zombie.radio.media.MediaData;
      getMediaIndex(): number;
      getMediaType(): number;
      getMicIsMuted(): boolean;
      getMicRange(): number;
      getMinChannelRange(): number;
      getParent(): zombie.radio.devices.WaveSignalDevice;
      getPower(): number;
      getTransmitRange(): number;
      getUseDelta(): number;
      hasMedia(): boolean;
      hashCode(): number;
      isInventoryDevice(): boolean;
      isIsoDevice(): boolean;
      isNoTransmit(): boolean;
      isPlayingMedia(): boolean;
      isReceivingSignal(): boolean;
      isVehicleDevice(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number, arg2: boolean): void;
      notify(): void;
      notifyAll(): void;
      playSound(arg0: string, arg1: number, arg2: boolean): void;
      playSoundLocal(arg0: string, arg1: boolean): void;
      playSoundSend(arg0: string, arg1: boolean): void;
      receiveDeviceDataStatePacket(arg0: java.nio.ByteBuffer, arg1: zombie.core.raknet.UdpConnection): void;
      removeMediaItem(arg0: zombie.inventory.ItemContainer): zombie.inventory.InventoryItem;
      save(arg0: java.nio.ByteBuffer, arg1: boolean): void;
      setBaseVolumeRange(arg0: number): void;
      setChannel(arg0: number, arg1: boolean): void;
      setChannelRaw(arg0: number): void;
      setDeviceName(arg0: string): void;
      setDevicePresets(arg0: zombie.radio.devices.DevicePresets): void;
      setDeviceVolume(arg0: number): void;
      setDeviceVolumeRaw(arg0: number): void;
      setHasBattery(arg0: boolean): void;
      setHeadphoneType(arg0: number): void;
      setIsBatteryPowered(arg0: boolean): void;
      setIsHighTier(arg0: boolean): void;
      setIsPortable(arg0: boolean): void;
      setIsTelevision(arg0: boolean): void;
      setIsTurnedOn(arg0: boolean): void;
      setIsTwoWay(arg0: boolean): void;
      setMaxChannelRange(arg0: number): void;
      setMediaIndex(arg0: number): void;
      setMediaType(arg0: number): void;
      setMicIsMuted(arg0: boolean): void;
      setMicRange(arg0: number): void;
      setMinChannelRange(arg0: number): void;
      setNoTransmit(arg0: boolean): void;
      setParent(arg0: zombie.radio.devices.WaveSignalDevice): void;
      setPower(arg0: number): void;
      setRandomChannel(): void;
      setTransmitRange(arg0: number): void;
      setTurnedOnRaw(arg0: boolean): void;
      setUseDelta(arg0: number): void;
      toString(): string;
      transmitBattryChange(): void;
      transmitPresets(): void;
      update(arg0: boolean, arg1: boolean): void;
      updateMediaPlaying(): void;
      updateSimple(): void;
      wait(arg0: number): void;
    }
    // zombie.radio.devices.DevicePresets extends java.lang.Object
    export class DevicePresets {
      private constructor();
      addPreset(arg0: string, arg1: number): void;
      clearPresets(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getMaxPresets(): number;
      getPresetFreq(arg0: number): number;
      getPresetName(arg0: number): string;
      getPresets(): java.util.ArrayList<zombie.radio.devices.PresetEntry>;
      getPresetsLua(): se.krka.kahlua.vm.KahluaTable;
      hashCode(): number;
      load(arg0: java.nio.ByteBuffer, arg1: number, arg2: boolean): void;
      notify(): void;
      notifyAll(): void;
      removePreset(arg0: number): void;
      save(arg0: java.nio.ByteBuffer, arg1: boolean): void;
      setMaxPresets(arg0: number): void;
      setPreset(arg0: number, arg1: string, arg2: number): void;
      setPresetFreq(arg0: number, arg1: number): void;
      setPresetName(arg0: number, arg1: string): void;
      setPresets(arg0: java.util.ArrayList<zombie.radio.devices.PresetEntry>): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.radio.devices.PresetEntry extends java.lang.Object
    export class PresetEntry {
      private constructor();
      frequency: number;
      name?: string;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getFrequency(): number;
      getName(): string;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      setFrequency(arg0: number): void;
      setName(arg0: string): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.radio.devices.WaveSignalDevice
    export class WaveSignalDevice {
      private constructor();
      AddDeviceText(arg0: string, arg1: number, arg2: number, arg3: number, arg4: string, arg5: number): void;
      HasPlayerInRange(): boolean;
      getDelta(): number;
      getDeviceData(): zombie.radio.devices.DeviceData;
      getSquare(): zombie.iso.IsoGridSquare;
      getX(): number;
      getY(): number;
      getZ(): number;
      setDelta(arg0: number): void;
      setDeviceData(arg0: zombie.radio.devices.DeviceData): void;
    }
  }
  export namespace zombie.radio.media {
    // zombie.radio.media.MediaData extends java.lang.Object
    export class MediaData {
      private constructor();
      addLine(arg0: string, arg1: number, arg2: number, arg3: number, arg4: string): void;
      equals(arg0: any): boolean;
      getAuthorEN(): string;
      getCategory(): string;
      getClass(): java.lang.Class<any>;
      getExtraEN(): string;
      getId(): string;
      getIndex(): number;
      getLine(arg0: number): zombie.radio.media.MediaData$MediaLineData;
      getLineCount(): number;
      getMediaType(): number;
      getSpawning(): number;
      getSubtitleEN(): string;
      getTitleEN(): string;
      getTranslatedAuthor(): string;
      getTranslatedExtra(): string;
      getTranslatedItemDisplayName(): string;
      getTranslatedSubTitle(): string;
      getTranslatedTitle(): string;
      hasAuthor(): boolean;
      hasExtra(): boolean;
      hasSubTitle(): boolean;
      hasTitle(): boolean;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      setAuthor(arg0: string): void;
      setExtra(arg0: string): void;
      setSubtitle(arg0: string): void;
      setTitle(arg0: string): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.radio.media.MediaData$MediaLineData extends java.lang.Object
    export class MediaData$MediaLineData {
      private constructor();
      equals(arg0: any): boolean;
      getB(): number;
      getClass(): java.lang.Class<any>;
      getCodes(): string;
      getColor(): zombie.core.Color;
      getG(): number;
      getR(): number;
      getTextGuid(): string;
      getTranslatedText(): string;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.radio.media.RecordedMedia extends java.lang.Object
    export class RecordedMedia {
      private constructor();
      static DISABLE_LINE_LEARNING: boolean;
      static readonly SAVE_FILE?: string;
      static readonly VERSION: number;
  
      equals(arg0: any): boolean;
      getAllMediaForCategory(arg0: string): java.util.ArrayList<zombie.radio.media.MediaData>;
      getAllMediaForType(arg0: number): java.util.ArrayList<zombie.radio.media.MediaData>;
      getCategories(): java.util.ArrayList<string>;
      getClass(): java.lang.Class<any>;
      getIndexForMediaData(arg0: zombie.radio.media.MediaData): number;
      getMediaData(arg0: string): zombie.radio.media.MediaData;
      getMediaDataFromIndex(arg0: number): zombie.radio.media.MediaData;
      getMediaTypeForCategory(arg0: string): number;
      getRandomFromCategory(arg0: string): zombie.radio.media.MediaData;
      hasListenedLineAndAdd(arg0: string): boolean;
      hasListenedToAll(arg0: zombie.characters.IsoPlayer, arg1: zombie.radio.media.MediaData): boolean;
      hasListenedToLine(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      hashCode(): number;
      init(): void;
      load(): void;
      notify(): void;
      notifyAll(): void;
      receiveRequestData(arg0: java.nio.ByteBuffer): void;
      register(arg0: string, arg1: string, arg2: string, arg3: number): zombie.radio.media.MediaData;
      save(): void;
      sendRequestData(arg0: zombie.core.network.ByteBufferWriter): void;
      toAscii(arg0: string): string;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.radio.media.RecordedMedia$MediaNameSorter extends java.lang.Object
    export class RecordedMedia$MediaNameSorter {
      private constructor();
      compare(arg0: any, arg1: any): number;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      reversed(): java.util.Comparator<any>;
      thenComparing<U>(arg0: java.util._function.Function<any, U>): java.util.Comparator<any>;
      thenComparingDouble(arg0: java.util._function.ToDoubleFunction<any>): java.util.Comparator<any>;
      thenComparingInt(arg0: java.util._function.ToIntFunction<any>): java.util.Comparator<any>;
      thenComparingLong(arg0: java.util._function.ToLongFunction<any>): java.util.Comparator<any>;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.radio.scripting {
    // zombie.radio.scripting.DynamicRadioChannel extends zombie.radio.scripting.RadioChannel
    export class DynamicRadioChannel {
      private constructor();
      AddRadioScript(arg0: zombie.radio.scripting.RadioScript): void;
      GetCategory(): zombie.radio.ChannelCategory;
      GetFrequency(): number;
      GetName(): string;
      GetPlayerIsListening(): boolean;
      IsTv(): boolean;
      LoadAiringBroadcast(arg0: string, arg1: number): void;
      SetPlayerIsListening(arg0: boolean): void;
      UpdateScripts(arg0: number, arg1: number): void;
      equals(arg0: any): boolean;
      getAirCounterMultiplier(): number;
      getAiringBroadcast(): zombie.radio.scripting.RadioBroadCast;
      getClass(): java.lang.Class<any>;
      getCurrentScript(): zombie.radio.scripting.RadioScript;
      getCurrentScriptLoop(): number;
      getCurrentScriptMaxLoops(): number;
      getGUID(): string;
      getLastAiredLine(): string;
      getLastBroadcastID(): string;
      getRadioData(): zombie.radio.RadioData;
      getRadioScript(arg0: string): zombie.radio.scripting.RadioScript;
      hashCode(): number;
      isTimeSynced(): boolean;
      isVanilla(): boolean;
      notify(): void;
      notifyAll(): void;
      setActiveScript(arg0: string, arg1: number, arg2: number, arg3: number): void;
      setActiveScriptNull(): void;
      setAirCounterMultiplier(arg0: number): void;
      setAiringBroadcast(arg0: zombie.radio.scripting.RadioBroadCast): void;
      setLouisvilleObfuscate(arg0: boolean): void;
      setRadioData(arg0: zombie.radio.RadioData): void;
      setTimeSynced(arg0: boolean): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.radio.scripting.RadioBroadCast extends java.lang.Object
    export class RadioBroadCast {
      private constructor();
      AddRadioLine(arg0: zombie.radio.scripting.RadioLine): void;
      PeekNextLineText(): string;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getCurrentLine(): zombie.radio.scripting.RadioLine;
      getCurrentLineNumber(): number;
      getEndStamp(): number;
      getID(): string;
      getLines(): java.util.ArrayList<zombie.radio.scripting.RadioLine>;
      getNextLine(arg0: boolean): zombie.radio.scripting.RadioLine;
      getStartStamp(): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      resetLineCounter(): void;
      setCurrentLineNumber(arg0: number): void;
      setPostSegment(arg0: zombie.radio.scripting.RadioBroadCast): void;
      setPreSegment(arg0: zombie.radio.scripting.RadioBroadCast): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.radio.scripting.RadioChannel extends java.lang.Object
    export class RadioChannel {
      private constructor();
      AddRadioScript(arg0: zombie.radio.scripting.RadioScript): void;
      GetCategory(): zombie.radio.ChannelCategory;
      GetFrequency(): number;
      GetName(): string;
      GetPlayerIsListening(): boolean;
      IsTv(): boolean;
      LoadAiringBroadcast(arg0: string, arg1: number): void;
      SetPlayerIsListening(arg0: boolean): void;
      UpdateScripts(arg0: number, arg1: number): void;
      equals(arg0: any): boolean;
      getAirCounterMultiplier(): number;
      getAiringBroadcast(): zombie.radio.scripting.RadioBroadCast;
      getClass(): java.lang.Class<any>;
      getCurrentScript(): zombie.radio.scripting.RadioScript;
      getCurrentScriptLoop(): number;
      getCurrentScriptMaxLoops(): number;
      getGUID(): string;
      getLastAiredLine(): string;
      getLastBroadcastID(): string;
      getRadioData(): zombie.radio.RadioData;
      getRadioScript(arg0: string): zombie.radio.scripting.RadioScript;
      hashCode(): number;
      isTimeSynced(): boolean;
      isVanilla(): boolean;
      notify(): void;
      notifyAll(): void;
      setActiveScript(arg0: string, arg1: number, arg2: number, arg3: number): void;
      setActiveScriptNull(): void;
      setAirCounterMultiplier(arg0: number): void;
      setAiringBroadcast(arg0: zombie.radio.scripting.RadioBroadCast): void;
      setLouisvilleObfuscate(arg0: boolean): void;
      setRadioData(arg0: zombie.radio.RadioData): void;
      setTimeSynced(arg0: boolean): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.radio.scripting.RadioLine extends java.lang.Object
    export class RadioLine {
      private constructor();
      equals(arg0: any): boolean;
      getAirTime(): number;
      getB(): number;
      getClass(): java.lang.Class<any>;
      getEffectsString(): string;
      getG(): number;
      getR(): number;
      getText(): string;
      hashCode(): number;
      isCustomAirTime(): boolean;
      notify(): void;
      notifyAll(): void;
      setAirTime(arg0: number): void;
      setText(arg0: string): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.radio.scripting.RadioScript extends java.lang.Object
    export class RadioScript {
      private constructor();
      AddBroadcast(arg0: zombie.radio.scripting.RadioBroadCast, arg1: boolean): void;
      AddExitOption(arg0: string, arg1: number, arg2: number): void;
      GetGUID(): string;
      GetName(): string;
      Reset(): void;
      UpdateScript(arg0: number): boolean;
      clearExitOptions(): void;
      equals(arg0: any): boolean;
      getBroadcastList(): java.util.ArrayList<zombie.radio.scripting.RadioBroadCast>;
      getBroadcastWithID(arg0: string): zombie.radio.scripting.RadioBroadCast;
      getClass(): java.lang.Class<any>;
      getCurrentBroadcast(): zombie.radio.scripting.RadioBroadCast;
      getExitOptions(): java.util.ArrayList<zombie.radio.scripting.RadioScript$ExitOption>;
      getLoopMax(): number;
      getLoopMin(): number;
      getNextScript(): zombie.radio.scripting.RadioScript$ExitOption;
      getStartDay(): number;
      getStartDayStamp(): number;
      getValidAirBroadcast(): zombie.radio.scripting.RadioBroadCast;
      getValidAirBroadcastDebug(): zombie.radio.scripting.RadioBroadCast;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      setStartDayStamp(arg0: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.radio.scripting.RadioScript$ExitOption extends java.lang.Object
    export class RadioScript$ExitOption {
      private constructor();
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getScriptname(): string;
      getStartDelay(): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.radio.scripting.RadioScriptManager extends java.lang.Object
    export class RadioScriptManager {
      private constructor();
      AddChannel(arg0: zombie.radio.scripting.RadioChannel, arg1: boolean): void;
      Load(arg0: java.util.List<string>): void;
      PlayerListensChannel(arg0: number, arg1: boolean, arg2: boolean): void;
      RemoveChannel(arg0: number): void;
      Save(arg0: java.io.Writer): void;
      UpdateScripts(arg0: number, arg1: number, arg2: number): void;
      equals(arg0: any): boolean;
      getChannels(): java.util.Map<number, zombie.radio.scripting.RadioChannel>;
      getChannelsList(): java.util.ArrayList<any>;
      getClass(): java.lang.Class<any>;
      getCurrentTimeStamp(): number;
      getInstance(): zombie.radio.scripting.RadioScriptManager;
      getRadioChannel(arg0: string): zombie.radio.scripting.RadioChannel;
      hasInstance(): boolean;
      hashCode(): number;
      init(arg0: number): void;
      notify(): void;
      notifyAll(): void;
      reset(): void;
      simulateChannelUntil(arg0: number, arg1: number, arg2: boolean): void;
      simulateScriptsUntil(arg0: number, arg1: boolean): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.randomizedWorld {
    // zombie.randomizedWorld.RandomizedWorldBase extends java.lang.Object
    export class RandomizedWorldBase {
      private constructor();
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      hashCode(): number;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      notify(): void;
      notifyAll(): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.randomizedWorld.randomizedBuilding {
    // zombie.randomizedWorld.randomizedBuilding.RBBar extends zombie.randomizedWorld.randomizedBuilding.RandomizedBuildingBase
    export class RBBar {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.areas.IsoBuilding): void;
      addBarricade(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addRandomRangedWeapon(arg0: zombie.inventory.ItemContainer, arg1: boolean, arg2: boolean, arg3: boolean): zombie.inventory.types.HandWeapon;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addWorldItem(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): zombie.inventory.InventoryItem;
      addZombies(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: number, arg4: zombie.iso.RoomDef): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getDoor(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoDoor;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumDays(): number;
      getMinimumRooms(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getWindow(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      init(): void;
      initAllRBMapChance(): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlwaysDo(): boolean;
      isTableFor3DItems(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.BuildingDef, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeBuilding(arg0: zombie.iso.BuildingDef): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      roomValid(arg0: zombie.iso.IsoGridSquare): boolean;
      setAlwaysDo(arg0: boolean): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setMinimumRooms(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnItemsInContainers(arg0: zombie.iso.BuildingDef, arg1: string, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedBuilding.RBBasic extends zombie.randomizedWorld.randomizedBuilding.RandomizedBuildingBase
    export class RBBasic {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.areas.IsoBuilding): void;
      addBarricade(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addRandomRangedWeapon(arg0: zombie.inventory.ItemContainer, arg1: boolean, arg2: boolean, arg3: boolean): zombie.inventory.types.HandWeapon;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addWorldItem(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): zombie.inventory.InventoryItem;
      addZombies(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: number, arg4: zombie.iso.RoomDef): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      doProfessionStory(arg0: zombie.iso.BuildingDef, arg1: string): void;
      doRandomDeadSurvivorStory(arg0: zombie.iso.BuildingDef, arg1: zombie.randomizedWorld.randomizedDeadSurvivor.RandomizedDeadSurvivorBase): void;
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getDoor(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoDoor;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumDays(): number;
      getMinimumRooms(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getSurvivorProfession(): java.util.ArrayList<string>;
      getSurvivorStories(): java.util.ArrayList<zombie.randomizedWorld.randomizedDeadSurvivor.RandomizedDeadSurvivorBase>;
      getUniqueRDSSpawned(): java.util.ArrayList<string>;
      getWindow(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      init(): void;
      initAllRBMapChance(): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlwaysDo(): boolean;
      isTableFor3DItems(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.BuildingDef, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeBuilding(arg0: zombie.iso.BuildingDef): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAlwaysDo(arg0: boolean): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setMinimumRooms(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnItemsInContainers(arg0: zombie.iso.BuildingDef, arg1: string, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedBuilding.RBBurnt extends zombie.randomizedWorld.randomizedBuilding.RandomizedBuildingBase
    export class RBBurnt {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.areas.IsoBuilding): void;
      addBarricade(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addRandomRangedWeapon(arg0: zombie.inventory.ItemContainer, arg1: boolean, arg2: boolean, arg3: boolean): zombie.inventory.types.HandWeapon;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addWorldItem(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): zombie.inventory.InventoryItem;
      addZombies(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: number, arg4: zombie.iso.RoomDef): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getDoor(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoDoor;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumDays(): number;
      getMinimumRooms(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getWindow(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      init(): void;
      initAllRBMapChance(): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlwaysDo(): boolean;
      isTableFor3DItems(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.BuildingDef, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeBuilding(arg0: zombie.iso.BuildingDef): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAlwaysDo(arg0: boolean): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setMinimumRooms(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnItemsInContainers(arg0: zombie.iso.BuildingDef, arg1: string, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedBuilding.RBBurntCorpse extends zombie.randomizedWorld.randomizedBuilding.RandomizedBuildingBase
    export class RBBurntCorpse {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.areas.IsoBuilding): void;
      addBarricade(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addRandomRangedWeapon(arg0: zombie.inventory.ItemContainer, arg1: boolean, arg2: boolean, arg3: boolean): zombie.inventory.types.HandWeapon;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addWorldItem(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): zombie.inventory.InventoryItem;
      addZombies(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: number, arg4: zombie.iso.RoomDef): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getDoor(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoDoor;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumDays(): number;
      getMinimumRooms(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getWindow(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      init(): void;
      initAllRBMapChance(): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlwaysDo(): boolean;
      isTableFor3DItems(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.BuildingDef, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeBuilding(arg0: zombie.iso.BuildingDef): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAlwaysDo(arg0: boolean): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setMinimumRooms(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnItemsInContainers(arg0: zombie.iso.BuildingDef, arg1: string, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedBuilding.RBBurntFireman extends zombie.randomizedWorld.randomizedBuilding.RandomizedBuildingBase
    export class RBBurntFireman {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.areas.IsoBuilding): void;
      addBarricade(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addRandomRangedWeapon(arg0: zombie.inventory.ItemContainer, arg1: boolean, arg2: boolean, arg3: boolean): zombie.inventory.types.HandWeapon;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addWorldItem(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): zombie.inventory.InventoryItem;
      addZombies(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: number, arg4: zombie.iso.RoomDef): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getDoor(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoDoor;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumDays(): number;
      getMinimumRooms(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getWindow(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      init(): void;
      initAllRBMapChance(): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlwaysDo(): boolean;
      isTableFor3DItems(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.BuildingDef, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeBuilding(arg0: zombie.iso.BuildingDef): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAlwaysDo(arg0: boolean): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setMinimumRooms(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnItemsInContainers(arg0: zombie.iso.BuildingDef, arg1: string, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedBuilding.RBCafe extends zombie.randomizedWorld.randomizedBuilding.RandomizedBuildingBase
    export class RBCafe {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.areas.IsoBuilding): void;
      addBarricade(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addRandomRangedWeapon(arg0: zombie.inventory.ItemContainer, arg1: boolean, arg2: boolean, arg3: boolean): zombie.inventory.types.HandWeapon;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addWorldItem(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): zombie.inventory.InventoryItem;
      addZombies(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: number, arg4: zombie.iso.RoomDef): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getDoor(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoDoor;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumDays(): number;
      getMinimumRooms(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getWindow(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      init(): void;
      initAllRBMapChance(): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlwaysDo(): boolean;
      isTableFor3DItems(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.BuildingDef, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeBuilding(arg0: zombie.iso.BuildingDef): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      roomValid(arg0: zombie.iso.IsoGridSquare): boolean;
      setAlwaysDo(arg0: boolean): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setMinimumRooms(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnItemsInContainers(arg0: zombie.iso.BuildingDef, arg1: string, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedBuilding.RBClinic extends zombie.randomizedWorld.randomizedBuilding.RandomizedBuildingBase
    export class RBClinic {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.areas.IsoBuilding): void;
      addBarricade(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addRandomRangedWeapon(arg0: zombie.inventory.ItemContainer, arg1: boolean, arg2: boolean, arg3: boolean): zombie.inventory.types.HandWeapon;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addWorldItem(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): zombie.inventory.InventoryItem;
      addZombies(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: number, arg4: zombie.iso.RoomDef): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getDoor(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoDoor;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumDays(): number;
      getMinimumRooms(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getWindow(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      init(): void;
      initAllRBMapChance(): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlwaysDo(): boolean;
      isTableFor3DItems(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.BuildingDef, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeBuilding(arg0: zombie.iso.BuildingDef): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      roomValid(arg0: zombie.iso.IsoGridSquare): boolean;
      setAlwaysDo(arg0: boolean): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setMinimumRooms(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnItemsInContainers(arg0: zombie.iso.BuildingDef, arg1: string, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedBuilding.RBHairSalon extends zombie.randomizedWorld.randomizedBuilding.RandomizedBuildingBase
    export class RBHairSalon {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.areas.IsoBuilding): void;
      addBarricade(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addRandomRangedWeapon(arg0: zombie.inventory.ItemContainer, arg1: boolean, arg2: boolean, arg3: boolean): zombie.inventory.types.HandWeapon;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addWorldItem(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): zombie.inventory.InventoryItem;
      addZombies(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: number, arg4: zombie.iso.RoomDef): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getDoor(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoDoor;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumDays(): number;
      getMinimumRooms(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getWindow(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      init(): void;
      initAllRBMapChance(): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlwaysDo(): boolean;
      isTableFor3DItems(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.BuildingDef, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeBuilding(arg0: zombie.iso.BuildingDef): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      roomValid(arg0: zombie.iso.IsoGridSquare): boolean;
      setAlwaysDo(arg0: boolean): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setMinimumRooms(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnItemsInContainers(arg0: zombie.iso.BuildingDef, arg1: string, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedBuilding.RBKateAndBaldspot extends zombie.randomizedWorld.randomizedBuilding.RandomizedBuildingBase
    export class RBKateAndBaldspot {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.areas.IsoBuilding): void;
      addBarricade(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addRandomRangedWeapon(arg0: zombie.inventory.ItemContainer, arg1: boolean, arg2: boolean, arg3: boolean): zombie.inventory.types.HandWeapon;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addWorldItem(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): zombie.inventory.InventoryItem;
      addZombies(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: number, arg4: zombie.iso.RoomDef): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getDoor(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoDoor;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumDays(): number;
      getMinimumRooms(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getWindow(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      init(): void;
      initAllRBMapChance(): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlwaysDo(): boolean;
      isTableFor3DItems(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.BuildingDef, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeBuilding(arg0: zombie.iso.BuildingDef): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAlwaysDo(arg0: boolean): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setMinimumRooms(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnItemsInContainers(arg0: zombie.iso.BuildingDef, arg1: string, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedBuilding.RBLooted extends zombie.randomizedWorld.randomizedBuilding.RandomizedBuildingBase
    export class RBLooted {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.areas.IsoBuilding): void;
      addBarricade(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addRandomRangedWeapon(arg0: zombie.inventory.ItemContainer, arg1: boolean, arg2: boolean, arg3: boolean): zombie.inventory.types.HandWeapon;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addWorldItem(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): zombie.inventory.InventoryItem;
      addZombies(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: number, arg4: zombie.iso.RoomDef): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getDoor(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoDoor;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumDays(): number;
      getMinimumRooms(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getWindow(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      init(): void;
      initAllRBMapChance(): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlwaysDo(): boolean;
      isTableFor3DItems(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.BuildingDef, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeBuilding(arg0: zombie.iso.BuildingDef): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAlwaysDo(arg0: boolean): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setMinimumRooms(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnItemsInContainers(arg0: zombie.iso.BuildingDef, arg1: string, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedBuilding.RBOffice extends zombie.randomizedWorld.randomizedBuilding.RandomizedBuildingBase
    export class RBOffice {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.areas.IsoBuilding): void;
      addBarricade(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addRandomRangedWeapon(arg0: zombie.inventory.ItemContainer, arg1: boolean, arg2: boolean, arg3: boolean): zombie.inventory.types.HandWeapon;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addWorldItem(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): zombie.inventory.InventoryItem;
      addZombies(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: number, arg4: zombie.iso.RoomDef): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getDoor(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoDoor;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumDays(): number;
      getMinimumRooms(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getWindow(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      init(): void;
      initAllRBMapChance(): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlwaysDo(): boolean;
      isTableFor3DItems(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.BuildingDef, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeBuilding(arg0: zombie.iso.BuildingDef): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      roomValid(arg0: zombie.iso.IsoGridSquare): boolean;
      setAlwaysDo(arg0: boolean): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setMinimumRooms(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnItemsInContainers(arg0: zombie.iso.BuildingDef, arg1: string, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedBuilding.RBOther extends zombie.randomizedWorld.randomizedBuilding.RandomizedBuildingBase
    export class RBOther {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.areas.IsoBuilding): void;
      addBarricade(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addRandomRangedWeapon(arg0: zombie.inventory.ItemContainer, arg1: boolean, arg2: boolean, arg3: boolean): zombie.inventory.types.HandWeapon;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addWorldItem(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): zombie.inventory.InventoryItem;
      addZombies(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: number, arg4: zombie.iso.RoomDef): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getDoor(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoDoor;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumDays(): number;
      getMinimumRooms(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getWindow(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      init(): void;
      initAllRBMapChance(): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlwaysDo(): boolean;
      isTableFor3DItems(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.BuildingDef, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeBuilding(arg0: zombie.iso.BuildingDef): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAlwaysDo(arg0: boolean): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setMinimumRooms(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnItemsInContainers(arg0: zombie.iso.BuildingDef, arg1: string, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedBuilding.RBPileOCrepe extends zombie.randomizedWorld.randomizedBuilding.RandomizedBuildingBase
    export class RBPileOCrepe {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.areas.IsoBuilding): void;
      addBarricade(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addRandomRangedWeapon(arg0: zombie.inventory.ItemContainer, arg1: boolean, arg2: boolean, arg3: boolean): zombie.inventory.types.HandWeapon;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addWorldItem(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): zombie.inventory.InventoryItem;
      addZombies(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: number, arg4: zombie.iso.RoomDef): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getDoor(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoDoor;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumDays(): number;
      getMinimumRooms(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getWindow(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      init(): void;
      initAllRBMapChance(): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlwaysDo(): boolean;
      isTableFor3DItems(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.BuildingDef, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeBuilding(arg0: zombie.iso.BuildingDef): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      roomValid(arg0: zombie.iso.IsoGridSquare): boolean;
      setAlwaysDo(arg0: boolean): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setMinimumRooms(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnItemsInContainers(arg0: zombie.iso.BuildingDef, arg1: string, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedBuilding.RBPizzaWhirled extends zombie.randomizedWorld.randomizedBuilding.RandomizedBuildingBase
    export class RBPizzaWhirled {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.areas.IsoBuilding): void;
      addBarricade(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addRandomRangedWeapon(arg0: zombie.inventory.ItemContainer, arg1: boolean, arg2: boolean, arg3: boolean): zombie.inventory.types.HandWeapon;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addWorldItem(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): zombie.inventory.InventoryItem;
      addZombies(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: number, arg4: zombie.iso.RoomDef): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getDoor(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoDoor;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumDays(): number;
      getMinimumRooms(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getWindow(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      init(): void;
      initAllRBMapChance(): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlwaysDo(): boolean;
      isTableFor3DItems(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.BuildingDef, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeBuilding(arg0: zombie.iso.BuildingDef): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      roomValid(arg0: zombie.iso.IsoGridSquare): boolean;
      setAlwaysDo(arg0: boolean): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setMinimumRooms(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnItemsInContainers(arg0: zombie.iso.BuildingDef, arg1: string, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedBuilding.RBSafehouse extends zombie.randomizedWorld.randomizedBuilding.RandomizedBuildingBase
    export class RBSafehouse {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.areas.IsoBuilding): void;
      addBarricade(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addRandomRangedWeapon(arg0: zombie.inventory.ItemContainer, arg1: boolean, arg2: boolean, arg3: boolean): zombie.inventory.types.HandWeapon;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addWorldItem(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): zombie.inventory.InventoryItem;
      addZombies(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: number, arg4: zombie.iso.RoomDef): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getDoor(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoDoor;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumDays(): number;
      getMinimumRooms(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getWindow(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      init(): void;
      initAllRBMapChance(): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlwaysDo(): boolean;
      isTableFor3DItems(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.BuildingDef, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeBuilding(arg0: zombie.iso.BuildingDef): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAlwaysDo(arg0: boolean): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setMinimumRooms(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnItemsInContainers(arg0: zombie.iso.BuildingDef, arg1: string, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedBuilding.RBSchool extends zombie.randomizedWorld.randomizedBuilding.RandomizedBuildingBase
    export class RBSchool {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.areas.IsoBuilding): void;
      addBarricade(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addRandomRangedWeapon(arg0: zombie.inventory.ItemContainer, arg1: boolean, arg2: boolean, arg3: boolean): zombie.inventory.types.HandWeapon;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addWorldItem(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): zombie.inventory.InventoryItem;
      addZombies(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: number, arg4: zombie.iso.RoomDef): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getDoor(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoDoor;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumDays(): number;
      getMinimumRooms(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getWindow(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      init(): void;
      initAllRBMapChance(): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlwaysDo(): boolean;
      isTableFor3DItems(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.BuildingDef, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeBuilding(arg0: zombie.iso.BuildingDef): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      roomValid(arg0: zombie.iso.IsoGridSquare): boolean;
      setAlwaysDo(arg0: boolean): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setMinimumRooms(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnItemsInContainers(arg0: zombie.iso.BuildingDef, arg1: string, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedBuilding.RBShopLooted extends zombie.randomizedWorld.randomizedBuilding.RandomizedBuildingBase
    export class RBShopLooted {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.areas.IsoBuilding): void;
      addBarricade(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addRandomRangedWeapon(arg0: zombie.inventory.ItemContainer, arg1: boolean, arg2: boolean, arg3: boolean): zombie.inventory.types.HandWeapon;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addWorldItem(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): zombie.inventory.InventoryItem;
      addZombies(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: number, arg4: zombie.iso.RoomDef): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getDoor(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoDoor;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumDays(): number;
      getMinimumRooms(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getWindow(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      init(): void;
      initAllRBMapChance(): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlwaysDo(): boolean;
      isTableFor3DItems(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.BuildingDef, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeBuilding(arg0: zombie.iso.BuildingDef): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAlwaysDo(arg0: boolean): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setMinimumRooms(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnItemsInContainers(arg0: zombie.iso.BuildingDef, arg1: string, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedBuilding.RBSpiffo extends zombie.randomizedWorld.randomizedBuilding.RandomizedBuildingBase
    export class RBSpiffo {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.areas.IsoBuilding): void;
      addBarricade(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addRandomRangedWeapon(arg0: zombie.inventory.ItemContainer, arg1: boolean, arg2: boolean, arg3: boolean): zombie.inventory.types.HandWeapon;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addWorldItem(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): zombie.inventory.InventoryItem;
      addZombies(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: number, arg4: zombie.iso.RoomDef): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getDoor(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoDoor;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumDays(): number;
      getMinimumRooms(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getWindow(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      init(): void;
      initAllRBMapChance(): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlwaysDo(): boolean;
      isTableFor3DItems(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.BuildingDef, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeBuilding(arg0: zombie.iso.BuildingDef): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      roomValid(arg0: zombie.iso.IsoGridSquare): boolean;
      setAlwaysDo(arg0: boolean): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setMinimumRooms(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnItemsInContainers(arg0: zombie.iso.BuildingDef, arg1: string, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedBuilding.RBStripclub extends zombie.randomizedWorld.randomizedBuilding.RandomizedBuildingBase
    export class RBStripclub {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.areas.IsoBuilding): void;
      addBarricade(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addRandomRangedWeapon(arg0: zombie.inventory.ItemContainer, arg1: boolean, arg2: boolean, arg3: boolean): zombie.inventory.types.HandWeapon;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addWorldItem(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): zombie.inventory.InventoryItem;
      addZombies(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: number, arg4: zombie.iso.RoomDef): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getDoor(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoDoor;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumDays(): number;
      getMinimumRooms(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getWindow(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      init(): void;
      initAllRBMapChance(): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlwaysDo(): boolean;
      isTableFor3DItems(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.BuildingDef, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeBuilding(arg0: zombie.iso.BuildingDef): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAlwaysDo(arg0: boolean): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setMinimumRooms(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnItemsInContainers(arg0: zombie.iso.BuildingDef, arg1: string, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedBuilding.RandomizedBuildingBase extends zombie.randomizedWorld.RandomizedWorldBase
    export class RandomizedBuildingBase {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.areas.IsoBuilding): void;
      addBarricade(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addRandomRangedWeapon(arg0: zombie.inventory.ItemContainer, arg1: boolean, arg2: boolean, arg3: boolean): zombie.inventory.types.HandWeapon;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addWorldItem(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): zombie.inventory.InventoryItem;
      addZombies(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: number, arg4: zombie.iso.RoomDef): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getDoor(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoDoor;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumDays(): number;
      getMinimumRooms(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getWindow(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      init(): void;
      initAllRBMapChance(): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlwaysDo(): boolean;
      isTableFor3DItems(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.BuildingDef, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeBuilding(arg0: zombie.iso.BuildingDef): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAlwaysDo(arg0: boolean): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setMinimumRooms(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnItemsInContainers(arg0: zombie.iso.BuildingDef, arg1: string, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedBuilding.RandomizedBuildingBase$HumanCorpse extends zombie.characters.IsoGameCharacter
    export class RandomizedBuildingBase$HumanCorpse {
      private constructor();
      Asleep: boolean;
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      readonly IsVisibleToPlayer?: boolean[];
      static LowLightingQualityHack: boolean;
      static readonly MAX_WALL_SPLATS: number;
      static readonly MAX_ZOMBIES_EATING: number;
      NoPicking: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OutlineOnMouseover: boolean;
      static readonly RENDER_OFFSET_X: number;
      static readonly RENDER_OFFSET_Y: number;
      ReanimatedCorpse?: zombie.characters.IsoGameCharacter;
      ReanimatedCorpseID: number;
      readonly StateMachineParams?: java.util.HashMap<zombie.ai.State, java.util.HashMap<any, any>>;
      readonly Traits?: zombie.characters.IsoGameCharacter$CharacterTraits;
      readonly actionContext?: zombie.characters.action.ActionContext;
      readonly advancedAnimator?: zombie.core.skinnedmodel.advancedanimation.AdvancedAnimator;
      readonly amputations?: java.util.ArrayList<string>;
      readonly attackVars?: zombie.network.packets.hit.AttackVars;
      bAlphaForced: boolean;
      bNeverDoneAlpha: boolean;
      readonly bOutline?: boolean[];
      bUpdateEquippedTextures: boolean;
      bagsWorn?: java.util.ArrayList<zombie.inventory.types.InventoryContainer>;
      beard?: zombie.core.skinnedmodel.model.ModelInstance;
      blockTurning: boolean;
      static bmod: number;
      bumpNbr: number;
      callOut: boolean;
      clientIgnoreCollision: number;
      container?: zombie.inventory.ItemContainer;
      def?: zombie.iso.sprite.IsoSpriteInstance;
      dir?: zombie.iso.IsoDirections;
      doDirtBloodEtc: boolean;
      doNotSync: boolean;
      doRenderShadow: boolean;
      emitter?: zombie.audio.BaseSoundEmitter;
      forceNullOverride: boolean;
      static gmod: number;
      hair?: zombie.core.skinnedmodel.model.ModelInstance;
      highlightFlags: number;
      readonly hitList?: java.util.ArrayList<zombie.network.packets.hit.HitInfo>;
      invRadioFreq?: java.util.ArrayList<number>;
      keyId: number;
      knockbackAttackMod: number;
      last?: zombie.iso.IsoGridSquare;
      lastAutomaticShoot: number;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      legsSprite?: zombie.iso.sprite.IsoSprite;
      lx: number;
      ly: number;
      lz: number;
      name?: string;
      readonly networkCharacter?: zombie.characters.NetworkCharacter;
      noDamage: boolean;
      nx: number;
      ny: number;
      offsetX: number;
      offsetY: number;
      readonly outlineColor?: zombie.core.textures.ColorInfo[];
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      overridePrimaryHandModel?: string;
      overrideSecondaryHandModel?: string;
      partialThumpDmg: number;
      primaryHandModel?: zombie.core.skinnedmodel.model.ModelInstance;
      realState?: zombie.network.NetworkVariables$ZombieState;
      realdir?: zombie.iso.IsoDirections;
      realx: number;
      realy: number;
      realz: number;
      removedFromWorldMS: number;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      static readonly s_maxPossibleTwist: number;
      savedVehicleRunning: boolean;
      savedVehicleSeat: number;
      savedVehicleX: number;
      savedVehicleY: number;
      secondaryHandModel?: zombie.core.skinnedmodel.model.ModelInstance;
      sheetRope: boolean;
      sheetRopeHealth: number;
      shootInARow: number;
      speedMod: number;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      square?: zombie.iso.IsoGridSquare;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      tintb: number;
      tintg: number;
      tintr: number;
      static treeSoundMgr?: zombie.iso.IsoMovingObject$TreeSoundManager;
      upKillCount: boolean;
      vocalEvent: number;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
      x: number;
      y: number;
      z: number;
  
      Anger(arg0: number): void;
      ApplyInBedOffset(arg0: boolean): void;
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      BetaAntiDepress(arg0: number): void;
      BetaBlockers(arg0: number): void;
      CacheEquipped(): void;
      Callout(): void;
      CanAttack(): boolean;
      CanSee(arg0: zombie.iso.IsoMovingObject): boolean;
      ClearEquippedCache(): void;
      ClearVariable(arg0: string): void;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number): void;
      Despawn(): void;
      DirectionFromVector(arg0: zombie.iso.Vector2): void;
      DirtySlice(): void;
      DistTo(arg0: number, arg1: number): number;
      DistToProper(arg0: zombie.iso.IsoObject): number;
      DistToSquared(arg0: zombie.iso.IsoMovingObject): number;
      DoCollideNorS(): void;
      DoCollideWorE(): void;
      DoDeath(arg0: zombie.inventory.types.HandWeapon, arg1: zombie.characters.IsoGameCharacter): void;
      DoFloorSplat(arg0: zombie.iso.IsoGridSquare, arg1: string, arg2: boolean, arg3: number, arg4: number): void;
      DoFootstepSound(arg0: number): void;
      DoSneezeText(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoSwingCollisionBoneCheck(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number): boolean;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      DrawSneezeText(): void;
      Dressup(arg0: zombie.characters.SurvivorDesc): void;
      Eat(arg0: zombie.inventory.InventoryItem, arg1: number): boolean;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      FireCheck(): void;
      GetAnimSetName(): string;
      GetPrimaryEquippedCache(): zombie.inventory.InventoryItem;
      GetSecondaryEquippedCache(): zombie.inventory.InventoryItem;
      GetVariable(arg0: string): string;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasItem(arg0: string): boolean;
      HasTooltip(): boolean;
      HasTrait(arg0: string): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      HitSilence(arg0: zombie.inventory.types.HandWeapon, arg1: zombie.characters.IsoGameCharacter, arg2: boolean, arg3: number): void;
      InitSpriteParts(arg0: zombie.characters.SurvivorDesc): void;
      IsAttackRange(arg0: number, arg1: number, arg2: number): boolean;
      IsSpeaking(): boolean;
      Kill(arg0: zombie.characters.IsoGameCharacter): void;
      LevelPerk(arg0: zombie.characters.skills.PerkFactory$Perk, arg1: boolean): void;
      LoseLevel(arg0: zombie.characters.skills.PerkFactory$Perk): void;
      Move(arg0: zombie.iso.Vector2): void;
      MoveForward(arg0: number, arg1: number, arg2: number, arg3: number): void;
      MoveUnmodded(arg0: zombie.iso.Vector2): void;
      NPCGetAiming(): boolean;
      NPCGetRunning(): boolean;
      NPCSetAiming(arg0: boolean): void;
      NPCSetAttack(arg0: boolean): void;
      NPCSetJustMoved(arg0: boolean): void;
      NPCSetMelee(arg0: boolean): void;
      NPCSetRunning(arg0: boolean): void;
      OnAnimEvent(arg0: zombie.core.skinnedmodel.advancedanimation.AnimLayer, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      OnDeath(): void;
      PainMeds(arg0: number): void;
      PlayAnim(arg0: string): void;
      PlayAnimUnlooped(arg0: string): void;
      PlayAnimWithSpeed(arg0: string, arg1: number): void;
      QueueAction(arg0: zombie.characters.CharacterTimedActions.BaseAction): void;
      ReadLiterature(arg0: zombie.inventory.types.Literature): void;
      ReduceHealthWhenBurning(): void;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      Say(arg0: string): void;
      SayDebug(arg0: number, arg1: string): void;
      SayRadio(arg0: string, arg1: number, arg2: number, arg3: number, arg4: zombie.ui.UIFont, arg5: number, arg6: number, arg7: string): void;
      SayShout(arg0: string): void;
      SayWhisper(arg0: string): void;
      Seen(arg0: java.util.Stack<zombie.iso.IsoMovingObject>): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      SetOnFire(): void;
      SetVariable(arg0: string, arg1: string): void;
      SleepingTablet(arg0: number): void;
      SpreadFire(): void;
      SpreadFireMP(): void;
      StartAction(arg0: zombie.characters.CharacterTimedActions.BaseAction): void;
      StartTimedActionAnim(arg0: string, arg1: string): void;
      StopAllActionQueue(): void;
      StopAllActionQueueAiming(): void;
      StopAllActionQueueRunning(): void;
      StopAllActionQueueWalking(): void;
      StopBurning(): void;
      StopTimedActionAnim(): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      Throw(arg0: zombie.inventory.types.HandWeapon): void;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      actionStateChanged(arg0: zombie.characters.action.ActionContext): void;
      addBasicPatch(arg0: zombie.characterTextures.BloodBodyPartType): void;
      addBlood(arg0: zombie.characterTextures.BloodBodyPartType, arg1: boolean, arg2: boolean, arg3: boolean): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addDirt(arg0: zombie.characterTextures.BloodBodyPartType, arg1: number, arg2: boolean): void;
      addHole(arg0: zombie.characterTextures.BloodBodyPartType): boolean;
      addHoleFromZombieAttacks(arg0: zombie.characterTextures.BloodBodyPartType, arg1: boolean): boolean;
      addLineChatElement(arg0: string): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      addToWorld(): void;
      addVisualDamage(arg0: string): void;
      addWorldSoundUnlessInvisible(arg0: number, arg1: number, arg2: boolean): void;
      applyTraits(arg0: java.util.ArrayList<string>): void;
      attackFromWindowsLunge(arg0: zombie.characters.IsoZombie): void;
      autoDrink(): void;
      avoidDamage(): boolean;
      becomeCorpse(): void;
      calcHitDir(arg0: zombie.iso.Vector2): void;
      calculateBaseSpeed(): number;
      canAddSheetRope(): boolean;
      canClimbDownSheetRope(arg0: zombie.iso.IsoGridSquare): boolean;
      canClimbDownSheetRopeInCurrentSquare(): boolean;
      canClimbSheetRope(arg0: zombie.iso.IsoGridSquare): boolean;
      canHaveMultipleHits(): number;
      canSprint(): boolean;
      changeState(arg0: zombie.ai.State): void;
      checkHaveElectricity(): void;
      checkIsNearWall(): number;
      cleanWallBlood(): void;
      clearAttachedAnimSprite(): void;
      clearAttachedItems(): void;
      clearVariable(arg0: string): void;
      clearVariables(): void;
      clearWornItems(): void;
      climbDownSheetRope(): void;
      climbOverFence(arg0: zombie.iso.IsoDirections): void;
      climbSheetRope(): void;
      climbThroughWindow(arg0: zombie.iso.objects.IsoThumpable, arg1: number): void;
      climbThroughWindowFrame(arg0: zombie.iso.IsoObject): void;
      closeWindow(arg0: zombie.iso.objects.IsoWindow): void;
      clothingItemChanged(arg0: string): void;
      collideWith(arg0: zombie.iso.IsoObject): void;
      compareMovePriority(arg0: zombie.characters.IsoGameCharacter): number;
      compareToY(arg0: zombie.iso.IsoMovingObject): number;
      containsVariable(arg0: string): boolean;
      countAddSheetRope(): number;
      createContainersFromSpriteProperties(): void;
      createKeyRing(): void;
      customHashCode(): number;
      dbgGetAnimTrack(arg0: number, arg1: number): zombie.core.skinnedmodel.animation.AnimationTrack;
      dbgGetAnimTrackName(arg0: number, arg1: number): string;
      dbgGetAnimTrackTime(arg0: number, arg1: number): number;
      dbgGetAnimTrackWeight(arg0: number, arg1: number): number;
      debugPrintout(): void;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      distToNearestCamCharacter(): number;
      doFindExternalWaterSource(): void;
      doHitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.vehicles.BaseVehicle$HitVars): void;
      doStairs(): void;
      drawDirectionLine(arg0: zombie.iso.Vector2, arg1: number, arg2: number, arg3: number, arg4: number): void;
      dressInClothingItem(arg0: string): void;
      dressInNamedOutfit(arg0: string): void;
      dressInPersistentOutfit(arg0: string): void;
      dressInPersistentOutfitID(arg0: number): void;
      dressInRandomOutfit(): void;
      dropHandItems(): void;
      dropHeavyItems(): void;
      endPlaybackGameVariables(arg0: zombie.core.skinnedmodel.advancedanimation.AnimationVariableSource): void;
      ensureOnTile(): void;
      enterVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number, arg2: org.joml.Vector3f): void;
      equals(arg0: any): boolean;
      exert(arg0: number): void;
      faceLocation(arg0: number, arg1: number): void;
      faceLocationF(arg0: number, arg1: number): void;
      facePosition(arg0: number, arg1: number): void;
      faceThisObject(arg0: zombie.iso.IsoObject): void;
      faceThisObjectAlt(arg0: zombie.iso.IsoObject): void;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      fallenOnKnees(): void;
      forceAwake(): void;
      getAbsoluteExcessTwist(): number;
      getActionContext(): zombie.characters.action.ActionContext;
      getActionStateName(): string;
      getActiveLightItems(arg0: java.util.ArrayList<zombie.inventory.InventoryItem>): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getAdvancedAnimator(): zombie.core.skinnedmodel.advancedanimation.AdvancedAnimator;
      getAge(): number;
      getAlpha(arg0: number): number;
      getAlreadyReadPages(arg0: string): number;
      getAnimAngle(): number;
      getAnimAngleRadians(): number;
      getAnimAngleStepDelta(): number;
      getAnimAngleTwistDelta(): number;
      getAnimVector(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getAnimationDebug(): string;
      getAnimationPlayer(): zombie.core.skinnedmodel.animation.AnimationPlayer;
      getAnimationPlayerRecorder(): zombie.core.skinnedmodel.animation.debug.AnimationPlayerRecorder;
      getAnimationStateName(): string;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getAttachedItem(arg0: string): zombie.inventory.InventoryItem;
      getAttachedItems(): zombie.characters.AttachedItems.AttachedItems;
      getAttachedLocationGroup(): zombie.characters.AttachedItems.AttachedLocationGroup;
      getAttackTargetSquare(): zombie.iso.IsoGridSquare;
      getAttackedBy(): zombie.characters.IsoGameCharacter;
      getAutoWalkDirection(): zombie.iso.Vector2;
      getBarricadeStrengthMod(): number;
      getBarricadeTimeMod(): number;
      getBed(): zombie.iso.IsoObject;
      getBedType(): string;
      getBeenMovingFor(): number;
      getBeenSprintingFor(): number;
      getBetaDelta(): number;
      getBetaEffect(): number;
      getBloodImpactX(): number;
      getBloodImpactY(): number;
      getBloodImpactZ(): number;
      getBloodSplat(): zombie.iso.sprite.IsoSprite;
      getBodyDamage(): zombie.characters.BodyDamage.BodyDamage;
      getBodyDamageRemote(): zombie.characters.BodyDamage.BodyDamage;
      getBodyLocationGroup(): zombie.characters.WornItems.BodyLocationGroup;
      getBodyPartClothingDefense(arg0: number, arg1: boolean, arg2: boolean): number;
      getBrain(): zombie.ai.GameCharacterAIBrain;
      getBuilding(): zombie.iso.areas.IsoBuilding;
      getBumpFallType(): string;
      getBumpType(): string;
      getBumpedChr(): zombie.characters.IsoGameCharacter;
      getBumpedType(arg0: zombie.characters.IsoGameCharacter): string;
      getCell(): zombie.iso.IsoCell;
      getCharacterActions(): java.util.Stack<zombie.characters.CharacterTimedActions.BaseAction>;
      getCharacterTraits(): zombie.characters.IsoGameCharacter$CharacterTraits;
      getChatElement(): zombie.chat.ChatElement;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getChopTreeSpeed(): number;
      getClass(): java.lang.Class<any>;
      getClickSound(): string;
      getClothingItem_Back(): zombie.inventory.InventoryItem;
      getClothingItem_Feet(): zombie.inventory.InventoryItem;
      getClothingItem_Hands(): zombie.inventory.InventoryItem;
      getClothingItem_Head(): zombie.inventory.InventoryItem;
      getClothingItem_Legs(): zombie.inventory.InventoryItem;
      getClothingItem_Torso(): zombie.inventory.InventoryItem;
      getClothingWetness(): zombie.characters.ClothingWetness;
      getCollideType(): string;
      getCollidedObject(): zombie.iso.IsoObject;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getCurrentActionContextStateName(): string;
      getCurrentBuilding(): zombie.iso.areas.IsoBuilding;
      getCurrentBuildingDef(): zombie.iso.BuildingDef;
      getCurrentRoomDef(): zombie.iso.RoomDef;
      getCurrentSquare(): zombie.iso.IsoGridSquare;
      getCurrentState(): zombie.ai.State;
      getCurrentStateName(): string;
      getCurrentZone(): zombie.iso.IsoMetaGrid$Zone;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getDamage(): number;
      getDangerLevels(): number;
      getDebugMonitor(): zombie.core.skinnedmodel.advancedanimation.debug.AnimatorDebugMonitor;
      getDefaultState(): zombie.ai.State;
      getDeferredAngleDelta(): number;
      getDeferredMovement(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getDeferredRotationWeight(): number;
      getDepressDelta(): number;
      getDepressEffect(): number;
      getDescriptor(): zombie.characters.SurvivorDesc;
      getDieCount(): number;
      getDir(): zombie.iso.IsoDirections;
      getDirectionAngle(): number;
      getDistanceSq(arg0: zombie.iso.IsoMovingObject): number;
      getDotWithForwardDirection(arg0: number, arg1: number): number;
      getEatingZombies(): java.util.ArrayList<zombie.characters.IsoZombie>;
      getEmitter(): zombie.characters.BaseCharacterSoundEmitter;
      getEnemyList(): java.util.Stack<zombie.characters.IsoGameCharacter>;
      getEquipedRadio(): zombie.inventory.types.Radio;
      getExcessTwist(): number;
      getFMODParameters(): zombie.audio.FMODParameterList;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getFallTime(): number;
      getFamiliarBuildings(): java.util.Stack<zombie.iso.areas.IsoBuilding>;
      getFatigueMod(): number;
      getFatiqueMultiplier(): number;
      getFeelerTile(arg0: number): zombie.iso.IsoGridSquare;
      getFeelersize(): number;
      getFinder(): zombie.ai.astar.AStarPathFinderResult;
      getFireKillRate(): number;
      getFireSpreadProbability(): number;
      getFollowingTarget(): zombie.characters.IsoGameCharacter;
      getForceWakeUpTime(): number;
      getForwardDirection(): zombie.iso.Vector2;
      getFullName(): string;
      getFuturWalkedSquare(): zombie.iso.IsoGridSquare;
      getGameCharacterAIBrain(): zombie.ai.GameCharacterAIBrain;
      getGameVariables(): java.lang.Iterable<zombie.core.skinnedmodel.advancedanimation.IAnimationVariableSlot>;
      getGlobalMovementMod(): number;
      getHaloTimerCount(): number;
      getHammerSoundMod(): number;
      getHealth(): number;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getHitChancesMod(): number;
      getHitDir(): zombie.iso.Vector2;
      getHitForce(): number;
      getHitFromAngle(): number;
      getHitReaction(): string;
      getHitReactionNetworkAI(): zombie.characters.HitReactionNetworkAI;
      getHittingMod(): number;
      getHoursSurvived(): number;
      getHumanVisual(): zombie.core.skinnedmodel.visual.HumanVisual;
      getHungerMultiplier(): number;
      getHurtSound(): string;
      getHyperthermiaMod(): number;
      getID(): number;
      getIDCount(): number;
      getIgnoreMovement(): boolean;
      getImpulsex(): number;
      getImpulsey(): number;
      getInf(): zombie.core.textures.ColorInfo;
      getInventory(): zombie.inventory.ItemContainer;
      getInventoryWeight(): number;
      getIsNPC(): boolean;
      getIsSurfaceNormalOffset(): boolean;
      getItemContainer(): zombie.inventory.ItemContainer;
      getItemVisuals(): zombie.core.skinnedmodel.visual.ItemVisuals;
      getKeyId(): number;
      getKnownRecipes(): java.util.List<string>;
      getLastBump(): number;
      getLastChatMessage(): zombie.chat.ChatMessage;
      getLastCollideTime(): number;
      getLastFallSpeed(): number;
      getLastHeardSound(): zombie.characters.IsoGameCharacter$Location;
      getLastHitCount(): number;
      getLastHourSleeped(): number;
      getLastKnownLocation(): java.util.HashMap<string, zombie.characters.IsoGameCharacter$Location>;
      getLastKnownLocationOf(arg0: string): zombie.characters.IsoGameCharacter$Location;
      getLastLocalEnemies(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getLastSpokenLine(): string;
      getLastSquare(): zombie.iso.IsoGridSquare;
      getLastTargettedBy(): zombie.characters.IsoZombie;
      getLastZombieKills(): number;
      getLeaveBodyTimedown(): number;
      getLegsSprite(): zombie.iso.sprite.IsoSprite;
      getLevelMaxForXp(): number;
      getLevelUpLevels(): number[];
      getLevelUpMultiplier(): number;
      getLightInfo2(): zombie.characters.IsoGameCharacter$LightInfo;
      getLightfootMod(): number;
      getLimpulsex(): number;
      getLimpulsey(): number;
      getLlx(): number;
      getLly(): number;
      getLlz(): number;
      getLocalEnemyList(): java.util.Stack<zombie.characters.IsoGameCharacter>;
      getLocalGroupList(): java.util.ArrayList<zombie.iso.IsoMovingObject>;
      getLocalList(): java.util.ArrayList<zombie.iso.IsoMovingObject>;
      getLocalNeutralList(): java.util.ArrayList<zombie.iso.IsoMovingObject>;
      getLocalRelevantEnemyList(): java.util.ArrayList<zombie.iso.IsoMovingObject>;
      getLookAngleRadians(): number;
      getLookVector(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getLowDangerInVicinity(arg0: number, arg1: number): zombie.iso.IsoGridSquare;
      getLrx(): number;
      getLry(): number;
      getLx(): number;
      getLy(): number;
      getLz(): number;
      getMaintenanceMod(): number;
      getMapKnowledge(): zombie.ai.MapKnowledge;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getMasterRegion(): zombie.iso.areas.isoregion.regions.IWorldRegion;
      getMaxChatLines(): number;
      getMaxTwist(): number;
      getMaxWeight(): number;
      getMaxWeightBase(): number;
      getMeleeCombatMod(): number;
      getMeleeDelay(): number;
      getMetalBarricadeStrengthMod(): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getModel(): zombie.core.skinnedmodel.model.ModelInstance;
      getModelInstance(): zombie.core.skinnedmodel.model.ModelInstance;
      getMomentumScalar(): number;
      getMoodles(): zombie.characters.Moodles.Moodles;
      getMoveDelta(): number;
      getMoveForwardVec(): zombie.iso.Vector2;
      getMoveSpeed(): number;
      getMovementLastFrame(): zombie.iso.Vector2;
      getMovingObjectIndex(): number;
      getName(): string;
      getNearVehicle(): zombie.vehicles.BaseVehicle;
      getNetworkCharacterAI(): zombie.characters.NetworkCharacterAI;
      getNew(): zombie.iso.IsoObject;
      getNextWander(): number;
      getNimbleMod(): number;
      getNoDamage(): boolean;
      getNumSurvivorsInVicinity(): number;
      getNx(): number;
      getNy(): number;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffsetX(): number;
      getOffsetY(): number;
      getOnlineID(): number;
      getOrCreateSleepingEventData(): zombie.ai.sadisticAIDirector.SleepingEventData;
      getOrCreateVariable(arg0: string): zombie.core.skinnedmodel.advancedanimation.IAnimationVariableSlot;
      getOutfitName(): string;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPacingMod(): number;
      getPainDelta(): number;
      getPainEffect(): number;
      getPath2(): zombie.vehicles.PolygonalMap2$Path;
      getPathFindBehavior2(): zombie.vehicles.PathFindBehavior2;
      getPathFindIndex(): number;
      getPathIndex(): number;
      getPathTargetX(): number;
      getPathTargetY(): number;
      getPathTargetZ(): number;
      getPatience(): number;
      getPatienceMax(): number;
      getPatienceMin(): number;
      getPerkInfo(arg0: zombie.characters.skills.PerkFactory$Perk): zombie.characters.IsoGameCharacter$PerkInfo;
      getPerkLevel(arg0: zombie.characters.skills.PerkFactory$Perk): number;
      getPerkList(): java.util.ArrayList<zombie.characters.IsoGameCharacter$PerkInfo>;
      getPersistentOutfitID(): number;
      getPipedFuelAmount(): number;
      getPosition(arg0: zombie.iso.Vector3): zombie.iso.Vector3;
      getPreviousActionContextStateName(): string;
      getPreviousStateName(): string;
      getPrimaryHandItem(): zombie.inventory.InventoryItem;
      getPrimaryHandType(): string;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRandomDefaultOutfit(): zombie.core.skinnedmodel.population.Outfit;
      getReadyModelData(): java.util.ArrayList<zombie.core.skinnedmodel.model.ModelInstance>;
      getReanimAnimDelay(): number;
      getReanimAnimFrame(): number;
      getReanimateTimer(): number;
      getRecoilDelay(): number;
      getRecoveryMod(): number;
      getReduceInfectionPower(): number;
      getRemoteID(): number;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getRunSpeedModifier(): number;
      getSafetyCooldown(): number;
      getSayLine(): string;
      getScreenX(): number;
      getScreenY(): number;
      getScriptModule(): string;
      getScriptName(): string;
      getScriptnx(): number;
      getScriptny(): number;
      getSecondaryHandItem(): zombie.inventory.InventoryItem;
      getSecondaryHandType(): string;
      getShoulderTwist(): number;
      getShovingMod(): number;
      getSleepingTabletDelta(): number;
      getSleepingTabletEffect(): number;
      getSlowFactor(): number;
      getSlowTimer(): number;
      getSneakSpotMod(): number;
      getSpeakColour(): zombie.core.Color;
      getSpeakTime(): number;
      getSpecialObjectIndex(): number;
      getSpeedMod(): number;
      getSprintMod(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteDef(): zombie.iso.sprite.IsoSpriteInstance;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSquare(): zombie.iso.IsoGridSquare;
      getStaggerTimeMod(): number;
      getStateEventDelayTimer(): number;
      getStateMachine(): zombie.ai.StateMachine;
      getStateMachineParams(arg0: zombie.ai.State): java.util.HashMap<any, any>;
      getStaticMovingObjectIndex(): number;
      getStats(): zombie.characters.Stats;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getSurroundingAttackingZombies(): number;
      getSurvivorKills(): number;
      getSurvivorMap(): java.util.HashMap<number, zombie.characters.SurvivorDesc>;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTalkerType(): string;
      getTargetAlpha(arg0: number): number;
      getTargetTwist(): number;
      getTeleport(): zombie.characters.NetworkTeleport;
      getTemperature(): number;
      getTempo(): zombie.iso.Vector2;
      getTextureCreator(): zombie.core.skinnedmodel.model.ModelInstanceTextureCreator;
      getTextureName(): string;
      getThirstMultiplier(): number;
      getThreatLevel(): number;
      getThumpCondition(): number;
      getThumpTarget(): zombie.iso.objects.interfaces.Thumpable;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTile(): string;
      getTimeSinceLastSmoke(): number;
      getTimeSinceZombieAttack(): number;
      getTimeThumping(): number;
      getTimedActionTimeModifier(): number;
      getTorchStrength(): number;
      getTotalBlood(): number;
      getTraits(): zombie.characters.traits.TraitCollection;
      getTurnDelta(): number;
      getTwist(): number;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUID(): string;
      getUseHandWeapon(): zombie.inventory.types.HandWeapon;
      getUsedItemsOn(): java.util.Stack<string>;
      getUserNameHeight(): number;
      getUsesExternalWaterSource(): boolean;
      getVariable(arg0: zombie.core.skinnedmodel.advancedanimation.AnimationVariableHandle): zombie.core.skinnedmodel.advancedanimation.IAnimationVariableSlot;
      getVariableBoolean(arg0: string, arg1: boolean): boolean;
      getVariableFloat(arg0: string, arg1: number): number;
      getVariableString(arg0: string): string;
      getVectorFromDirection(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getVehicle(): zombie.vehicles.BaseVehicle;
      getVeryCloseEnemyList(): java.util.ArrayList<zombie.iso.IsoMovingObject>;
      getVisual(): zombie.core.skinnedmodel.visual.HumanVisual;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWaterSource(arg0: java.util.ArrayList<zombie.inventory.InventoryItem>): zombie.inventory.InventoryItem;
      getWeaponLevel(): number;
      getWeight(): number;
      getWeightMod(): number;
      getWeldingSoundMod(): number;
      getWidth(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWorldObjectIndex(): number;
      getWornItem(arg0: string): zombie.inventory.InventoryItem;
      getWornItems(): zombie.characters.WornItems.WornItems;
      getX(): number;
      getXp(): zombie.characters.IsoGameCharacter$XP;
      getXpForLevel(arg0: number): number;
      getY(): number;
      getZ(): number;
      getZombieKills(): number;
      hasActiveModel(): boolean;
      hasAnimationPlayer(): boolean;
      hasEquipped(arg0: string): boolean;
      hasEquippedTag(arg0: string): boolean;
      hasExternalWaterSource(): boolean;
      hasFootInjury(): boolean;
      hasHitReaction(): boolean;
      hasItems(arg0: string, arg1: number): boolean;
      hasModData(): boolean;
      hasPath(): boolean;
      hasTimedActions(): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      helmetFall(arg0: boolean, arg1: string): boolean;
      hitConsequences(arg0: zombie.inventory.types.HandWeapon, arg1: zombie.characters.IsoGameCharacter, arg2: boolean, arg3: number, arg4: boolean): void;
      initAttachedItems(arg0: string): void;
      initLightInfo2(): zombie.characters.IsoGameCharacter$LightInfo;
      initSpritePartsEmpty(): void;
      initWornItems(arg0: string): void;
      isAboveTopOfStairs(): boolean;
      isAimAtFloor(): boolean;
      isAiming(): boolean;
      isAlive(): boolean;
      isAllowConversation(): boolean;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isAnimForecasted(): boolean;
      isAnimationRecorderActive(): boolean;
      isAsleep(): boolean;
      isAttachedItem(arg0: zombie.inventory.InventoryItem): boolean;
      isAttackAnim(): boolean;
      isAttackWasSuperAttack(): boolean;
      isAttacking(): boolean;
      isAutoWalk(): boolean;
      isBehaviourMoving(): boolean;
      isBehind(arg0: zombie.characters.IsoGameCharacter): boolean;
      isBeingSteppedOn(): boolean;
      isBlink(): boolean;
      isBuildCheat(): boolean;
      isBumpDone(): boolean;
      isBumpFall(): boolean;
      isBumpStaggered(): boolean;
      isBumped(): boolean;
      isCanShout(): boolean;
      isCharacter(): boolean;
      isClimbing(): boolean;
      isClimbingThroughWindow(arg0: zombie.iso.objects.IsoWindow): boolean;
      isCloseKilled(): boolean;
      isClosingWindow(arg0: zombie.iso.objects.IsoWindow): boolean;
      isCollidable(): boolean;
      isCollided(): boolean;
      isCollidedE(): boolean;
      isCollidedN(): boolean;
      isCollidedS(): boolean;
      isCollidedThisFrame(): boolean;
      isCollidedW(): boolean;
      isCollidedWithDoor(): boolean;
      isCollidedWithVehicle(): boolean;
      isCriticalHit(): boolean;
      isCurrentState(arg0: zombie.ai.State): boolean;
      isDead(): boolean;
      isDeathDragDown(): boolean;
      isDestroyed(): boolean;
      isDoDeathSound(): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isDriving(): boolean;
      isEatingOther(arg0: zombie.iso.IsoMovingObject): boolean;
      isEquipped(arg0: zombie.inventory.InventoryItem): boolean;
      isEquippedClothing(arg0: zombie.inventory.InventoryItem): boolean;
      isExistInTheWorld(): boolean;
      isFacingLocation(arg0: number, arg1: number, arg2: number): boolean;
      isFacingObject(arg0: zombie.iso.IsoObject, arg1: number): boolean;
      isFallOnFront(): boolean;
      isFarmingCheat(): boolean;
      isFemale(): boolean;
      isFirstUpdate(): boolean;
      isFloor(): boolean;
      isForceShove(): boolean;
      isGodMod(): boolean;
      isHandItem(arg0: zombie.inventory.InventoryItem): boolean;
      isHealthCheat(): boolean;
      isHeavyItem(arg0: zombie.inventory.InventoryItem): boolean;
      isHideWeaponModel(): boolean;
      isHighlighted(): boolean;
      isHitFromBehind(): boolean;
      isHoppable(): boolean;
      isIgnoreMovementForDirection(): boolean;
      isIgnoreStaggerBack(): boolean;
      isInARoom(): boolean;
      isInTrees(): boolean;
      isInTrees2(arg0: boolean): boolean;
      isInTreesNoBush(): boolean;
      isInvincible(): boolean;
      isInvisible(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isItemInBothHands(arg0: zombie.inventory.InventoryItem): boolean;
      isKnockedDown(): boolean;
      isKnownPoison(arg0: zombie.inventory.InventoryItem): boolean;
      isLastCollidedN(): boolean;
      isLastCollidedW(): boolean;
      isLocal(): boolean;
      isMaskClicked(arg0: number, arg1: number): boolean;
      isMechanicsCheat(): boolean;
      isMovablesCheat(): boolean;
      isMovedThumpable(): boolean;
      isMoving(): boolean;
      isMuzzleFlash(): boolean;
      isNPC(): boolean;
      isNoPicking(): boolean;
      isNorthHoppable(): boolean;
      isOnDeathDone(): boolean;
      isOnFire(): boolean;
      isOnFloor(): boolean;
      isOnKillDone(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isOutside(): boolean;
      isPathing(): boolean;
      isPersistentOutfitInit(): boolean;
      isPlayerMoving(): boolean;
      isPlayingDeathSound(): boolean;
      isPrimaryEquipped(arg0: string): boolean;
      isPrimaryHandItem(arg0: zombie.inventory.InventoryItem): boolean;
      isProne(): boolean;
      isPushableForSeparate(): boolean;
      isPushedByForSeparate(arg0: zombie.iso.IsoMovingObject): boolean;
      isRangedWeaponEmpty(): boolean;
      isReading(): boolean;
      isReanim(): boolean;
      isRecipeKnown(arg0: string): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isRunning(): boolean;
      isSafety(): boolean;
      isSceneCulled(): boolean;
      isSeatedInVehicle(): boolean;
      isSecondaryHandItem(arg0: zombie.inventory.InventoryItem): boolean;
      isShootable(): boolean;
      isShowAdminTag(): boolean;
      isSitOnGround(): boolean;
      isSkeleton(): boolean;
      isSkipResolveCollision(): boolean;
      isSneaking(): boolean;
      isSolid(): boolean;
      isSolidForSeparate(): boolean;
      isSpeaking(): boolean;
      isSprinting(): boolean;
      isSpriteInvisible(): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isStrafing(): boolean;
      isSuperAttack(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isTeleporting(): boolean;
      isTimedActionInstant(): boolean;
      isTimedActionInstantCheat(): boolean;
      isUnderVehicle(): boolean;
      isUnlimitedCarry(): boolean;
      isUnlimitedEndurance(): boolean;
      isUsingWornItems(): boolean;
      isVariable(arg0: string, arg1: string): boolean;
      isVehicleCollisionActive(arg0: zombie.vehicles.BaseVehicle): boolean;
      isVisibleToNPCs(): boolean;
      isZombie(): boolean;
      isZombieAttacking(): boolean;
      isZombiesDontAttack(): boolean;
      isbAltCollide(): boolean;
      isbDoDefer(): boolean;
      isbFalling(): boolean;
      isbOnBed(): boolean;
      isbUseParts(): boolean;
      learnRecipe(arg0: string): boolean;
      level0(arg0: zombie.characters.skills.PerkFactory$Perk): void;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      onCullStateChanged(arg0: zombie.core.skinnedmodel.ModelManager, arg1: boolean): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      onWornItemsChanged(): void;
      openWindow(arg0: zombie.iso.objects.IsoWindow): void;
      pathToCharacter(arg0: zombie.characters.IsoGameCharacter): void;
      pathToLocation(arg0: number, arg1: number, arg2: number): void;
      pathToLocationF(arg0: number, arg1: number, arg2: number): void;
      pathToSound(arg0: number, arg1: number, arg2: number): void;
      playBloodSplatterSound(): void;
      playDeadSound(): void;
      playEmote(arg0: string): void;
      playHurtSound(): void;
      playSound(arg0: string): number;
      playSoundLocal(arg0: string): number;
      playbackRecordCurrentStateSnapshot(): zombie.characters.action.ActionStateSnapshot;
      playbackSetCurrentStateSnapshot(arg0: zombie.characters.action.ActionStateSnapshot): void;
      postUpdateEquippedTextures(): void;
      postUpdateModelTextures(): void;
      postupdate(): void;
      preupdate(): void;
      processHitDamage(arg0: zombie.inventory.types.HandWeapon, arg1: zombie.characters.IsoGameCharacter, arg2: number, arg3: boolean, arg4: number): number;
      readInventory(arg0: java.nio.ByteBuffer): string;
      releaseAnimationPlayer(): void;
      reloadOutfit(): void;
      removeAllContainers(): void;
      removeAttachedItem(arg0: zombie.inventory.InventoryItem): void;
      removeFromHands(arg0: zombie.inventory.InventoryItem): boolean;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      removeWornItem(arg0: zombie.inventory.InventoryItem): void;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderServerGUI(): void;
      renderShadow(arg0: number, arg1: number, arg2: number): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reportEvent(arg0: string): void;
      reset(): void;
      resetBeardGrowingTime(): void;
      resetBodyDamageRemote(): void;
      resetEquippedHandsModels(): void;
      resetHairGrowingTime(): void;
      resetModel(): void;
      resetModelNextFrame(): void;
      reuseGridSquare(): void;
      save(arg0: java.nio.ByteBuffer): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      sendStopBurning(): void;
      separate(): void;
      serverRemoveItemFromZombie(arg0: string): void;
      setAge(arg0: number): void;
      setAimAtFloor(arg0: boolean): void;
      setAllowConversation(arg0: boolean): void;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAlreadyReadPages(arg0: string, arg1: number): void;
      setAnimForecasted(arg0: number): void;
      setAnimated(arg0: boolean): void;
      setAsleep(arg0: boolean): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setAttachedItem(arg0: string, arg1: zombie.inventory.InventoryItem): void;
      setAttachedItems(arg0: zombie.characters.AttachedItems.AttachedItems): void;
      setAttackAnim(arg0: boolean): void;
      setAttackTargetSquare(arg0: zombie.iso.IsoGridSquare): void;
      setAttackWasSuperAttack(arg0: boolean): void;
      setAttackedBy(arg0: zombie.characters.IsoGameCharacter): void;
      setAutoWalk(arg0: boolean): void;
      setAutoWalkDirection(arg0: zombie.iso.Vector2): void;
      setAvoidDamage(arg0: boolean): void;
      setBed(arg0: zombie.iso.IsoObject): void;
      setBedType(arg0: string): void;
      setBeenMovingFor(arg0: number): void;
      setBeenSprintingFor(arg0: number): void;
      setBetaDelta(arg0: number): void;
      setBetaEffect(arg0: number): void;
      setBlink(arg0: boolean): void;
      setBloodImpactX(arg0: number): void;
      setBloodImpactY(arg0: number): void;
      setBloodImpactZ(arg0: number): void;
      setBloodSplat(arg0: zombie.iso.sprite.IsoSprite): void;
      setBuildCheat(arg0: boolean): void;
      setBumpDone(arg0: boolean): void;
      setBumpFall(arg0: boolean): void;
      setBumpFallType(arg0: string): void;
      setBumpStaggered(arg0: boolean): void;
      setBumpType(arg0: string): void;
      setBumpedChr(arg0: zombie.characters.IsoGameCharacter): void;
      setCanShout(arg0: boolean): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setClickSound(arg0: string): void;
      setCloseKilled(arg0: boolean): void;
      setClothingItem_Back(arg0: zombie.inventory.InventoryItem): void;
      setClothingItem_Feet(arg0: zombie.inventory.InventoryItem): void;
      setClothingItem_Hands(arg0: zombie.inventory.InventoryItem): void;
      setClothingItem_Head(arg0: zombie.inventory.InventoryItem): void;
      setClothingItem_Legs(arg0: zombie.inventory.InventoryItem): void;
      setClothingItem_Torso(arg0: zombie.inventory.InventoryItem): void;
      setCollidable(arg0: boolean): void;
      setCollideType(arg0: string): void;
      setCollidedE(arg0: boolean): void;
      setCollidedN(arg0: boolean): void;
      setCollidedObject(arg0: zombie.iso.IsoObject): void;
      setCollidedS(arg0: boolean): void;
      setCollidedThisFrame(arg0: boolean): void;
      setCollidedW(arg0: boolean): void;
      setCollidedWithDoor(arg0: boolean): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCriticalHit(arg0: boolean): void;
      setCurrent(arg0: zombie.iso.IsoGridSquare): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setDamage(arg0: number): void;
      setDangerLevels(arg0: number): void;
      setDeathDragDown(arg0: boolean): void;
      setDebugMonitor(arg0: zombie.core.skinnedmodel.advancedanimation.debug.AnimatorDebugMonitor): void;
      setDefaultCondition(arg0: number): void;
      setDefaultState(arg0: zombie.ai.State): void;
      setDelayToSleep(arg0: number): void;
      setDepressDelta(arg0: number): void;
      setDepressEffect(arg0: number): void;
      setDescriptor(arg0: zombie.characters.SurvivorDesc): void;
      setDestroyed(arg0: boolean): void;
      setDieCount(arg0: number): void;
      setDir(arg0: number): void;
      setDirectionAngle(arg0: number): void;
      setDoDeathSound(arg0: boolean): void;
      setEatingZombies(arg0: java.util.ArrayList<zombie.characters.IsoZombie>): void;
      setFallOnFront(arg0: boolean): void;
      setFallTime(arg0: number): void;
      setFarmingCheat(arg0: boolean): void;
      setFeelersize(arg0: number): void;
      setFemale(arg0: boolean): void;
      setFireKillRate(arg0: number): void;
      setFireSpreadProbability(arg0: number): void;
      setFirstUpdate(arg0: boolean): void;
      setFollowingTarget(arg0: zombie.characters.IsoGameCharacter): void;
      setForceShove(arg0: boolean): void;
      setForceWakeUpTime(arg0: number): void;
      setForwardDirection(arg0: zombie.iso.Vector2): void;
      setGodMod(arg0: boolean): void;
      setHaloNote(arg0: string, arg1: number): void;
      setHealth(arg0: number): void;
      setHealthCheat(arg0: boolean): void;
      setHideWeaponModel(arg0: boolean): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setHitDir(arg0: zombie.iso.Vector2): void;
      setHitForce(arg0: number): void;
      setHitFromAngle(arg0: number): void;
      setHitFromBehind(arg0: boolean): void;
      setHitReaction(arg0: string): void;
      setHurtSound(arg0: string): void;
      setID(arg0: number): void;
      setIDCount(arg0: number): void;
      setIgnoreAimingInput(arg0: boolean): void;
      setIgnoreMovement(arg0: boolean): void;
      setIgnoreStaggerBack(arg0: boolean): void;
      setImpulsex(arg0: number): void;
      setImpulsey(arg0: number): void;
      setInventory(arg0: zombie.inventory.ItemContainer): void;
      setInvincible(arg0: boolean): void;
      setInvisible(arg0: boolean): void;
      setIsAiming(arg0: boolean): void;
      setIsNPC(arg0: boolean): void;
      setKeyId(arg0: number): void;
      setKnockedDown(arg0: boolean): void;
      setLast(arg0: zombie.iso.IsoGridSquare): void;
      setLastBump(arg0: number): void;
      setLastChatMessage(arg0: zombie.chat.ChatMessage): void;
      setLastCollideTime(arg0: number): void;
      setLastCollidedN(arg0: boolean): void;
      setLastCollidedW(arg0: boolean): void;
      setLastFallSpeed(arg0: number): void;
      setLastHeardSound(arg0: number, arg1: number, arg2: number): void;
      setLastHitCount(arg0: number): void;
      setLastHourSleeped(arg0: number): void;
      setLastLocalEnemies(arg0: number): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setLastSpokenLine(arg0: string): void;
      setLastTargettedBy(arg0: zombie.characters.IsoZombie): void;
      setLastZombieKills(arg0: number): void;
      setLeaveBodyTimedown(arg0: number): void;
      setLegsSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setLevelUpMultiplier(arg0: number): void;
      setLimpulsex(arg0: number): void;
      setLimpulsey(arg0: number): void;
      setLlx(arg0: number): void;
      setLly(arg0: number): void;
      setLlz(arg0: number): void;
      setLrx(arg0: number): void;
      setLry(arg0: number): void;
      setLx(arg0: number): void;
      setLy(arg0: number): void;
      setLz(arg0: number): void;
      setMaxTwist(arg0: number): void;
      setMaxWeight(arg0: number): void;
      setMaxWeightBase(arg0: number): void;
      setMechanicsCheat(arg0: boolean): void;
      setMeleeDelay(arg0: number): void;
      setMetabolicTarget(arg0: zombie.characters.BodyDamage.Metabolics): void;
      setMomentumScalar(arg0: number): void;
      setMovablesCheat(arg0: boolean): void;
      setMoveDelta(arg0: number): void;
      setMoveForwardVec(arg0: zombie.iso.Vector2): void;
      setMovedThumpable(arg0: boolean): void;
      setMovementLastFrame(arg0: zombie.iso.Vector2): void;
      setMoving(arg0: boolean): void;
      setMovingSquareNow(): void;
      setNPC(arg0: boolean): void;
      setName(arg0: string): void;
      setNextWander(arg0: number): void;
      setNoDamage(arg0: boolean): void;
      setNoPicking(arg0: boolean): void;
      setNumSurvivorsInVicinity(arg0: number): void;
      setNx(arg0: number): void;
      setNy(arg0: number): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOnDeathDone(arg0: boolean): void;
      setOnFire(arg0: boolean): void;
      setOnFloor(arg0: boolean): void;
      setOnKillDone(arg0: boolean): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPainDelta(arg0: number): void;
      setPainEffect(arg0: number): void;
      setPath2(arg0: zombie.vehicles.PolygonalMap2$Path): void;
      setPathFindIndex(arg0: number): void;
      setPathIndex(arg0: number): void;
      setPathing(arg0: boolean): void;
      setPatience(arg0: number): void;
      setPatienceMax(arg0: number): void;
      setPatienceMin(arg0: number): void;
      setPerkLevelDebug(arg0: zombie.characters.skills.PerkFactory$Perk, arg1: number): void;
      setPersistentOutfitID(arg0: number, arg1: boolean): void;
      setPipedFuelAmount(arg0: number): void;
      setPlayingDeathSound(arg0: boolean): void;
      setPrimaryHandItem(arg0: zombie.inventory.InventoryItem): void;
      setRangedWeaponEmpty(arg0: boolean): void;
      setReading(arg0: boolean): void;
      setReanim(arg0: boolean): void;
      setReanimAnimDelay(arg0: number): void;
      setReanimAnimFrame(arg0: number): void;
      setReanimateTimer(arg0: number): void;
      setRecoilDelay(arg0: number): void;
      setReduceInfectionPower(arg0: number): void;
      setRemoteID(arg0: number): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setRunning(arg0: boolean): void;
      setSafety(arg0: boolean): void;
      setSafetyCooldown(arg0: number): void;
      setSayLine(arg0: string): void;
      setSceneCulled(arg0: boolean): void;
      setScriptModule(arg0: string): void;
      setScriptnx(arg0: number): void;
      setScriptny(arg0: number): void;
      setSecondaryHandItem(arg0: zombie.inventory.InventoryItem): void;
      setShootable(arg0: boolean): void;
      setShowAdminTag(arg0: boolean): void;
      setSitOnGround(arg0: boolean): void;
      setSleepingTabletDelta(arg0: number): void;
      setSleepingTabletEffect(arg0: number): void;
      setSlowFactor(arg0: number): void;
      setSlowTimer(arg0: number): void;
      setSneaking(arg0: boolean): void;
      setSolid(arg0: boolean): void;
      setSpeakColour(arg0: zombie.core.Color): void;
      setSpeakColourInfo(arg0: zombie.core.textures.ColorInfo): void;
      setSpeakTime(arg0: number): void;
      setSpeaking(arg0: boolean): void;
      setSpecialTooltip(arg0: boolean): void;
      setSpeedMod(arg0: number): void;
      setSprinting(arg0: boolean): void;
      setSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setStaggerTimeMod(arg0: number): void;
      setStateEventDelayTimer(arg0: number): void;
      setStateMachineLocked(arg0: boolean): void;
      setSuperAttack(arg0: boolean): void;
      setSurvivorKills(arg0: number): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTaintedWater(arg0: boolean): void;
      setTargetAlpha(arg0: number): void;
      setTeleport(arg0: zombie.characters.NetworkTeleport): void;
      setTemperature(arg0: number): void;
      setTextureCreator(arg0: zombie.core.skinnedmodel.model.ModelInstanceTextureCreator): void;
      setThumpTarget(arg0: zombie.iso.objects.interfaces.Thumpable): void;
      setTimeOfSleep(arg0: number): void;
      setTimeSinceLastSmoke(arg0: number): void;
      setTimeSinceZombieAttack(arg0: number): void;
      setTimeThumping(arg0: number): void;
      setTimedActionInstantCheat(arg0: boolean): void;
      setTurnDelta(arg0: number): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUnlimitedCarry(arg0: boolean): void;
      setUnlimitedEndurance(arg0: boolean): void;
      setUseHandWeapon(arg0: zombie.inventory.types.HandWeapon): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setVariable(arg0: string, arg1: boolean): void;
      setVehicle(arg0: zombie.vehicles.BaseVehicle): void;
      setVisibleToNPCs(arg0: boolean): void;
      setWaterAmount(arg0: number): void;
      setWeight(arg0: number): void;
      setWidth(arg0: number): void;
      setWornItem(arg0: string, arg1: zombie.inventory.InventoryItem): void;
      setWornItems(arg0: zombie.characters.WornItems.WornItems): void;
      setX(arg0: number): void;
      setXp(arg0: zombie.characters.IsoGameCharacter$XP): void;
      setY(arg0: number): void;
      setZ(arg0: number): void;
      setZombieKills(arg0: number): void;
      setZombiesDontAttack(arg0: boolean): void;
      setbAltCollide(arg0: boolean): void;
      setbClimbing(arg0: boolean): void;
      setbDoDefer(arg0: boolean): void;
      setbFalling(arg0: boolean): void;
      setbOnBed(arg0: boolean): void;
      setbUseParts(arg0: boolean): void;
      shouldBeTurning(): boolean;
      shouldBeTurning90(): boolean;
      shouldBeTurningAround(): boolean;
      shouldBecomeCorpse(): boolean;
      shouldBecomeZombieAfterDeath(): boolean;
      shouldDoInventory(): boolean;
      shouldWaitToStartTimedAction(): boolean;
      smashCarWindow(arg0: zombie.vehicles.VehiclePart): void;
      smashWindow(arg0: zombie.iso.objects.IsoWindow): void;
      softReset(): void;
      splatBlood(arg0: number, arg1: number): void;
      splatBloodFloor(): void;
      splatBloodFloorBig(): void;
      spotted(arg0: zombie.iso.IsoMovingObject, arg1: boolean): void;
      startEvent(arg0: number, arg1: zombie.audio.GameSoundClip, arg2: java.util.BitSet): void;
      startMuzzleFlash(): void;
      startPlaybackGameVariables(): zombie.core.skinnedmodel.advancedanimation.AnimationVariableSource;
      stopEvent(arg0: number, arg1: zombie.audio.GameSoundClip, arg2: java.util.BitSet): void;
      stopOrTriggerSound(arg0: number): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection, arg3: java.nio.ByteBuffer): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      testDefense(arg0: zombie.characters.IsoZombie): boolean;
      testDotSide(arg0: zombie.iso.IsoMovingObject): string;
      toString(): string;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitModData(): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      unsetOutlineHighlight(): void;
      update(): void;
      updateEmitter(): void;
      updateEquippedRadioFreq(): void;
      updateEvent(arg0: number, arg1: zombie.audio.GameSoundClip): void;
      updateLightInfo(): void;
      updateRecoilVar(): void;
      updateSpeedModifiers(): void;
      updateTextObjects(): void;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      writeInventory(arg0: java.nio.ByteBuffer): void;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
      zeroForwardDirectionX(): void;
      zeroForwardDirectionY(): void;
    }
  }
  export namespace zombie.randomizedWorld.randomizedDeadSurvivor {
    // zombie.randomizedWorld.randomizedDeadSurvivor.RDSBandPractice extends zombie.randomizedWorld.randomizedDeadSurvivor.RandomizedDeadSurvivorBase
    export class RDSBandPractice {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.areas.IsoBuilding): void;
      addBarricade(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addRandomRangedWeapon(arg0: zombie.inventory.ItemContainer, arg1: boolean, arg2: boolean, arg3: boolean): zombie.inventory.types.HandWeapon;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addWorldItem(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): zombie.inventory.InventoryItem;
      addZombies(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: number, arg4: zombie.iso.RoomDef): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getDoor(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoDoor;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumDays(): number;
      getMinimumRooms(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getWindow(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      init(): void;
      initAllRBMapChance(): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlwaysDo(): boolean;
      isTableFor3DItems(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.BuildingDef, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeBuilding(arg0: zombie.iso.BuildingDef): void;
      randomizeDeadSurvivor(arg0: zombie.iso.BuildingDef): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAlwaysDo(arg0: boolean): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setMinimumRooms(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnItemsInContainers(arg0: zombie.iso.BuildingDef, arg1: string, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedDeadSurvivor.RDSBathroomZed extends zombie.randomizedWorld.randomizedDeadSurvivor.RandomizedDeadSurvivorBase
    export class RDSBathroomZed {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.areas.IsoBuilding): void;
      addBarricade(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addRandomRangedWeapon(arg0: zombie.inventory.ItemContainer, arg1: boolean, arg2: boolean, arg3: boolean): zombie.inventory.types.HandWeapon;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addWorldItem(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): zombie.inventory.InventoryItem;
      addZombies(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: number, arg4: zombie.iso.RoomDef): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getDoor(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoDoor;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumDays(): number;
      getMinimumRooms(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getWindow(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      init(): void;
      initAllRBMapChance(): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlwaysDo(): boolean;
      isTableFor3DItems(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.BuildingDef, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeBuilding(arg0: zombie.iso.BuildingDef): void;
      randomizeDeadSurvivor(arg0: zombie.iso.BuildingDef): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAlwaysDo(arg0: boolean): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setMinimumRooms(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnItemsInContainers(arg0: zombie.iso.BuildingDef, arg1: string, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedDeadSurvivor.RDSBedroomZed extends zombie.randomizedWorld.randomizedDeadSurvivor.RandomizedDeadSurvivorBase
    export class RDSBedroomZed {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.areas.IsoBuilding): void;
      addBarricade(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addRandomRangedWeapon(arg0: zombie.inventory.ItemContainer, arg1: boolean, arg2: boolean, arg3: boolean): zombie.inventory.types.HandWeapon;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addWorldItem(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): zombie.inventory.InventoryItem;
      addZombies(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: number, arg4: zombie.iso.RoomDef): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getDoor(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoDoor;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumDays(): number;
      getMinimumRooms(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getWindow(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      init(): void;
      initAllRBMapChance(): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlwaysDo(): boolean;
      isTableFor3DItems(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.BuildingDef, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeBuilding(arg0: zombie.iso.BuildingDef): void;
      randomizeDeadSurvivor(arg0: zombie.iso.BuildingDef): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAlwaysDo(arg0: boolean): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setMinimumRooms(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnItemsInContainers(arg0: zombie.iso.BuildingDef, arg1: string, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedDeadSurvivor.RDSBleach extends zombie.randomizedWorld.randomizedDeadSurvivor.RandomizedDeadSurvivorBase
    export class RDSBleach {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.areas.IsoBuilding): void;
      addBarricade(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addRandomRangedWeapon(arg0: zombie.inventory.ItemContainer, arg1: boolean, arg2: boolean, arg3: boolean): zombie.inventory.types.HandWeapon;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addWorldItem(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): zombie.inventory.InventoryItem;
      addZombies(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: number, arg4: zombie.iso.RoomDef): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getDoor(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoDoor;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumDays(): number;
      getMinimumRooms(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getWindow(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      init(): void;
      initAllRBMapChance(): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlwaysDo(): boolean;
      isTableFor3DItems(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.BuildingDef, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeBuilding(arg0: zombie.iso.BuildingDef): void;
      randomizeDeadSurvivor(arg0: zombie.iso.BuildingDef): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAlwaysDo(arg0: boolean): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setMinimumRooms(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnItemsInContainers(arg0: zombie.iso.BuildingDef, arg1: string, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedDeadSurvivor.RDSCorpsePsycho extends zombie.randomizedWorld.randomizedDeadSurvivor.RandomizedDeadSurvivorBase
    export class RDSCorpsePsycho {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.areas.IsoBuilding): void;
      addBarricade(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addRandomRangedWeapon(arg0: zombie.inventory.ItemContainer, arg1: boolean, arg2: boolean, arg3: boolean): zombie.inventory.types.HandWeapon;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addWorldItem(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): zombie.inventory.InventoryItem;
      addZombies(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: number, arg4: zombie.iso.RoomDef): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getDoor(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoDoor;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumDays(): number;
      getMinimumRooms(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getWindow(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      init(): void;
      initAllRBMapChance(): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlwaysDo(): boolean;
      isTableFor3DItems(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.BuildingDef, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeBuilding(arg0: zombie.iso.BuildingDef): void;
      randomizeDeadSurvivor(arg0: zombie.iso.BuildingDef): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAlwaysDo(arg0: boolean): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setMinimumRooms(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnItemsInContainers(arg0: zombie.iso.BuildingDef, arg1: string, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedDeadSurvivor.RDSDeadDrunk extends zombie.randomizedWorld.randomizedDeadSurvivor.RandomizedDeadSurvivorBase
    export class RDSDeadDrunk {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.areas.IsoBuilding): void;
      addBarricade(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addRandomRangedWeapon(arg0: zombie.inventory.ItemContainer, arg1: boolean, arg2: boolean, arg3: boolean): zombie.inventory.types.HandWeapon;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addWorldItem(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): zombie.inventory.InventoryItem;
      addZombies(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: number, arg4: zombie.iso.RoomDef): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getDoor(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoDoor;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumDays(): number;
      getMinimumRooms(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getWindow(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      init(): void;
      initAllRBMapChance(): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlwaysDo(): boolean;
      isTableFor3DItems(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.BuildingDef, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeBuilding(arg0: zombie.iso.BuildingDef): void;
      randomizeDeadSurvivor(arg0: zombie.iso.BuildingDef): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAlwaysDo(arg0: boolean): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setMinimumRooms(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnItemsInContainers(arg0: zombie.iso.BuildingDef, arg1: string, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedDeadSurvivor.RDSFootballNight extends zombie.randomizedWorld.randomizedDeadSurvivor.RandomizedDeadSurvivorBase
    export class RDSFootballNight {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.areas.IsoBuilding): void;
      addBarricade(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addRandomRangedWeapon(arg0: zombie.inventory.ItemContainer, arg1: boolean, arg2: boolean, arg3: boolean): zombie.inventory.types.HandWeapon;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addWorldItem(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): zombie.inventory.InventoryItem;
      addZombies(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: number, arg4: zombie.iso.RoomDef): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getDoor(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoDoor;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumDays(): number;
      getMinimumRooms(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getWindow(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      init(): void;
      initAllRBMapChance(): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlwaysDo(): boolean;
      isTableFor3DItems(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.BuildingDef, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeBuilding(arg0: zombie.iso.BuildingDef): void;
      randomizeDeadSurvivor(arg0: zombie.iso.BuildingDef): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAlwaysDo(arg0: boolean): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setMinimumRooms(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnItemsInContainers(arg0: zombie.iso.BuildingDef, arg1: string, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedDeadSurvivor.RDSGunmanInBathroom extends zombie.randomizedWorld.randomizedDeadSurvivor.RandomizedDeadSurvivorBase
    export class RDSGunmanInBathroom {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.areas.IsoBuilding): void;
      addBarricade(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addRandomRangedWeapon(arg0: zombie.inventory.ItemContainer, arg1: boolean, arg2: boolean, arg3: boolean): zombie.inventory.types.HandWeapon;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addWorldItem(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): zombie.inventory.InventoryItem;
      addZombies(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: number, arg4: zombie.iso.RoomDef): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getDoor(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoDoor;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumDays(): number;
      getMinimumRooms(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getWindow(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      init(): void;
      initAllRBMapChance(): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlwaysDo(): boolean;
      isTableFor3DItems(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.BuildingDef, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeBuilding(arg0: zombie.iso.BuildingDef): void;
      randomizeDeadSurvivor(arg0: zombie.iso.BuildingDef): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAlwaysDo(arg0: boolean): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setMinimumRooms(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnItemsInContainers(arg0: zombie.iso.BuildingDef, arg1: string, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedDeadSurvivor.RDSGunslinger extends zombie.randomizedWorld.randomizedDeadSurvivor.RandomizedDeadSurvivorBase
    export class RDSGunslinger {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.areas.IsoBuilding): void;
      addBarricade(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addRandomRangedWeapon(arg0: zombie.inventory.ItemContainer, arg1: boolean, arg2: boolean, arg3: boolean): zombie.inventory.types.HandWeapon;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addWorldItem(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): zombie.inventory.InventoryItem;
      addZombies(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: number, arg4: zombie.iso.RoomDef): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getDoor(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoDoor;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumDays(): number;
      getMinimumRooms(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getWindow(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      init(): void;
      initAllRBMapChance(): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlwaysDo(): boolean;
      isTableFor3DItems(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.BuildingDef, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeBuilding(arg0: zombie.iso.BuildingDef): void;
      randomizeDeadSurvivor(arg0: zombie.iso.BuildingDef): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAlwaysDo(arg0: boolean): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setMinimumRooms(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnItemsInContainers(arg0: zombie.iso.BuildingDef, arg1: string, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedDeadSurvivor.RDSHenDo extends zombie.randomizedWorld.randomizedDeadSurvivor.RandomizedDeadSurvivorBase
    export class RDSHenDo {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.areas.IsoBuilding): void;
      addBarricade(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addRandomRangedWeapon(arg0: zombie.inventory.ItemContainer, arg1: boolean, arg2: boolean, arg3: boolean): zombie.inventory.types.HandWeapon;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addWorldItem(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): zombie.inventory.InventoryItem;
      addZombies(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: number, arg4: zombie.iso.RoomDef): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getDoor(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoDoor;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumDays(): number;
      getMinimumRooms(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getWindow(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      init(): void;
      initAllRBMapChance(): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlwaysDo(): boolean;
      isTableFor3DItems(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.BuildingDef, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeBuilding(arg0: zombie.iso.BuildingDef): void;
      randomizeDeadSurvivor(arg0: zombie.iso.BuildingDef): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAlwaysDo(arg0: boolean): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setMinimumRooms(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnItemsInContainers(arg0: zombie.iso.BuildingDef, arg1: string, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedDeadSurvivor.RDSHockeyPsycho extends zombie.randomizedWorld.randomizedDeadSurvivor.RandomizedDeadSurvivorBase
    export class RDSHockeyPsycho {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.areas.IsoBuilding): void;
      addBarricade(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addRandomRangedWeapon(arg0: zombie.inventory.ItemContainer, arg1: boolean, arg2: boolean, arg3: boolean): zombie.inventory.types.HandWeapon;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addWorldItem(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): zombie.inventory.InventoryItem;
      addZombies(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: number, arg4: zombie.iso.RoomDef): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getDoor(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoDoor;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumDays(): number;
      getMinimumRooms(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getWindow(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      init(): void;
      initAllRBMapChance(): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlwaysDo(): boolean;
      isTableFor3DItems(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.BuildingDef, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeBuilding(arg0: zombie.iso.BuildingDef): void;
      randomizeDeadSurvivor(arg0: zombie.iso.BuildingDef): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAlwaysDo(arg0: boolean): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setMinimumRooms(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnItemsInContainers(arg0: zombie.iso.BuildingDef, arg1: string, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedDeadSurvivor.RDSHouseParty extends zombie.randomizedWorld.randomizedDeadSurvivor.RandomizedDeadSurvivorBase
    export class RDSHouseParty {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.areas.IsoBuilding): void;
      addBarricade(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addRandomRangedWeapon(arg0: zombie.inventory.ItemContainer, arg1: boolean, arg2: boolean, arg3: boolean): zombie.inventory.types.HandWeapon;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addWorldItem(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): zombie.inventory.InventoryItem;
      addZombies(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: number, arg4: zombie.iso.RoomDef): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getDoor(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoDoor;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumDays(): number;
      getMinimumRooms(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getWindow(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      init(): void;
      initAllRBMapChance(): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlwaysDo(): boolean;
      isTableFor3DItems(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.BuildingDef, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeBuilding(arg0: zombie.iso.BuildingDef): void;
      randomizeDeadSurvivor(arg0: zombie.iso.BuildingDef): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAlwaysDo(arg0: boolean): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setMinimumRooms(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnItemsInContainers(arg0: zombie.iso.BuildingDef, arg1: string, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedDeadSurvivor.RDSPokerNight extends zombie.randomizedWorld.randomizedDeadSurvivor.RandomizedDeadSurvivorBase
    export class RDSPokerNight {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.areas.IsoBuilding): void;
      addBarricade(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addRandomRangedWeapon(arg0: zombie.inventory.ItemContainer, arg1: boolean, arg2: boolean, arg3: boolean): zombie.inventory.types.HandWeapon;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addWorldItem(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): zombie.inventory.InventoryItem;
      addZombies(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: number, arg4: zombie.iso.RoomDef): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getDoor(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoDoor;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumDays(): number;
      getMinimumRooms(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getWindow(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      init(): void;
      initAllRBMapChance(): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlwaysDo(): boolean;
      isTableFor3DItems(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.BuildingDef, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeBuilding(arg0: zombie.iso.BuildingDef): void;
      randomizeDeadSurvivor(arg0: zombie.iso.BuildingDef): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAlwaysDo(arg0: boolean): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setMinimumRooms(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnItemsInContainers(arg0: zombie.iso.BuildingDef, arg1: string, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedDeadSurvivor.RDSPoliceAtHouse extends zombie.randomizedWorld.randomizedDeadSurvivor.RandomizedDeadSurvivorBase
    export class RDSPoliceAtHouse {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.areas.IsoBuilding): void;
      addBarricade(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addRandomRangedWeapon(arg0: zombie.inventory.ItemContainer, arg1: boolean, arg2: boolean, arg3: boolean): zombie.inventory.types.HandWeapon;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addWorldItem(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): zombie.inventory.InventoryItem;
      addZombies(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: number, arg4: zombie.iso.RoomDef): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getDoor(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoDoor;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumDays(): number;
      getMinimumRooms(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getWindow(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      init(): void;
      initAllRBMapChance(): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlwaysDo(): boolean;
      isTableFor3DItems(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.BuildingDef, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeBuilding(arg0: zombie.iso.BuildingDef): void;
      randomizeDeadSurvivor(arg0: zombie.iso.BuildingDef): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAlwaysDo(arg0: boolean): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setMinimumRooms(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnItemsInContainers(arg0: zombie.iso.BuildingDef, arg1: string, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedDeadSurvivor.RDSPrisonEscape extends zombie.randomizedWorld.randomizedDeadSurvivor.RandomizedDeadSurvivorBase
    export class RDSPrisonEscape {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.areas.IsoBuilding): void;
      addBarricade(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addRandomRangedWeapon(arg0: zombie.inventory.ItemContainer, arg1: boolean, arg2: boolean, arg3: boolean): zombie.inventory.types.HandWeapon;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addWorldItem(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): zombie.inventory.InventoryItem;
      addZombies(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: number, arg4: zombie.iso.RoomDef): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getDoor(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoDoor;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumDays(): number;
      getMinimumRooms(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getWindow(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      init(): void;
      initAllRBMapChance(): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlwaysDo(): boolean;
      isTableFor3DItems(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.BuildingDef, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeBuilding(arg0: zombie.iso.BuildingDef): void;
      randomizeDeadSurvivor(arg0: zombie.iso.BuildingDef): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAlwaysDo(arg0: boolean): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setMinimumRooms(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnItemsInContainers(arg0: zombie.iso.BuildingDef, arg1: string, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedDeadSurvivor.RDSPrisonEscapeWithPolice extends zombie.randomizedWorld.randomizedDeadSurvivor.RandomizedDeadSurvivorBase
    export class RDSPrisonEscapeWithPolice {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.areas.IsoBuilding): void;
      addBarricade(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addRandomRangedWeapon(arg0: zombie.inventory.ItemContainer, arg1: boolean, arg2: boolean, arg3: boolean): zombie.inventory.types.HandWeapon;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addWorldItem(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): zombie.inventory.InventoryItem;
      addZombies(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: number, arg4: zombie.iso.RoomDef): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getDoor(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoDoor;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumDays(): number;
      getMinimumRooms(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getWindow(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      init(): void;
      initAllRBMapChance(): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlwaysDo(): boolean;
      isTableFor3DItems(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.BuildingDef, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeBuilding(arg0: zombie.iso.BuildingDef): void;
      randomizeDeadSurvivor(arg0: zombie.iso.BuildingDef): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAlwaysDo(arg0: boolean): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setMinimumRooms(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnItemsInContainers(arg0: zombie.iso.BuildingDef, arg1: string, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedDeadSurvivor.RDSSkeletonPsycho extends zombie.randomizedWorld.randomizedDeadSurvivor.RandomizedDeadSurvivorBase
    export class RDSSkeletonPsycho {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.areas.IsoBuilding): void;
      addBarricade(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addRandomRangedWeapon(arg0: zombie.inventory.ItemContainer, arg1: boolean, arg2: boolean, arg3: boolean): zombie.inventory.types.HandWeapon;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addWorldItem(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): zombie.inventory.InventoryItem;
      addZombies(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: number, arg4: zombie.iso.RoomDef): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getDoor(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoDoor;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumDays(): number;
      getMinimumRooms(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getWindow(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      init(): void;
      initAllRBMapChance(): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlwaysDo(): boolean;
      isTableFor3DItems(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.BuildingDef, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeBuilding(arg0: zombie.iso.BuildingDef): void;
      randomizeDeadSurvivor(arg0: zombie.iso.BuildingDef): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAlwaysDo(arg0: boolean): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setMinimumRooms(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnItemsInContainers(arg0: zombie.iso.BuildingDef, arg1: string, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedDeadSurvivor.RDSSpecificProfession extends zombie.randomizedWorld.randomizedDeadSurvivor.RandomizedDeadSurvivorBase
    export class RDSSpecificProfession {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.areas.IsoBuilding): void;
      addBarricade(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addRandomRangedWeapon(arg0: zombie.inventory.ItemContainer, arg1: boolean, arg2: boolean, arg3: boolean): zombie.inventory.types.HandWeapon;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addWorldItem(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): zombie.inventory.InventoryItem;
      addZombies(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: number, arg4: zombie.iso.RoomDef): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getDoor(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoDoor;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumDays(): number;
      getMinimumRooms(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getWindow(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      init(): void;
      initAllRBMapChance(): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlwaysDo(): boolean;
      isTableFor3DItems(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.BuildingDef, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeBuilding(arg0: zombie.iso.BuildingDef): void;
      randomizeDeadSurvivor(arg0: zombie.iso.BuildingDef): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAlwaysDo(arg0: boolean): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setMinimumRooms(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnItemsInContainers(arg0: zombie.iso.BuildingDef, arg1: string, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedDeadSurvivor.RDSStagDo extends zombie.randomizedWorld.randomizedDeadSurvivor.RandomizedDeadSurvivorBase
    export class RDSStagDo {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.areas.IsoBuilding): void;
      addBarricade(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addRandomRangedWeapon(arg0: zombie.inventory.ItemContainer, arg1: boolean, arg2: boolean, arg3: boolean): zombie.inventory.types.HandWeapon;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addWorldItem(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): zombie.inventory.InventoryItem;
      addZombies(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: number, arg4: zombie.iso.RoomDef): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getDoor(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoDoor;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumDays(): number;
      getMinimumRooms(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getWindow(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      init(): void;
      initAllRBMapChance(): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlwaysDo(): boolean;
      isTableFor3DItems(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.BuildingDef, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeBuilding(arg0: zombie.iso.BuildingDef): void;
      randomizeDeadSurvivor(arg0: zombie.iso.BuildingDef): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAlwaysDo(arg0: boolean): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setMinimumRooms(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnItemsInContainers(arg0: zombie.iso.BuildingDef, arg1: string, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedDeadSurvivor.RDSStudentNight extends zombie.randomizedWorld.randomizedDeadSurvivor.RandomizedDeadSurvivorBase
    export class RDSStudentNight {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.areas.IsoBuilding): void;
      addBarricade(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addRandomRangedWeapon(arg0: zombie.inventory.ItemContainer, arg1: boolean, arg2: boolean, arg3: boolean): zombie.inventory.types.HandWeapon;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addWorldItem(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): zombie.inventory.InventoryItem;
      addZombies(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: number, arg4: zombie.iso.RoomDef): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getDoor(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoDoor;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumDays(): number;
      getMinimumRooms(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getWindow(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      init(): void;
      initAllRBMapChance(): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlwaysDo(): boolean;
      isTableFor3DItems(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.BuildingDef, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeBuilding(arg0: zombie.iso.BuildingDef): void;
      randomizeDeadSurvivor(arg0: zombie.iso.BuildingDef): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAlwaysDo(arg0: boolean): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setMinimumRooms(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnItemsInContainers(arg0: zombie.iso.BuildingDef, arg1: string, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedDeadSurvivor.RDSSuicidePact extends zombie.randomizedWorld.randomizedDeadSurvivor.RandomizedDeadSurvivorBase
    export class RDSSuicidePact {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.areas.IsoBuilding): void;
      addBarricade(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addRandomRangedWeapon(arg0: zombie.inventory.ItemContainer, arg1: boolean, arg2: boolean, arg3: boolean): zombie.inventory.types.HandWeapon;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addWorldItem(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): zombie.inventory.InventoryItem;
      addZombies(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: number, arg4: zombie.iso.RoomDef): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getDoor(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoDoor;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumDays(): number;
      getMinimumRooms(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getWindow(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      init(): void;
      initAllRBMapChance(): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlwaysDo(): boolean;
      isTableFor3DItems(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.BuildingDef, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeBuilding(arg0: zombie.iso.BuildingDef): void;
      randomizeDeadSurvivor(arg0: zombie.iso.BuildingDef): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAlwaysDo(arg0: boolean): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setMinimumRooms(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnItemsInContainers(arg0: zombie.iso.BuildingDef, arg1: string, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedDeadSurvivor.RDSTinFoilHat extends zombie.randomizedWorld.randomizedDeadSurvivor.RandomizedDeadSurvivorBase
    export class RDSTinFoilHat {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.areas.IsoBuilding): void;
      addBarricade(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addRandomRangedWeapon(arg0: zombie.inventory.ItemContainer, arg1: boolean, arg2: boolean, arg3: boolean): zombie.inventory.types.HandWeapon;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addWorldItem(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): zombie.inventory.InventoryItem;
      addZombies(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: number, arg4: zombie.iso.RoomDef): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getDoor(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoDoor;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumDays(): number;
      getMinimumRooms(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getWindow(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      init(): void;
      initAllRBMapChance(): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlwaysDo(): boolean;
      isTableFor3DItems(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.BuildingDef, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeBuilding(arg0: zombie.iso.BuildingDef): void;
      randomizeDeadSurvivor(arg0: zombie.iso.BuildingDef): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAlwaysDo(arg0: boolean): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setMinimumRooms(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnItemsInContainers(arg0: zombie.iso.BuildingDef, arg1: string, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedDeadSurvivor.RDSZombieLockedBathroom extends zombie.randomizedWorld.randomizedDeadSurvivor.RandomizedDeadSurvivorBase
    export class RDSZombieLockedBathroom {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.areas.IsoBuilding): void;
      addBarricade(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addRandomRangedWeapon(arg0: zombie.inventory.ItemContainer, arg1: boolean, arg2: boolean, arg3: boolean): zombie.inventory.types.HandWeapon;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addWorldItem(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): zombie.inventory.InventoryItem;
      addZombies(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: number, arg4: zombie.iso.RoomDef): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getDoor(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoDoor;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumDays(): number;
      getMinimumRooms(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getWindow(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      init(): void;
      initAllRBMapChance(): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlwaysDo(): boolean;
      isTableFor3DItems(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.BuildingDef, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeBuilding(arg0: zombie.iso.BuildingDef): void;
      randomizeDeadSurvivor(arg0: zombie.iso.BuildingDef): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAlwaysDo(arg0: boolean): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setMinimumRooms(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnItemsInContainers(arg0: zombie.iso.BuildingDef, arg1: string, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedDeadSurvivor.RDSZombiesEating extends zombie.randomizedWorld.randomizedDeadSurvivor.RandomizedDeadSurvivorBase
    export class RDSZombiesEating {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.areas.IsoBuilding): void;
      addBarricade(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addRandomRangedWeapon(arg0: zombie.inventory.ItemContainer, arg1: boolean, arg2: boolean, arg3: boolean): zombie.inventory.types.HandWeapon;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addWorldItem(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): zombie.inventory.InventoryItem;
      addZombies(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: number, arg4: zombie.iso.RoomDef): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getDoor(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoDoor;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumDays(): number;
      getMinimumRooms(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getWindow(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      init(): void;
      initAllRBMapChance(): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlwaysDo(): boolean;
      isTableFor3DItems(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.BuildingDef, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeBuilding(arg0: zombie.iso.BuildingDef): void;
      randomizeDeadSurvivor(arg0: zombie.iso.BuildingDef): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAlwaysDo(arg0: boolean): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setMinimumRooms(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnItemsInContainers(arg0: zombie.iso.BuildingDef, arg1: string, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedDeadSurvivor.RandomizedDeadSurvivorBase extends zombie.randomizedWorld.randomizedBuilding.RandomizedBuildingBase
    export class RandomizedDeadSurvivorBase {
      private constructor();
      ChunkLoaded(arg0: zombie.iso.areas.IsoBuilding): void;
      addBarricade(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addRandomRangedWeapon(arg0: zombie.inventory.ItemContainer, arg1: boolean, arg2: boolean, arg3: boolean): zombie.inventory.types.HandWeapon;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addWorldItem(arg0: string, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): zombie.inventory.InventoryItem;
      addZombies(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: number, arg4: zombie.iso.RoomDef): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getDoor(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoDoor;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumDays(): number;
      getMinimumRooms(): number;
      getName(): string;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getWindow(arg0: zombie.iso.IsoGridSquare): zombie.iso.objects.IsoWindow;
      hashCode(): number;
      init(): void;
      initAllRBMapChance(): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isAlwaysDo(): boolean;
      isTableFor3DItems(arg0: zombie.iso.IsoObject, arg1: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.BuildingDef, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeBuilding(arg0: zombie.iso.BuildingDef): void;
      randomizeDeadSurvivor(arg0: zombie.iso.BuildingDef): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAlwaysDo(arg0: boolean): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setMinimumRooms(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnItemsInContainers(arg0: zombie.iso.BuildingDef, arg1: string, arg2: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.randomizedWorld.randomizedVehicleStory {
    // zombie.randomizedWorld.randomizedVehicleStory.RVSAmbulanceCrash extends zombie.randomizedWorld.randomizedVehicleStory.RandomizedVehicleStoryBase
    export class RVSAmbulanceCrash {
      private constructor();
      static readonly baseChance: number;
  
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addSmashedOverlay(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.vehicles.BaseVehicle, arg2: number, arg3: number, arg4: boolean, arg5: boolean): zombie.vehicles.BaseVehicle[];
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      callVehicleStorySpawner(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number): boolean;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      doRandomStory(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: boolean): boolean;
      equals(arg0: any): boolean;
      getCenterOfChunk(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): zombie.iso.IsoGridSquare;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinZoneHeight(): number;
      getMinZoneWidth(): number;
      getMinimumDays(): number;
      getName(): string;
      getPolylineSpawnPoint(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number[]): boolean;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRectangleSpawnPoint(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number[]): boolean;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSpawnPoint(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number[]): boolean;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      hashCode(): number;
      initAllRVSMapChance(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): void;
      initSpawnDataForChunk(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawnData;
      initVehicleStorySpawner(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: boolean): boolean;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isChunkLoaded(arg0: number, arg1: number): boolean;
      isFullyStreamedIn(arg0: number, arg1: number, arg2: number, arg3: number): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeVehicleStory(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): void;
      registerCustomOutfits(): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnElement(arg0: zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawner, arg1: zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawner$Element): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedVehicleStory.RVSBanditRoad extends zombie.randomizedWorld.randomizedVehicleStory.RandomizedVehicleStoryBase
    export class RVSBanditRoad {
      private constructor();
      static readonly baseChance: number;
  
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addSmashedOverlay(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.vehicles.BaseVehicle, arg2: number, arg3: number, arg4: boolean, arg5: boolean): zombie.vehicles.BaseVehicle[];
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      callVehicleStorySpawner(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number): boolean;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      doRandomStory(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: boolean): boolean;
      equals(arg0: any): boolean;
      getCenterOfChunk(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): zombie.iso.IsoGridSquare;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinZoneHeight(): number;
      getMinZoneWidth(): number;
      getMinimumDays(): number;
      getName(): string;
      getPolylineSpawnPoint(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number[]): boolean;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRectangleSpawnPoint(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number[]): boolean;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSpawnPoint(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number[]): boolean;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      hashCode(): number;
      initAllRVSMapChance(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): void;
      initSpawnDataForChunk(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawnData;
      initVehicleStorySpawner(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: boolean): boolean;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isChunkLoaded(arg0: number, arg1: number): boolean;
      isFullyStreamedIn(arg0: number, arg1: number, arg2: number, arg3: number): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeVehicleStory(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): void;
      registerCustomOutfits(): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnElement(arg0: zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawner, arg1: zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawner$Element): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedVehicleStory.RVSBurntCar extends zombie.randomizedWorld.randomizedVehicleStory.RandomizedVehicleStoryBase
    export class RVSBurntCar {
      private constructor();
      static readonly baseChance: number;
  
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addSmashedOverlay(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.vehicles.BaseVehicle, arg2: number, arg3: number, arg4: boolean, arg5: boolean): zombie.vehicles.BaseVehicle[];
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      callVehicleStorySpawner(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number): boolean;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      doRandomStory(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: boolean): boolean;
      equals(arg0: any): boolean;
      getCenterOfChunk(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): zombie.iso.IsoGridSquare;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinZoneHeight(): number;
      getMinZoneWidth(): number;
      getMinimumDays(): number;
      getName(): string;
      getPolylineSpawnPoint(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number[]): boolean;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRectangleSpawnPoint(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number[]): boolean;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSpawnPoint(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number[]): boolean;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      hashCode(): number;
      initAllRVSMapChance(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): void;
      initSpawnDataForChunk(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawnData;
      initVehicleStorySpawner(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: boolean): boolean;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isChunkLoaded(arg0: number, arg1: number): boolean;
      isFullyStreamedIn(arg0: number, arg1: number, arg2: number, arg3: number): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeVehicleStory(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): void;
      registerCustomOutfits(): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnElement(arg0: zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawner, arg1: zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawner$Element): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedVehicleStory.RVSCarCrash extends zombie.randomizedWorld.randomizedVehicleStory.RandomizedVehicleStoryBase
    export class RVSCarCrash {
      private constructor();
      static readonly baseChance: number;
  
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addSmashedOverlay(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.vehicles.BaseVehicle, arg2: number, arg3: number, arg4: boolean, arg5: boolean): zombie.vehicles.BaseVehicle[];
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      callVehicleStorySpawner(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number): boolean;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      doRandomStory(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: boolean): boolean;
      equals(arg0: any): boolean;
      getCenterOfChunk(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): zombie.iso.IsoGridSquare;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinZoneHeight(): number;
      getMinZoneWidth(): number;
      getMinimumDays(): number;
      getName(): string;
      getPolylineSpawnPoint(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number[]): boolean;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRectangleSpawnPoint(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number[]): boolean;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSpawnPoint(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number[]): boolean;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      hashCode(): number;
      initAllRVSMapChance(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): void;
      initSpawnDataForChunk(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawnData;
      initVehicleStorySpawner(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: boolean): boolean;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isChunkLoaded(arg0: number, arg1: number): boolean;
      isFullyStreamedIn(arg0: number, arg1: number, arg2: number, arg3: number): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeVehicleStory(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): void;
      registerCustomOutfits(): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnElement(arg0: zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawner, arg1: zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawner$Element): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedVehicleStory.RVSCarCrashCorpse extends zombie.randomizedWorld.randomizedVehicleStory.RandomizedVehicleStoryBase
    export class RVSCarCrashCorpse {
      private constructor();
      static readonly baseChance: number;
  
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addSmashedOverlay(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.vehicles.BaseVehicle, arg2: number, arg3: number, arg4: boolean, arg5: boolean): zombie.vehicles.BaseVehicle[];
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      callVehicleStorySpawner(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number): boolean;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      doRandomStory(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: boolean): boolean;
      equals(arg0: any): boolean;
      getCenterOfChunk(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): zombie.iso.IsoGridSquare;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinZoneHeight(): number;
      getMinZoneWidth(): number;
      getMinimumDays(): number;
      getName(): string;
      getPolylineSpawnPoint(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number[]): boolean;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRectangleSpawnPoint(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number[]): boolean;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSpawnPoint(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number[]): boolean;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      hashCode(): number;
      initAllRVSMapChance(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): void;
      initSpawnDataForChunk(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawnData;
      initVehicleStorySpawner(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: boolean): boolean;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isChunkLoaded(arg0: number, arg1: number): boolean;
      isFullyStreamedIn(arg0: number, arg1: number, arg2: number, arg3: number): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeVehicleStory(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): void;
      registerCustomOutfits(): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnElement(arg0: zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawner, arg1: zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawner$Element): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedVehicleStory.RVSChangingTire extends zombie.randomizedWorld.randomizedVehicleStory.RandomizedVehicleStoryBase
    export class RVSChangingTire {
      private constructor();
      static readonly baseChance: number;
  
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addSmashedOverlay(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.vehicles.BaseVehicle, arg2: number, arg3: number, arg4: boolean, arg5: boolean): zombie.vehicles.BaseVehicle[];
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      callVehicleStorySpawner(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number): boolean;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      doRandomStory(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: boolean): boolean;
      equals(arg0: any): boolean;
      getCenterOfChunk(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): zombie.iso.IsoGridSquare;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinZoneHeight(): number;
      getMinZoneWidth(): number;
      getMinimumDays(): number;
      getName(): string;
      getPolylineSpawnPoint(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number[]): boolean;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRectangleSpawnPoint(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number[]): boolean;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSpawnPoint(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number[]): boolean;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      hashCode(): number;
      initAllRVSMapChance(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): void;
      initSpawnDataForChunk(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawnData;
      initVehicleStorySpawner(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: boolean): boolean;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isChunkLoaded(arg0: number, arg1: number): boolean;
      isFullyStreamedIn(arg0: number, arg1: number, arg2: number, arg3: number): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeVehicleStory(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): void;
      registerCustomOutfits(): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnElement(arg0: zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawner, arg1: zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawner$Element): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedVehicleStory.RVSConstructionSite extends zombie.randomizedWorld.randomizedVehicleStory.RandomizedVehicleStoryBase
    export class RVSConstructionSite {
      private constructor();
      static readonly baseChance: number;
  
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addSmashedOverlay(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.vehicles.BaseVehicle, arg2: number, arg3: number, arg4: boolean, arg5: boolean): zombie.vehicles.BaseVehicle[];
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      callVehicleStorySpawner(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number): boolean;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      doRandomStory(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: boolean): boolean;
      equals(arg0: any): boolean;
      getCenterOfChunk(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): zombie.iso.IsoGridSquare;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinZoneHeight(): number;
      getMinZoneWidth(): number;
      getMinimumDays(): number;
      getName(): string;
      getPolylineSpawnPoint(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number[]): boolean;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRectangleSpawnPoint(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number[]): boolean;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSpawnPoint(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number[]): boolean;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      hashCode(): number;
      initAllRVSMapChance(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): void;
      initSpawnDataForChunk(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawnData;
      initVehicleStorySpawner(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: boolean): boolean;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isChunkLoaded(arg0: number, arg1: number): boolean;
      isFullyStreamedIn(arg0: number, arg1: number, arg2: number, arg3: number): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeVehicleStory(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): void;
      registerCustomOutfits(): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnElement(arg0: zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawner, arg1: zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawner$Element): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedVehicleStory.RVSCrashHorde extends zombie.randomizedWorld.randomizedVehicleStory.RandomizedVehicleStoryBase
    export class RVSCrashHorde {
      private constructor();
      static readonly baseChance: number;
  
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addSmashedOverlay(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.vehicles.BaseVehicle, arg2: number, arg3: number, arg4: boolean, arg5: boolean): zombie.vehicles.BaseVehicle[];
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      callVehicleStorySpawner(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number): boolean;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      doRandomStory(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: boolean): boolean;
      equals(arg0: any): boolean;
      getCenterOfChunk(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): zombie.iso.IsoGridSquare;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinZoneHeight(): number;
      getMinZoneWidth(): number;
      getMinimumDays(): number;
      getName(): string;
      getPolylineSpawnPoint(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number[]): boolean;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRectangleSpawnPoint(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number[]): boolean;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSpawnPoint(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number[]): boolean;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      hashCode(): number;
      initAllRVSMapChance(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): void;
      initSpawnDataForChunk(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawnData;
      initVehicleStorySpawner(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: boolean): boolean;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isChunkLoaded(arg0: number, arg1: number): boolean;
      isFullyStreamedIn(arg0: number, arg1: number, arg2: number, arg3: number): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeVehicleStory(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): void;
      registerCustomOutfits(): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnElement(arg0: zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawner, arg1: zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawner$Element): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedVehicleStory.RVSFlippedCrash extends zombie.randomizedWorld.randomizedVehicleStory.RandomizedVehicleStoryBase
    export class RVSFlippedCrash {
      private constructor();
      static readonly baseChance: number;
  
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addSmashedOverlay(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.vehicles.BaseVehicle, arg2: number, arg3: number, arg4: boolean, arg5: boolean): zombie.vehicles.BaseVehicle[];
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      callVehicleStorySpawner(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number): boolean;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      doRandomStory(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: boolean): boolean;
      equals(arg0: any): boolean;
      getCenterOfChunk(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): zombie.iso.IsoGridSquare;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinZoneHeight(): number;
      getMinZoneWidth(): number;
      getMinimumDays(): number;
      getName(): string;
      getPolylineSpawnPoint(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number[]): boolean;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRectangleSpawnPoint(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number[]): boolean;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSpawnPoint(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number[]): boolean;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      hashCode(): number;
      initAllRVSMapChance(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): void;
      initSpawnDataForChunk(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawnData;
      initVehicleStorySpawner(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: boolean): boolean;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isChunkLoaded(arg0: number, arg1: number): boolean;
      isFullyStreamedIn(arg0: number, arg1: number, arg2: number, arg3: number): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeVehicleStory(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): void;
      registerCustomOutfits(): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnElement(arg0: zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawner, arg1: zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawner$Element): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedVehicleStory.RVSPoliceBlockade extends zombie.randomizedWorld.randomizedVehicleStory.RandomizedVehicleStoryBase
    export class RVSPoliceBlockade {
      private constructor();
      static readonly baseChance: number;
  
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addSmashedOverlay(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.vehicles.BaseVehicle, arg2: number, arg3: number, arg4: boolean, arg5: boolean): zombie.vehicles.BaseVehicle[];
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      callVehicleStorySpawner(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number): boolean;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      doRandomStory(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: boolean): boolean;
      equals(arg0: any): boolean;
      getCenterOfChunk(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): zombie.iso.IsoGridSquare;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinZoneHeight(): number;
      getMinZoneWidth(): number;
      getMinimumDays(): number;
      getName(): string;
      getPolylineSpawnPoint(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number[]): boolean;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRectangleSpawnPoint(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number[]): boolean;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSpawnPoint(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number[]): boolean;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      hashCode(): number;
      initAllRVSMapChance(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): void;
      initSpawnDataForChunk(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawnData;
      initVehicleStorySpawner(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: boolean): boolean;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isChunkLoaded(arg0: number, arg1: number): boolean;
      isFullyStreamedIn(arg0: number, arg1: number, arg2: number, arg3: number): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeVehicleStory(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): void;
      registerCustomOutfits(): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnElement(arg0: zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawner, arg1: zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawner$Element): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedVehicleStory.RVSPoliceBlockadeShooting extends zombie.randomizedWorld.randomizedVehicleStory.RandomizedVehicleStoryBase
    export class RVSPoliceBlockadeShooting {
      private constructor();
      static readonly baseChance: number;
  
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addSmashedOverlay(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.vehicles.BaseVehicle, arg2: number, arg3: number, arg4: boolean, arg5: boolean): zombie.vehicles.BaseVehicle[];
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      callVehicleStorySpawner(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number): boolean;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      doRandomStory(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: boolean): boolean;
      equals(arg0: any): boolean;
      getCenterOfChunk(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): zombie.iso.IsoGridSquare;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinZoneHeight(): number;
      getMinZoneWidth(): number;
      getMinimumDays(): number;
      getName(): string;
      getPolylineSpawnPoint(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number[]): boolean;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRectangleSpawnPoint(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number[]): boolean;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSpawnPoint(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number[]): boolean;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      hashCode(): number;
      initAllRVSMapChance(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): void;
      initSpawnDataForChunk(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawnData;
      initVehicleStorySpawner(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: boolean): boolean;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isChunkLoaded(arg0: number, arg1: number): boolean;
      isFullyStreamedIn(arg0: number, arg1: number, arg2: number, arg3: number): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeVehicleStory(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): void;
      registerCustomOutfits(): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnElement(arg0: zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawner, arg1: zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawner$Element): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedVehicleStory.RVSTrailerCrash extends zombie.randomizedWorld.randomizedVehicleStory.RandomizedVehicleStoryBase
    export class RVSTrailerCrash {
      private constructor();
      static readonly baseChance: number;
  
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addSmashedOverlay(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.vehicles.BaseVehicle, arg2: number, arg3: number, arg4: boolean, arg5: boolean): zombie.vehicles.BaseVehicle[];
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      callVehicleStorySpawner(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number): boolean;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      doRandomStory(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: boolean): boolean;
      equals(arg0: any): boolean;
      getCenterOfChunk(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): zombie.iso.IsoGridSquare;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinZoneHeight(): number;
      getMinZoneWidth(): number;
      getMinimumDays(): number;
      getName(): string;
      getPolylineSpawnPoint(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number[]): boolean;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRectangleSpawnPoint(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number[]): boolean;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSpawnPoint(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number[]): boolean;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      hashCode(): number;
      initAllRVSMapChance(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): void;
      initSpawnDataForChunk(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawnData;
      initVehicleStorySpawner(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: boolean): boolean;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isChunkLoaded(arg0: number, arg1: number): boolean;
      isFullyStreamedIn(arg0: number, arg1: number, arg2: number, arg3: number): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeVehicleStory(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): void;
      registerCustomOutfits(): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnElement(arg0: zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawner, arg1: zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawner$Element): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedVehicleStory.RVSUtilityVehicle extends zombie.randomizedWorld.randomizedVehicleStory.RandomizedVehicleStoryBase
    export class RVSUtilityVehicle {
      private constructor();
      static readonly baseChance: number;
  
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addSmashedOverlay(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.vehicles.BaseVehicle, arg2: number, arg3: number, arg4: boolean, arg5: boolean): zombie.vehicles.BaseVehicle[];
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      callVehicleStorySpawner(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number): boolean;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      doRandomStory(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: boolean): boolean;
      doUtilityVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: string, arg3: string, arg4: string, arg5: number, arg6: string, arg7: java.util.ArrayList<string>, arg8: number, arg9: boolean): void;
      equals(arg0: any): boolean;
      getCenterOfChunk(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): zombie.iso.IsoGridSquare;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinZoneHeight(): number;
      getMinZoneWidth(): number;
      getMinimumDays(): number;
      getName(): string;
      getPolylineSpawnPoint(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number[]): boolean;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRectangleSpawnPoint(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number[]): boolean;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSpawnPoint(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number[]): boolean;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      hashCode(): number;
      initAllRVSMapChance(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): void;
      initSpawnDataForChunk(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawnData;
      initVehicleStorySpawner(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: boolean): boolean;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isChunkLoaded(arg0: number, arg1: number): boolean;
      isFullyStreamedIn(arg0: number, arg1: number, arg2: number, arg3: number): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeVehicleStory(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): void;
      registerCustomOutfits(): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnElement(arg0: zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawner, arg1: zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawner$Element): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedVehicleStory.RandomizedVehicleStoryBase extends zombie.randomizedWorld.RandomizedWorldBase
    export class RandomizedVehicleStoryBase {
      private constructor();
      static readonly baseChance: number;
  
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addSmashedOverlay(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.vehicles.BaseVehicle, arg2: number, arg3: number, arg4: boolean, arg5: boolean): zombie.vehicles.BaseVehicle[];
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      callVehicleStorySpawner(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number): boolean;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      doRandomStory(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: boolean): boolean;
      equals(arg0: any): boolean;
      getCenterOfChunk(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): zombie.iso.IsoGridSquare;
      getChance(): number;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinZoneHeight(): number;
      getMinZoneWidth(): number;
      getMinimumDays(): number;
      getName(): string;
      getPolylineSpawnPoint(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number[]): boolean;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRectangleSpawnPoint(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number[]): boolean;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSpawnPoint(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: number[]): boolean;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      hashCode(): number;
      initAllRVSMapChance(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): void;
      initSpawnDataForChunk(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawnData;
      initVehicleStorySpawner(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: boolean): boolean;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isChunkLoaded(arg0: number, arg1: number): boolean;
      isFullyStreamedIn(arg0: number, arg1: number, arg2: number, arg3: number): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk, arg2: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeVehicleStory(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): void;
      registerCustomOutfits(): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setChance(arg0: number): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setMinimumDays(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      spawnElement(arg0: zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawner, arg1: zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawner$Element): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawnData extends java.lang.Object
    export class VehicleStorySpawnData {
      private constructor();
      m_direction: number;
      m_spawnX: number;
      m_spawnY: number;
      m_story?: zombie.randomizedWorld.randomizedVehicleStory.RandomizedVehicleStoryBase;
      m_x1: number;
      m_x2: number;
      m_y1: number;
      m_y2: number;
      m_zone?: zombie.iso.IsoMetaGrid$Zone;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      isValid(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoChunk): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawner extends java.lang.Object
    export class VehicleStorySpawner {
      private constructor();
      readonly m_elements?: java.util.ArrayList<zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawner$Element>;
      readonly m_storyParams?: java.util.HashMap<string, any>;
  
      addElement(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawner$Element;
      clear(): void;
      equals(arg0: any): boolean;
      getAABB(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number[]): void;
      getClass(): java.lang.Class<any>;
      getInstance(): zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawner;
      getParameter<E>(arg0: string, arg1: java.lang.Class<E>): E;
      getParameterBoolean(arg0: string): boolean;
      getParameterFloat(arg0: string): number;
      getParameterInteger(arg0: string): number;
      getParameterString(arg0: string): string;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      render(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
      rotate(arg0: number, arg1: number, arg2: zombie.iso.Vector2, arg3: number): zombie.iso.Vector2;
      setParameter(arg0: string, arg1: any): void;
      spawn(arg0: number, arg1: number, arg2: number, arg3: number, arg4: zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawner$IElementSpawner): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawner$Element extends java.lang.Object
    export class VehicleStorySpawner$Element {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawner$IElementSpawner
    export class VehicleStorySpawner$IElementSpawner {
      private constructor();
      spawn(arg0: zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawner, arg1: zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawner$Element): void;
    }
  }
  export namespace zombie.randomizedWorld.randomizedZoneStory {
    // zombie.randomizedWorld.randomizedZoneStory.RZSBBQParty extends zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase
    export class RZSBBQParty {
      private constructor();
      alwaysDo: boolean;
      static readonly baseChance: number;
      chance: number;
      static totalChance: number;
      static readonly zoneStory?: string;
      readonly zoneType?: java.util.ArrayList<string>;
  
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      cleanAreaForStory(arg0: zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase, arg1: zombie.iso.IsoMetaGrid$Zone): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getBeachClutter(): java.util.ArrayList<string>;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumHeight(): number;
      getMinimumWidth(): number;
      getName(): string;
      getRandomFreeSquare(arg0: zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase, arg1: zombie.iso.IsoMetaGrid$Zone): zombie.iso.IsoGridSquare;
      getRandomFreeSquareFullZone(arg0: zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase, arg1: zombie.iso.IsoMetaGrid$Zone): zombie.iso.IsoGridSquare;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      hashCode(): number;
      initAllRZSMapChance(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: boolean): boolean;
      isValidForStory(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeZoneStory(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedZoneStory.RZSBaseball extends zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase
    export class RZSBaseball {
      private constructor();
      alwaysDo: boolean;
      static readonly baseChance: number;
      chance: number;
      static totalChance: number;
      static readonly zoneStory?: string;
      readonly zoneType?: java.util.ArrayList<string>;
  
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      cleanAreaForStory(arg0: zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase, arg1: zombie.iso.IsoMetaGrid$Zone): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumHeight(): number;
      getMinimumWidth(): number;
      getName(): string;
      getRandomFreeSquare(arg0: zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase, arg1: zombie.iso.IsoMetaGrid$Zone): zombie.iso.IsoGridSquare;
      getRandomFreeSquareFullZone(arg0: zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase, arg1: zombie.iso.IsoMetaGrid$Zone): zombie.iso.IsoGridSquare;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      hashCode(): number;
      initAllRZSMapChance(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: boolean): boolean;
      isValidForStory(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeZoneStory(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedZoneStory.RZSBeachParty extends zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase
    export class RZSBeachParty {
      private constructor();
      alwaysDo: boolean;
      static readonly baseChance: number;
      chance: number;
      static totalChance: number;
      static readonly zoneStory?: string;
      readonly zoneType?: java.util.ArrayList<string>;
  
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      cleanAreaForStory(arg0: zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase, arg1: zombie.iso.IsoMetaGrid$Zone): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getBeachClutter(): java.util.ArrayList<string>;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumHeight(): number;
      getMinimumWidth(): number;
      getName(): string;
      getRandomFreeSquare(arg0: zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase, arg1: zombie.iso.IsoMetaGrid$Zone): zombie.iso.IsoGridSquare;
      getRandomFreeSquareFullZone(arg0: zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase, arg1: zombie.iso.IsoMetaGrid$Zone): zombie.iso.IsoGridSquare;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      hashCode(): number;
      initAllRZSMapChance(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: boolean): boolean;
      isValidForStory(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeZoneStory(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedZoneStory.RZSBuryingCamp extends zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase
    export class RZSBuryingCamp {
      private constructor();
      alwaysDo: boolean;
      static readonly baseChance: number;
      chance: number;
      static totalChance: number;
      static readonly zoneStory?: string;
      readonly zoneType?: java.util.ArrayList<string>;
  
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      cleanAreaForStory(arg0: zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase, arg1: zombie.iso.IsoMetaGrid$Zone): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumHeight(): number;
      getMinimumWidth(): number;
      getName(): string;
      getRandomFreeSquare(arg0: zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase, arg1: zombie.iso.IsoMetaGrid$Zone): zombie.iso.IsoGridSquare;
      getRandomFreeSquareFullZone(arg0: zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase, arg1: zombie.iso.IsoMetaGrid$Zone): zombie.iso.IsoGridSquare;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      hashCode(): number;
      initAllRZSMapChance(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: boolean): boolean;
      isValidForStory(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeZoneStory(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedZoneStory.RZSFishingTrip extends zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase
    export class RZSFishingTrip {
      private constructor();
      alwaysDo: boolean;
      static readonly baseChance: number;
      chance: number;
      static totalChance: number;
      static readonly zoneStory?: string;
      readonly zoneType?: java.util.ArrayList<string>;
  
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      cleanAreaForStory(arg0: zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase, arg1: zombie.iso.IsoMetaGrid$Zone): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getFishes(): java.util.ArrayList<string>;
      getFishingTools(): java.util.ArrayList<string>;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumHeight(): number;
      getMinimumWidth(): number;
      getName(): string;
      getRandomFreeSquare(arg0: zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase, arg1: zombie.iso.IsoMetaGrid$Zone): zombie.iso.IsoGridSquare;
      getRandomFreeSquareFullZone(arg0: zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase, arg1: zombie.iso.IsoMetaGrid$Zone): zombie.iso.IsoGridSquare;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      hashCode(): number;
      initAllRZSMapChance(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: boolean): boolean;
      isValidForStory(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeZoneStory(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedZoneStory.RZSForestCamp extends zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase
    export class RZSForestCamp {
      private constructor();
      alwaysDo: boolean;
      static readonly baseChance: number;
      chance: number;
      static totalChance: number;
      static readonly zoneStory?: string;
      readonly zoneType?: java.util.ArrayList<string>;
  
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      cleanAreaForStory(arg0: zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase, arg1: zombie.iso.IsoMetaGrid$Zone): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getCoolerClutter(): java.util.ArrayList<string>;
      getDebugLine(): string;
      getFireClutter(): java.util.ArrayList<string>;
      getForestClutter(): java.util.ArrayList<string>;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumHeight(): number;
      getMinimumWidth(): number;
      getName(): string;
      getRandomFreeSquare(arg0: zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase, arg1: zombie.iso.IsoMetaGrid$Zone): zombie.iso.IsoGridSquare;
      getRandomFreeSquareFullZone(arg0: zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase, arg1: zombie.iso.IsoMetaGrid$Zone): zombie.iso.IsoGridSquare;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      hashCode(): number;
      initAllRZSMapChance(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: boolean): boolean;
      isValidForStory(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeZoneStory(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedZoneStory.RZSForestCampEaten extends zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase
    export class RZSForestCampEaten {
      private constructor();
      alwaysDo: boolean;
      static readonly baseChance: number;
      chance: number;
      static totalChance: number;
      static readonly zoneStory?: string;
      readonly zoneType?: java.util.ArrayList<string>;
  
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      cleanAreaForStory(arg0: zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase, arg1: zombie.iso.IsoMetaGrid$Zone): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumHeight(): number;
      getMinimumWidth(): number;
      getName(): string;
      getRandomFreeSquare(arg0: zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase, arg1: zombie.iso.IsoMetaGrid$Zone): zombie.iso.IsoGridSquare;
      getRandomFreeSquareFullZone(arg0: zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase, arg1: zombie.iso.IsoMetaGrid$Zone): zombie.iso.IsoGridSquare;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      hashCode(): number;
      initAllRZSMapChance(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: boolean): boolean;
      isValidForStory(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeZoneStory(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedZoneStory.RZSHunterCamp extends zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase
    export class RZSHunterCamp {
      private constructor();
      alwaysDo: boolean;
      static readonly baseChance: number;
      chance: number;
      static totalChance: number;
      static readonly zoneStory?: string;
      readonly zoneType?: java.util.ArrayList<string>;
  
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      cleanAreaForStory(arg0: zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase, arg1: zombie.iso.IsoMetaGrid$Zone): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getForestClutter(): java.util.ArrayList<string>;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumHeight(): number;
      getMinimumWidth(): number;
      getName(): string;
      getRandomFreeSquare(arg0: zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase, arg1: zombie.iso.IsoMetaGrid$Zone): zombie.iso.IsoGridSquare;
      getRandomFreeSquareFullZone(arg0: zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase, arg1: zombie.iso.IsoMetaGrid$Zone): zombie.iso.IsoGridSquare;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      hashCode(): number;
      initAllRZSMapChance(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: boolean): boolean;
      isValidForStory(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeZoneStory(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedZoneStory.RZSMusicFest extends zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase
    export class RZSMusicFest {
      private constructor();
      alwaysDo: boolean;
      static readonly baseChance: number;
      chance: number;
      static totalChance: number;
      static readonly zoneStory?: string;
      readonly zoneType?: java.util.ArrayList<string>;
  
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      cleanAreaForStory(arg0: zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase, arg1: zombie.iso.IsoMetaGrid$Zone): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumHeight(): number;
      getMinimumWidth(): number;
      getName(): string;
      getRandomFreeSquare(arg0: zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase, arg1: zombie.iso.IsoMetaGrid$Zone): zombie.iso.IsoGridSquare;
      getRandomFreeSquareFullZone(arg0: zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase, arg1: zombie.iso.IsoMetaGrid$Zone): zombie.iso.IsoGridSquare;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      hashCode(): number;
      initAllRZSMapChance(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: boolean): boolean;
      isValidForStory(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeZoneStory(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedZoneStory.RZSMusicFestStage extends zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase
    export class RZSMusicFestStage {
      private constructor();
      alwaysDo: boolean;
      static readonly baseChance: number;
      chance: number;
      static totalChance: number;
      static readonly zoneStory?: string;
      readonly zoneType?: java.util.ArrayList<string>;
  
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      cleanAreaForStory(arg0: zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase, arg1: zombie.iso.IsoMetaGrid$Zone): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumHeight(): number;
      getMinimumWidth(): number;
      getName(): string;
      getRandomFreeSquare(arg0: zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase, arg1: zombie.iso.IsoMetaGrid$Zone): zombie.iso.IsoGridSquare;
      getRandomFreeSquareFullZone(arg0: zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase, arg1: zombie.iso.IsoMetaGrid$Zone): zombie.iso.IsoGridSquare;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      hashCode(): number;
      initAllRZSMapChance(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: boolean): boolean;
      isValidForStory(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeZoneStory(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedZoneStory.RZSSexyTime extends zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase
    export class RZSSexyTime {
      private constructor();
      alwaysDo: boolean;
      static readonly baseChance: number;
      chance: number;
      static totalChance: number;
      static readonly zoneStory?: string;
      readonly zoneType?: java.util.ArrayList<string>;
  
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      cleanAreaForStory(arg0: zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase, arg1: zombie.iso.IsoMetaGrid$Zone): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumHeight(): number;
      getMinimumWidth(): number;
      getName(): string;
      getRandomFreeSquare(arg0: zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase, arg1: zombie.iso.IsoMetaGrid$Zone): zombie.iso.IsoGridSquare;
      getRandomFreeSquareFullZone(arg0: zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase, arg1: zombie.iso.IsoMetaGrid$Zone): zombie.iso.IsoGridSquare;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      hashCode(): number;
      initAllRZSMapChance(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: boolean): boolean;
      isValidForStory(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeZoneStory(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedZoneStory.RZSTrapperCamp extends zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase
    export class RZSTrapperCamp {
      private constructor();
      alwaysDo: boolean;
      static readonly baseChance: number;
      chance: number;
      static totalChance: number;
      static readonly zoneStory?: string;
      readonly zoneType?: java.util.ArrayList<string>;
  
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      cleanAreaForStory(arg0: zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase, arg1: zombie.iso.IsoMetaGrid$Zone): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumHeight(): number;
      getMinimumWidth(): number;
      getName(): string;
      getRandomFreeSquare(arg0: zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase, arg1: zombie.iso.IsoMetaGrid$Zone): zombie.iso.IsoGridSquare;
      getRandomFreeSquareFullZone(arg0: zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase, arg1: zombie.iso.IsoMetaGrid$Zone): zombie.iso.IsoGridSquare;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      getTrapList(): java.util.ArrayList<string>;
      hashCode(): number;
      initAllRZSMapChance(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: boolean): boolean;
      isValidForStory(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeZoneStory(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase extends zombie.randomizedWorld.RandomizedWorldBase
    export class RandomizedZoneStoryBase {
      private constructor();
      alwaysDo: boolean;
      static readonly baseChance: number;
      chance: number;
      static totalChance: number;
      static readonly zoneStory?: string;
      readonly zoneType?: java.util.ArrayList<string>;
  
      addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
      addItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      addRandomItemOnGround(arg0: zombie.iso.IsoGridSquare, arg1: java.util.ArrayList<string>): zombie.inventory.InventoryItem;
      addRandomItemsOnGround(arg0: zombie.iso.RoomDef, arg1: string, arg2: number): void;
      addTentNorthSouth(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTentWestEast(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      addTileObject(arg0: number, arg1: number, arg2: number, arg3: string): zombie.iso.IsoObject;
      addTrailOfBlood(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: zombie.iso.IsoMetaGrid$Zone, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: string): zombie.vehicles.BaseVehicle;
      addTraitOfBlood(arg0: zombie.iso.IsoDirections, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addVehicle(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoChunk, arg3: string, arg4: string, arg5: zombie.iso.IsoDirections): zombie.vehicles.BaseVehicle;
      addVehicleFlipped(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: number, arg2: number, arg3: number, arg4: number, arg5: string, arg6: string, arg7: number, arg8: string): zombie.vehicles.BaseVehicle;
      addWeapon(arg0: string, arg1: boolean): zombie.inventory.types.HandWeapon;
      addZombiesOnSquare(arg0: number, arg1: string, arg2: number, arg3: zombie.iso.IsoGridSquare): java.util.ArrayList<zombie.characters.IsoZombie>;
      addZombiesOnVehicle(arg0: number, arg1: string, arg2: number, arg3: zombie.vehicles.BaseVehicle): java.util.ArrayList<zombie.characters.IsoZombie>;
      alignCorpseToSquare(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoGridSquare): void;
      cleanAreaForStory(arg0: zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase, arg1: zombie.iso.IsoMetaGrid$Zone): void;
      createBodyFromZombie(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.IsoDeadBody;
      createRandomDeadBody(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoDirections, arg4: number, arg5: number): zombie.iso.objects.IsoDeadBody;
      createRandomZombie(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createRandomZombieForCorpse(arg0: zombie.iso.RoomDef): zombie.characters.IsoGameCharacter;
      createSkeletonCorpse(arg0: zombie.iso.RoomDef): zombie.iso.objects.IsoDeadBody;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDebugLine(): string;
      getLivingRoomOrKitchen(arg0: zombie.iso.BuildingDef): zombie.iso.RoomDef;
      getMaximumDays(): number;
      getMinimumHeight(): number;
      getMinimumWidth(): number;
      getName(): string;
      getRandomFreeSquare(arg0: zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase, arg1: zombie.iso.IsoMetaGrid$Zone): zombie.iso.IsoGridSquare;
      getRandomFreeSquareFullZone(arg0: zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase, arg1: zombie.iso.IsoMetaGrid$Zone): zombie.iso.IsoGridSquare;
      getRandomRoom(arg0: zombie.iso.BuildingDef, arg1: number): zombie.iso.RoomDef;
      getRandomSpawnSquare(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRandomSquareForCorpse(arg0: zombie.iso.RoomDef): zombie.iso.IsoGridSquare;
      getRoom(arg0: zombie.iso.BuildingDef, arg1: string): zombie.iso.RoomDef;
      getSq(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
      hashCode(): number;
      initAllRZSMapChance(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      is1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x1or1x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      is2x2AreaClear(arg0: zombie.iso.IsoGridSquare): boolean;
      isTimeValid(arg0: boolean): boolean;
      isUnique(): boolean;
      isValid(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: boolean): boolean;
      isValidForStory(arg0: zombie.iso.IsoMetaGrid$Zone, arg1: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      randomizeZoneStory(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      removeAllVehiclesOnZone(arg0: zombie.iso.IsoMetaGrid$Zone): void;
      setAttachedItem(arg0: zombie.characters.IsoZombie, arg1: string, arg2: string, arg3: string): void;
      setDebugLine(arg0: string): void;
      setMaximumDays(arg0: number): void;
      setUnique(arg0: boolean): void;
      spawnCarOnNearestNav(arg0: string, arg1: zombie.iso.BuildingDef): zombie.vehicles.BaseVehicle;
      toString(): string;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase$ZoneType */
    export class RandomizedZoneStoryBase$ZoneType {
      /* ENUM VALUES */
      static readonly Baseball: RandomizedZoneStoryBase$ZoneType; 
      static readonly Beach: RandomizedZoneStoryBase$ZoneType; 
      static readonly Forest: RandomizedZoneStoryBase$ZoneType; 
      static readonly Lake: RandomizedZoneStoryBase$ZoneType; 
      static readonly MusicFest: RandomizedZoneStoryBase$ZoneType; 
      static readonly MusicFestStage: RandomizedZoneStoryBase$ZoneType; 
      static readonly NewsStory: RandomizedZoneStoryBase$ZoneType; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase$ZoneType[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): RandomizedZoneStoryBase$ZoneType;
      valueOf(arg0: string): zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase$ZoneType;
      values(): zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase$ZoneType[];
    }
  }
  export namespace zombie.scripting {
    // zombie.scripting.ScriptManager extends java.lang.Object
    export class ScriptManager {
      private constructor();
      CurrentLoadingModule?: zombie.scripting.objects.ScriptModule;
      readonly ModuleList?: java.util.ArrayList<zombie.scripting.objects.ScriptModule>;
      readonly ModuleMap?: java.util.HashMap<string, zombie.scripting.objects.ScriptModule>;
      static readonly VanillaID?: string;
      currentFileName?: string;
      static readonly instance?: zombie.scripting.ScriptManager;
      readonly scriptsWithVehicleTemplates?: java.util.ArrayList<string>;
      readonly scriptsWithVehicles?: java.util.ArrayList<string>;
  
      CheckExitPoints(): void;
      FindItem(arg0: string, arg1: boolean): zombie.scripting.objects.Item;
      Load(): void;
      LoadFile(arg0: string, arg1: boolean): void;
      ParseScript(arg0: string): void;
      Reset(): void;
      equals(arg0: any): boolean;
      getAllEvolvedRecipes(): java.util.Stack<zombie.scripting.objects.EvolvedRecipe>;
      getAllFixing(arg0: java.util.List<zombie.scripting.objects.Fixing>): java.util.List<zombie.scripting.objects.Fixing>;
      getAllGameSounds(): java.util.ArrayList<zombie.scripting.objects.GameSoundScript>;
      getAllItems(): java.util.ArrayList<zombie.scripting.objects.Item>;
      getAllModelScripts(): java.util.ArrayList<zombie.scripting.objects.ModelScript>;
      getAllRecipes(): java.util.ArrayList<zombie.scripting.objects.Recipe>;
      getAllRecipesFor(arg0: string): java.util.ArrayList<zombie.scripting.objects.Recipe>;
      getAllRuntimeAnimationScripts(): java.util.ArrayList<zombie.core.skinnedmodel.runtime.RuntimeAnimationScript>;
      getAllUniqueRecipes(): java.util.Stack<zombie.scripting.objects.UniqueRecipe>;
      getAllVehicleScripts(): java.util.ArrayList<zombie.scripting.objects.VehicleScript>;
      getChecksum(): string;
      getClass(): java.lang.Class<any>;
      getCurrentLoadFileAbsPath(): string;
      getCurrentLoadFileMod(): string;
      getItem(arg0: string): zombie.scripting.objects.Item;
      getItemForClothingItem(arg0: string): zombie.scripting.objects.Item;
      getItemName(arg0: string): string;
      getItemTypeForClothingItem(arg0: string): string;
      getItemsTag(arg0: string): java.util.ArrayList<zombie.scripting.objects.Item>;
      getModelScript(arg0: string): zombie.scripting.objects.ModelScript;
      getModule(arg0: string, arg1: boolean): zombie.scripting.objects.ScriptModule;
      getModuleNoDisableCheck(arg0: string): zombie.scripting.objects.ScriptModule;
      getRecipe(arg0: string): zombie.scripting.objects.Recipe;
      getSoundTimeline(arg0: string): zombie.scripting.objects.SoundTimelineScript;
      getSpecificItem(arg0: string): zombie.scripting.objects.Item;
      getVehicle(arg0: string): zombie.scripting.objects.VehicleScript;
      getVehicleEngineRPM(arg0: string): zombie.vehicles.VehicleEngineRPM;
      getVehicleTemplate(arg0: string): zombie.scripting.objects.VehicleTemplate;
      getZedDmgMap(): java.util.ArrayList<string>;
      hashCode(): number;
      isDrainableItemType(arg0: string): boolean;
      notify(): void;
      notifyAll(): void;
      resolveItemType(arg0: zombie.scripting.objects.ScriptModule, arg1: string): string;
      searchFolders(arg0: java.net.URI, arg1: java.io.File, arg2: java.util.ArrayList<string>): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.scripting.objects {
    // zombie.scripting.objects.EvolvedRecipe extends zombie.scripting.objects.BaseScriptObject
    export class EvolvedRecipe {
      private constructor();
      DisplayName?: string;
      addIngredientIfCooked: boolean;
      addIngredientSound?: string;
      allowFrozenItem: boolean;
      baseItem?: string;
      canAddSpicesEmpty: boolean;
      cookable: boolean;
      hidden: boolean;
      readonly itemsList?: java.util.Map<string, zombie.scripting.objects.ItemRecipe>;
      maxItems: number;
      module?: zombie.scripting.objects.ScriptModule;
      name?: string;
      resultItem?: string;
  
      Load(arg0: string, arg1: string[]): void;
      addItem(arg0: zombie.inventory.InventoryItem, arg1: zombie.inventory.InventoryItem, arg2: zombie.characters.IsoGameCharacter): zombie.inventory.InventoryItem;
      equals(arg0: any): boolean;
      getAddIngredientSound(): string;
      getBaseItem(): string;
      getClass(): java.lang.Class<any>;
      getFullResultItem(): string;
      getItemRecipe(arg0: zombie.inventory.InventoryItem): zombie.scripting.objects.ItemRecipe;
      getItemsCanBeUse(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.InventoryItem, arg2: java.util.ArrayList<zombie.inventory.ItemContainer>): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getItemsList(): java.util.Map<string, zombie.scripting.objects.ItemRecipe>;
      getMaxItems(): number;
      getModule(): zombie.scripting.objects.ScriptModule;
      getName(): string;
      getOriginalname(): string;
      getPossibleItems(): java.util.ArrayList<zombie.scripting.objects.ItemRecipe>;
      getResultItem(): string;
      getUntranslatedName(): string;
      hashCode(): number;
      isAllowFrozenItem(): boolean;
      isCookable(): boolean;
      isHidden(): boolean;
      isResultItem(arg0: zombie.inventory.InventoryItem): boolean;
      isSpiceAdded(arg0: zombie.inventory.InventoryItem, arg1: zombie.inventory.InventoryItem): boolean;
      needToBeCooked(arg0: zombie.inventory.InventoryItem): boolean;
      notify(): void;
      notifyAll(): void;
      setAllowFrozenItem(arg0: boolean): void;
      setIsHidden(arg0: boolean): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.scripting.objects.Fixing extends zombie.scripting.objects.BaseScriptObject
    export class Fixing {
      private constructor();
      module?: zombie.scripting.objects.ScriptModule;
  
      Load(arg0: string, arg1: string[]): void;
      addRequiredItem(arg0: string): void;
      countUses(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.scripting.objects.Fixing$Fixer, arg2: zombie.inventory.InventoryItem): number;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getConditionModifier(): number;
      getFixers(): java.util.LinkedList<zombie.scripting.objects.Fixing$Fixer>;
      getGlobalItem(): zombie.scripting.objects.Fixing$Fixer;
      getModule(): zombie.scripting.objects.ScriptModule;
      getName(): string;
      getRequiredFixerItems(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.scripting.objects.Fixing$Fixer, arg2: zombie.inventory.InventoryItem, arg3: java.util.ArrayList<zombie.inventory.InventoryItem>): java.util.ArrayList<zombie.inventory.InventoryItem>;
      getRequiredItem(): java.util.ArrayList<string>;
      getRequiredItems(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.scripting.objects.Fixing$Fixer, arg2: zombie.inventory.InventoryItem): java.util.ArrayList<zombie.inventory.InventoryItem>;
      hashCode(): number;
      haveGlobalItem(arg0: zombie.characters.IsoGameCharacter): zombie.inventory.InventoryItem;
      haveThisFixer(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.scripting.objects.Fixing$Fixer, arg2: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      notify(): void;
      notifyAll(): void;
      setConditionModifier(arg0: number): void;
      setGlobalItem(arg0: zombie.scripting.objects.Fixing$Fixer): void;
      setName(arg0: string): void;
      toString(): string;
      usedInFixer(arg0: zombie.inventory.InventoryItem, arg1: zombie.characters.IsoGameCharacter): zombie.scripting.objects.Fixing$Fixer;
      wait(arg0: number): void;
    }
    // zombie.scripting.objects.Fixing$Fixer extends java.lang.Object
    export class Fixing$Fixer {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getFixerName(): string;
      getFixerSkills(): java.util.LinkedList<zombie.scripting.objects.Fixing$FixerSkill>;
      getNumberOfUse(): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.scripting.objects.Fixing$FixerSkill extends java.lang.Object
    export class Fixing$FixerSkill {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getSkillLevel(): number;
      getSkillName(): string;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.scripting.objects.GameSoundScript extends zombie.scripting.objects.BaseScriptObject
    export class GameSoundScript {
      private constructor();
      readonly gameSound?: zombie.audio.GameSound;
      module?: zombie.scripting.objects.ScriptModule;
  
      Load(arg0: string, arg1: string[]): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getModule(): zombie.scripting.objects.ScriptModule;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      reset(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.scripting.objects.Item extends zombie.scripting.objects.BaseScriptObject
    export class Item {
      private constructor();
      ActivatedItem: boolean;
      ActualWeight: number;
      AimingMod: number;
      AimingPerkCritModifier: number;
      AimingPerkHitChanceModifier: number;
      AimingPerkMinAngleModifier: number;
      AimingPerkRangeModifier: number;
      Alcoholic: boolean;
      AlwaysKnockdown: boolean;
      AlwaysWelcomeGift: boolean;
      AmmoType?: string;
      AngleFalloff: boolean;
      BodyLocation?: string;
      BoredomChange: number;
      CanBandage: boolean;
      CanBarricade: boolean;
      CanBeEquipped?: string;
      CanStack: boolean;
      CanStoreWater: boolean;
      CannedFood: boolean;
      CantAttackWithLowestEndurance: boolean;
      CantEat: boolean;
      Capacity: number;
      readonly Categories?: java.util.ArrayList<string>;
      CloseKillMove?: string;
      ClothingItem?: string;
      ConditionLowerChance: number;
      ConditionMax: number;
      Count: number;
      CriticalChance: number;
      CustomContextMenu?: string;
      DangerousUncooked: boolean;
      DaysFresh: number;
      DaysTotallyRotten: number;
      DefaultModData?: se.krka.kahlua.vm.KahluaTable;
      DisappearOnUse: boolean;
      DisplayCategory?: string;
      DisplayName?: string;
      DoorDamage: number;
      DoorHitSound?: string;
      EnduranceChange: number;
      EnduranceMod: number;
      FatigueChange: number;
      FishingLure: boolean;
      FoodType?: string;
      GunType?: string;
      HerbalistType?: string;
      Hidden: boolean;
      HitAngleMod: number;
      HitChance: number;
      HitSound?: string;
      HungerChange: number;
      Icon?: string;
      IdleAnim?: string;
      ImpactSound?: string;
      IsAimedFirearm: boolean;
      IsAimedHandWeapon: boolean;
      IsCookable: boolean;
      IsWaterSource: boolean;
      ItemName?: string;
      KnockBackOnNoDeath: boolean;
      KnockdownMod: number;
      LightDistance: number;
      LightStrength: number;
      LvlSkillTrained: number;
      MaxDamage: number;
      MaxHitCount: number;
      MaxRange: number;
      MechanicsItem: boolean;
      Medical: boolean;
      MinAngle: number;
      MinDamage: number;
      MinRange: number;
      MinimumSwingTime: number;
      MinutesToBurn: number;
      MinutesToCook: number;
      MultipleHitConditionAffected: boolean;
      NPCSoundBoost: number;
      static NetIDToItem?: java.util.HashMap<number, string>;
      static NetItemToID?: java.util.HashMap<string, number>;
      NormalTexture?: zombie.core.textures.Texture;
      NumLevelsTrained: number;
      NumberOfPages: number;
      OBSOLETE: boolean;
      OtherCharacterVolumeBoost: number;
      OtherHandRequire?: string;
      OtherHandUse: boolean;
      PaletteChoices?: java.util.Stack<string>;
      PalettesStart?: string;
      PhysicsObject?: string;
      PiercingBullets: boolean;
      Poison: boolean;
      PoisonDetectionLevel?: number;
      PoisonPower: number;
      ProjectileCount: number;
      ProtectFromRainWhenEquipped: boolean;
      PushBackMod: number;
      RangeFalloff: boolean;
      Ranged: boolean;
      RecoilDelay: number;
      RemoveUnhappinessWhenCooked: boolean;
      ReplaceOnCooked?: java.util.List<string>;
      ReplaceOnDeplete?: string;
      ReplaceOnUse?: string;
      ReplaceOnUseOn?: string;
      RequireInHandOrInventory?: java.util.ArrayList<string>;
      RequiresEquippedBothHands: boolean;
      RunAnim?: string;
      ScaleWorldIcon: number;
      ShareDamage: boolean;
      ShareEndurance: boolean;
      SkillTrained?: string;
      SoundGain: number;
      SoundRadius: number;
      SoundVolume: number;
      SpecialTextures?: java.util.List<zombie.core.textures.Texture>;
      SpecialWorldTextureNames?: java.util.List<string>;
      SplatBloodOnNoDeath: boolean;
      SplatNumber: number;
      SplatSize: number;
      SpriteName?: string;
      StressChange: number;
      SubCategory?: string;
      SurvivalGear: boolean;
      SwingAmountBeforeImpact: number;
      SwingAnim?: string;
      SwingSound?: string;
      SwingTime: number;
      readonly Tags?: java.util.ArrayList<string>;
      Temperature: number;
      ThirstChange: number;
      TicksPerEquipUse: number;
      ToHitModifier: number;
      Tooltip?: string;
      TorchCone: boolean;
      Trap?: boolean;
      TwoHandWeapon: boolean;
      UnhappyChange: number;
      UseDelta: number;
      UseEndurance: boolean;
      UseSelf: boolean;
      UseWhileEquipped: boolean;
      UseWhileUnequipped: boolean;
      UseWorldItem: boolean;
      WeaponLength: number;
      WeaponSprite?: string;
      WeaponWeight: number;
      WeightEmpty: number;
      WeightReduction: number;
      WeightWet: number;
      WorldTexture?: zombie.core.textures.Texture;
      WorldTextureName?: string;
      attachmentType?: string;
      attachmentsProvided?: java.util.ArrayList<string>;
      baseVolumeRange: number;
      canBeWrite: boolean;
      canHaveHoles?: boolean;
      clothingExtraSubmenu?: string;
      clothingItemExtra?: java.util.ArrayList<string>;
      clothingItemExtraOption?: java.util.ArrayList<string>;
      colorBlue: number;
      colorGreen: number;
      colorRed: number;
      combatSpeedModifier: number;
      consolidateOption?: string;
      eatType?: string;
      equippedNoSprint: boolean;
      fabricType?: string;
      hairDye: boolean;
      hitFloorSound?: string;
      isHighTier: boolean;
      isPortable: boolean;
      isTelevision: boolean;
      makeUpType?: string;
      map?: string;
      maxAmmo: number;
      maxChannel: number;
      micRange: number;
      minChannel: number;
      module?: zombie.scripting.objects.ScriptModule;
      moduleDotType?: string;
      name?: string;
      neckProtectionModifier: number;
      primaryAnimMask?: string;
      primaryAnimMaskAttachment?: string;
      replaceInPrimaryHand?: string;
      replaceInSecondHand?: string;
      replacePrimaryHand?: zombie.scripting.objects.ItemReplacement;
      replaceSecondHand?: zombie.scripting.objects.ItemReplacement;
      replaceWhenUnequip?: string;
      runSpeedModifier: number;
      secondaryAnimMask?: string;
      secondaryAnimMaskAttachment?: string;
      stopPower: number;
      torchDot: number;
      transmitRange: number;
      twoWay: boolean;
      type?: zombie.scripting.objects.Item$Type;
      usesBattery: boolean;
      vehicleType: number;
      worldObjectSprite?: string;
      worldStaticModel?: string;
  
      DoParam(arg0: string): void;
      InstanceItem(arg0: string): zombie.inventory.InventoryItem;
      Load(arg0: string, arg1: string[]): void;
      equals(arg0: any): boolean;
      getAcceptItemFunction(): string;
      getActualWeight(): number;
      getAmmoType(): string;
      getBloodClothingType(): java.util.ArrayList<zombie.characterTextures.BloodClothingType>;
      getBodyLocation(): string;
      getBoredomChange(): number;
      getBreakSound(): string;
      getBringToBearSound(): string;
      getBulletOutSound(): string;
      getCanStoreWater(): boolean;
      getCategories(): java.util.ArrayList<string>;
      getChanceToFall(): number;
      getClass(): java.lang.Class<any>;
      getCloseSound(): string;
      getClothingItem(): string;
      getClothingItemAsset(): zombie.core.skinnedmodel.population.ClothingItem;
      getClothingItemExtra(): java.util.ArrayList<string>;
      getClothingItemExtraOption(): java.util.ArrayList<string>;
      getConditionLowerChance(): number;
      getConditionMax(): number;
      getCookingSound(): string;
      getCount(): number;
      getCountDownSound(): string;
      getCustomEatSound(): string;
      getDaysFresh(): number;
      getDaysTotallyRotten(): number;
      getDisplayCategory(): string;
      getDisplayName(): string;
      getDoorDamage(): number;
      getDoorHitSound(): string;
      getEatType(): string;
      getEjectAmmoSound(): string;
      getEjectAmmoStartSound(): string;
      getEjectAmmoStopSound(): string;
      getEnduranceChange(): number;
      getEnduranceMod(): number;
      getEquipSound(): string;
      getExistsAsVanilla(): boolean;
      getExplosionSound(): string;
      getFabricType(): string;
      getFileAbsPath(): string;
      getFillFromDispenserSound(): string;
      getFillFromTapSound(): string;
      getFullName(): string;
      getHungerChange(): number;
      getIcon(): string;
      getIconsForTexture(): java.util.ArrayList<string>;
      getImpactSound(): string;
      getInsertAmmoSound(): string;
      getInsertAmmoStartSound(): string;
      getInsertAmmoStopSound(): string;
      getInsulation(): number;
      getKnockdownMod(): number;
      getLevelSkillTrained(): number;
      getLuaCreate(): string;
      getMapID(): string;
      getMaxDamage(): number;
      getMaxHitCount(): number;
      getMaxLevelTrained(): number;
      getMaxRange(): number;
      getMinAngle(): number;
      getMinDamage(): number;
      getMinimumSwingTime(): number;
      getMinutesToBurn(): number;
      getMinutesToCook(): number;
      getModID(): string;
      getModule(): zombie.scripting.objects.ScriptModule;
      getModuleName(): string;
      getNPCSoundBoost(): number;
      getName(): string;
      getNoiseDuration(): number;
      getNormalTexture(): zombie.core.textures.Texture;
      getNumLevelsTrained(): number;
      getNumberOfPages(): number;
      getObsolete(): boolean;
      getOpenSound(): string;
      getOtherCharacterVolumeBoost(): number;
      getOtherHandRequire(): string;
      getPaletteChoices(): java.util.Stack<string>;
      getPalettesStart(): string;
      getPhysicsObject(): string;
      getPushBackMod(): number;
      getPutInSound(): string;
      getRainFactor(): number;
      getRecordedMediaCat(): string;
      getRegistry_id(): number;
      getReplaceOnDeplete(): string;
      getReplaceOnUse(): string;
      getReplaceWhenUnequip(): string;
      getShellFallSound(): string;
      getSkillTrained(): string;
      getSoundRadius(): number;
      getSoundVolume(): number;
      getSplatNumber(): number;
      getSpriteName(): string;
      getStaticModel(): string;
      getStressChange(): number;
      getSwingAmountBeforeImpact(): number;
      getSwingAnim(): string;
      getSwingSound(): string;
      getSwingTime(): number;
      getTags(): java.util.ArrayList<string>;
      getTeachedRecipes(): java.util.List<string>;
      getTemperature(): number;
      getThirstChange(): number;
      getTicksPerEquipUse(): number;
      getToHitModifier(): number;
      getType(): zombie.scripting.objects.Item$Type;
      getTypeString(): string;
      getUnequipSound(): string;
      getUnhappyChange(): number;
      getUseDelta(): number;
      getWaterresist(): number;
      getWeaponSprite(): string;
      getWeaponWeight(): number;
      getWeightEmpty(): number;
      getWeightWet(): number;
      getWindresist(): number;
      hashCode(): number;
      isAlcoholic(): boolean;
      isAlwaysKnockdown(): boolean;
      isAlwaysWelcomeGift(): boolean;
      isAngleFalloff(): boolean;
      isCanBandage(): boolean;
      isCanBarricade(): boolean;
      isCantAttackWithLowestEndurance(): boolean;
      isCantEat(): boolean;
      isConditionAffectsCapacity(): boolean;
      isCosmetic(): boolean;
      isDangerousUncooked(): boolean;
      isDisappearOnUse(): boolean;
      isHidden(): boolean;
      isIsCookable(): boolean;
      isKnockBackOnNoDeath(): boolean;
      isManuallyRemoveSpentRounds(): boolean;
      isMultipleHitConditionAffected(): boolean;
      isOtherHandUse(): boolean;
      isRangeFalloff(): boolean;
      isRanged(): boolean;
      isShareDamage(): boolean;
      isShareEndurance(): boolean;
      isSplatBloodOnNoDeath(): boolean;
      isUseEndurance(): boolean;
      isUseSelf(): boolean;
      isUseWhileEquipped(): boolean;
      isUseWhileUnequipped(): boolean;
      isWorldRender(): boolean;
      notify(): void;
      notifyAll(): void;
      resolveItemTypes(): void;
      setActualWeight(arg0: number): void;
      setAlcoholic(arg0: boolean): void;
      setAlwaysKnockdown(arg0: boolean): void;
      setAlwaysWelcomeGift(arg0: boolean): void;
      setAmmoType(arg0: string): void;
      setAngleFalloff(arg0: boolean): void;
      setBodyLocation(arg0: string): void;
      setBoredomChange(arg0: number): void;
      setCanBandage(arg0: boolean): void;
      setCanBarricade(arg0: boolean): void;
      setCantAttackWithLowestEndurance(arg0: boolean): void;
      setCategories(arg0: java.util.ArrayList<string>): void;
      setClothingItemAsset(arg0: zombie.core.skinnedmodel.population.ClothingItem): void;
      setConditionLowerChance(arg0: number): void;
      setConditionMax(arg0: number): void;
      setCount(arg0: number): void;
      setDangerousUncooked(arg0: boolean): void;
      setDaysFresh(arg0: number): void;
      setDaysTotallyRotten(arg0: number): void;
      setDisappearOnUse(arg0: boolean): void;
      setDisplayName(arg0: string): void;
      setDoorDamage(arg0: number): void;
      setDoorHitSound(arg0: string): void;
      setEnduranceChange(arg0: number): void;
      setEnduranceMod(arg0: number): void;
      setHungerChange(arg0: number): void;
      setIcon(arg0: string): void;
      setImpactSound(arg0: string): void;
      setInsulation(arg0: number): void;
      setIsCookable(arg0: boolean): void;
      setKnockBackOnNoDeath(arg0: boolean): void;
      setKnockdownMod(arg0: number): void;
      setLuaCreate(arg0: string): void;
      setMaxDamage(arg0: number): void;
      setMaxHitCount(arg0: number): void;
      setMaxRange(arg0: number): void;
      setMinAngle(arg0: number): void;
      setMinDamage(arg0: number): void;
      setMinimumSwingTime(arg0: number): void;
      setMinutesToBurn(arg0: number): void;
      setMinutesToCook(arg0: number): void;
      setModID(arg0: string): void;
      setMultipleHitConditionAffected(arg0: boolean): void;
      setNPCSoundBoost(arg0: number): void;
      setName(arg0: string): void;
      setOtherCharacterVolumeBoost(arg0: number): void;
      setOtherHandRequire(arg0: string): void;
      setOtherHandUse(arg0: boolean): void;
      setPaletteChoices(arg0: java.util.Stack<string>): void;
      setPalettesStart(arg0: string): void;
      setPhysicsObject(arg0: string): void;
      setPushBackMod(arg0: number): void;
      setRangeFalloff(arg0: boolean): void;
      setRanged(arg0: boolean): void;
      setRegistry_id(arg0: number): void;
      setReplaceOnDeplete(arg0: string): void;
      setReplaceOnUse(arg0: string): void;
      setShareDamage(arg0: boolean): void;
      setShareEndurance(arg0: boolean): void;
      setSoundRadius(arg0: number): void;
      setSoundVolume(arg0: number): void;
      setSplatBloodOnNoDeath(arg0: boolean): void;
      setSplatNumber(arg0: number): void;
      setSpriteName(arg0: string): void;
      setStressChange(arg0: number): void;
      setSwingAmountBeforeImpact(arg0: number): void;
      setSwingAnim(arg0: string): void;
      setSwingSound(arg0: string): void;
      setSwingTime(arg0: number): void;
      setTemperature(arg0: number): void;
      setThirstChange(arg0: number): void;
      setTicksPerEquipUse(arg0: number): void;
      setToHitModifier(arg0: number): void;
      setType(arg0: zombie.scripting.objects.Item$Type): void;
      setUnhappyChange(arg0: number): void;
      setUseDelta(arg0: number): void;
      setUseEndurance(arg0: boolean): void;
      setUseSelf(arg0: boolean): void;
      setUseWhileEquipped(arg0: boolean): void;
      setUseWhileUnequipped(arg0: boolean): void;
      setWaterresist(arg0: number): void;
      setWeaponSprite(arg0: string): void;
      setWeaponWeight(arg0: number): void;
      setWeightEmpty(arg0: number): void;
      setWeightWet(arg0: number): void;
      setWindresist(arg0: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.scripting.objects.Item$Type */
    export class Item$Type {
      /* ENUM VALUES */
      static readonly AlarmClock: Item$Type; 
      static readonly AlarmClockClothing: Item$Type; 
      static readonly Clothing: Item$Type; 
      static readonly Container: Item$Type; 
      static readonly Drainable: Item$Type; 
      static readonly Food: Item$Type; 
      static readonly Key: Item$Type; 
      static readonly KeyRing: Item$Type; 
      static readonly Literature: Item$Type; 
      static readonly Map: Item$Type; 
      static readonly Moveable: Item$Type; 
      static readonly Normal: Item$Type; 
      static readonly Radio: Item$Type; 
      static readonly Weapon: Item$Type; 
      static readonly WeaponPart: Item$Type; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.scripting.objects.Item$Type[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): Item$Type;
      valueOf(arg0: string): zombie.scripting.objects.Item$Type;
      values(): zombie.scripting.objects.Item$Type[];
    }
    // zombie.scripting.objects.ItemRecipe extends java.lang.Object
    export class ItemRecipe {
      private constructor();
      cooked?: boolean;
      name?: string;
      use?: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getFullType(): string;
      getModule(): string;
      getName(): string;
      getUse(): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      setModule(arg0: string): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.scripting.objects.ItemReplacement extends java.lang.Object
    export class ItemReplacement {
      private constructor();
      attachment?: string;
      clothingItem?: zombie.core.skinnedmodel.population.ClothingItem;
      clothingItemName?: string;
      maskVariableName?: string;
      maskVariableValue?: string;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.scripting.objects.ModelAttachment extends java.lang.Object
    export class ModelAttachment {
      private constructor();
      equals(arg0: any): boolean;
      getBone(): string;
      getCanAttach(): java.util.ArrayList<string>;
      getClass(): java.lang.Class<any>;
      getId(): string;
      getOffset(): org.joml.Vector3f;
      getRotate(): org.joml.Vector3f;
      getZOffset(): number;
      hashCode(): number;
      isUpdateConstraint(): boolean;
      notify(): void;
      notifyAll(): void;
      setBone(arg0: string): void;
      setCanAttach(arg0: java.util.ArrayList<string>): void;
      setId(arg0: string): void;
      setUpdateConstraint(arg0: boolean): void;
      setZOffset(arg0: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.scripting.objects.ModelScript extends zombie.scripting.objects.BaseScriptObject
    export class ModelScript {
      private constructor();
      static readonly DEFAULT_SHADER_NAME?: string;
      bStatic: boolean;
      readonly boneWeights?: java.util.ArrayList<zombie.core.skinnedmodel.advancedanimation.AnimBoneWeight>;
      fileName?: string;
      invertX: boolean;
      loadedModel?: zombie.core.skinnedmodel.model.Model;
      readonly m_attachments?: java.util.ArrayList<zombie.scripting.objects.ModelAttachment>;
      meshName?: string;
      module?: zombie.scripting.objects.ScriptModule;
      name?: string;
      scale: number;
      shaderName?: string;
      textureName?: string;
  
      Load(arg0: string, arg1: string[]): void;
      ScriptsLoaded(): void;
      addAttachment(arg0: zombie.scripting.objects.ModelAttachment): zombie.scripting.objects.ModelAttachment;
      addAttachmentAt(arg0: number, arg1: zombie.scripting.objects.ModelAttachment): zombie.scripting.objects.ModelAttachment;
      equals(arg0: any): boolean;
      getAttachment(arg0: number): zombie.scripting.objects.ModelAttachment;
      getAttachmentById(arg0: string): zombie.scripting.objects.ModelAttachment;
      getAttachmentCount(): number;
      getClass(): java.lang.Class<any>;
      getFileName(): string;
      getFullType(): string;
      getMeshName(): string;
      getModule(): zombie.scripting.objects.ScriptModule;
      getName(): string;
      getShaderName(): string;
      getTextureName(): string;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      removeAttachment(arg0: zombie.scripting.objects.ModelAttachment): zombie.scripting.objects.ModelAttachment;
      reset(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.scripting.objects.ModelWeaponPart extends java.lang.Object
    export class ModelWeaponPart {
      private constructor();
      attachmentNameSelf?: string;
      attachmentParent?: string;
      modelName?: string;
      partType?: string;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.scripting.objects.MovableRecipe extends zombie.scripting.objects.Recipe
    export class MovableRecipe {
      private constructor();
      AllowDestroyedItem: boolean;
      AllowFrozenItem: boolean;
      LuaCreate?: string;
      LuaGiveXP?: string;
      LuaGrab?: string;
      LuaTest?: string;
      Result?: zombie.scripting.objects.Recipe$Result;
      Sound?: string;
      readonly Source?: java.util.ArrayList<zombie.scripting.objects.Recipe$Source>;
      TimeToMake: number;
      hidden: boolean;
      module?: zombie.scripting.objects.ScriptModule;
      name?: string;
      skillRequired?: java.util.ArrayList<zombie.scripting.objects.Recipe$RequiredSkill>;
  
      DoResult(arg0: string): void;
      DoSource(arg0: string): void;
      FindIndexOf(arg0: zombie.inventory.InventoryItem): number;
      Load(arg0: string, arg1: string[]): void;
      addRequiredSkill(arg0: zombie.characters.skills.PerkFactory$Perk, arg1: number): void;
      clearRequiredSkills(): void;
      equals(arg0: any): boolean;
      findSource(arg0: string): zombie.scripting.objects.Recipe$Source;
      getAnimNode(): string;
      getCanPerform(): string;
      getCategory(): string;
      getClass(): java.lang.Class<any>;
      getFullType(): string;
      getHeat(): number;
      getLuaCreate(): string;
      getLuaGiveXP(): string;
      getLuaGrab(): string;
      getLuaTest(): string;
      getModule(): zombie.scripting.objects.ScriptModule;
      getName(): string;
      getNearItem(): string;
      getNumberOfNeededItem(): number;
      getOriginalname(): string;
      getPrimaryTools(): zombie.scripting.objects.Recipe$Source;
      getProp1(): string;
      getProp2(): string;
      getRequiredSkill(arg0: number): zombie.scripting.objects.Recipe$RequiredSkill;
      getRequiredSkillCount(): number;
      getRequiredSkills(): java.util.ArrayList<string>;
      getResult(): zombie.scripting.objects.Recipe$Result;
      getSecondaryTools(): zombie.scripting.objects.Recipe$Source;
      getSound(): string;
      getSource(): java.util.ArrayList<zombie.scripting.objects.Recipe$Source>;
      getTimeToMake(): number;
      getTooltip(): string;
      getWaterAmountNeeded(): number;
      getWorldSprite(): string;
      getXpPerk(): zombie.characters.skills.PerkFactory$Perk;
      hasXpPerk(): boolean;
      hashCode(): number;
      isAllowDestroyedItem(): boolean;
      isAllowFrozenItem(): boolean;
      isCanBeDoneFromFloor(): boolean;
      isDestroy(arg0: string): boolean;
      isHidden(): boolean;
      isKeep(arg0: string): boolean;
      isRemoveResultItem(): boolean;
      isStopOnRun(): boolean;
      isStopOnWalk(): boolean;
      isValid(): boolean;
      needToBeLearn(): boolean;
      noBrokenItems(): boolean;
      notify(): void;
      notifyAll(): void;
      setAllowDestroyedItem(arg0: boolean): void;
      setAllowFrozenItem(arg0: boolean): void;
      setAnimNode(arg0: string): void;
      setCanBeDoneFromFloor(arg0: boolean): void;
      setCanPerform(arg0: string): void;
      setCategory(arg0: string): void;
      setIsHidden(arg0: boolean): void;
      setLuaCreate(arg0: string): void;
      setLuaGiveXP(arg0: string): void;
      setLuaGrab(arg0: string): void;
      setLuaTest(arg0: string): void;
      setName(arg0: string): void;
      setNearItem(arg0: string): void;
      setNeedToBeLearn(arg0: boolean): void;
      setOnCreate(arg0: string): void;
      setOnXP(arg0: string): void;
      setOriginalname(arg0: string): void;
      setProp1(arg0: string): void;
      setProp2(arg0: string): void;
      setRemoveResultItem(arg0: boolean): void;
      setRequiredSkill(arg0: zombie.characters.skills.PerkFactory$Perk, arg1: number): void;
      setResult(arg0: string, arg1: number): void;
      setSound(arg0: string): void;
      setSource(arg0: string): void;
      setStopOnRun(arg0: boolean): void;
      setStopOnWalk(arg0: boolean): void;
      setTime(arg0: number): void;
      setTool(arg0: string, arg1: boolean): void;
      setValid(arg0: boolean): void;
      setWorldSprite(arg0: string): void;
      setXpPerk(arg0: zombie.characters.skills.PerkFactory$Perk): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.scripting.objects.Recipe extends zombie.scripting.objects.BaseScriptObject
    export class Recipe {
      private constructor();
      AllowDestroyedItem: boolean;
      AllowFrozenItem: boolean;
      LuaCreate?: string;
      LuaGiveXP?: string;
      LuaGrab?: string;
      LuaTest?: string;
      Result?: zombie.scripting.objects.Recipe$Result;
      Sound?: string;
      readonly Source?: java.util.ArrayList<zombie.scripting.objects.Recipe$Source>;
      TimeToMake: number;
      hidden: boolean;
      module?: zombie.scripting.objects.ScriptModule;
      name?: string;
      skillRequired?: java.util.ArrayList<zombie.scripting.objects.Recipe$RequiredSkill>;
  
      DoResult(arg0: string): void;
      DoSource(arg0: string): void;
      FindIndexOf(arg0: zombie.inventory.InventoryItem): number;
      Load(arg0: string, arg1: string[]): void;
      addRequiredSkill(arg0: zombie.characters.skills.PerkFactory$Perk, arg1: number): void;
      clearRequiredSkills(): void;
      equals(arg0: any): boolean;
      findSource(arg0: string): zombie.scripting.objects.Recipe$Source;
      getAnimNode(): string;
      getCanPerform(): string;
      getCategory(): string;
      getClass(): java.lang.Class<any>;
      getFullType(): string;
      getHeat(): number;
      getLuaCreate(): string;
      getLuaGiveXP(): string;
      getLuaGrab(): string;
      getLuaTest(): string;
      getModule(): zombie.scripting.objects.ScriptModule;
      getName(): string;
      getNearItem(): string;
      getNumberOfNeededItem(): number;
      getOriginalname(): string;
      getProp1(): string;
      getProp2(): string;
      getRequiredSkill(arg0: number): zombie.scripting.objects.Recipe$RequiredSkill;
      getRequiredSkillCount(): number;
      getRequiredSkills(): java.util.ArrayList<string>;
      getResult(): zombie.scripting.objects.Recipe$Result;
      getSound(): string;
      getSource(): java.util.ArrayList<zombie.scripting.objects.Recipe$Source>;
      getTimeToMake(): number;
      getTooltip(): string;
      getWaterAmountNeeded(): number;
      hashCode(): number;
      isAllowDestroyedItem(): boolean;
      isAllowFrozenItem(): boolean;
      isCanBeDoneFromFloor(): boolean;
      isDestroy(arg0: string): boolean;
      isHidden(): boolean;
      isKeep(arg0: string): boolean;
      isRemoveResultItem(): boolean;
      isStopOnRun(): boolean;
      isStopOnWalk(): boolean;
      needToBeLearn(): boolean;
      noBrokenItems(): boolean;
      notify(): void;
      notifyAll(): void;
      setAllowDestroyedItem(arg0: boolean): void;
      setAllowFrozenItem(arg0: boolean): void;
      setAnimNode(arg0: string): void;
      setCanBeDoneFromFloor(arg0: boolean): void;
      setCanPerform(arg0: string): void;
      setCategory(arg0: string): void;
      setIsHidden(arg0: boolean): void;
      setLuaCreate(arg0: string): void;
      setLuaGiveXP(arg0: string): void;
      setLuaGrab(arg0: string): void;
      setLuaTest(arg0: string): void;
      setNearItem(arg0: string): void;
      setNeedToBeLearn(arg0: boolean): void;
      setOriginalname(arg0: string): void;
      setProp1(arg0: string): void;
      setProp2(arg0: string): void;
      setRemoveResultItem(arg0: boolean): void;
      setSound(arg0: string): void;
      setStopOnRun(arg0: boolean): void;
      setStopOnWalk(arg0: boolean): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.scripting.objects.Recipe$RequiredSkill extends java.lang.Object
    export class Recipe$RequiredSkill {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getLevel(): number;
      getPerk(): zombie.characters.skills.PerkFactory$Perk;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.scripting.objects.Recipe$Result extends java.lang.Object
    export class Recipe$Result {
      private constructor();
      count: number;
      drainableCount: number;
      module?: string;
      type?: string;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getCount(): number;
      getDrainableCount(): number;
      getFullType(): string;
      getModule(): string;
      getType(): string;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      setCount(arg0: number): void;
      setDrainableCount(arg0: number): void;
      setModule(arg0: string): void;
      setType(arg0: string): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.scripting.objects.Recipe$Source extends java.lang.Object
    export class Recipe$Source {
      private constructor();
      count: number;
      destroy: boolean;
      keep: boolean;
      use: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getCount(): number;
      getItems(): java.util.ArrayList<string>;
      getOnlyItem(): string;
      getUse(): number;
      hashCode(): number;
      isDestroy(): boolean;
      isKeep(): boolean;
      notify(): void;
      notifyAll(): void;
      setCount(arg0: number): void;
      setDestroy(arg0: boolean): void;
      setKeep(arg0: boolean): void;
      setUse(arg0: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.scripting.objects.ScriptModule extends zombie.scripting.objects.BaseScriptObject
    export class ScriptModule {
      private constructor();
      readonly EvolvedRecipeMap?: java.util.ArrayList<zombie.scripting.objects.EvolvedRecipe>;
      readonly FixingMap?: java.util.HashMap<string, zombie.scripting.objects.Fixing>;
      readonly GameSoundList?: java.util.ArrayList<zombie.scripting.objects.GameSoundScript>;
      readonly GameSoundMap?: java.util.HashMap<string, zombie.scripting.objects.GameSoundScript>;
      readonly Imports?: java.util.ArrayList<string>;
      readonly ItemMap?: java.util.HashMap<string, zombie.scripting.objects.Item>;
      readonly ModelScriptMap?: java.util.TreeMap<string, zombie.scripting.objects.ModelScript>;
      readonly RecipeByName?: java.util.HashMap<string, zombie.scripting.objects.Recipe>;
      readonly RecipeMap?: java.util.ArrayList<zombie.scripting.objects.Recipe>;
      readonly RecipesWithDotInName?: java.util.HashMap<string, zombie.scripting.objects.Recipe>;
      readonly RuntimeAnimationScriptMap?: java.util.HashMap<string, zombie.core.skinnedmodel.runtime.RuntimeAnimationScript>;
      readonly SoundTimelineMap?: java.util.HashMap<string, zombie.scripting.objects.SoundTimelineScript>;
      readonly UniqueRecipeMap?: java.util.ArrayList<zombie.scripting.objects.UniqueRecipe>;
      readonly VehicleEngineRPMMap?: java.util.HashMap<string, zombie.vehicles.VehicleEngineRPM>;
      readonly VehicleMap?: java.util.HashMap<string, zombie.scripting.objects.VehicleScript>;
      readonly VehicleTemplateMap?: java.util.HashMap<string, zombie.scripting.objects.VehicleTemplate>;
      disabled: boolean;
      module?: zombie.scripting.objects.ScriptModule;
      name?: string;
      value?: string;
  
      CheckExitPoints(): boolean;
      Load(arg0: string, arg1: string[]): void;
      ParseScript(arg0: string): void;
      ParseScriptPP(arg0: string): void;
      Reset(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getItem(arg0: string): zombie.scripting.objects.Item;
      getModule(): zombie.scripting.objects.ScriptModule;
      getName(): string;
      getRecipe(arg0: string): zombie.scripting.objects.Recipe;
      getVehicle(arg0: string): zombie.scripting.objects.VehicleScript;
      getVehicleEngineRPM(arg0: string): zombie.vehicles.VehicleEngineRPM;
      getVehicleTemplate(arg0: string): zombie.scripting.objects.VehicleTemplate;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.scripting.objects.SoundTimelineScript extends zombie.scripting.objects.BaseScriptObject
    export class SoundTimelineScript {
      private constructor();
      module?: zombie.scripting.objects.ScriptModule;
  
      Load(arg0: string, arg1: string[]): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getEventName(): string;
      getModule(): zombie.scripting.objects.ScriptModule;
      getPosition(arg0: string): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      reset(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.scripting.objects.UniqueRecipe extends zombie.scripting.objects.BaseScriptObject
    export class UniqueRecipe {
      private constructor();
      module?: zombie.scripting.objects.ScriptModule;
  
      Load(arg0: string, arg1: string[]): void;
      equals(arg0: any): boolean;
      getBaseRecipe(): string;
      getBoredomBonus(): number;
      getClass(): java.lang.Class<any>;
      getHapinessBonus(): number;
      getHungerBonus(): number;
      getItems(): java.util.ArrayList<string>;
      getModule(): zombie.scripting.objects.ScriptModule;
      getName(): string;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      setBaseRecipe(arg0: string): void;
      setBoredomBonus(arg0: number): void;
      setHapinessBonus(arg0: number): void;
      setHungerBonus(arg0: number): void;
      setName(arg0: string): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.scripting.objects.VehicleScript extends zombie.scripting.objects.BaseScriptObject
    export class VehicleScript {
      private constructor();
      readonly gearRatio?: number[];
      gearRatioCount: number;
      isSmallVehicle: boolean;
      leftSirenCol?: zombie.core.ImmutableColor;
      readonly m_attachments?: java.util.ArrayList<zombie.scripting.objects.ModelAttachment>;
      maxSpeed: number;
      module?: zombie.scripting.objects.ScriptModule;
      rightSirenCol?: zombie.core.ImmutableColor;
      spawnOffsetY: number;
      textureMaskEnable: boolean;
  
      Load(arg0: string, arg1: string[]): void;
      Loaded(): void;
      addAttachment(arg0: zombie.scripting.objects.ModelAttachment): zombie.scripting.objects.ModelAttachment;
      addAttachmentAt(arg0: number, arg1: zombie.scripting.objects.ModelAttachment): zombie.scripting.objects.ModelAttachment;
      copyAreasFrom(arg0: zombie.scripting.objects.VehicleScript, arg1: string): void;
      copyPartsFrom(arg0: zombie.scripting.objects.VehicleScript, arg1: string): void;
      copyPassengersFrom(arg0: zombie.scripting.objects.VehicleScript, arg1: string): void;
      copyWheelsFrom(arg0: zombie.scripting.objects.VehicleScript, arg1: string): void;
      equals(arg0: any): boolean;
      getArea(arg0: number): zombie.scripting.objects.VehicleScript$Area;
      getAreaById(arg0: string): zombie.scripting.objects.VehicleScript$Area;
      getAreaCount(): number;
      getAttachment(arg0: number): zombie.scripting.objects.ModelAttachment;
      getAttachmentById(arg0: string): zombie.scripting.objects.ModelAttachment;
      getAttachmentCount(): number;
      getCenterOfMassOffset(): org.joml.Vector3f;
      getClass(): java.lang.Class<any>;
      getCrawlOffsets(): gnu.trove.list.array.TFloatArrayList;
      getEngineForce(): number;
      getEngineIdleSpeed(): number;
      getEngineLoudness(): number;
      getEngineQuality(): number;
      getEngineRPMType(): string;
      getEngineRepairLevel(): number;
      getExtents(): org.joml.Vector3f;
      getExtentsOffset(): org.joml.Vector2f;
      getFileName(): string;
      getForcedHue(): number;
      getForcedSat(): number;
      getForcedVal(): number;
      getFrontEndHealth(): number;
      getFullName(): string;
      getGearRatioCount(): number;
      getHasSiren(): boolean;
      getHeadlightConfigLevel(): number;
      getIndexOfAreaById(arg0: string): number;
      getIndexOfPartById(arg0: string): number;
      getIndexOfWheelById(arg0: string): number;
      getLightbar(): zombie.scripting.objects.VehicleScript$LightBar;
      getMass(): number;
      getMechanicType(): number;
      getModel(): zombie.scripting.objects.VehicleScript$Model;
      getModelById(arg0: string): zombie.scripting.objects.VehicleScript$Model;
      getModelByIndex(arg0: number): zombie.scripting.objects.VehicleScript$Model;
      getModelCount(): number;
      getModelOffset(): org.joml.Vector3f;
      getModelScale(): number;
      getModule(): zombie.scripting.objects.ScriptModule;
      getName(): string;
      getOffroadEfficiency(): number;
      getPart(arg0: number): zombie.scripting.objects.VehicleScript$Part;
      getPartById(arg0: string): zombie.scripting.objects.VehicleScript$Part;
      getPartCount(): number;
      getPassenger(arg0: number): zombie.scripting.objects.VehicleScript$Passenger;
      getPassengerById(arg0: string): zombie.scripting.objects.VehicleScript$Passenger;
      getPassengerCount(): number;
      getPassengerIndex(arg0: string): number;
      getPhysicsChassisShape(): org.joml.Vector3f;
      getPhysicsShape(arg0: number): zombie.scripting.objects.VehicleScript$PhysicsShape;
      getPhysicsShapeCount(): number;
      getPlayerDamageProtection(): number;
      getRearEndHealth(): number;
      getRollInfluence(): number;
      getSeats(): number;
      getShadowExtents(): org.joml.Vector2f;
      getShadowOffset(): org.joml.Vector2f;
      getSkin(arg0: number): zombie.scripting.objects.VehicleScript$Skin;
      getSkinCount(): number;
      getSounds(): zombie.scripting.objects.VehicleScript$Sounds;
      getSteeringClamp(arg0: number): number;
      getSteeringIncrement(): number;
      getStorageCapacity(): number;
      getSuspensionCompression(): number;
      getSuspensionDamping(): number;
      getSuspensionRestLength(): number;
      getSuspensionStiffness(): number;
      getSuspensionTravel(): number;
      getTextures(): zombie.scripting.objects.VehicleScript$Skin;
      getWheel(arg0: number): zombie.scripting.objects.VehicleScript$Wheel;
      getWheelById(arg0: string): zombie.scripting.objects.VehicleScript$Wheel;
      getWheelCount(): number;
      getWheelFriction(): number;
      globMatch(arg0: string, arg1: string): boolean;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      removeAttachment(arg0: number): zombie.scripting.objects.ModelAttachment;
      setEngineRPMType(arg0: string): void;
      setEngineRepairLevel(arg0: number): void;
      setForcedHue(arg0: number): void;
      setForcedSat(arg0: number): void;
      setForcedVal(arg0: number): void;
      setMechanicType(arg0: number): void;
      setModelScale(arg0: number): void;
      setOffroadEfficiency(arg0: number): void;
      setPlayerDamageProtection(arg0: number): void;
      setSeats(arg0: number): void;
      toBullet(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.scripting.objects.VehicleScript$Anim extends java.lang.Object
    export class VehicleScript$Anim {
      private constructor();
      readonly angle?: org.joml.Vector3f;
      anim?: string;
      bAnimate: boolean;
      bLoop: boolean;
      bReverse: boolean;
      id?: string;
      readonly offset?: org.joml.Vector3f;
      rate: number;
      sound?: string;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.scripting.objects.VehicleScript$Area extends java.lang.Object
    export class VehicleScript$Area {
      private constructor();
      h: number;
      id?: string;
      w: number;
      x: number;
      y: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getH(): number;
      getId(): string;
      getW(): number;
      getX(): number;
      getY(): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      setH(arg0: number): void;
      setW(arg0: number): void;
      setX(arg0: number): void;
      setY(arg0: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.scripting.objects.VehicleScript$Container extends java.lang.Object
    export class VehicleScript$Container {
      private constructor();
      capacity: number;
      conditionAffectsCapacity: boolean;
      contentType?: string;
      luaTest?: string;
      seat: number;
      seatID?: string;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.scripting.objects.VehicleScript$Door extends java.lang.Object
    export class VehicleScript$Door {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.scripting.objects.VehicleScript$LightBar extends java.lang.Object
    export class VehicleScript$LightBar {
      private constructor();
      enable: boolean;
      soundSiren0?: string;
      soundSiren1?: string;
      soundSiren2?: string;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.scripting.objects.VehicleScript$Model extends java.lang.Object
    export class VehicleScript$Model {
      private constructor();
      file?: string;
      id?: string;
      readonly offset?: org.joml.Vector3f;
      readonly rotate?: org.joml.Vector3f;
      scale: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getId(): string;
      getOffset(): org.joml.Vector3f;
      getRotate(): org.joml.Vector3f;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.scripting.objects.VehicleScript$Part extends java.lang.Object
    export class VehicleScript$Part {
      private constructor();
      anims?: java.util.ArrayList<zombie.scripting.objects.VehicleScript$Anim>;
      area?: string;
      bSetAllModelsVisible: boolean;
      category?: string;
      container?: zombie.scripting.objects.VehicleScript$Container;
      door?: zombie.scripting.objects.VehicleScript$Door;
      hasLightsRear: boolean;
      id?: string;
      itemType?: java.util.ArrayList<string>;
      luaFunctions?: java.util.HashMap<string, string>;
      mechanicRequireKey: boolean;
      models?: java.util.ArrayList<zombie.scripting.objects.VehicleScript$Model>;
      parent?: string;
      repairMechanic: boolean;
      specificItem: boolean;
      tables?: java.util.HashMap<string, se.krka.kahlua.vm.KahluaTable>;
      wheel?: string;
      window?: zombie.scripting.objects.VehicleScript$Window;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      isMechanicRequireKey(): boolean;
      isRepairMechanic(): boolean;
      notify(): void;
      notifyAll(): void;
      setMechanicRequireKey(arg0: boolean): void;
      setRepairMechanic(arg0: boolean): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.scripting.objects.VehicleScript$Passenger extends java.lang.Object
    export class VehicleScript$Passenger {
      private constructor();
      readonly anims?: java.util.ArrayList<zombie.scripting.objects.VehicleScript$Anim>;
      area?: string;
      door?: string;
      door2?: string;
      hasRoof: boolean;
      id?: string;
      readonly positions?: java.util.ArrayList<zombie.scripting.objects.VehicleScript$Position>;
      showPassenger: boolean;
      readonly switchSeats?: java.util.ArrayList<zombie.scripting.objects.VehicleScript$Passenger$SwitchSeat>;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getId(): string;
      getPosition(arg0: number): zombie.scripting.objects.VehicleScript$Position;
      getPositionById(arg0: string): zombie.scripting.objects.VehicleScript$Position;
      getPositionCount(): number;
      getSwitchSeatById(arg0: string): zombie.scripting.objects.VehicleScript$Passenger$SwitchSeat;
      hashCode(): number;
      makeCopy(): zombie.scripting.objects.VehicleScript$Passenger;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.scripting.objects.VehicleScript$Passenger$SwitchSeat extends java.lang.Object
    export class VehicleScript$Passenger$SwitchSeat {
      private constructor();
      anim?: string;
      id?: string;
      rate: number;
      seat: number;
      sound?: string;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getId(): string;
      hashCode(): number;
      makeCopy(): zombie.scripting.objects.VehicleScript$Passenger$SwitchSeat;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.scripting.objects.VehicleScript$PhysicsShape extends java.lang.Object
    export class VehicleScript$PhysicsShape {
      private constructor();
      readonly extents?: org.joml.Vector3f;
      readonly offset?: org.joml.Vector3f;
      radius: number;
      readonly rotate?: org.joml.Vector3f;
      type: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getExtents(): org.joml.Vector3f;
      getOffset(): org.joml.Vector3f;
      getRadius(): number;
      getRotate(): org.joml.Vector3f;
      getTypeString(): string;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      setRadius(arg0: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.scripting.objects.VehicleScript$Position extends java.lang.Object
    export class VehicleScript$Position {
      private constructor();
      area?: string;
      id?: string;
      readonly offset?: org.joml.Vector3f;
      readonly rotate?: org.joml.Vector3f;
  
      equals(arg0: any): boolean;
      getArea(): string;
      getClass(): java.lang.Class<any>;
      getId(): string;
      getOffset(): org.joml.Vector3f;
      getRotate(): org.joml.Vector3f;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.scripting.objects.VehicleScript$Skin extends java.lang.Object
    export class VehicleScript$Skin {
      private constructor();
      texture?: string;
      textureDamage1Overlay?: string;
      textureDamage1Shell?: string;
      textureDamage2Overlay?: string;
      textureDamage2Shell?: string;
      textureData?: zombie.core.textures.Texture;
      textureDataDamage1Overlay?: zombie.core.textures.Texture;
      textureDataDamage1Shell?: zombie.core.textures.Texture;
      textureDataDamage2Overlay?: zombie.core.textures.Texture;
      textureDataDamage2Shell?: zombie.core.textures.Texture;
      textureDataLights?: zombie.core.textures.Texture;
      textureDataMask?: zombie.core.textures.Texture;
      textureDataRust?: zombie.core.textures.Texture;
      textureDataShadow?: zombie.core.textures.Texture;
      textureLights?: string;
      textureMask?: string;
      textureRust?: string;
      textureShadow?: string;
  
      copyMissingFrom(arg0: zombie.scripting.objects.VehicleScript$Skin): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.scripting.objects.VehicleScript$Sounds extends java.lang.Object
    export class VehicleScript$Sounds {
      private constructor();
      backSignal?: string;
      backSignalEnable: boolean;
      engine?: string;
      engineStart?: string;
      engineTurnOff?: string;
      horn?: string;
      hornEnable: boolean;
      ignitionFail?: string;
      ignitionFailNoPower?: string;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.scripting.objects.VehicleScript$Wheel extends java.lang.Object
    export class VehicleScript$Wheel {
      private constructor();
      front: boolean;
      id?: string;
      model?: string;
      readonly offset?: org.joml.Vector3f;
      radius: number;
      width: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getId(): string;
      getOffset(): org.joml.Vector3f;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.scripting.objects.VehicleScript$Window extends java.lang.Object
    export class VehicleScript$Window {
      private constructor();
      openable: boolean;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.scripting.objects.VehicleTemplate extends zombie.scripting.objects.BaseScriptObject
    export class VehicleTemplate {
      private constructor();
      body?: string;
      module?: zombie.scripting.objects.ScriptModule;
      name?: string;
      script?: zombie.scripting.objects.VehicleScript;
  
      Load(arg0: string, arg1: string[]): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getModule(): zombie.scripting.objects.ScriptModule;
      getScript(): zombie.scripting.objects.VehicleScript;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.ui {
    // zombie.ui.ActionProgressBar extends zombie.ui.UIElement
    export class ActionProgressBar {
      private constructor();
      readonly Controls?: java.util.ArrayList<zombie.ui.UIElement>;
      IgnoreLossControl: boolean;
      Parent?: zombie.ui.UIElement;
      alwaysBack: boolean;
      anchorBottom: boolean;
      anchorLeft: boolean;
      anchorRight: boolean;
      anchorTop: boolean;
      bScrollChildren: boolean;
      bScrollWithParent: boolean;
      capture: boolean;
      clickedValue?: string;
      defaultDraw: boolean;
      delayHide: number;
      followGameWorld: boolean;
      height: number;
      playerContext: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      visible: boolean;
      width: number;
      x: number;
      y: number;
  
      AddChild(arg0: zombie.ui.UIElement): void;
      BringToTop(arg0: zombie.ui.UIElement): void;
      ButtonClicked(arg0: string): void;
      ClearChildren(): void;
      DrawSubTextureRGBA(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number, arg12: number): void;
      DrawText(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextCentre(arg0: zombie.ui.UIFont, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextRight(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextUntrimmed(arg0: zombie.ui.UIFont, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number): void;
      DrawTextureAngle(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextureCol(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: zombie.core.Color): void;
      DrawTextureColor(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextureIgnoreOffset(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTextureScaled(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
      DrawTextureScaledAspect(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledAspect2(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledCol(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTextureScaledColor(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledUniform(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextureTiled(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureTiledX(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureTiledY(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTexture_FlippedX(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTexture_FlippedXIgnoreOffset(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawUVSliceTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color, arg6: number, arg7: number, arg8: number, arg9: number): void;
      RemoveChild(arg0: zombie.ui.UIElement): void;
      RemoveControl(arg0: zombie.ui.UIElement): void;
      backMost(): void;
      bringToTop(): void;
      clampToParentX(arg0: number): number;
      clampToParentY(arg0: number): number;
      clearMaxDrawHeight(): void;
      clearStencilRect(): void;
      equals(arg0: any): boolean;
      getAbsoluteX(): number;
      getAbsoluteY(): number;
      getClass(): java.lang.Class<any>;
      getClickedValue(): string;
      getControls(): java.util.ArrayList<zombie.ui.UIElement>;
      getHeight(): number;
      getMaxDrawHeight(): number;
      getParent(): zombie.ui.UIElement;
      getPlayerContext(): number;
      getRenderThisPlayerOnly(): number;
      getScrollChildren(): boolean;
      getScrollHeight(): number;
      getScrollWithParent(): boolean;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getUIName(): string;
      getValue(): number;
      getWidth(): number;
      getX(): number;
      getXScroll(): number;
      getXScrolled(arg0: zombie.ui.UIElement): number;
      getY(): number;
      getYScroll(): number;
      getYScrolled(arg0: zombie.ui.UIElement): number;
      hashCode(): number;
      ignoreHeightChange(): void;
      ignoreWidthChange(): void;
      isAnchorBottom(): boolean;
      isAnchorLeft(): boolean;
      isAnchorRight(): boolean;
      isAnchorTop(): boolean;
      isCapture(): boolean;
      isConsumeMouseEvents(): boolean;
      isDefaultDraw(): boolean;
      isEnabled(): boolean;
      isFollowGameWorld(): boolean;
      isForceCursorVisible(): boolean;
      isIgnoreLossControl(): boolean;
      isKeyConsumed(arg0: number): boolean;
      isMouseOver(): boolean;
      isPointOver(arg0: number, arg1: number): boolean;
      isVisible(): boolean;
      isWantKeyEvents(): boolean;
      notify(): void;
      notifyAll(): void;
      onKeyPress(arg0: number): void;
      onKeyRelease(arg0: number): void;
      onKeyRepeat(arg0: number): void;
      onMouseDown(arg0: number, arg1: number): boolean;
      onMouseMove(arg0: number, arg1: number): boolean;
      onMouseMoveOutside(arg0: number, arg1: number): void;
      onMouseUp(arg0: number, arg1: number): boolean;
      onMouseUpOutside(arg0: number, arg1: number): void;
      onMouseWheel(arg0: number): boolean;
      onResize(): void;
      onRightMouseDown(arg0: number, arg1: number): boolean;
      onRightMouseUp(arg0: number, arg1: number): boolean;
      onresize(): void;
      render(): void;
      repaintStencilRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
      resumeStencil(): void;
      setAlwaysOnTop(arg0: boolean): void;
      setAnchorBottom(arg0: boolean): void;
      setAnchorLeft(arg0: boolean): void;
      setAnchorRight(arg0: boolean): void;
      setAnchorTop(arg0: boolean): void;
      setCapture(arg0: boolean): void;
      setClickedValue(arg0: string): void;
      setConsumeMouseEvents(arg0: boolean): void;
      setControls(arg0: java.util.Vector<zombie.ui.UIElement>): void;
      setDefaultDraw(arg0: boolean): void;
      setEnabled(arg0: boolean): void;
      setFollowGameWorld(arg0: boolean): void;
      setForceCursorVisible(arg0: boolean): void;
      setHeight(arg0: number): void;
      setHeightOnly(arg0: number): void;
      setHeightSilent(arg0: number): void;
      setIgnoreLossControl(arg0: boolean): void;
      setMaxDrawHeight(arg0: number): void;
      setParent(arg0: zombie.ui.UIElement): void;
      setPlayerContext(arg0: number): void;
      setRenderClippedChildren(arg0: boolean): void;
      setRenderThisPlayerOnly(arg0: number): void;
      setScrollChildren(arg0: boolean): void;
      setScrollHeight(arg0: number): void;
      setScrollWithParent(arg0: boolean): void;
      setStencilRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setUIName(arg0: string): void;
      setValue(arg0: number): void;
      setVisible(arg0: boolean): void;
      setWantKeyEvents(arg0: boolean): void;
      setWidth(arg0: number): void;
      setWidthOnly(arg0: number): void;
      setWidthSilent(arg0: number): void;
      setX(arg0: number): void;
      setXScroll(arg0: number): void;
      setY(arg0: number): void;
      setYScroll(arg0: number): void;
      suspendStencil(): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.ui.Clock extends zombie.ui.UIElement
    export class Clock {
      private constructor();
      readonly Controls?: java.util.ArrayList<zombie.ui.UIElement>;
      IgnoreLossControl: boolean;
      Parent?: zombie.ui.UIElement;
      alwaysBack: boolean;
      anchorBottom: boolean;
      anchorLeft: boolean;
      anchorRight: boolean;
      anchorTop: boolean;
      bScrollChildren: boolean;
      bScrollWithParent: boolean;
      capture: boolean;
      clickedValue?: string;
      defaultDraw: boolean;
      digital: boolean;
      followGameWorld: boolean;
      height: number;
      static instance?: zombie.ui.Clock;
      isAlarmRinging: boolean;
      isAlarmSet: boolean;
      playerContext: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      visible: boolean;
      width: number;
      x: number;
      y: number;
  
      AddChild(arg0: zombie.ui.UIElement): void;
      BringToTop(arg0: zombie.ui.UIElement): void;
      ButtonClicked(arg0: string): void;
      ClearChildren(): void;
      DrawSubTextureRGBA(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number, arg12: number): void;
      DrawText(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextCentre(arg0: zombie.ui.UIFont, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextRight(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextUntrimmed(arg0: zombie.ui.UIFont, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number): void;
      DrawTextureAngle(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextureCol(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: zombie.core.Color): void;
      DrawTextureColor(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextureIgnoreOffset(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTextureScaled(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
      DrawTextureScaledAspect(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledAspect2(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledCol(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTextureScaledColor(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledUniform(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextureTiled(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureTiledX(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureTiledY(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTexture_FlippedX(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTexture_FlippedXIgnoreOffset(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawUVSliceTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color, arg6: number, arg7: number, arg8: number, arg9: number): void;
      RemoveChild(arg0: zombie.ui.UIElement): void;
      RemoveControl(arg0: zombie.ui.UIElement): void;
      backMost(): void;
      bringToTop(): void;
      clampToParentX(arg0: number): number;
      clampToParentY(arg0: number): number;
      clearMaxDrawHeight(): void;
      clearStencilRect(): void;
      equals(arg0: any): boolean;
      getAbsoluteX(): number;
      getAbsoluteY(): number;
      getClass(): java.lang.Class<any>;
      getClickedValue(): string;
      getControls(): java.util.ArrayList<zombie.ui.UIElement>;
      getHeight(): number;
      getMaxDrawHeight(): number;
      getParent(): zombie.ui.UIElement;
      getPlayerContext(): number;
      getRenderThisPlayerOnly(): number;
      getScrollChildren(): boolean;
      getScrollHeight(): number;
      getScrollWithParent(): boolean;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getUIName(): string;
      getWidth(): number;
      getX(): number;
      getXScroll(): number;
      getXScrolled(arg0: zombie.ui.UIElement): number;
      getY(): number;
      getYScroll(): number;
      getYScrolled(arg0: zombie.ui.UIElement): number;
      hashCode(): number;
      ignoreHeightChange(): void;
      ignoreWidthChange(): void;
      isAnchorBottom(): boolean;
      isAnchorLeft(): boolean;
      isAnchorRight(): boolean;
      isAnchorTop(): boolean;
      isCapture(): boolean;
      isConsumeMouseEvents(): boolean;
      isDateVisible(): boolean;
      isDefaultDraw(): boolean;
      isEnabled(): boolean;
      isFollowGameWorld(): boolean;
      isForceCursorVisible(): boolean;
      isIgnoreLossControl(): boolean;
      isKeyConsumed(arg0: number): boolean;
      isMouseOver(): boolean;
      isPointOver(arg0: number, arg1: number): boolean;
      isVisible(): boolean;
      isWantKeyEvents(): boolean;
      notify(): void;
      notifyAll(): void;
      onKeyPress(arg0: number): void;
      onKeyRelease(arg0: number): void;
      onKeyRepeat(arg0: number): void;
      onMouseDown(arg0: number, arg1: number): boolean;
      onMouseMove(arg0: number, arg1: number): boolean;
      onMouseMoveOutside(arg0: number, arg1: number): void;
      onMouseUp(arg0: number, arg1: number): boolean;
      onMouseUpOutside(arg0: number, arg1: number): void;
      onMouseWheel(arg0: number): boolean;
      onResize(): void;
      onRightMouseDown(arg0: number, arg1: number): boolean;
      onRightMouseUp(arg0: number, arg1: number): boolean;
      onresize(): void;
      render(): void;
      repaintStencilRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
      resize(): void;
      resumeStencil(): void;
      setAlwaysOnTop(arg0: boolean): void;
      setAnchorBottom(arg0: boolean): void;
      setAnchorLeft(arg0: boolean): void;
      setAnchorRight(arg0: boolean): void;
      setAnchorTop(arg0: boolean): void;
      setCapture(arg0: boolean): void;
      setClickedValue(arg0: string): void;
      setConsumeMouseEvents(arg0: boolean): void;
      setControls(arg0: java.util.Vector<zombie.ui.UIElement>): void;
      setDefaultDraw(arg0: boolean): void;
      setEnabled(arg0: boolean): void;
      setFollowGameWorld(arg0: boolean): void;
      setForceCursorVisible(arg0: boolean): void;
      setHeight(arg0: number): void;
      setHeightOnly(arg0: number): void;
      setHeightSilent(arg0: number): void;
      setIgnoreLossControl(arg0: boolean): void;
      setMaxDrawHeight(arg0: number): void;
      setParent(arg0: zombie.ui.UIElement): void;
      setPlayerContext(arg0: number): void;
      setRenderClippedChildren(arg0: boolean): void;
      setRenderThisPlayerOnly(arg0: number): void;
      setScrollChildren(arg0: boolean): void;
      setScrollHeight(arg0: number): void;
      setScrollWithParent(arg0: boolean): void;
      setStencilRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setUIName(arg0: string): void;
      setVisible(arg0: boolean): void;
      setWantKeyEvents(arg0: boolean): void;
      setWidth(arg0: number): void;
      setWidthOnly(arg0: number): void;
      setWidthSilent(arg0: number): void;
      setX(arg0: number): void;
      setXScroll(arg0: number): void;
      setY(arg0: number): void;
      setYScroll(arg0: number): void;
      suspendStencil(): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.ui.HUDButton extends zombie.ui.UIElement
    export class HUDButton {
      private constructor();
      readonly Controls?: java.util.ArrayList<zombie.ui.UIElement>;
      IgnoreLossControl: boolean;
      Parent?: zombie.ui.UIElement;
      alwaysBack: boolean;
      anchorBottom: boolean;
      anchorLeft: boolean;
      anchorRight: boolean;
      anchorTop: boolean;
      bScrollChildren: boolean;
      bScrollWithParent: boolean;
      capture: boolean;
      clickedValue?: string;
      clickedalpha: number;
      defaultDraw: boolean;
      followGameWorld: boolean;
      height: number;
      notclickedAlpha: number;
      playerContext: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      visible: boolean;
      width: number;
      x: number;
      y: number;
  
      AddChild(arg0: zombie.ui.UIElement): void;
      BringToTop(arg0: zombie.ui.UIElement): void;
      ButtonClicked(arg0: string): void;
      ClearChildren(): void;
      DrawSubTextureRGBA(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number, arg12: number): void;
      DrawText(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextCentre(arg0: zombie.ui.UIFont, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextRight(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextUntrimmed(arg0: zombie.ui.UIFont, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number): void;
      DrawTextureAngle(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextureCol(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: zombie.core.Color): void;
      DrawTextureColor(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextureIgnoreOffset(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTextureScaled(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
      DrawTextureScaledAspect(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledAspect2(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledCol(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTextureScaledColor(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledUniform(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextureTiled(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureTiledX(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureTiledY(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTexture_FlippedX(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTexture_FlippedXIgnoreOffset(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawUVSliceTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color, arg6: number, arg7: number, arg8: number, arg9: number): void;
      RemoveChild(arg0: zombie.ui.UIElement): void;
      RemoveControl(arg0: zombie.ui.UIElement): void;
      backMost(): void;
      bringToTop(): void;
      clampToParentX(arg0: number): number;
      clampToParentY(arg0: number): number;
      clearMaxDrawHeight(): void;
      clearStencilRect(): void;
      equals(arg0: any): boolean;
      getAbsoluteX(): number;
      getAbsoluteY(): number;
      getClass(): java.lang.Class<any>;
      getClickedValue(): string;
      getControls(): java.util.ArrayList<zombie.ui.UIElement>;
      getHeight(): number;
      getMaxDrawHeight(): number;
      getParent(): zombie.ui.UIElement;
      getPlayerContext(): number;
      getRenderThisPlayerOnly(): number;
      getScrollChildren(): boolean;
      getScrollHeight(): number;
      getScrollWithParent(): boolean;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getUIName(): string;
      getWidth(): number;
      getX(): number;
      getXScroll(): number;
      getXScrolled(arg0: zombie.ui.UIElement): number;
      getY(): number;
      getYScroll(): number;
      getYScrolled(arg0: zombie.ui.UIElement): number;
      hashCode(): number;
      ignoreHeightChange(): void;
      ignoreWidthChange(): void;
      isAnchorBottom(): boolean;
      isAnchorLeft(): boolean;
      isAnchorRight(): boolean;
      isAnchorTop(): boolean;
      isCapture(): boolean;
      isConsumeMouseEvents(): boolean;
      isDefaultDraw(): boolean;
      isEnabled(): boolean;
      isFollowGameWorld(): boolean;
      isForceCursorVisible(): boolean;
      isIgnoreLossControl(): boolean;
      isKeyConsumed(arg0: number): boolean;
      isMouseOver(): boolean;
      isPointOver(arg0: number, arg1: number): boolean;
      isVisible(): boolean;
      isWantKeyEvents(): boolean;
      notify(): void;
      notifyAll(): void;
      onKeyPress(arg0: number): void;
      onKeyRelease(arg0: number): void;
      onKeyRepeat(arg0: number): void;
      onMouseDown(arg0: number, arg1: number): boolean;
      onMouseMove(arg0: number, arg1: number): boolean;
      onMouseMoveOutside(arg0: number, arg1: number): void;
      onMouseUp(arg0: number, arg1: number): boolean;
      onMouseUpOutside(arg0: number, arg1: number): void;
      onMouseWheel(arg0: number): boolean;
      onResize(): void;
      onRightMouseDown(arg0: number, arg1: number): boolean;
      onRightMouseUp(arg0: number, arg1: number): boolean;
      onresize(): void;
      render(): void;
      repaintStencilRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
      resumeStencil(): void;
      setAlwaysOnTop(arg0: boolean): void;
      setAnchorBottom(arg0: boolean): void;
      setAnchorLeft(arg0: boolean): void;
      setAnchorRight(arg0: boolean): void;
      setAnchorTop(arg0: boolean): void;
      setCapture(arg0: boolean): void;
      setClickedValue(arg0: string): void;
      setConsumeMouseEvents(arg0: boolean): void;
      setControls(arg0: java.util.Vector<zombie.ui.UIElement>): void;
      setDefaultDraw(arg0: boolean): void;
      setEnabled(arg0: boolean): void;
      setFollowGameWorld(arg0: boolean): void;
      setForceCursorVisible(arg0: boolean): void;
      setHeight(arg0: number): void;
      setHeightOnly(arg0: number): void;
      setHeightSilent(arg0: number): void;
      setIgnoreLossControl(arg0: boolean): void;
      setMaxDrawHeight(arg0: number): void;
      setParent(arg0: zombie.ui.UIElement): void;
      setPlayerContext(arg0: number): void;
      setRenderClippedChildren(arg0: boolean): void;
      setRenderThisPlayerOnly(arg0: number): void;
      setScrollChildren(arg0: boolean): void;
      setScrollHeight(arg0: number): void;
      setScrollWithParent(arg0: boolean): void;
      setStencilRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setUIName(arg0: string): void;
      setVisible(arg0: boolean): void;
      setWantKeyEvents(arg0: boolean): void;
      setWidth(arg0: number): void;
      setWidthOnly(arg0: number): void;
      setWidthSilent(arg0: number): void;
      setX(arg0: number): void;
      setXScroll(arg0: number): void;
      setY(arg0: number): void;
      setYScroll(arg0: number): void;
      suspendStencil(): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.ui.ModalDialog extends zombie.ui.NewWindow
    export class ModalDialog {
      private constructor();
      readonly Controls?: java.util.ArrayList<zombie.ui.UIElement>;
      IgnoreLossControl: boolean;
      Movable: boolean;
      Name?: string;
      Parent?: zombie.ui.UIElement;
      ResizeToFitY: boolean;
      alwaysBack: boolean;
      anchorBottom: boolean;
      anchorLeft: boolean;
      anchorRight: boolean;
      anchorTop: boolean;
      bScrollChildren: boolean;
      bScrollWithParent: boolean;
      bYes: boolean;
      capture: boolean;
      clickX: number;
      clickY: number;
      clickedValue?: string;
      clientH: number;
      clientW: number;
      defaultDraw: boolean;
      followGameWorld: boolean;
      height: number;
      moving: boolean;
      ncclientH: number;
      ncclientW: number;
      nestedItems?: java.util.Stack<org.lwjgl.util.Rectangle>;
      playerContext: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      visible: boolean;
      width: number;
      x: number;
      y: number;
  
      AddChild(arg0: zombie.ui.UIElement): void;
      BringToTop(arg0: zombie.ui.UIElement): void;
      ButtonClicked(arg0: string): void;
      ClearChildren(): void;
      Clicked(arg0: string): void;
      DrawSubTextureRGBA(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number, arg12: number): void;
      DrawText(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextCentre(arg0: zombie.ui.UIFont, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextRight(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextUntrimmed(arg0: zombie.ui.UIFont, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number): void;
      DrawTextureAngle(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextureCol(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: zombie.core.Color): void;
      DrawTextureColor(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextureIgnoreOffset(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTextureScaled(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
      DrawTextureScaledAspect(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledAspect2(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledCol(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTextureScaledColor(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledUniform(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextureTiled(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureTiledX(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureTiledY(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTexture_FlippedX(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTexture_FlippedXIgnoreOffset(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawUVSliceTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color, arg6: number, arg7: number, arg8: number, arg9: number): void;
      Nest(arg0: zombie.ui.UIElement, arg1: number, arg2: number, arg3: number, arg4: number): void;
      RemoveChild(arg0: zombie.ui.UIElement): void;
      RemoveControl(arg0: zombie.ui.UIElement): void;
      backMost(): void;
      bringToTop(): void;
      clampToParentX(arg0: number): number;
      clampToParentY(arg0: number): number;
      clearMaxDrawHeight(): void;
      clearStencilRect(): void;
      equals(arg0: any): boolean;
      getAbsoluteX(): number;
      getAbsoluteY(): number;
      getClass(): java.lang.Class<any>;
      getClickedValue(): string;
      getControls(): java.util.ArrayList<zombie.ui.UIElement>;
      getHeight(): number;
      getMaxDrawHeight(): number;
      getParent(): zombie.ui.UIElement;
      getPlayerContext(): number;
      getRenderThisPlayerOnly(): number;
      getScrollChildren(): boolean;
      getScrollHeight(): number;
      getScrollWithParent(): boolean;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getUIName(): string;
      getWidth(): number;
      getX(): number;
      getXScroll(): number;
      getXScrolled(arg0: zombie.ui.UIElement): number;
      getY(): number;
      getYScroll(): number;
      getYScrolled(arg0: zombie.ui.UIElement): number;
      hashCode(): number;
      ignoreHeightChange(): void;
      ignoreWidthChange(): void;
      isAnchorBottom(): boolean;
      isAnchorLeft(): boolean;
      isAnchorRight(): boolean;
      isAnchorTop(): boolean;
      isCapture(): boolean;
      isConsumeMouseEvents(): boolean;
      isDefaultDraw(): boolean;
      isEnabled(): boolean;
      isFollowGameWorld(): boolean;
      isForceCursorVisible(): boolean;
      isIgnoreLossControl(): boolean;
      isKeyConsumed(arg0: number): boolean;
      isMouseOver(): boolean;
      isPointOver(arg0: number, arg1: number): boolean;
      isVisible(): boolean;
      isWantKeyEvents(): boolean;
      notify(): void;
      notifyAll(): void;
      onKeyPress(arg0: number): void;
      onKeyRelease(arg0: number): void;
      onKeyRepeat(arg0: number): void;
      onMouseDown(arg0: number, arg1: number): boolean;
      onMouseMove(arg0: number, arg1: number): boolean;
      onMouseMoveOutside(arg0: number, arg1: number): void;
      onMouseUp(arg0: number, arg1: number): boolean;
      onMouseUpOutside(arg0: number, arg1: number): void;
      onMouseWheel(arg0: number): boolean;
      onResize(): void;
      onRightMouseDown(arg0: number, arg1: number): boolean;
      onRightMouseUp(arg0: number, arg1: number): boolean;
      onresize(): void;
      render(): void;
      repaintStencilRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
      resumeStencil(): void;
      setAlwaysOnTop(arg0: boolean): void;
      setAnchorBottom(arg0: boolean): void;
      setAnchorLeft(arg0: boolean): void;
      setAnchorRight(arg0: boolean): void;
      setAnchorTop(arg0: boolean): void;
      setCapture(arg0: boolean): void;
      setClickedValue(arg0: string): void;
      setConsumeMouseEvents(arg0: boolean): void;
      setControls(arg0: java.util.Vector<zombie.ui.UIElement>): void;
      setDefaultDraw(arg0: boolean): void;
      setEnabled(arg0: boolean): void;
      setFollowGameWorld(arg0: boolean): void;
      setForceCursorVisible(arg0: boolean): void;
      setHeight(arg0: number): void;
      setHeightOnly(arg0: number): void;
      setHeightSilent(arg0: number): void;
      setIgnoreLossControl(arg0: boolean): void;
      setMaxDrawHeight(arg0: number): void;
      setMovable(arg0: boolean): void;
      setParent(arg0: zombie.ui.UIElement): void;
      setPlayerContext(arg0: number): void;
      setRenderClippedChildren(arg0: boolean): void;
      setRenderThisPlayerOnly(arg0: number): void;
      setScrollChildren(arg0: boolean): void;
      setScrollHeight(arg0: number): void;
      setScrollWithParent(arg0: boolean): void;
      setStencilRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setUIName(arg0: string): void;
      setVisible(arg0: boolean): void;
      setWantKeyEvents(arg0: boolean): void;
      setWidth(arg0: number): void;
      setWidthOnly(arg0: number): void;
      setWidthSilent(arg0: number): void;
      setX(arg0: number): void;
      setXScroll(arg0: number): void;
      setY(arg0: number): void;
      setYScroll(arg0: number): void;
      suspendStencil(): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.ui.MoodlesUI extends zombie.ui.UIElement
    export class MoodlesUI {
      private constructor();
      readonly Controls?: java.util.ArrayList<zombie.ui.UIElement>;
      IgnoreLossControl: boolean;
      Movable: boolean;
      Parent?: zombie.ui.UIElement;
      alwaysBack: boolean;
      anchorBottom: boolean;
      anchorLeft: boolean;
      anchorRight: boolean;
      anchorTop: boolean;
      bScrollChildren: boolean;
      bScrollWithParent: boolean;
      capture: boolean;
      static chevronDown?: zombie.core.textures.Texture;
      static chevronDownBorder?: zombie.core.textures.Texture;
      static chevronUp?: zombie.core.textures.Texture;
      static chevronUpBorder?: zombie.core.textures.Texture;
      clickedValue?: string;
      clientH: number;
      clientW: number;
      defaultDraw: boolean;
      followGameWorld: boolean;
      height: number;
      static minusGreen?: zombie.core.textures.Texture;
      static minusRed?: zombie.core.textures.Texture;
      ncclientH: number;
      ncclientW: number;
      nestedItems?: java.util.Stack<org.lwjgl.util.Rectangle>;
      playerContext: number;
      static plusGreen?: zombie.core.textures.Texture;
      static plusRed?: zombie.core.textures.Texture;
      table?: se.krka.kahlua.vm.KahluaTable;
      visible: boolean;
      width: number;
      x: number;
      y: number;
  
      AddChild(arg0: zombie.ui.UIElement): void;
      BringToTop(arg0: zombie.ui.UIElement): void;
      ButtonClicked(arg0: string): void;
      ClearChildren(): void;
      CurrentlyAnimating(): boolean;
      DrawSubTextureRGBA(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number, arg12: number): void;
      DrawText(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextCentre(arg0: zombie.ui.UIFont, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextRight(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextUntrimmed(arg0: zombie.ui.UIFont, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number): void;
      DrawTextureAngle(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextureCol(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: zombie.core.Color): void;
      DrawTextureColor(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextureIgnoreOffset(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTextureScaled(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
      DrawTextureScaledAspect(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledAspect2(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledCol(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTextureScaledColor(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledUniform(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextureTiled(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureTiledX(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureTiledY(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTexture_FlippedX(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTexture_FlippedXIgnoreOffset(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawUVSliceTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color, arg6: number, arg7: number, arg8: number, arg9: number): void;
      Nest(arg0: zombie.ui.UIElement, arg1: number, arg2: number, arg3: number, arg4: number): void;
      RemoveChild(arg0: zombie.ui.UIElement): void;
      RemoveControl(arg0: zombie.ui.UIElement): void;
      backMost(): void;
      bringToTop(): void;
      clampToParentX(arg0: number): number;
      clampToParentY(arg0: number): number;
      clearMaxDrawHeight(): void;
      clearStencilRect(): void;
      equals(arg0: any): boolean;
      getAbsoluteX(): number;
      getAbsoluteY(): number;
      getClass(): java.lang.Class<any>;
      getClickedValue(): string;
      getControls(): java.util.ArrayList<zombie.ui.UIElement>;
      getHeight(): number;
      getInstance(): zombie.ui.MoodlesUI;
      getMaxDrawHeight(): number;
      getParent(): zombie.ui.UIElement;
      getPlayerContext(): number;
      getRenderThisPlayerOnly(): number;
      getScrollChildren(): boolean;
      getScrollHeight(): number;
      getScrollWithParent(): boolean;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getUIName(): string;
      getWidth(): number;
      getX(): number;
      getXScroll(): number;
      getXScrolled(arg0: zombie.ui.UIElement): number;
      getY(): number;
      getYScroll(): number;
      getYScrolled(arg0: zombie.ui.UIElement): number;
      hashCode(): number;
      ignoreHeightChange(): void;
      ignoreWidthChange(): void;
      isAnchorBottom(): boolean;
      isAnchorLeft(): boolean;
      isAnchorRight(): boolean;
      isAnchorTop(): boolean;
      isCapture(): boolean;
      isConsumeMouseEvents(): boolean;
      isDefaultDraw(): boolean;
      isEnabled(): boolean;
      isFollowGameWorld(): boolean;
      isForceCursorVisible(): boolean;
      isIgnoreLossControl(): boolean;
      isKeyConsumed(arg0: number): boolean;
      isMouseOver(): boolean;
      isPointOver(arg0: number, arg1: number): boolean;
      isVisible(): boolean;
      isWantKeyEvents(): boolean;
      notify(): void;
      notifyAll(): void;
      onKeyPress(arg0: number): void;
      onKeyRelease(arg0: number): void;
      onKeyRepeat(arg0: number): void;
      onMouseDown(arg0: number, arg1: number): boolean;
      onMouseMove(arg0: number, arg1: number): boolean;
      onMouseMoveOutside(arg0: number, arg1: number): void;
      onMouseUp(arg0: number, arg1: number): boolean;
      onMouseUpOutside(arg0: number, arg1: number): void;
      onMouseWheel(arg0: number): boolean;
      onResize(): void;
      onRightMouseDown(arg0: number, arg1: number): boolean;
      onRightMouseUp(arg0: number, arg1: number): boolean;
      onresize(): void;
      render(): void;
      repaintStencilRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
      resumeStencil(): void;
      setAlwaysOnTop(arg0: boolean): void;
      setAnchorBottom(arg0: boolean): void;
      setAnchorLeft(arg0: boolean): void;
      setAnchorRight(arg0: boolean): void;
      setAnchorTop(arg0: boolean): void;
      setCapture(arg0: boolean): void;
      setCharacter(arg0: zombie.characters.IsoGameCharacter): void;
      setClickedValue(arg0: string): void;
      setConsumeMouseEvents(arg0: boolean): void;
      setControls(arg0: java.util.Vector<zombie.ui.UIElement>): void;
      setDefaultDraw(arg0: boolean): void;
      setEnabled(arg0: boolean): void;
      setFollowGameWorld(arg0: boolean): void;
      setForceCursorVisible(arg0: boolean): void;
      setHeight(arg0: number): void;
      setHeightOnly(arg0: number): void;
      setHeightSilent(arg0: number): void;
      setIgnoreLossControl(arg0: boolean): void;
      setMaxDrawHeight(arg0: number): void;
      setParent(arg0: zombie.ui.UIElement): void;
      setPlayerContext(arg0: number): void;
      setRenderClippedChildren(arg0: boolean): void;
      setRenderThisPlayerOnly(arg0: number): void;
      setScrollChildren(arg0: boolean): void;
      setScrollHeight(arg0: number): void;
      setScrollWithParent(arg0: boolean): void;
      setStencilRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setUIName(arg0: string): void;
      setVisible(arg0: boolean): void;
      setWantKeyEvents(arg0: boolean): void;
      setWidth(arg0: number): void;
      setWidthOnly(arg0: number): void;
      setWidthSilent(arg0: number): void;
      setX(arg0: number): void;
      setXScroll(arg0: number): void;
      setY(arg0: number): void;
      setYScroll(arg0: number): void;
      suspendStencil(): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
      wiggle(arg0: zombie.characters.Moodles.MoodleType): void;
    }
    // zombie.ui.NewHealthPanel extends zombie.ui.NewWindow
    export class NewHealthPanel {
      private constructor();
      BodyOutline?: zombie.core.textures.Texture;
      readonly Controls?: java.util.ArrayList<zombie.ui.UIElement>;
      Foot_L?: zombie.ui.UI_BodyPart;
      Foot_R?: zombie.ui.UI_BodyPart;
      ForeArm_L?: zombie.ui.UI_BodyPart;
      ForeArm_R?: zombie.ui.UI_BodyPart;
      Groin?: zombie.ui.UI_BodyPart;
      Hand_L?: zombie.ui.UI_BodyPart;
      Hand_R?: zombie.ui.UI_BodyPart;
      Head?: zombie.ui.UI_BodyPart;
      HealthBar?: zombie.core.textures.Texture;
      HealthBarBack?: zombie.core.textures.Texture;
      HealthIcon?: zombie.core.textures.Texture;
      IgnoreLossControl: boolean;
      LowerLeg_L?: zombie.ui.UI_BodyPart;
      LowerLeg_R?: zombie.ui.UI_BodyPart;
      Movable: boolean;
      Neck?: zombie.ui.UI_BodyPart;
      Parent?: zombie.ui.UIElement;
      ResizeToFitY: boolean;
      Torso_Lower?: zombie.ui.UI_BodyPart;
      Torso_Upper?: zombie.ui.UI_BodyPart;
      UpperArm_L?: zombie.ui.UI_BodyPart;
      UpperArm_R?: zombie.ui.UI_BodyPart;
      UpperLeg_L?: zombie.ui.UI_BodyPart;
      UpperLeg_R?: zombie.ui.UI_BodyPart;
      alwaysBack: boolean;
      anchorBottom: boolean;
      anchorLeft: boolean;
      anchorRight: boolean;
      anchorTop: boolean;
      bScrollChildren: boolean;
      bScrollWithParent: boolean;
      capture: boolean;
      clickX: number;
      clickY: number;
      clickedValue?: string;
      clientH: number;
      clientW: number;
      defaultDraw: boolean;
      followGameWorld: boolean;
      height: number;
      static instance?: zombie.ui.NewHealthPanel;
      moving: boolean;
      ncclientH: number;
      ncclientW: number;
      nestedItems?: java.util.Stack<org.lwjgl.util.Rectangle>;
      playerContext: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      visible: boolean;
      width: number;
      x: number;
      y: number;
  
      AddChild(arg0: zombie.ui.UIElement): void;
      BringToTop(arg0: zombie.ui.UIElement): void;
      ButtonClicked(arg0: string): void;
      ClearChildren(): void;
      DrawSubTextureRGBA(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number, arg12: number): void;
      DrawText(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextCentre(arg0: zombie.ui.UIFont, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextRight(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextUntrimmed(arg0: zombie.ui.UIFont, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number): void;
      DrawTextureAngle(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextureCol(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: zombie.core.Color): void;
      DrawTextureColor(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextureIgnoreOffset(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTextureScaled(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
      DrawTextureScaledAspect(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledAspect2(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledCol(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTextureScaledColor(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledUniform(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextureTiled(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureTiledX(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureTiledY(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTexture_FlippedX(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTexture_FlippedXIgnoreOffset(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawUVSliceTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color, arg6: number, arg7: number, arg8: number, arg9: number): void;
      Nest(arg0: zombie.ui.UIElement, arg1: number, arg2: number, arg3: number, arg4: number): void;
      RemoveChild(arg0: zombie.ui.UIElement): void;
      RemoveControl(arg0: zombie.ui.UIElement): void;
      SetCharacter(arg0: zombie.characters.IsoGameCharacter): void;
      backMost(): void;
      bringToTop(): void;
      clampToParentX(arg0: number): number;
      clampToParentY(arg0: number): number;
      clearMaxDrawHeight(): void;
      clearStencilRect(): void;
      equals(arg0: any): boolean;
      getAbsoluteX(): number;
      getAbsoluteY(): number;
      getClass(): java.lang.Class<any>;
      getClickedValue(): string;
      getControls(): java.util.ArrayList<zombie.ui.UIElement>;
      getDamageStatusString(): string;
      getHeight(): number;
      getMaxDrawHeight(): number;
      getParent(): zombie.ui.UIElement;
      getPlayerContext(): number;
      getRenderThisPlayerOnly(): number;
      getScrollChildren(): boolean;
      getScrollHeight(): number;
      getScrollWithParent(): boolean;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getUIName(): string;
      getWidth(): number;
      getX(): number;
      getXScroll(): number;
      getXScrolled(arg0: zombie.ui.UIElement): number;
      getY(): number;
      getYScroll(): number;
      getYScrolled(arg0: zombie.ui.UIElement): number;
      hashCode(): number;
      ignoreHeightChange(): void;
      ignoreWidthChange(): void;
      isAnchorBottom(): boolean;
      isAnchorLeft(): boolean;
      isAnchorRight(): boolean;
      isAnchorTop(): boolean;
      isCapture(): boolean;
      isConsumeMouseEvents(): boolean;
      isDefaultDraw(): boolean;
      isEnabled(): boolean;
      isFollowGameWorld(): boolean;
      isForceCursorVisible(): boolean;
      isIgnoreLossControl(): boolean;
      isKeyConsumed(arg0: number): boolean;
      isMouseOver(): boolean;
      isPointOver(arg0: number, arg1: number): boolean;
      isVisible(): boolean;
      isWantKeyEvents(): boolean;
      notify(): void;
      notifyAll(): void;
      onKeyPress(arg0: number): void;
      onKeyRelease(arg0: number): void;
      onKeyRepeat(arg0: number): void;
      onMouseDown(arg0: number, arg1: number): boolean;
      onMouseMove(arg0: number, arg1: number): boolean;
      onMouseMoveOutside(arg0: number, arg1: number): void;
      onMouseUp(arg0: number, arg1: number): boolean;
      onMouseUpOutside(arg0: number, arg1: number): void;
      onMouseWheel(arg0: number): boolean;
      onResize(): void;
      onRightMouseDown(arg0: number, arg1: number): boolean;
      onRightMouseUp(arg0: number, arg1: number): boolean;
      onresize(): void;
      render(): void;
      repaintStencilRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
      resumeStencil(): void;
      setAlwaysOnTop(arg0: boolean): void;
      setAnchorBottom(arg0: boolean): void;
      setAnchorLeft(arg0: boolean): void;
      setAnchorRight(arg0: boolean): void;
      setAnchorTop(arg0: boolean): void;
      setCapture(arg0: boolean): void;
      setClickedValue(arg0: string): void;
      setConsumeMouseEvents(arg0: boolean): void;
      setControls(arg0: java.util.Vector<zombie.ui.UIElement>): void;
      setDefaultDraw(arg0: boolean): void;
      setEnabled(arg0: boolean): void;
      setFollowGameWorld(arg0: boolean): void;
      setForceCursorVisible(arg0: boolean): void;
      setHeight(arg0: number): void;
      setHeightOnly(arg0: number): void;
      setHeightSilent(arg0: number): void;
      setIgnoreLossControl(arg0: boolean): void;
      setMaxDrawHeight(arg0: number): void;
      setMovable(arg0: boolean): void;
      setParent(arg0: zombie.ui.UIElement): void;
      setPlayerContext(arg0: number): void;
      setRenderClippedChildren(arg0: boolean): void;
      setRenderThisPlayerOnly(arg0: number): void;
      setScrollChildren(arg0: boolean): void;
      setScrollHeight(arg0: number): void;
      setScrollWithParent(arg0: boolean): void;
      setStencilRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setUIName(arg0: string): void;
      setVisible(arg0: boolean): void;
      setWantKeyEvents(arg0: boolean): void;
      setWidth(arg0: number): void;
      setWidthOnly(arg0: number): void;
      setWidthSilent(arg0: number): void;
      setX(arg0: number): void;
      setXScroll(arg0: number): void;
      setY(arg0: number): void;
      setYScroll(arg0: number): void;
      suspendStencil(): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.ui.ObjectTooltip extends zombie.ui.UIElement
    export class ObjectTooltip {
      private constructor();
      readonly Controls?: java.util.ArrayList<zombie.ui.UIElement>;
      IgnoreLossControl: boolean;
      Item?: zombie.inventory.InventoryItem;
      Object?: zombie.iso.IsoObject;
      Parent?: zombie.ui.UIElement;
      static alphaStep: number;
      alwaysBack: boolean;
      anchorBottom: boolean;
      anchorLeft: boolean;
      anchorRight: boolean;
      anchorTop: boolean;
      bIsItem: boolean;
      bScrollChildren: boolean;
      bScrollWithParent: boolean;
      capture: boolean;
      clickedValue?: string;
      defaultDraw: boolean;
      followGameWorld: boolean;
      height: number;
      padBottom: number;
      padRight: number;
      playerContext: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      visible: boolean;
      width: number;
      x: number;
      y: number;
  
      AddChild(arg0: zombie.ui.UIElement): void;
      BringToTop(arg0: zombie.ui.UIElement): void;
      ButtonClicked(arg0: string): void;
      ClearChildren(): void;
      DrawProgressBar(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawSubTextureRGBA(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number, arg12: number): void;
      DrawText(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextCentre(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextRight(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextUntrimmed(arg0: zombie.ui.UIFont, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number): void;
      DrawTextureAngle(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextureCol(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: zombie.core.Color): void;
      DrawTextureColor(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextureIgnoreOffset(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTextureScaled(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
      DrawTextureScaledAspect(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledAspect2(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledCol(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTextureScaledColor(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledUniform(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextureTiled(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureTiledX(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureTiledY(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTexture_FlippedX(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTexture_FlippedXIgnoreOffset(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawUVSliceTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color, arg6: number, arg7: number, arg8: number, arg9: number): void;
      DrawValueRight(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      DrawValueRightNoPlus(arg0: number, arg1: number, arg2: number): void;
      RemoveChild(arg0: zombie.ui.UIElement): void;
      RemoveControl(arg0: zombie.ui.UIElement): void;
      adjustWidth(arg0: number, arg1: string): void;
      backMost(): void;
      beginLayout(): zombie.ui.ObjectTooltip$Layout;
      bringToTop(): void;
      checkFont(): void;
      clampToParentX(arg0: number): number;
      clampToParentY(arg0: number): number;
      clearMaxDrawHeight(): void;
      clearStencilRect(): void;
      endLayout(arg0: zombie.ui.ObjectTooltip$Layout): void;
      equals(arg0: any): boolean;
      getAbsoluteX(): number;
      getAbsoluteY(): number;
      getCharacter(): zombie.characters.IsoGameCharacter;
      getClass(): java.lang.Class<any>;
      getClickedValue(): string;
      getControls(): java.util.ArrayList<zombie.ui.UIElement>;
      getFont(): zombie.ui.UIFont;
      getHeight(): number;
      getLineSpacing(): number;
      getMaxDrawHeight(): number;
      getParent(): zombie.ui.UIElement;
      getPlayerContext(): number;
      getRenderThisPlayerOnly(): number;
      getScrollChildren(): boolean;
      getScrollHeight(): number;
      getScrollWithParent(): boolean;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTexture(): zombie.core.textures.Texture;
      getUIName(): string;
      getWeightOfStack(): number;
      getWidth(): number;
      getX(): number;
      getXScroll(): number;
      getXScrolled(arg0: zombie.ui.UIElement): number;
      getY(): number;
      getYScroll(): number;
      getYScrolled(arg0: zombie.ui.UIElement): number;
      hashCode(): number;
      hide(): void;
      ignoreHeightChange(): void;
      ignoreWidthChange(): void;
      isAnchorBottom(): boolean;
      isAnchorLeft(): boolean;
      isAnchorRight(): boolean;
      isAnchorTop(): boolean;
      isCapture(): boolean;
      isConsumeMouseEvents(): boolean;
      isDefaultDraw(): boolean;
      isEnabled(): boolean;
      isFollowGameWorld(): boolean;
      isForceCursorVisible(): boolean;
      isIgnoreLossControl(): boolean;
      isKeyConsumed(arg0: number): boolean;
      isMeasureOnly(): boolean;
      isMouseOver(): boolean;
      isPointOver(arg0: number, arg1: number): boolean;
      isVisible(): boolean;
      isWantKeyEvents(): boolean;
      notify(): void;
      notifyAll(): void;
      onKeyPress(arg0: number): void;
      onKeyRelease(arg0: number): void;
      onKeyRepeat(arg0: number): void;
      onMouseDown(arg0: number, arg1: number): boolean;
      onMouseMove(arg0: number, arg1: number): boolean;
      onMouseMoveOutside(arg0: number, arg1: number): void;
      onMouseUp(arg0: number, arg1: number): boolean;
      onMouseUpOutside(arg0: number, arg1: number): void;
      onMouseWheel(arg0: number): boolean;
      onResize(): void;
      onRightMouseDown(arg0: number, arg1: number): boolean;
      onRightMouseUp(arg0: number, arg1: number): boolean;
      onresize(): void;
      render(): void;
      repaintStencilRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
      resumeStencil(): void;
      setAlwaysOnTop(arg0: boolean): void;
      setAnchorBottom(arg0: boolean): void;
      setAnchorLeft(arg0: boolean): void;
      setAnchorRight(arg0: boolean): void;
      setAnchorTop(arg0: boolean): void;
      setCapture(arg0: boolean): void;
      setCharacter(arg0: zombie.characters.IsoGameCharacter): void;
      setClickedValue(arg0: string): void;
      setConsumeMouseEvents(arg0: boolean): void;
      setControls(arg0: java.util.Vector<zombie.ui.UIElement>): void;
      setDefaultDraw(arg0: boolean): void;
      setEnabled(arg0: boolean): void;
      setFollowGameWorld(arg0: boolean): void;
      setForceCursorVisible(arg0: boolean): void;
      setHeight(arg0: number): void;
      setHeightOnly(arg0: number): void;
      setHeightSilent(arg0: number): void;
      setIgnoreLossControl(arg0: boolean): void;
      setMaxDrawHeight(arg0: number): void;
      setMeasureOnly(arg0: boolean): void;
      setParent(arg0: zombie.ui.UIElement): void;
      setPlayerContext(arg0: number): void;
      setRenderClippedChildren(arg0: boolean): void;
      setRenderThisPlayerOnly(arg0: number): void;
      setScrollChildren(arg0: boolean): void;
      setScrollHeight(arg0: number): void;
      setScrollWithParent(arg0: boolean): void;
      setStencilRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setUIName(arg0: string): void;
      setVisible(arg0: boolean): void;
      setWantKeyEvents(arg0: boolean): void;
      setWeightOfStack(arg0: number): void;
      setWidth(arg0: number): void;
      setWidthOnly(arg0: number): void;
      setWidthSilent(arg0: number): void;
      setX(arg0: number): void;
      setXScroll(arg0: number): void;
      setY(arg0: number): void;
      setYScroll(arg0: number): void;
      show(arg0: zombie.iso.IsoObject, arg1: number, arg2: number): void;
      suspendStencil(): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.ui.ObjectTooltip$Layout extends java.lang.Object
    export class ObjectTooltip$Layout {
      private constructor();
      items?: java.util.ArrayList<zombie.ui.ObjectTooltip$LayoutItem>;
      minLabelWidth: number;
      minValueWidth: number;
      next?: zombie.ui.ObjectTooltip$Layout;
      nextPadY: number;
  
      addItem(): zombie.ui.ObjectTooltip$LayoutItem;
      equals(arg0: any): boolean;
      free(): void;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      render(arg0: number, arg1: number, arg2: zombie.ui.ObjectTooltip): number;
      setMinLabelWidth(arg0: number): void;
      setMinValueWidth(arg0: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ui.ObjectTooltip$LayoutItem extends java.lang.Object
    export class ObjectTooltip$LayoutItem {
      private constructor();
      a0: number;
      a1: number;
      b0: number;
      b1: number;
      g0: number;
      g1: number;
      hasValue: boolean;
      height: number;
      label?: string;
      labelWidth: number;
      progressFraction: number;
      progressWidth: number;
      r0: number;
      r1: number;
      rightJustify: boolean;
      value?: string;
      valueWidth: number;
      valueWidthRight: number;
  
      calcSizes(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      render(arg0: number, arg1: number, arg2: number, arg3: number, arg4: zombie.ui.ObjectTooltip): void;
      reset(): void;
      setLabel(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number): void;
      setProgress(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      setValue(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number): void;
      setValueRight(arg0: number, arg1: boolean): void;
      setValueRightNoPlus(arg0: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ui.RadarPanel extends zombie.ui.UIElement
    export class RadarPanel {
      private constructor();
      readonly Controls?: java.util.ArrayList<zombie.ui.UIElement>;
      IgnoreLossControl: boolean;
      Parent?: zombie.ui.UIElement;
      alwaysBack: boolean;
      anchorBottom: boolean;
      anchorLeft: boolean;
      anchorRight: boolean;
      anchorTop: boolean;
      bScrollChildren: boolean;
      bScrollWithParent: boolean;
      capture: boolean;
      clickedValue?: string;
      defaultDraw: boolean;
      followGameWorld: boolean;
      height: number;
      playerContext: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      visible: boolean;
      width: number;
      x: number;
      y: number;
  
      AddChild(arg0: zombie.ui.UIElement): void;
      BringToTop(arg0: zombie.ui.UIElement): void;
      ButtonClicked(arg0: string): void;
      ClearChildren(): void;
      DrawSubTextureRGBA(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number, arg12: number): void;
      DrawText(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextCentre(arg0: zombie.ui.UIFont, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextRight(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextUntrimmed(arg0: zombie.ui.UIFont, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number): void;
      DrawTextureAngle(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextureCol(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: zombie.core.Color): void;
      DrawTextureColor(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextureIgnoreOffset(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTextureScaled(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
      DrawTextureScaledAspect(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledAspect2(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledCol(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTextureScaledColor(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledUniform(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextureTiled(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureTiledX(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureTiledY(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTexture_FlippedX(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTexture_FlippedXIgnoreOffset(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawUVSliceTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color, arg6: number, arg7: number, arg8: number, arg9: number): void;
      RemoveChild(arg0: zombie.ui.UIElement): void;
      RemoveControl(arg0: zombie.ui.UIElement): void;
      backMost(): void;
      bringToTop(): void;
      clampToParentX(arg0: number): number;
      clampToParentY(arg0: number): number;
      clearMaxDrawHeight(): void;
      clearStencilRect(): void;
      equals(arg0: any): boolean;
      getAbsoluteX(): number;
      getAbsoluteY(): number;
      getClass(): java.lang.Class<any>;
      getClickedValue(): string;
      getControls(): java.util.ArrayList<zombie.ui.UIElement>;
      getHeight(): number;
      getMaxDrawHeight(): number;
      getParent(): zombie.ui.UIElement;
      getPlayerContext(): number;
      getRenderThisPlayerOnly(): number;
      getScrollChildren(): boolean;
      getScrollHeight(): number;
      getScrollWithParent(): boolean;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getUIName(): string;
      getWidth(): number;
      getX(): number;
      getXScroll(): number;
      getXScrolled(arg0: zombie.ui.UIElement): number;
      getY(): number;
      getYScroll(): number;
      getYScrolled(arg0: zombie.ui.UIElement): number;
      hashCode(): number;
      ignoreHeightChange(): void;
      ignoreWidthChange(): void;
      isAnchorBottom(): boolean;
      isAnchorLeft(): boolean;
      isAnchorRight(): boolean;
      isAnchorTop(): boolean;
      isCapture(): boolean;
      isConsumeMouseEvents(): boolean;
      isDefaultDraw(): boolean;
      isEnabled(): boolean;
      isFollowGameWorld(): boolean;
      isForceCursorVisible(): boolean;
      isIgnoreLossControl(): boolean;
      isKeyConsumed(arg0: number): boolean;
      isMouseOver(): boolean;
      isPointOver(arg0: number, arg1: number): boolean;
      isVisible(): boolean;
      isWantKeyEvents(): boolean;
      notify(): void;
      notifyAll(): void;
      onKeyPress(arg0: number): void;
      onKeyRelease(arg0: number): void;
      onKeyRepeat(arg0: number): void;
      onMouseDown(arg0: number, arg1: number): boolean;
      onMouseMove(arg0: number, arg1: number): boolean;
      onMouseMoveOutside(arg0: number, arg1: number): void;
      onMouseUp(arg0: number, arg1: number): boolean;
      onMouseUpOutside(arg0: number, arg1: number): void;
      onMouseWheel(arg0: number): boolean;
      onResize(): void;
      onRightMouseDown(arg0: number, arg1: number): boolean;
      onRightMouseUp(arg0: number, arg1: number): boolean;
      onresize(): void;
      render(): void;
      repaintStencilRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
      resumeStencil(): void;
      setAlwaysOnTop(arg0: boolean): void;
      setAnchorBottom(arg0: boolean): void;
      setAnchorLeft(arg0: boolean): void;
      setAnchorRight(arg0: boolean): void;
      setAnchorTop(arg0: boolean): void;
      setCapture(arg0: boolean): void;
      setClickedValue(arg0: string): void;
      setConsumeMouseEvents(arg0: boolean): void;
      setControls(arg0: java.util.Vector<zombie.ui.UIElement>): void;
      setDefaultDraw(arg0: boolean): void;
      setEnabled(arg0: boolean): void;
      setFollowGameWorld(arg0: boolean): void;
      setForceCursorVisible(arg0: boolean): void;
      setHeight(arg0: number): void;
      setHeightOnly(arg0: number): void;
      setHeightSilent(arg0: number): void;
      setIgnoreLossControl(arg0: boolean): void;
      setMaxDrawHeight(arg0: number): void;
      setParent(arg0: zombie.ui.UIElement): void;
      setPlayerContext(arg0: number): void;
      setRenderClippedChildren(arg0: boolean): void;
      setRenderThisPlayerOnly(arg0: number): void;
      setScrollChildren(arg0: boolean): void;
      setScrollHeight(arg0: number): void;
      setScrollWithParent(arg0: boolean): void;
      setStencilRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setUIName(arg0: string): void;
      setVisible(arg0: boolean): void;
      setWantKeyEvents(arg0: boolean): void;
      setWidth(arg0: number): void;
      setWidthOnly(arg0: number): void;
      setWidthSilent(arg0: number): void;
      setX(arg0: number): void;
      setXScroll(arg0: number): void;
      setY(arg0: number): void;
      setYScroll(arg0: number): void;
      suspendStencil(): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.ui.RadialMenu extends zombie.ui.UIElement
    export class RadialMenu {
      private constructor();
      readonly Controls?: java.util.ArrayList<zombie.ui.UIElement>;
      IgnoreLossControl: boolean;
      Parent?: zombie.ui.UIElement;
      alwaysBack: boolean;
      anchorBottom: boolean;
      anchorLeft: boolean;
      anchorRight: boolean;
      anchorTop: boolean;
      bScrollChildren: boolean;
      bScrollWithParent: boolean;
      capture: boolean;
      clickedValue?: string;
      defaultDraw: boolean;
      followGameWorld: boolean;
      height: number;
      playerContext: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      visible: boolean;
      width: number;
      x: number;
      y: number;
  
      AddChild(arg0: zombie.ui.UIElement): void;
      BringToTop(arg0: zombie.ui.UIElement): void;
      ButtonClicked(arg0: string): void;
      ClearChildren(): void;
      DrawSubTextureRGBA(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number, arg12: number): void;
      DrawText(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextCentre(arg0: zombie.ui.UIFont, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextRight(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextUntrimmed(arg0: zombie.ui.UIFont, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number): void;
      DrawTextureAngle(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextureCol(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: zombie.core.Color): void;
      DrawTextureColor(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextureIgnoreOffset(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTextureScaled(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
      DrawTextureScaledAspect(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledAspect2(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledCol(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTextureScaledColor(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledUniform(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextureTiled(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureTiledX(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureTiledY(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTexture_FlippedX(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTexture_FlippedXIgnoreOffset(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawUVSliceTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color, arg6: number, arg7: number, arg8: number, arg9: number): void;
      RemoveChild(arg0: zombie.ui.UIElement): void;
      RemoveControl(arg0: zombie.ui.UIElement): void;
      addSlice(arg0: string, arg1: zombie.core.textures.Texture): void;
      backMost(): void;
      bringToTop(): void;
      clampToParentX(arg0: number): number;
      clampToParentY(arg0: number): number;
      clear(): void;
      clearMaxDrawHeight(): void;
      clearStencilRect(): void;
      equals(arg0: any): boolean;
      getAbsoluteX(): number;
      getAbsoluteY(): number;
      getClass(): java.lang.Class<any>;
      getClickedValue(): string;
      getControls(): java.util.ArrayList<zombie.ui.UIElement>;
      getHeight(): number;
      getMaxDrawHeight(): number;
      getParent(): zombie.ui.UIElement;
      getPlayerContext(): number;
      getRenderThisPlayerOnly(): number;
      getScrollChildren(): boolean;
      getScrollHeight(): number;
      getScrollWithParent(): boolean;
      getSliceIndexFromJoypad(arg0: number): number;
      getSliceIndexFromMouse(arg0: number, arg1: number): number;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getUIName(): string;
      getWidth(): number;
      getX(): number;
      getXScroll(): number;
      getXScrolled(arg0: zombie.ui.UIElement): number;
      getY(): number;
      getYScroll(): number;
      getYScrolled(arg0: zombie.ui.UIElement): number;
      hashCode(): number;
      ignoreHeightChange(): void;
      ignoreWidthChange(): void;
      isAnchorBottom(): boolean;
      isAnchorLeft(): boolean;
      isAnchorRight(): boolean;
      isAnchorTop(): boolean;
      isCapture(): boolean;
      isConsumeMouseEvents(): boolean;
      isDefaultDraw(): boolean;
      isEnabled(): boolean;
      isFollowGameWorld(): boolean;
      isForceCursorVisible(): boolean;
      isIgnoreLossControl(): boolean;
      isKeyConsumed(arg0: number): boolean;
      isMouseOver(): boolean;
      isPointOver(arg0: number, arg1: number): boolean;
      isVisible(): boolean;
      isWantKeyEvents(): boolean;
      notify(): void;
      notifyAll(): void;
      onKeyPress(arg0: number): void;
      onKeyRelease(arg0: number): void;
      onKeyRepeat(arg0: number): void;
      onMouseDown(arg0: number, arg1: number): boolean;
      onMouseMove(arg0: number, arg1: number): boolean;
      onMouseMoveOutside(arg0: number, arg1: number): void;
      onMouseUp(arg0: number, arg1: number): boolean;
      onMouseUpOutside(arg0: number, arg1: number): void;
      onMouseWheel(arg0: number): boolean;
      onResize(): void;
      onRightMouseDown(arg0: number, arg1: number): boolean;
      onRightMouseUp(arg0: number, arg1: number): boolean;
      onresize(): void;
      render(): void;
      repaintStencilRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
      resumeStencil(): void;
      setAlwaysOnTop(arg0: boolean): void;
      setAnchorBottom(arg0: boolean): void;
      setAnchorLeft(arg0: boolean): void;
      setAnchorRight(arg0: boolean): void;
      setAnchorTop(arg0: boolean): void;
      setCapture(arg0: boolean): void;
      setClickedValue(arg0: string): void;
      setConsumeMouseEvents(arg0: boolean): void;
      setControls(arg0: java.util.Vector<zombie.ui.UIElement>): void;
      setDefaultDraw(arg0: boolean): void;
      setEnabled(arg0: boolean): void;
      setFollowGameWorld(arg0: boolean): void;
      setForceCursorVisible(arg0: boolean): void;
      setHeight(arg0: number): void;
      setHeightOnly(arg0: number): void;
      setHeightSilent(arg0: number): void;
      setIgnoreLossControl(arg0: boolean): void;
      setJoypad(arg0: number): void;
      setMaxDrawHeight(arg0: number): void;
      setParent(arg0: zombie.ui.UIElement): void;
      setPlayerContext(arg0: number): void;
      setRenderClippedChildren(arg0: boolean): void;
      setRenderThisPlayerOnly(arg0: number): void;
      setScrollChildren(arg0: boolean): void;
      setScrollHeight(arg0: number): void;
      setScrollWithParent(arg0: boolean): void;
      setSliceText(arg0: number, arg1: string): void;
      setSliceTexture(arg0: number, arg1: zombie.core.textures.Texture): void;
      setStencilRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setUIName(arg0: string): void;
      setVisible(arg0: boolean): void;
      setWantKeyEvents(arg0: boolean): void;
      setWidth(arg0: number): void;
      setWidthOnly(arg0: number): void;
      setWidthSilent(arg0: number): void;
      setX(arg0: number): void;
      setXScroll(arg0: number): void;
      setY(arg0: number): void;
      setYScroll(arg0: number): void;
      suspendStencil(): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.ui.RadialProgressBar extends zombie.ui.UIElement
    export class RadialProgressBar {
      private constructor();
      readonly Controls?: java.util.ArrayList<zombie.ui.UIElement>;
      IgnoreLossControl: boolean;
      Parent?: zombie.ui.UIElement;
      alwaysBack: boolean;
      anchorBottom: boolean;
      anchorLeft: boolean;
      anchorRight: boolean;
      anchorTop: boolean;
      bScrollChildren: boolean;
      bScrollWithParent: boolean;
      capture: boolean;
      clickedValue?: string;
      defaultDraw: boolean;
      followGameWorld: boolean;
      height: number;
      playerContext: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      visible: boolean;
      width: number;
      x: number;
      y: number;
  
      AddChild(arg0: zombie.ui.UIElement): void;
      BringToTop(arg0: zombie.ui.UIElement): void;
      ButtonClicked(arg0: string): void;
      ClearChildren(): void;
      DrawSubTextureRGBA(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number, arg12: number): void;
      DrawText(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextCentre(arg0: zombie.ui.UIFont, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextRight(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextUntrimmed(arg0: zombie.ui.UIFont, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number): void;
      DrawTextureAngle(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextureCol(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: zombie.core.Color): void;
      DrawTextureColor(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextureIgnoreOffset(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTextureScaled(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
      DrawTextureScaledAspect(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledAspect2(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledCol(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTextureScaledColor(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledUniform(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextureTiled(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureTiledX(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureTiledY(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTexture_FlippedX(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTexture_FlippedXIgnoreOffset(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawUVSliceTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color, arg6: number, arg7: number, arg8: number, arg9: number): void;
      RemoveChild(arg0: zombie.ui.UIElement): void;
      RemoveControl(arg0: zombie.ui.UIElement): void;
      backMost(): void;
      bringToTop(): void;
      clampToParentX(arg0: number): number;
      clampToParentY(arg0: number): number;
      clearMaxDrawHeight(): void;
      clearStencilRect(): void;
      equals(arg0: any): boolean;
      getAbsoluteX(): number;
      getAbsoluteY(): number;
      getClass(): java.lang.Class<any>;
      getClickedValue(): string;
      getControls(): java.util.ArrayList<zombie.ui.UIElement>;
      getHeight(): number;
      getMaxDrawHeight(): number;
      getParent(): zombie.ui.UIElement;
      getPlayerContext(): number;
      getRenderThisPlayerOnly(): number;
      getScrollChildren(): boolean;
      getScrollHeight(): number;
      getScrollWithParent(): boolean;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTexture(): zombie.core.textures.Texture;
      getUIName(): string;
      getValue(): number;
      getWidth(): number;
      getX(): number;
      getXScroll(): number;
      getXScrolled(arg0: zombie.ui.UIElement): number;
      getY(): number;
      getYScroll(): number;
      getYScrolled(arg0: zombie.ui.UIElement): number;
      hashCode(): number;
      ignoreHeightChange(): void;
      ignoreWidthChange(): void;
      isAnchorBottom(): boolean;
      isAnchorLeft(): boolean;
      isAnchorRight(): boolean;
      isAnchorTop(): boolean;
      isCapture(): boolean;
      isConsumeMouseEvents(): boolean;
      isDefaultDraw(): boolean;
      isEnabled(): boolean;
      isFollowGameWorld(): boolean;
      isForceCursorVisible(): boolean;
      isIgnoreLossControl(): boolean;
      isKeyConsumed(arg0: number): boolean;
      isMouseOver(): boolean;
      isPointOver(arg0: number, arg1: number): boolean;
      isVisible(): boolean;
      isWantKeyEvents(): boolean;
      notify(): void;
      notifyAll(): void;
      onKeyPress(arg0: number): void;
      onKeyRelease(arg0: number): void;
      onKeyRepeat(arg0: number): void;
      onMouseDown(arg0: number, arg1: number): boolean;
      onMouseMove(arg0: number, arg1: number): boolean;
      onMouseMoveOutside(arg0: number, arg1: number): void;
      onMouseUp(arg0: number, arg1: number): boolean;
      onMouseUpOutside(arg0: number, arg1: number): void;
      onMouseWheel(arg0: number): boolean;
      onResize(): void;
      onRightMouseDown(arg0: number, arg1: number): boolean;
      onRightMouseUp(arg0: number, arg1: number): boolean;
      onresize(): void;
      render(): void;
      repaintStencilRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
      resumeStencil(): void;
      setAlwaysOnTop(arg0: boolean): void;
      setAnchorBottom(arg0: boolean): void;
      setAnchorLeft(arg0: boolean): void;
      setAnchorRight(arg0: boolean): void;
      setAnchorTop(arg0: boolean): void;
      setCapture(arg0: boolean): void;
      setClickedValue(arg0: string): void;
      setConsumeMouseEvents(arg0: boolean): void;
      setControls(arg0: java.util.Vector<zombie.ui.UIElement>): void;
      setDefaultDraw(arg0: boolean): void;
      setEnabled(arg0: boolean): void;
      setFollowGameWorld(arg0: boolean): void;
      setForceCursorVisible(arg0: boolean): void;
      setHeight(arg0: number): void;
      setHeightOnly(arg0: number): void;
      setHeightSilent(arg0: number): void;
      setIgnoreLossControl(arg0: boolean): void;
      setMaxDrawHeight(arg0: number): void;
      setParent(arg0: zombie.ui.UIElement): void;
      setPlayerContext(arg0: number): void;
      setRenderClippedChildren(arg0: boolean): void;
      setRenderThisPlayerOnly(arg0: number): void;
      setScrollChildren(arg0: boolean): void;
      setScrollHeight(arg0: number): void;
      setScrollWithParent(arg0: boolean): void;
      setStencilRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTexture(arg0: zombie.core.textures.Texture): void;
      setUIName(arg0: string): void;
      setValue(arg0: number): void;
      setVisible(arg0: boolean): void;
      setWantKeyEvents(arg0: boolean): void;
      setWidth(arg0: number): void;
      setWidthOnly(arg0: number): void;
      setWidthSilent(arg0: number): void;
      setX(arg0: number): void;
      setXScroll(arg0: number): void;
      setY(arg0: number): void;
      setYScroll(arg0: number): void;
      suspendStencil(): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.ui.SpeedControls extends zombie.ui.UIElement
    export class SpeedControls {
      private constructor();
      readonly Controls?: java.util.ArrayList<zombie.ui.UIElement>;
      CurrentSpeed: number;
      static FastForward?: zombie.ui.HUDButton;
      static FasterForward?: zombie.ui.HUDButton;
      IgnoreLossControl: boolean;
      MultiBeforePause: number;
      Parent?: zombie.ui.UIElement;
      static Pause?: zombie.ui.HUDButton;
      static Play?: zombie.ui.HUDButton;
      SpeedBeforePause: number;
      static Wait?: zombie.ui.HUDButton;
      alwaysBack: boolean;
      anchorBottom: boolean;
      anchorLeft: boolean;
      anchorRight: boolean;
      anchorTop: boolean;
      bScrollChildren: boolean;
      bScrollWithParent: boolean;
      capture: boolean;
      clickedValue?: string;
      defaultDraw: boolean;
      followGameWorld: boolean;
      height: number;
      static instance?: zombie.ui.SpeedControls;
      playerContext: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      visible: boolean;
      width: number;
      x: number;
      y: number;
  
      AddChild(arg0: zombie.ui.UIElement): void;
      BringToTop(arg0: zombie.ui.UIElement): void;
      ButtonClicked(arg0: string): void;
      ClearChildren(): void;
      DrawSubTextureRGBA(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number, arg12: number): void;
      DrawText(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextCentre(arg0: zombie.ui.UIFont, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextRight(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextUntrimmed(arg0: zombie.ui.UIFont, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number): void;
      DrawTextureAngle(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextureCol(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: zombie.core.Color): void;
      DrawTextureColor(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextureIgnoreOffset(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTextureScaled(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
      DrawTextureScaledAspect(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledAspect2(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledCol(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTextureScaledColor(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledUniform(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextureTiled(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureTiledX(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureTiledY(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTexture_FlippedX(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTexture_FlippedXIgnoreOffset(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawUVSliceTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color, arg6: number, arg7: number, arg8: number, arg9: number): void;
      RemoveChild(arg0: zombie.ui.UIElement): void;
      RemoveControl(arg0: zombie.ui.UIElement): void;
      SetCorrectIconStates(): void;
      SetCurrentGameSpeed(arg0: number): void;
      backMost(): void;
      bringToTop(): void;
      clampToParentX(arg0: number): number;
      clampToParentY(arg0: number): number;
      clearMaxDrawHeight(): void;
      clearStencilRect(): void;
      equals(arg0: any): boolean;
      getAbsoluteX(): number;
      getAbsoluteY(): number;
      getClass(): java.lang.Class<any>;
      getClickedValue(): string;
      getControls(): java.util.ArrayList<zombie.ui.UIElement>;
      getCurrentGameSpeed(): number;
      getHeight(): number;
      getMaxDrawHeight(): number;
      getParent(): zombie.ui.UIElement;
      getPlayerContext(): number;
      getRenderThisPlayerOnly(): number;
      getScrollChildren(): boolean;
      getScrollHeight(): number;
      getScrollWithParent(): boolean;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getUIName(): string;
      getWidth(): number;
      getX(): number;
      getXScroll(): number;
      getXScrolled(arg0: zombie.ui.UIElement): number;
      getY(): number;
      getYScroll(): number;
      getYScrolled(arg0: zombie.ui.UIElement): number;
      hashCode(): number;
      ignoreHeightChange(): void;
      ignoreWidthChange(): void;
      isAnchorBottom(): boolean;
      isAnchorLeft(): boolean;
      isAnchorRight(): boolean;
      isAnchorTop(): boolean;
      isCapture(): boolean;
      isConsumeMouseEvents(): boolean;
      isDefaultDraw(): boolean;
      isEnabled(): boolean;
      isFollowGameWorld(): boolean;
      isForceCursorVisible(): boolean;
      isIgnoreLossControl(): boolean;
      isKeyConsumed(arg0: number): boolean;
      isMouseOver(): boolean;
      isPointOver(arg0: number, arg1: number): boolean;
      isVisible(): boolean;
      isWantKeyEvents(): boolean;
      notify(): void;
      notifyAll(): void;
      onKeyPress(arg0: number): void;
      onKeyRelease(arg0: number): void;
      onKeyRepeat(arg0: number): void;
      onMouseDown(arg0: number, arg1: number): boolean;
      onMouseMove(arg0: number, arg1: number): boolean;
      onMouseMoveOutside(arg0: number, arg1: number): void;
      onMouseUp(arg0: number, arg1: number): boolean;
      onMouseUpOutside(arg0: number, arg1: number): void;
      onMouseWheel(arg0: number): boolean;
      onResize(): void;
      onRightMouseDown(arg0: number, arg1: number): boolean;
      onRightMouseUp(arg0: number, arg1: number): boolean;
      onresize(): void;
      render(): void;
      repaintStencilRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
      resumeStencil(): void;
      setAlwaysOnTop(arg0: boolean): void;
      setAnchorBottom(arg0: boolean): void;
      setAnchorLeft(arg0: boolean): void;
      setAnchorRight(arg0: boolean): void;
      setAnchorTop(arg0: boolean): void;
      setCapture(arg0: boolean): void;
      setClickedValue(arg0: string): void;
      setConsumeMouseEvents(arg0: boolean): void;
      setControls(arg0: java.util.Vector<zombie.ui.UIElement>): void;
      setDefaultDraw(arg0: boolean): void;
      setEnabled(arg0: boolean): void;
      setFollowGameWorld(arg0: boolean): void;
      setForceCursorVisible(arg0: boolean): void;
      setHeight(arg0: number): void;
      setHeightOnly(arg0: number): void;
      setHeightSilent(arg0: number): void;
      setIgnoreLossControl(arg0: boolean): void;
      setMaxDrawHeight(arg0: number): void;
      setParent(arg0: zombie.ui.UIElement): void;
      setPlayerContext(arg0: number): void;
      setRenderClippedChildren(arg0: boolean): void;
      setRenderThisPlayerOnly(arg0: number): void;
      setScrollChildren(arg0: boolean): void;
      setScrollHeight(arg0: number): void;
      setScrollWithParent(arg0: boolean): void;
      setStencilRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setUIName(arg0: string): void;
      setVisible(arg0: boolean): void;
      setWantKeyEvents(arg0: boolean): void;
      setWidth(arg0: number): void;
      setWidthOnly(arg0: number): void;
      setWidthSilent(arg0: number): void;
      setX(arg0: number): void;
      setXScroll(arg0: number): void;
      setY(arg0: number): void;
      setYScroll(arg0: number): void;
      suspendStencil(): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.ui.SpeedControls$SCButton extends zombie.ui.HUDButton
    export class SpeedControls$SCButton {
      private constructor();
      readonly Controls?: java.util.ArrayList<zombie.ui.UIElement>;
      IgnoreLossControl: boolean;
      Parent?: zombie.ui.UIElement;
      alwaysBack: boolean;
      anchorBottom: boolean;
      anchorLeft: boolean;
      anchorRight: boolean;
      anchorTop: boolean;
      bScrollChildren: boolean;
      bScrollWithParent: boolean;
      capture: boolean;
      clickedValue?: string;
      clickedalpha: number;
      defaultDraw: boolean;
      followGameWorld: boolean;
      height: number;
      notclickedAlpha: number;
      playerContext: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      visible: boolean;
      width: number;
      x: number;
      y: number;
  
      AddChild(arg0: zombie.ui.UIElement): void;
      BringToTop(arg0: zombie.ui.UIElement): void;
      ButtonClicked(arg0: string): void;
      ClearChildren(): void;
      DrawSubTextureRGBA(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number, arg12: number): void;
      DrawText(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextCentre(arg0: zombie.ui.UIFont, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextRight(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextUntrimmed(arg0: zombie.ui.UIFont, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number): void;
      DrawTextureAngle(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextureCol(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: zombie.core.Color): void;
      DrawTextureColor(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextureIgnoreOffset(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTextureScaled(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
      DrawTextureScaledAspect(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledAspect2(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledCol(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTextureScaledColor(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledUniform(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextureTiled(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureTiledX(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureTiledY(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTexture_FlippedX(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTexture_FlippedXIgnoreOffset(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawUVSliceTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color, arg6: number, arg7: number, arg8: number, arg9: number): void;
      RemoveChild(arg0: zombie.ui.UIElement): void;
      RemoveControl(arg0: zombie.ui.UIElement): void;
      backMost(): void;
      bringToTop(): void;
      clampToParentX(arg0: number): number;
      clampToParentY(arg0: number): number;
      clearMaxDrawHeight(): void;
      clearStencilRect(): void;
      equals(arg0: any): boolean;
      getAbsoluteX(): number;
      getAbsoluteY(): number;
      getClass(): java.lang.Class<any>;
      getClickedValue(): string;
      getControls(): java.util.ArrayList<zombie.ui.UIElement>;
      getHeight(): number;
      getMaxDrawHeight(): number;
      getParent(): zombie.ui.UIElement;
      getPlayerContext(): number;
      getRenderThisPlayerOnly(): number;
      getScrollChildren(): boolean;
      getScrollHeight(): number;
      getScrollWithParent(): boolean;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getUIName(): string;
      getWidth(): number;
      getX(): number;
      getXScroll(): number;
      getXScrolled(arg0: zombie.ui.UIElement): number;
      getY(): number;
      getYScroll(): number;
      getYScrolled(arg0: zombie.ui.UIElement): number;
      hashCode(): number;
      ignoreHeightChange(): void;
      ignoreWidthChange(): void;
      isAnchorBottom(): boolean;
      isAnchorLeft(): boolean;
      isAnchorRight(): boolean;
      isAnchorTop(): boolean;
      isCapture(): boolean;
      isConsumeMouseEvents(): boolean;
      isDefaultDraw(): boolean;
      isEnabled(): boolean;
      isFollowGameWorld(): boolean;
      isForceCursorVisible(): boolean;
      isIgnoreLossControl(): boolean;
      isKeyConsumed(arg0: number): boolean;
      isMouseOver(): boolean;
      isPointOver(arg0: number, arg1: number): boolean;
      isVisible(): boolean;
      isWantKeyEvents(): boolean;
      notify(): void;
      notifyAll(): void;
      onKeyPress(arg0: number): void;
      onKeyRelease(arg0: number): void;
      onKeyRepeat(arg0: number): void;
      onMouseDown(arg0: number, arg1: number): boolean;
      onMouseMove(arg0: number, arg1: number): boolean;
      onMouseMoveOutside(arg0: number, arg1: number): void;
      onMouseUp(arg0: number, arg1: number): boolean;
      onMouseUpOutside(arg0: number, arg1: number): void;
      onMouseWheel(arg0: number): boolean;
      onResize(): void;
      onRightMouseDown(arg0: number, arg1: number): boolean;
      onRightMouseUp(arg0: number, arg1: number): boolean;
      onresize(): void;
      render(): void;
      repaintStencilRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
      resumeStencil(): void;
      setAlwaysOnTop(arg0: boolean): void;
      setAnchorBottom(arg0: boolean): void;
      setAnchorLeft(arg0: boolean): void;
      setAnchorRight(arg0: boolean): void;
      setAnchorTop(arg0: boolean): void;
      setCapture(arg0: boolean): void;
      setClickedValue(arg0: string): void;
      setConsumeMouseEvents(arg0: boolean): void;
      setControls(arg0: java.util.Vector<zombie.ui.UIElement>): void;
      setDefaultDraw(arg0: boolean): void;
      setEnabled(arg0: boolean): void;
      setFollowGameWorld(arg0: boolean): void;
      setForceCursorVisible(arg0: boolean): void;
      setHeight(arg0: number): void;
      setHeightOnly(arg0: number): void;
      setHeightSilent(arg0: number): void;
      setIgnoreLossControl(arg0: boolean): void;
      setMaxDrawHeight(arg0: number): void;
      setParent(arg0: zombie.ui.UIElement): void;
      setPlayerContext(arg0: number): void;
      setRenderClippedChildren(arg0: boolean): void;
      setRenderThisPlayerOnly(arg0: number): void;
      setScrollChildren(arg0: boolean): void;
      setScrollHeight(arg0: number): void;
      setScrollWithParent(arg0: boolean): void;
      setStencilRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setUIName(arg0: string): void;
      setVisible(arg0: boolean): void;
      setWantKeyEvents(arg0: boolean): void;
      setWidth(arg0: number): void;
      setWidthOnly(arg0: number): void;
      setWidthSilent(arg0: number): void;
      setX(arg0: number): void;
      setXScroll(arg0: number): void;
      setY(arg0: number): void;
      setYScroll(arg0: number): void;
      suspendStencil(): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.ui.TextDrawHorizontal */
    export class TextDrawHorizontal {
      /* ENUM VALUES */
      static readonly Center: TextDrawHorizontal; 
      static readonly Left: TextDrawHorizontal; 
      static readonly Right: TextDrawHorizontal; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.ui.TextDrawHorizontal[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): TextDrawHorizontal;
      valueOf(arg0: string): zombie.ui.TextDrawHorizontal;
      values(): zombie.ui.TextDrawHorizontal[];
    }
    // zombie.ui.TextDrawObject extends java.lang.Object
    export class TextDrawObject {
      private constructor();
      AddBatchedDraw(arg0: zombie.ui.TextDrawHorizontal, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: boolean): void;
      Clear(): void;
      Draw(arg0: number, arg1: number, arg2: boolean): void;
      DrawRaw(arg0: zombie.ui.TextDrawHorizontal, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: boolean): void;
      NoRender(arg0: number): void;
      ReadString(arg0: string, arg1: number): void;
      RenderBatch(arg0: number): void;
      calculateDimensions(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getCustomTag(): string;
      getDefaultFontEnum(): zombie.ui.UIFont;
      getEnabled(): boolean;
      getHearRange(): number;
      getHeight(): number;
      getHorizontalAlign(): zombie.ui.TextDrawHorizontal;
      getInternalClock(): number;
      getOriginal(): string;
      getScrambleVal(): number;
      getUnformatted(): string;
      getVisibleRadius(): number;
      getWidth(): number;
      hashCode(): number;
      isNullOrZeroLength(): boolean;
      notify(): void;
      notifyAll(): void;
      setAllowAnyImage(arg0: boolean): void;
      setAllowBBcode(arg0: boolean): void;
      setAllowChatIcons(arg0: boolean): void;
      setAllowColors(arg0: boolean): void;
      setAllowFonts(arg0: boolean): void;
      setAllowImages(arg0: boolean): void;
      setAllowLineBreaks(arg0: boolean): void;
      setCustomImageMaxDimensions(arg0: number): void;
      setCustomTag(arg0: string): void;
      setDefaultColors(arg0: number, arg1: number, arg2: number): void;
      setDefaultFont(arg0: zombie.ui.UIFont): void;
      setDrawBackground(arg0: boolean): void;
      setEnabled(arg0: boolean): void;
      setEqualizeLineHeights(arg0: boolean): void;
      setHearRange(arg0: number): void;
      setHorizontalAlign(arg0: string): void;
      setInternalTickClock(arg0: number): void;
      setMaxCharsPerLine(arg0: number): void;
      setOutlineColors(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setScrambleVal(arg0: number): void;
      setSettings(arg0: boolean, arg1: boolean, arg2: boolean, arg3: boolean, arg4: boolean, arg5: boolean): void;
      setValidFonts(arg0: string[]): void;
      setValidImages(arg0: string[]): void;
      setVisibleRadius(arg0: number): void;
      toString(): string;
      updateInternalTickClock(): number;
      wait(arg0: number): void;
    }
    // zombie.ui.TextManager extends java.lang.Object
    export class TextManager {
      private constructor();
      codetext?: zombie.core.fonts.AngelCodeFont;
      debugConsole?: zombie.core.fonts.AngelCodeFont;
      readonly enumToFont?: zombie.core.fonts.AngelCodeFont[];
      font?: zombie.core.fonts.AngelCodeFont;
      font2?: zombie.core.fonts.AngelCodeFont;
      font3?: zombie.core.fonts.AngelCodeFont;
      font4?: zombie.core.fonts.AngelCodeFont;
      handwritten?: zombie.core.fonts.AngelCodeFont;
      static readonly instance?: zombie.ui.TextManager;
      intro?: zombie.core.fonts.AngelCodeFont;
      main1?: zombie.core.fonts.AngelCodeFont;
      main2?: zombie.core.fonts.AngelCodeFont;
      readonly normal?: zombie.core.fonts.AngelCodeFont[];
      todoTextList?: java.util.ArrayList<zombie.ui.TextManager$DeferedTextDraw>;
      zombiefontcredits1?: zombie.core.fonts.AngelCodeFont;
      zombiefontcredits2?: zombie.core.fonts.AngelCodeFont;
      zombienew1?: zombie.core.fonts.AngelCodeFont;
      zombienew2?: zombie.core.fonts.AngelCodeFont;
      zombienew3?: zombie.core.fonts.AngelCodeFont;
      zomboidDialogue?: zombie.core.fonts.AngelCodeFont;
  
      DrawString(arg0: zombie.ui.UIFont, arg1: number, arg2: number, arg3: number, arg4: string, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawStringBBcode(arg0: zombie.ui.UIFont, arg1: number, arg2: number, arg3: string, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawStringCentre(arg0: zombie.ui.UIFont, arg1: number, arg2: number, arg3: string, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawStringCentreDefered(arg0: zombie.ui.UIFont, arg1: number, arg2: number, arg3: string, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawStringRight(arg0: number, arg1: number, arg2: string, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawStringUntrimmed(arg0: zombie.ui.UIFont, arg1: number, arg2: number, arg3: string, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextFromGameWorld(): void;
      DrawTextObject(arg0: number, arg1: number, arg2: zombie.ui.TextDrawObject): void;
      GetDrawTextObject(arg0: string, arg1: number, arg2: boolean): zombie.ui.TextDrawObject;
      Init(): void;
      MeasureFont(arg0: zombie.ui.UIFont): number;
      MeasureStringX(arg0: zombie.ui.UIFont, arg1: string): number;
      MeasureStringY(arg0: zombie.ui.UIFont, arg1: string): number;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getFontFromEnum(arg0: zombie.ui.UIFont): zombie.core.fonts.AngelCodeFont;
      getFontHeight(arg0: zombie.ui.UIFont): number;
      getNormalFromFontSize(arg0: number): zombie.core.fonts.AngelCodeFont;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ui.TextManager$DeferedTextDraw extends java.lang.Object
    export class TextManager$DeferedTextDraw {
      private constructor();
      a: number;
      b: number;
      font?: zombie.ui.UIFont;
      g: number;
      r: number;
      str?: string;
      x: number;
      y: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.ui.UI3DModel extends zombie.ui.UIElement
    export class UI3DModel {
      private constructor();
      readonly Controls?: java.util.ArrayList<zombie.ui.UIElement>;
      IgnoreLossControl: boolean;
      Parent?: zombie.ui.UIElement;
      alwaysBack: boolean;
      anchorBottom: boolean;
      anchorLeft: boolean;
      anchorRight: boolean;
      anchorTop: boolean;
      bScrollChildren: boolean;
      bScrollWithParent: boolean;
      capture: boolean;
      clickedValue?: string;
      defaultDraw: boolean;
      followGameWorld: boolean;
      height: number;
      playerContext: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      visible: boolean;
      width: number;
      x: number;
      y: number;
  
      AddChild(arg0: zombie.ui.UIElement): void;
      BringToTop(arg0: zombie.ui.UIElement): void;
      ButtonClicked(arg0: string): void;
      ClearChildren(): void;
      DrawSubTextureRGBA(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number, arg12: number): void;
      DrawText(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextCentre(arg0: zombie.ui.UIFont, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextRight(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextUntrimmed(arg0: zombie.ui.UIFont, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number): void;
      DrawTextureAngle(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextureCol(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: zombie.core.Color): void;
      DrawTextureColor(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextureIgnoreOffset(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTextureScaled(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
      DrawTextureScaledAspect(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledAspect2(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledCol(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTextureScaledColor(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledUniform(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextureTiled(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureTiledX(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureTiledY(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTexture_FlippedX(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTexture_FlippedXIgnoreOffset(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawUVSliceTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color, arg6: number, arg7: number, arg8: number, arg9: number): void;
      RemoveChild(arg0: zombie.ui.UIElement): void;
      RemoveControl(arg0: zombie.ui.UIElement): void;
      backMost(): void;
      bringToTop(): void;
      clampToParentX(arg0: number): number;
      clampToParentY(arg0: number): number;
      clearMaxDrawHeight(): void;
      clearStencilRect(): void;
      clothingItemChanged(arg0: string): void;
      equals(arg0: any): boolean;
      getAbsoluteX(): number;
      getAbsoluteY(): number;
      getClass(): java.lang.Class<any>;
      getClickedValue(): string;
      getControls(): java.util.ArrayList<zombie.ui.UIElement>;
      getDirection(): zombie.iso.IsoDirections;
      getHeight(): number;
      getMaxDrawHeight(): number;
      getParent(): zombie.ui.UIElement;
      getPlayerContext(): number;
      getRenderThisPlayerOnly(): number;
      getScrollChildren(): boolean;
      getScrollHeight(): number;
      getScrollWithParent(): boolean;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getUIName(): string;
      getWidth(): number;
      getX(): number;
      getXScroll(): number;
      getXScrolled(arg0: zombie.ui.UIElement): number;
      getY(): number;
      getYScroll(): number;
      getYScrolled(arg0: zombie.ui.UIElement): number;
      hashCode(): number;
      ignoreHeightChange(): void;
      ignoreWidthChange(): void;
      isAnchorBottom(): boolean;
      isAnchorLeft(): boolean;
      isAnchorRight(): boolean;
      isAnchorTop(): boolean;
      isCapture(): boolean;
      isConsumeMouseEvents(): boolean;
      isDefaultDraw(): boolean;
      isEnabled(): boolean;
      isFollowGameWorld(): boolean;
      isForceCursorVisible(): boolean;
      isIgnoreLossControl(): boolean;
      isKeyConsumed(arg0: number): boolean;
      isMouseOver(): boolean;
      isPointOver(arg0: number, arg1: number): boolean;
      isVisible(): boolean;
      isWantKeyEvents(): boolean;
      notify(): void;
      notifyAll(): void;
      onKeyPress(arg0: number): void;
      onKeyRelease(arg0: number): void;
      onKeyRepeat(arg0: number): void;
      onMouseDown(arg0: number, arg1: number): boolean;
      onMouseMove(arg0: number, arg1: number): boolean;
      onMouseMoveOutside(arg0: number, arg1: number): void;
      onMouseUp(arg0: number, arg1: number): boolean;
      onMouseUpOutside(arg0: number, arg1: number): void;
      onMouseWheel(arg0: number): boolean;
      onResize(): void;
      onRightMouseDown(arg0: number, arg1: number): boolean;
      onRightMouseUp(arg0: number, arg1: number): boolean;
      onresize(): void;
      render(): void;
      repaintStencilRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
      reportEvent(arg0: string): void;
      resumeStencil(): void;
      setAlwaysOnTop(arg0: boolean): void;
      setAnchorBottom(arg0: boolean): void;
      setAnchorLeft(arg0: boolean): void;
      setAnchorRight(arg0: boolean): void;
      setAnchorTop(arg0: boolean): void;
      setAnimSetName(arg0: string): void;
      setAnimate(arg0: boolean): void;
      setCapture(arg0: boolean): void;
      setCharacter(arg0: zombie.characters.IsoGameCharacter): void;
      setClickedValue(arg0: string): void;
      setConsumeMouseEvents(arg0: boolean): void;
      setControls(arg0: java.util.Vector<zombie.ui.UIElement>): void;
      setDefaultDraw(arg0: boolean): void;
      setDirection(arg0: zombie.iso.IsoDirections): void;
      setDoRandomExtAnimations(arg0: boolean): void;
      setEnabled(arg0: boolean): void;
      setFollowGameWorld(arg0: boolean): void;
      setForceCursorVisible(arg0: boolean): void;
      setHeight(arg0: number): void;
      setHeightOnly(arg0: number): void;
      setHeightSilent(arg0: number): void;
      setIgnoreLossControl(arg0: boolean): void;
      setIsometric(arg0: boolean): void;
      setMaxDrawHeight(arg0: number): void;
      setOutfitName(arg0: string, arg1: boolean, arg2: boolean): void;
      setParent(arg0: zombie.ui.UIElement): void;
      setPlayerContext(arg0: number): void;
      setRenderClippedChildren(arg0: boolean): void;
      setRenderThisPlayerOnly(arg0: number): void;
      setScrollChildren(arg0: boolean): void;
      setScrollHeight(arg0: number): void;
      setScrollWithParent(arg0: boolean): void;
      setState(arg0: string): void;
      setStencilRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setSurvivorDesc(arg0: zombie.characters.SurvivorDesc): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setUIName(arg0: string): void;
      setVisible(arg0: boolean): void;
      setWantKeyEvents(arg0: boolean): void;
      setWidth(arg0: number): void;
      setWidthOnly(arg0: number): void;
      setWidthSilent(arg0: number): void;
      setX(arg0: number): void;
      setXOffset(arg0: number): void;
      setXScroll(arg0: number): void;
      setY(arg0: number): void;
      setYOffset(arg0: number): void;
      setYScroll(arg0: number): void;
      setZoom(arg0: number): void;
      suspendStencil(): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.ui.UIDebugConsole extends zombie.ui.NewWindow
    export class UIDebugConsole {
      private constructor();
      CommandLine?: zombie.ui.UITextBox2;
      readonly Controls?: java.util.ArrayList<zombie.ui.UIElement>;
      IgnoreLossControl: boolean;
      Movable: boolean;
      Parent?: zombie.ui.UIElement;
      PreviousIndex: number;
      ResizeToFitY: boolean;
      alwaysBack: boolean;
      anchorBottom: boolean;
      anchorLeft: boolean;
      anchorRight: boolean;
      anchorTop: boolean;
      bDebounceDown: boolean;
      bDebounceUp: boolean;
      bScrollChildren: boolean;
      bScrollWithParent: boolean;
      capture: boolean;
      clickX: number;
      clickY: number;
      clickedValue?: string;
      clientH: number;
      clientW: number;
      defaultDraw: boolean;
      followGameWorld: boolean;
      height: number;
      static instance?: zombie.ui.UIDebugConsole;
      moving: boolean;
      ncclientH: number;
      ncclientW: number;
      nestedItems?: java.util.Stack<org.lwjgl.util.Rectangle>;
      playerContext: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      visible: boolean;
      width: number;
      x: number;
      y: number;
  
      AddChild(arg0: zombie.ui.UIElement): void;
      BringToTop(arg0: zombie.ui.UIElement): void;
      ButtonClicked(arg0: string): void;
      ClearChildren(): void;
      DrawSubTextureRGBA(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number, arg12: number): void;
      DrawText(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextCentre(arg0: zombie.ui.UIFont, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextRight(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextUntrimmed(arg0: zombie.ui.UIFont, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number): void;
      DrawTextureAngle(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextureCol(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: zombie.core.Color): void;
      DrawTextureColor(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextureIgnoreOffset(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTextureScaled(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
      DrawTextureScaledAspect(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledAspect2(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledCol(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTextureScaledColor(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledUniform(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextureTiled(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureTiledX(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureTiledY(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTexture_FlippedX(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTexture_FlippedXIgnoreOffset(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawUVSliceTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color, arg6: number, arg7: number, arg8: number, arg9: number): void;
      Nest(arg0: zombie.ui.UIElement, arg1: number, arg2: number, arg3: number, arg4: number): void;
      ProcessCommand(): void;
      RemoveChild(arg0: zombie.ui.UIElement): void;
      RemoveControl(arg0: zombie.ui.UIElement): void;
      addOutput(arg0: number[], arg1: number, arg2: number): void;
      backMost(): void;
      bringToTop(): void;
      clampToParentX(arg0: number): number;
      clampToParentY(arg0: number): number;
      clearMaxDrawHeight(): void;
      clearStencilRect(): void;
      equals(arg0: any): boolean;
      getAbsoluteX(): number;
      getAbsoluteY(): number;
      getClass(): java.lang.Class<any>;
      getClickedValue(): string;
      getControls(): java.util.ArrayList<zombie.ui.UIElement>;
      getHeight(): number;
      getMaxDrawHeight(): number;
      getParent(): zombie.ui.UIElement;
      getPlayerContext(): number;
      getRenderThisPlayerOnly(): number;
      getScrollChildren(): boolean;
      getScrollHeight(): number;
      getScrollWithParent(): boolean;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getUIName(): string;
      getWidth(): number;
      getX(): number;
      getXScroll(): number;
      getXScrolled(arg0: zombie.ui.UIElement): number;
      getY(): number;
      getYScroll(): number;
      getYScrolled(arg0: zombie.ui.UIElement): number;
      hashCode(): number;
      ignoreHeightChange(): void;
      ignoreWidthChange(): void;
      isAnchorBottom(): boolean;
      isAnchorLeft(): boolean;
      isAnchorRight(): boolean;
      isAnchorTop(): boolean;
      isCapture(): boolean;
      isConsumeMouseEvents(): boolean;
      isDefaultDraw(): boolean;
      isEnabled(): boolean;
      isFollowGameWorld(): boolean;
      isForceCursorVisible(): boolean;
      isIgnoreLossControl(): boolean;
      isKeyConsumed(arg0: number): boolean;
      isMouseOver(): boolean;
      isPointOver(arg0: number, arg1: number): boolean;
      isVisible(): boolean;
      isWantKeyEvents(): boolean;
      levenshteinDistance(arg0: java.lang.CharSequence, arg1: java.lang.CharSequence): number;
      notify(): void;
      notifyAll(): void;
      onKeyPress(arg0: number): void;
      onKeyRelease(arg0: number): void;
      onKeyRepeat(arg0: number): void;
      onMouseDown(arg0: number, arg1: number): boolean;
      onMouseMove(arg0: number, arg1: number): boolean;
      onMouseMoveOutside(arg0: number, arg1: number): void;
      onMouseUp(arg0: number, arg1: number): boolean;
      onMouseUpOutside(arg0: number, arg1: number): void;
      onMouseWheel(arg0: number): boolean;
      onOtherKey(arg0: number): void;
      onResize(): void;
      onRightMouseDown(arg0: number, arg1: number): boolean;
      onRightMouseUp(arg0: number, arg1: number): boolean;
      onresize(): void;
      render(): void;
      repaintStencilRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
      resumeStencil(): void;
      setAlwaysOnTop(arg0: boolean): void;
      setAnchorBottom(arg0: boolean): void;
      setAnchorLeft(arg0: boolean): void;
      setAnchorRight(arg0: boolean): void;
      setAnchorTop(arg0: boolean): void;
      setCapture(arg0: boolean): void;
      setClickedValue(arg0: string): void;
      setConsumeMouseEvents(arg0: boolean): void;
      setControls(arg0: java.util.Vector<zombie.ui.UIElement>): void;
      setDefaultDraw(arg0: boolean): void;
      setEnabled(arg0: boolean): void;
      setFollowGameWorld(arg0: boolean): void;
      setForceCursorVisible(arg0: boolean): void;
      setHeight(arg0: number): void;
      setHeightOnly(arg0: number): void;
      setHeightSilent(arg0: number): void;
      setIgnoreLossControl(arg0: boolean): void;
      setMaxDrawHeight(arg0: number): void;
      setMovable(arg0: boolean): void;
      setParent(arg0: zombie.ui.UIElement): void;
      setPlayerContext(arg0: number): void;
      setRenderClippedChildren(arg0: boolean): void;
      setRenderThisPlayerOnly(arg0: number): void;
      setScrollChildren(arg0: boolean): void;
      setScrollHeight(arg0: number): void;
      setScrollWithParent(arg0: boolean): void;
      setStencilRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setUIName(arg0: string): void;
      setVisible(arg0: boolean): void;
      setWantKeyEvents(arg0: boolean): void;
      setWidth(arg0: number): void;
      setWidthOnly(arg0: number): void;
      setWidthSilent(arg0: number): void;
      setX(arg0: number): void;
      setXScroll(arg0: number): void;
      setY(arg0: number): void;
      setYScroll(arg0: number): void;
      suspendStencil(): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.ui.UIElement extends java.lang.Object
    export class UIElement {
      private constructor();
      readonly Controls?: java.util.ArrayList<zombie.ui.UIElement>;
      IgnoreLossControl: boolean;
      Parent?: zombie.ui.UIElement;
      alwaysBack: boolean;
      anchorBottom: boolean;
      anchorLeft: boolean;
      anchorRight: boolean;
      anchorTop: boolean;
      bScrollChildren: boolean;
      bScrollWithParent: boolean;
      capture: boolean;
      clickedValue?: string;
      defaultDraw: boolean;
      followGameWorld: boolean;
      height: number;
      playerContext: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      visible: boolean;
      width: number;
      x: number;
      y: number;
  
      AddChild(arg0: zombie.ui.UIElement): void;
      BringToTop(arg0: zombie.ui.UIElement): void;
      ButtonClicked(arg0: string): void;
      ClearChildren(): void;
      DrawSubTextureRGBA(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number, arg12: number): void;
      DrawText(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextCentre(arg0: zombie.ui.UIFont, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextRight(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextUntrimmed(arg0: zombie.ui.UIFont, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number): void;
      DrawTextureAngle(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextureCol(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: zombie.core.Color): void;
      DrawTextureColor(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextureIgnoreOffset(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTextureScaled(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
      DrawTextureScaledAspect(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledAspect2(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledCol(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTextureScaledColor(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledUniform(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextureTiled(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureTiledX(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureTiledY(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTexture_FlippedX(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTexture_FlippedXIgnoreOffset(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawUVSliceTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color, arg6: number, arg7: number, arg8: number, arg9: number): void;
      RemoveChild(arg0: zombie.ui.UIElement): void;
      RemoveControl(arg0: zombie.ui.UIElement): void;
      backMost(): void;
      bringToTop(): void;
      clampToParentX(arg0: number): number;
      clampToParentY(arg0: number): number;
      clearMaxDrawHeight(): void;
      clearStencilRect(): void;
      equals(arg0: any): boolean;
      getAbsoluteX(): number;
      getAbsoluteY(): number;
      getClass(): java.lang.Class<any>;
      getClickedValue(): string;
      getControls(): java.util.ArrayList<zombie.ui.UIElement>;
      getHeight(): number;
      getMaxDrawHeight(): number;
      getParent(): zombie.ui.UIElement;
      getPlayerContext(): number;
      getRenderThisPlayerOnly(): number;
      getScrollChildren(): boolean;
      getScrollHeight(): number;
      getScrollWithParent(): boolean;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getUIName(): string;
      getWidth(): number;
      getX(): number;
      getXScroll(): number;
      getXScrolled(arg0: zombie.ui.UIElement): number;
      getY(): number;
      getYScroll(): number;
      getYScrolled(arg0: zombie.ui.UIElement): number;
      hashCode(): number;
      ignoreHeightChange(): void;
      ignoreWidthChange(): void;
      isAnchorBottom(): boolean;
      isAnchorLeft(): boolean;
      isAnchorRight(): boolean;
      isAnchorTop(): boolean;
      isCapture(): boolean;
      isConsumeMouseEvents(): boolean;
      isDefaultDraw(): boolean;
      isEnabled(): boolean;
      isFollowGameWorld(): boolean;
      isForceCursorVisible(): boolean;
      isIgnoreLossControl(): boolean;
      isKeyConsumed(arg0: number): boolean;
      isMouseOver(): boolean;
      isPointOver(arg0: number, arg1: number): boolean;
      isVisible(): boolean;
      isWantKeyEvents(): boolean;
      notify(): void;
      notifyAll(): void;
      onKeyPress(arg0: number): void;
      onKeyRelease(arg0: number): void;
      onKeyRepeat(arg0: number): void;
      onMouseDown(arg0: number, arg1: number): boolean;
      onMouseMove(arg0: number, arg1: number): boolean;
      onMouseMoveOutside(arg0: number, arg1: number): void;
      onMouseUp(arg0: number, arg1: number): boolean;
      onMouseUpOutside(arg0: number, arg1: number): void;
      onMouseWheel(arg0: number): boolean;
      onResize(): void;
      onRightMouseDown(arg0: number, arg1: number): boolean;
      onRightMouseUp(arg0: number, arg1: number): boolean;
      onresize(): void;
      render(): void;
      repaintStencilRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
      resumeStencil(): void;
      setAlwaysOnTop(arg0: boolean): void;
      setAnchorBottom(arg0: boolean): void;
      setAnchorLeft(arg0: boolean): void;
      setAnchorRight(arg0: boolean): void;
      setAnchorTop(arg0: boolean): void;
      setCapture(arg0: boolean): void;
      setClickedValue(arg0: string): void;
      setConsumeMouseEvents(arg0: boolean): void;
      setControls(arg0: java.util.Vector<zombie.ui.UIElement>): void;
      setDefaultDraw(arg0: boolean): void;
      setEnabled(arg0: boolean): void;
      setFollowGameWorld(arg0: boolean): void;
      setForceCursorVisible(arg0: boolean): void;
      setHeight(arg0: number): void;
      setHeightOnly(arg0: number): void;
      setHeightSilent(arg0: number): void;
      setIgnoreLossControl(arg0: boolean): void;
      setMaxDrawHeight(arg0: number): void;
      setParent(arg0: zombie.ui.UIElement): void;
      setPlayerContext(arg0: number): void;
      setRenderClippedChildren(arg0: boolean): void;
      setRenderThisPlayerOnly(arg0: number): void;
      setScrollChildren(arg0: boolean): void;
      setScrollHeight(arg0: number): void;
      setScrollWithParent(arg0: boolean): void;
      setStencilRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setUIName(arg0: string): void;
      setVisible(arg0: boolean): void;
      setWantKeyEvents(arg0: boolean): void;
      setWidth(arg0: number): void;
      setWidthOnly(arg0: number): void;
      setWidthSilent(arg0: number): void;
      setX(arg0: number): void;
      setXScroll(arg0: number): void;
      setY(arg0: number): void;
      setYScroll(arg0: number): void;
      suspendStencil(): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.ui.UIFont */
    export class UIFont {
      /* ENUM VALUES */
      static readonly AutoNormLarge: UIFont; 
      static readonly AutoNormMedium: UIFont; 
      static readonly AutoNormSmall: UIFont; 
      static readonly Code: UIFont; 
      static readonly Cred1: UIFont; 
      static readonly Cred2: UIFont; 
      static readonly DebugConsole: UIFont; 
      static readonly Dialogue: UIFont; 
      static readonly Handwritten: UIFont; 
      static readonly Intro: UIFont; 
      static readonly Large: UIFont; 
      static readonly MainMenu1: UIFont; 
      static readonly MainMenu2: UIFont; 
      static readonly Massive: UIFont; 
      static readonly Medium: UIFont; 
      static readonly MediumNew: UIFont; 
      static readonly NewLarge: UIFont; 
      static readonly NewMedium: UIFont; 
      static readonly NewSmall: UIFont; 
      static readonly Small: UIFont; 
      static readonly Title: UIFont; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.ui.UIFont[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): UIFont;
      FromString(arg0: string): zombie.ui.UIFont;
      valueOf(arg0: string): zombie.ui.UIFont;
      values(): zombie.ui.UIFont[];
    }
    // zombie.ui.UIManager extends java.lang.Object
    export class UIManager {
      private constructor();
      static DebugConsole?: zombie.ui.UIDebugConsole;
      static readonly DoneTutorials?: java.util.ArrayList<string>;
      static FadeAlpha: number;
      static FadeInTime: number;
      static FadeInTimeMax: number;
      static FadingOut: boolean;
      static KeyDownZoomIn: boolean;
      static KeyDownZoomOut: boolean;
      static LastPicked?: zombie.iso.IsoObject;
      static Modal?: zombie.ui.ModalDialog;
      static readonly MoodleUI?: zombie.ui.MoodlesUI[];
      static Picked?: zombie.iso.IsoObjectPicker$ClickObject;
      static readonly PickedTile?: zombie.iso.Vector2;
      static readonly PickedTileLocal?: zombie.iso.Vector2;
      static readonly ProgressBar?: zombie.ui.ActionProgressBar[];
      static RightDownObject?: zombie.iso.IsoObject;
      static ServerToolbox?: zombie.ui.UIServerToolbox;
      static readonly UI?: java.util.ArrayList<zombie.ui.UIElement>;
      static UIFBO?: zombie.core.textures.TextureFBO;
      static VisibleAllUI: boolean;
      static bFadeBeforeUI: boolean;
      static bSuspend: boolean;
      static black?: zombie.core.textures.Texture;
      static clock?: zombie.ui.Clock;
      static defaultthread?: se.krka.kahlua.vm.KahluaThread;
      static doTick: boolean;
      static lastAlpha: number;
      static lastMouseTexture?: zombie.core.textures.Texture;
      static lastMouseX: number;
      static lastMouseY: number;
      static lastOffX: number;
      static lastOffY: number;
      static mouseArrow?: zombie.core.textures.Texture;
      static mouseAttack?: zombie.core.textures.Texture;
      static mouseExamine?: zombie.core.textures.Texture;
      static mouseGrab?: zombie.core.textures.Texture;
      static previousThread?: se.krka.kahlua.vm.KahluaThread;
      static speedControls?: zombie.ui.SpeedControls;
      static readonly toTop?: java.util.ArrayList<zombie.ui.UIElement>;
      static toolTip?: zombie.ui.ObjectTooltip;
      static uiRenderIntervalMS: number;
      static uiRenderTimeMS: number;
      static uiUpdateIntervalMS: number;
      static uiUpdateTimeMS: number;
      static useUIFBO: boolean;
  
      AddUI(arg0: zombie.ui.UIElement): void;
      CloseContainers(): void;
      CreateFBO(arg0: number, arg1: number): void;
      DrawTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number): void;
      FadeIn(arg0: number): void;
      FadeOut(arg0: number, arg1: number): void;
      RemoveElement(arg0: zombie.ui.UIElement): void;
      closeContainers(): void;
      createTexture(arg0: number, arg1: number, arg2: boolean): zombie.core.textures.TextureFBO;
      debugBreakpoint(arg0: string, arg1: number): void;
      equals(arg0: any): boolean;
      getBlack(): zombie.core.textures.Texture;
      getClass(): java.lang.Class<any>;
      getClock(): zombie.ui.Clock;
      getDebugConsole(): zombie.ui.UIDebugConsole;
      getDefaultThread(): se.krka.kahlua.vm.KahluaThread;
      getDoneTutorials(): java.util.ArrayList<string>;
      getDoubleClickDist(): number;
      getDoubleClickInterval(): number;
      getFadeAlpha(arg0: number): number;
      getFadeInTime(): number;
      getFadeInTimeMax(): number;
      getLastAlpha(): number;
      getLastMouseTexture(): zombie.core.textures.Texture;
      getLastMouseX(): number;
      getLastMouseY(): number;
      getLastOffX(): number;
      getLastOffY(): number;
      getLastPicked(): zombie.iso.IsoObject;
      getMillisSinceLastRender(): number;
      getMillisSinceLastUpdate(): number;
      getModal(): zombie.ui.ModalDialog;
      getMoodleUI(arg0: number): zombie.ui.MoodlesUI;
      getMouseArrow(): zombie.core.textures.Texture;
      getMouseAttack(): zombie.core.textures.Texture;
      getMouseExamine(): zombie.core.textures.Texture;
      getMouseGrab(): zombie.core.textures.Texture;
      getPicked(): zombie.iso.IsoObjectPicker$ClickObject;
      getPickedTile(): zombie.iso.Vector2;
      getPickedTileLocal(): zombie.iso.Vector2;
      getProgressBar(arg0: number): zombie.ui.ActionProgressBar;
      getRightDownObject(): zombie.iso.IsoObject;
      getSecondsSinceLastRender(): number;
      getSecondsSinceLastUpdate(): number;
      getServerToolbox(): zombie.ui.UIServerToolbox;
      getSpeedControls(): zombie.ui.SpeedControls;
      getTileFromMouse(arg0: number, arg1: number, arg2: number): zombie.iso.Vector2;
      getToolTip(): zombie.ui.ObjectTooltip;
      getUI(): java.util.ArrayList<zombie.ui.UIElement>;
      hashCode(): number;
      init(): void;
      isDoubleClick(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): boolean;
      isFBOActive(): boolean;
      isFadingOut(): boolean;
      isForceCursorVisible(): boolean;
      isMouseOverInventory(): boolean;
      isShowLuaDebuggerOnError(): boolean;
      isShowPausedMessage(): boolean;
      isbFadeBeforeUI(): boolean;
      notify(): void;
      notifyAll(): void;
      onKeyPress(arg0: number): boolean;
      onKeyRelease(arg0: number): boolean;
      onKeyRepeat(arg0: number): boolean;
      render(): void;
      resize(): void;
      setBlack(arg0: zombie.core.textures.Texture): void;
      setClock(arg0: zombie.ui.Clock): void;
      setDebugConsole(arg0: zombie.ui.UIDebugConsole): void;
      setDoneTutorials(arg0: java.util.ArrayList<string>): void;
      setFadeAlpha(arg0: number): void;
      setFadeBeforeUI(arg0: number, arg1: boolean): void;
      setFadeInTime(arg0: number): void;
      setFadeInTimeMax(arg0: number): void;
      setFadeTime(arg0: number, arg1: number): void;
      setFadingOut(arg0: boolean): void;
      setLastAlpha(arg0: number): void;
      setLastMouseTexture(arg0: zombie.core.textures.Texture): void;
      setLastMouseX(arg0: number): void;
      setLastMouseY(arg0: number): void;
      setLastOffX(arg0: number): void;
      setLastOffY(arg0: number): void;
      setLastPicked(arg0: zombie.iso.IsoObject): void;
      setModal(arg0: zombie.ui.ModalDialog): void;
      setMoodleUI(arg0: number, arg1: zombie.ui.MoodlesUI): void;
      setMouseArrow(arg0: zombie.core.textures.Texture): void;
      setMouseAttack(arg0: zombie.core.textures.Texture): void;
      setMouseExamine(arg0: zombie.core.textures.Texture): void;
      setMouseGrab(arg0: zombie.core.textures.Texture): void;
      setPicked(arg0: zombie.iso.IsoObjectPicker$ClickObject): void;
      setPickedTile(arg0: zombie.iso.Vector2): void;
      setPickedTileLocal(arg0: zombie.iso.Vector2): void;
      setPlayerInventory(arg0: number, arg1: zombie.ui.UIElement, arg2: zombie.ui.UIElement): void;
      setPlayerInventoryTooltip(arg0: number, arg1: zombie.ui.UIElement, arg2: zombie.ui.UIElement): void;
      setProgressBar(arg0: number, arg1: zombie.ui.ActionProgressBar): void;
      setRightDownObject(arg0: zombie.iso.IsoObject): void;
      setServerToolbox(arg0: zombie.ui.UIServerToolbox): void;
      setShowLuaDebuggerOnError(arg0: boolean): void;
      setShowPausedMessage(arg0: boolean): void;
      setSpeedControls(arg0: zombie.ui.SpeedControls): void;
      setToolTip(arg0: zombie.ui.ObjectTooltip): void;
      setUI(arg0: java.util.ArrayList<zombie.ui.UIElement>): void;
      setVisibleAllUI(arg0: boolean): void;
      setbFadeBeforeUI(arg0: boolean): void;
      toString(): string;
      update(): void;
      updateBeforeFadeOut(): void;
      wait(arg0: number): void;
    }
    // zombie.ui.UINineGrid extends zombie.ui.UIElement
    export class UINineGrid {
      private constructor();
      Colour?: zombie.core.Color;
      readonly Controls?: java.util.ArrayList<zombie.ui.UIElement>;
      IgnoreLossControl: boolean;
      Parent?: zombie.ui.UIElement;
      alwaysBack: boolean;
      anchorBottom: boolean;
      anchorLeft: boolean;
      anchorRight: boolean;
      anchorTop: boolean;
      bScrollChildren: boolean;
      bScrollWithParent: boolean;
      capture: boolean;
      clickedValue?: string;
      clientH: number;
      clientW: number;
      defaultDraw: boolean;
      followGameWorld: boolean;
      height: number;
      nestedItems?: java.util.Stack<java.awt.Rectangle>;
      playerContext: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      visible: boolean;
      width: number;
      x: number;
      y: number;
  
      AddChild(arg0: zombie.ui.UIElement): void;
      BringToTop(arg0: zombie.ui.UIElement): void;
      ButtonClicked(arg0: string): void;
      ClearChildren(): void;
      DrawSubTextureRGBA(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number, arg12: number): void;
      DrawText(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextCentre(arg0: zombie.ui.UIFont, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextRight(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextUntrimmed(arg0: zombie.ui.UIFont, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number): void;
      DrawTextureAngle(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextureCol(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: zombie.core.Color): void;
      DrawTextureColor(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextureIgnoreOffset(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTextureScaled(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
      DrawTextureScaledAspect(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledAspect2(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledCol(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTextureScaledColor(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledUniform(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextureTiled(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureTiledX(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureTiledY(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTexture_FlippedX(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTexture_FlippedXIgnoreOffset(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawUVSliceTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color, arg6: number, arg7: number, arg8: number, arg9: number): void;
      Nest(arg0: zombie.ui.UIElement, arg1: number, arg2: number, arg3: number, arg4: number): void;
      RemoveChild(arg0: zombie.ui.UIElement): void;
      RemoveControl(arg0: zombie.ui.UIElement): void;
      backMost(): void;
      bringToTop(): void;
      clampToParentX(arg0: number): number;
      clampToParentY(arg0: number): number;
      clearMaxDrawHeight(): void;
      clearStencilRect(): void;
      equals(arg0: any): boolean;
      getAbsoluteX(): number;
      getAbsoluteY(): number;
      getAlpha(): number;
      getClass(): java.lang.Class<any>;
      getClickedValue(): string;
      getControls(): java.util.ArrayList<zombie.ui.UIElement>;
      getHeight(): number;
      getMaxDrawHeight(): number;
      getParent(): zombie.ui.UIElement;
      getPlayerContext(): number;
      getRenderThisPlayerOnly(): number;
      getScrollChildren(): boolean;
      getScrollHeight(): number;
      getScrollWithParent(): boolean;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getUIName(): string;
      getWidth(): number;
      getX(): number;
      getXScroll(): number;
      getXScrolled(arg0: zombie.ui.UIElement): number;
      getY(): number;
      getYScroll(): number;
      getYScrolled(arg0: zombie.ui.UIElement): number;
      hashCode(): number;
      ignoreHeightChange(): void;
      ignoreWidthChange(): void;
      isAnchorBottom(): boolean;
      isAnchorLeft(): boolean;
      isAnchorRight(): boolean;
      isAnchorTop(): boolean;
      isCapture(): boolean;
      isConsumeMouseEvents(): boolean;
      isDefaultDraw(): boolean;
      isEnabled(): boolean;
      isFollowGameWorld(): boolean;
      isForceCursorVisible(): boolean;
      isIgnoreLossControl(): boolean;
      isKeyConsumed(arg0: number): boolean;
      isMouseOver(): boolean;
      isPointOver(arg0: number, arg1: number): boolean;
      isVisible(): boolean;
      isWantKeyEvents(): boolean;
      notify(): void;
      notifyAll(): void;
      onKeyPress(arg0: number): void;
      onKeyRelease(arg0: number): void;
      onKeyRepeat(arg0: number): void;
      onMouseDown(arg0: number, arg1: number): boolean;
      onMouseMove(arg0: number, arg1: number): boolean;
      onMouseMoveOutside(arg0: number, arg1: number): void;
      onMouseUp(arg0: number, arg1: number): boolean;
      onMouseUpOutside(arg0: number, arg1: number): void;
      onMouseWheel(arg0: number): boolean;
      onResize(): void;
      onRightMouseDown(arg0: number, arg1: number): boolean;
      onRightMouseUp(arg0: number, arg1: number): boolean;
      onresize(): void;
      render(): void;
      repaintStencilRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
      resumeStencil(): void;
      setAlpha(arg0: number): void;
      setAlwaysOnTop(arg0: boolean): void;
      setAnchorBottom(arg0: boolean): void;
      setAnchorLeft(arg0: boolean): void;
      setAnchorRight(arg0: boolean): void;
      setAnchorTop(arg0: boolean): void;
      setCapture(arg0: boolean): void;
      setClickedValue(arg0: string): void;
      setConsumeMouseEvents(arg0: boolean): void;
      setControls(arg0: java.util.Vector<zombie.ui.UIElement>): void;
      setDefaultDraw(arg0: boolean): void;
      setEnabled(arg0: boolean): void;
      setFollowGameWorld(arg0: boolean): void;
      setForceCursorVisible(arg0: boolean): void;
      setHeight(arg0: number): void;
      setHeightOnly(arg0: number): void;
      setHeightSilent(arg0: number): void;
      setIgnoreLossControl(arg0: boolean): void;
      setMaxDrawHeight(arg0: number): void;
      setParent(arg0: zombie.ui.UIElement): void;
      setPlayerContext(arg0: number): void;
      setRenderClippedChildren(arg0: boolean): void;
      setRenderThisPlayerOnly(arg0: number): void;
      setScrollChildren(arg0: boolean): void;
      setScrollHeight(arg0: number): void;
      setScrollWithParent(arg0: boolean): void;
      setStencilRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setUIName(arg0: string): void;
      setVisible(arg0: boolean): void;
      setWantKeyEvents(arg0: boolean): void;
      setWidth(arg0: number): void;
      setWidthOnly(arg0: number): void;
      setWidthSilent(arg0: number): void;
      setX(arg0: number): void;
      setXScroll(arg0: number): void;
      setY(arg0: number): void;
      setYScroll(arg0: number): void;
      suspendStencil(): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.ui.UIServerToolbox extends zombie.ui.NewWindow
    export class UIServerToolbox {
      private constructor();
      readonly Controls?: java.util.ArrayList<zombie.ui.UIElement>;
      IgnoreLossControl: boolean;
      Movable: boolean;
      Parent?: zombie.ui.UIElement;
      ResizeToFitY: boolean;
      alwaysBack: boolean;
      anchorBottom: boolean;
      anchorLeft: boolean;
      anchorRight: boolean;
      anchorTop: boolean;
      autoAccept: boolean;
      bScrollChildren: boolean;
      bScrollWithParent: boolean;
      capture: boolean;
      clickX: number;
      clickY: number;
      clickedValue?: string;
      clientH: number;
      clientW: number;
      defaultDraw: boolean;
      followGameWorld: boolean;
      height: number;
      static instance?: zombie.ui.UIServerToolbox;
      moving: boolean;
      ncclientH: number;
      ncclientW: number;
      nestedItems?: java.util.Stack<org.lwjgl.util.Rectangle>;
      playerContext: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      visible: boolean;
      width: number;
      x: number;
      y: number;
  
      AddChild(arg0: zombie.ui.UIElement): void;
      BringToTop(arg0: zombie.ui.UIElement): void;
      ButtonClicked(arg0: string): void;
      ClearChildren(): void;
      DoubleClick(arg0: string, arg1: number, arg2: number): void;
      DrawSubTextureRGBA(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number, arg12: number): void;
      DrawText(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextCentre(arg0: zombie.ui.UIFont, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextRight(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextUntrimmed(arg0: zombie.ui.UIFont, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number): void;
      DrawTextureAngle(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextureCol(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: zombie.core.Color): void;
      DrawTextureColor(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextureIgnoreOffset(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTextureScaled(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
      DrawTextureScaledAspect(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledAspect2(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledCol(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTextureScaledColor(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledUniform(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextureTiled(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureTiledX(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureTiledY(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTexture_FlippedX(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTexture_FlippedXIgnoreOffset(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawUVSliceTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color, arg6: number, arg7: number, arg8: number, arg9: number): void;
      ModalClick(arg0: string, arg1: string): void;
      Nest(arg0: zombie.ui.UIElement, arg1: number, arg2: number, arg3: number, arg4: number): void;
      OnCoopServerMessage(arg0: string, arg1: string, arg2: string): void;
      RemoveChild(arg0: zombie.ui.UIElement): void;
      RemoveControl(arg0: zombie.ui.UIElement): void;
      Selected(arg0: string, arg1: number, arg2: number): void;
      backMost(): void;
      bringToTop(): void;
      clampToParentX(arg0: number): number;
      clampToParentY(arg0: number): number;
      clearMaxDrawHeight(): void;
      clearStencilRect(): void;
      equals(arg0: any): boolean;
      getAbsoluteX(): number;
      getAbsoluteY(): number;
      getClass(): java.lang.Class<any>;
      getClickedValue(): string;
      getControls(): java.util.ArrayList<zombie.ui.UIElement>;
      getHeight(): number;
      getMaxDrawHeight(): number;
      getParent(): zombie.ui.UIElement;
      getPlayerContext(): number;
      getRenderThisPlayerOnly(): number;
      getScrollChildren(): boolean;
      getScrollHeight(): number;
      getScrollWithParent(): boolean;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getUIName(): string;
      getWidth(): number;
      getX(): number;
      getXScroll(): number;
      getXScrolled(arg0: zombie.ui.UIElement): number;
      getY(): number;
      getYScroll(): number;
      getYScrolled(arg0: zombie.ui.UIElement): number;
      hashCode(): number;
      ignoreHeightChange(): void;
      ignoreWidthChange(): void;
      isAnchorBottom(): boolean;
      isAnchorLeft(): boolean;
      isAnchorRight(): boolean;
      isAnchorTop(): boolean;
      isCapture(): boolean;
      isConsumeMouseEvents(): boolean;
      isDefaultDraw(): boolean;
      isEnabled(): boolean;
      isFollowGameWorld(): boolean;
      isForceCursorVisible(): boolean;
      isIgnoreLossControl(): boolean;
      isKeyConsumed(arg0: number): boolean;
      isMouseOver(): boolean;
      isPointOver(arg0: number, arg1: number): boolean;
      isVisible(): boolean;
      isWantKeyEvents(): boolean;
      notify(): void;
      notifyAll(): void;
      onKeyPress(arg0: number): void;
      onKeyRelease(arg0: number): void;
      onKeyRepeat(arg0: number): void;
      onMouseDown(arg0: number, arg1: number): boolean;
      onMouseMove(arg0: number, arg1: number): boolean;
      onMouseMoveOutside(arg0: number, arg1: number): void;
      onMouseUp(arg0: number, arg1: number): boolean;
      onMouseUpOutside(arg0: number, arg1: number): void;
      onMouseWheel(arg0: number): boolean;
      onResize(): void;
      onRightMouseDown(arg0: number, arg1: number): boolean;
      onRightMouseUp(arg0: number, arg1: number): boolean;
      onresize(): void;
      render(): void;
      repaintStencilRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
      resumeStencil(): void;
      setAlwaysOnTop(arg0: boolean): void;
      setAnchorBottom(arg0: boolean): void;
      setAnchorLeft(arg0: boolean): void;
      setAnchorRight(arg0: boolean): void;
      setAnchorTop(arg0: boolean): void;
      setCapture(arg0: boolean): void;
      setClickedValue(arg0: string): void;
      setConsumeMouseEvents(arg0: boolean): void;
      setControls(arg0: java.util.Vector<zombie.ui.UIElement>): void;
      setDefaultDraw(arg0: boolean): void;
      setEnabled(arg0: boolean): void;
      setFollowGameWorld(arg0: boolean): void;
      setForceCursorVisible(arg0: boolean): void;
      setHeight(arg0: number): void;
      setHeightOnly(arg0: number): void;
      setHeightSilent(arg0: number): void;
      setIgnoreLossControl(arg0: boolean): void;
      setMaxDrawHeight(arg0: number): void;
      setMovable(arg0: boolean): void;
      setParent(arg0: zombie.ui.UIElement): void;
      setPlayerContext(arg0: number): void;
      setRenderClippedChildren(arg0: boolean): void;
      setRenderThisPlayerOnly(arg0: number): void;
      setScrollChildren(arg0: boolean): void;
      setScrollHeight(arg0: number): void;
      setScrollWithParent(arg0: boolean): void;
      setStencilRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setUIName(arg0: string): void;
      setVisible(arg0: boolean): void;
      setWantKeyEvents(arg0: boolean): void;
      setWidth(arg0: number): void;
      setWidthOnly(arg0: number): void;
      setWidthSilent(arg0: number): void;
      setX(arg0: number): void;
      setXScroll(arg0: number): void;
      setY(arg0: number): void;
      setYScroll(arg0: number): void;
      shutdown(): void;
      suspendStencil(): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.ui.UITextBox2 extends zombie.ui.UIElement
    export class UITextBox2 {
      private constructor();
      BadColour?: zombie.core.Color;
      Centred: boolean;
      static ConsoleHasFocus: boolean;
      readonly Controls?: java.util.ArrayList<zombie.ui.UIElement>;
      CursorLine: number;
      DoingTextEntry: boolean;
      Frame?: zombie.ui.UINineGrid;
      GoodColour?: zombie.core.Color;
      IgnoreLossControl: boolean;
      IsEditable: boolean;
      IsSelectable: boolean;
      Lines?: java.util.Stack<string>;
      NuetralColour?: zombie.core.Color;
      NuetralColour2?: zombie.core.Color;
      Parent?: zombie.ui.UIElement;
      StandardFrameColour?: zombie.core.Color;
      Text?: string;
      TextEntryCursorColour?: zombie.core.Color;
      TextEntryCursorColour2?: zombie.core.Color;
      TextEntryCursorPos: number;
      TextEntryFrameColour?: zombie.core.Color;
      TextEntryMaxLength: number;
      TextOffsetOfLineStart?: gnu.trove.list.array.TIntArrayList;
      ToSelectionIndex: number;
      alwaysBack: boolean;
      anchorBottom: boolean;
      anchorLeft: boolean;
      anchorRight: boolean;
      anchorTop: boolean;
      bAlwaysPaginate: boolean;
      bMask: boolean;
      bScrollChildren: boolean;
      bScrollWithParent: boolean;
      bTextChanged: boolean;
      capture: boolean;
      clickedValue?: string;
      defaultDraw: boolean;
      followGameWorld: boolean;
      height: number;
      ignoreFirst: boolean;
      internalText?: string;
      maskChr?: string;
      multipleLine: boolean;
      playerContext: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      visible: boolean;
      width: number;
      x: number;
      y: number;
  
      AddChild(arg0: zombie.ui.UIElement): void;
      BringToTop(arg0: zombie.ui.UIElement): void;
      ButtonClicked(arg0: string): void;
      ClearChildren(): void;
      ClearHighlights(): void;
      DrawSubTextureRGBA(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number, arg12: number): void;
      DrawText(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextCentre(arg0: zombie.ui.UIFont, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextRight(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextUntrimmed(arg0: zombie.ui.UIFont, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number): void;
      DrawTextureAngle(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextureCol(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: zombie.core.Color): void;
      DrawTextureColor(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextureIgnoreOffset(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTextureScaled(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
      DrawTextureScaledAspect(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledAspect2(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledCol(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTextureScaledColor(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledUniform(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextureTiled(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureTiledX(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureTiledY(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTexture_FlippedX(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTexture_FlippedXIgnoreOffset(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawUVSliceTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color, arg6: number, arg7: number, arg8: number, arg9: number): void;
      RemoveChild(arg0: zombie.ui.UIElement): void;
      RemoveControl(arg0: zombie.ui.UIElement): void;
      SetText(arg0: string): void;
      backMost(): void;
      bringToTop(): void;
      clampToParentX(arg0: number): number;
      clampToParentY(arg0: number): number;
      clearInput(): void;
      clearMaxDrawHeight(): void;
      clearStencilRect(): void;
      equals(arg0: any): boolean;
      focus(): void;
      getAbsoluteX(): number;
      getAbsoluteY(): number;
      getClass(): java.lang.Class<any>;
      getClickedValue(): string;
      getControls(): java.util.ArrayList<zombie.ui.UIElement>;
      getCursorLine(): number;
      getCursorPos(): number;
      getForceUpperCase(): boolean;
      getFrameAlpha(): number;
      getHeight(): number;
      getInset(): number;
      getInternalText(): string;
      getMaxDrawHeight(): number;
      getMaxLines(): number;
      getMaxTextLength(): number;
      getParent(): zombie.ui.UIElement;
      getPlayerContext(): number;
      getRenderThisPlayerOnly(): number;
      getScrollChildren(): boolean;
      getScrollHeight(): number;
      getScrollWithParent(): boolean;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getText(): string;
      getUIName(): string;
      getWidth(): number;
      getX(): number;
      getXScroll(): number;
      getXScrolled(arg0: zombie.ui.UIElement): number;
      getY(): number;
      getYScroll(): number;
      getYScrolled(arg0: zombie.ui.UIElement): number;
      hashCode(): number;
      ignoreFirstInput(): void;
      ignoreHeightChange(): void;
      ignoreWidthChange(): void;
      isAnchorBottom(): boolean;
      isAnchorLeft(): boolean;
      isAnchorRight(): boolean;
      isAnchorTop(): boolean;
      isCapture(): boolean;
      isConsumeMouseEvents(): boolean;
      isDefaultDraw(): boolean;
      isEnabled(): boolean;
      isFocused(): boolean;
      isFollowGameWorld(): boolean;
      isForceCursorVisible(): boolean;
      isIgnoreLossControl(): boolean;
      isKeyConsumed(arg0: number): boolean;
      isMouseOver(): boolean;
      isMultipleLine(): boolean;
      isOnlyNumbers(): boolean;
      isPointOver(arg0: number, arg1: number): boolean;
      isVisible(): boolean;
      isWantKeyEvents(): boolean;
      notify(): void;
      notifyAll(): void;
      onCommandEntered(): void;
      onKeyPress(arg0: number): void;
      onKeyRelease(arg0: number): void;
      onKeyRepeat(arg0: number): void;
      onMouseDown(arg0: number, arg1: number): boolean;
      onMouseMove(arg0: number, arg1: number): boolean;
      onMouseMoveOutside(arg0: number, arg1: number): void;
      onMouseUp(arg0: number, arg1: number): boolean;
      onMouseUpOutside(arg0: number, arg1: number): void;
      onMouseWheel(arg0: number): boolean;
      onOtherKey(arg0: number): void;
      onPressDown(): void;
      onPressUp(): void;
      onResize(): void;
      onRightMouseDown(arg0: number, arg1: number): boolean;
      onRightMouseUp(arg0: number, arg1: number): boolean;
      onTextChange(): void;
      onresize(): void;
      render(): void;
      repaintStencilRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
      resetBlink(): void;
      resumeStencil(): void;
      selectAll(): void;
      setAlwaysOnTop(arg0: boolean): void;
      setAnchorBottom(arg0: boolean): void;
      setAnchorLeft(arg0: boolean): void;
      setAnchorRight(arg0: boolean): void;
      setAnchorTop(arg0: boolean): void;
      setCapture(arg0: boolean): void;
      setClearButton(arg0: boolean): void;
      setClickedValue(arg0: string): void;
      setConsumeMouseEvents(arg0: boolean): void;
      setControls(arg0: java.util.Vector<zombie.ui.UIElement>): void;
      setCursorLine(arg0: number): void;
      setCursorPos(arg0: number): void;
      setDefaultDraw(arg0: boolean): void;
      setEditable(arg0: boolean): void;
      setEnabled(arg0: boolean): void;
      setFollowGameWorld(arg0: boolean): void;
      setForceCursorVisible(arg0: boolean): void;
      setForceUpperCase(arg0: boolean): void;
      setFrameAlpha(arg0: number): void;
      setHasFrame(arg0: boolean): void;
      setHeight(arg0: number): void;
      setHeightOnly(arg0: number): void;
      setHeightSilent(arg0: number): void;
      setIgnoreLossControl(arg0: boolean): void;
      setMasked(arg0: boolean): void;
      setMaxDrawHeight(arg0: number): void;
      setMaxLines(arg0: number): void;
      setMaxTextLength(arg0: number): void;
      setMultipleLine(arg0: boolean): void;
      setOnlyNumbers(arg0: boolean): void;
      setParent(arg0: zombie.ui.UIElement): void;
      setPlayerContext(arg0: number): void;
      setRenderClippedChildren(arg0: boolean): void;
      setRenderThisPlayerOnly(arg0: number): void;
      setScrollChildren(arg0: boolean): void;
      setScrollHeight(arg0: number): void;
      setScrollWithParent(arg0: boolean): void;
      setSelectable(arg0: boolean): void;
      setStencilRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTextColor(arg0: zombie.core.textures.ColorInfo): void;
      setUIName(arg0: string): void;
      setVisible(arg0: boolean): void;
      setWantKeyEvents(arg0: boolean): void;
      setWidth(arg0: number): void;
      setWidthOnly(arg0: number): void;
      setWidthSilent(arg0: number): void;
      setX(arg0: number): void;
      setXScroll(arg0: number): void;
      setY(arg0: number): void;
      setYScroll(arg0: number): void;
      suspendStencil(): void;
      toDisplayLine(arg0: number): number;
      toString(): string;
      unfocus(): void;
      update(): void;
      updateText(): void;
      wait(arg0: number): void;
    }
    // zombie.ui.UITransition extends java.lang.Object
    export class UITransition {
      private constructor();
      UpdateAll(): void;
      equals(arg0: any): boolean;
      fraction(): number;
      getClass(): java.lang.Class<any>;
      getElapsed(): number;
      hashCode(): number;
      init(arg0: number, arg1: boolean): void;
      notify(): void;
      notifyAll(): void;
      reset(): void;
      setElapsed(arg0: number): void;
      setFadeIn(arg0: boolean): void;
      setIgnoreUpdateTime(arg0: boolean): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.ui.UI_BodyPart extends zombie.ui.UIElement
    export class UI_BodyPart {
      private constructor();
      BodyPartType?: zombie.characters.BodyDamage.BodyPartType;
      readonly Controls?: java.util.ArrayList<zombie.ui.UIElement>;
      IgnoreLossControl: boolean;
      IsFlipped: boolean;
      MaxOscilatorRate: number;
      MinOscilatorRate: number;
      Oscilator: number;
      OscilatorRate: number;
      OscilatorStep: number;
      Parent?: zombie.ui.UIElement;
      alpha: number;
      alwaysBack: boolean;
      anchorBottom: boolean;
      anchorLeft: boolean;
      anchorRight: boolean;
      anchorTop: boolean;
      bScrollChildren: boolean;
      bScrollWithParent: boolean;
      capture: boolean;
      clickedValue?: string;
      readonly color?: zombie.core.Color;
      defaultDraw: boolean;
      followGameWorld: boolean;
      height: number;
      playerContext: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      visible: boolean;
      width: number;
      x: number;
      y: number;
  
      AddChild(arg0: zombie.ui.UIElement): void;
      BringToTop(arg0: zombie.ui.UIElement): void;
      ButtonClicked(arg0: string): void;
      ClearChildren(): void;
      DrawSubTextureRGBA(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number, arg12: number): void;
      DrawText(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextCentre(arg0: zombie.ui.UIFont, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextRight(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextUntrimmed(arg0: zombie.ui.UIFont, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number): void;
      DrawTextureAngle(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextureCol(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: zombie.core.Color): void;
      DrawTextureColor(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextureIgnoreOffset(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTextureScaled(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
      DrawTextureScaledAspect(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledAspect2(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledCol(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTextureScaledColor(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledUniform(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextureTiled(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureTiledX(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureTiledY(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTexture_FlippedX(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTexture_FlippedXIgnoreOffset(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawUVSliceTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color, arg6: number, arg7: number, arg8: number, arg9: number): void;
      RemoveChild(arg0: zombie.ui.UIElement): void;
      RemoveControl(arg0: zombie.ui.UIElement): void;
      backMost(): void;
      bringToTop(): void;
      clampToParentX(arg0: number): number;
      clampToParentY(arg0: number): number;
      clearMaxDrawHeight(): void;
      clearStencilRect(): void;
      equals(arg0: any): boolean;
      getAbsoluteX(): number;
      getAbsoluteY(): number;
      getClass(): java.lang.Class<any>;
      getClickedValue(): string;
      getControls(): java.util.ArrayList<zombie.ui.UIElement>;
      getHeight(): number;
      getMaxDrawHeight(): number;
      getParent(): zombie.ui.UIElement;
      getPlayerContext(): number;
      getRenderThisPlayerOnly(): number;
      getScrollChildren(): boolean;
      getScrollHeight(): number;
      getScrollWithParent(): boolean;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getUIName(): string;
      getWidth(): number;
      getX(): number;
      getXScroll(): number;
      getXScrolled(arg0: zombie.ui.UIElement): number;
      getY(): number;
      getYScroll(): number;
      getYScrolled(arg0: zombie.ui.UIElement): number;
      hashCode(): number;
      ignoreHeightChange(): void;
      ignoreWidthChange(): void;
      isAnchorBottom(): boolean;
      isAnchorLeft(): boolean;
      isAnchorRight(): boolean;
      isAnchorTop(): boolean;
      isCapture(): boolean;
      isConsumeMouseEvents(): boolean;
      isDefaultDraw(): boolean;
      isEnabled(): boolean;
      isFollowGameWorld(): boolean;
      isForceCursorVisible(): boolean;
      isIgnoreLossControl(): boolean;
      isKeyConsumed(arg0: number): boolean;
      isMouseOver(): boolean;
      isPointOver(arg0: number, arg1: number): boolean;
      isVisible(): boolean;
      isWantKeyEvents(): boolean;
      notify(): void;
      notifyAll(): void;
      onKeyPress(arg0: number): void;
      onKeyRelease(arg0: number): void;
      onKeyRepeat(arg0: number): void;
      onMouseDown(arg0: number, arg1: number): boolean;
      onMouseMove(arg0: number, arg1: number): boolean;
      onMouseMoveOutside(arg0: number, arg1: number): void;
      onMouseUp(arg0: number, arg1: number): boolean;
      onMouseUpOutside(arg0: number, arg1: number): void;
      onMouseWheel(arg0: number): boolean;
      onResize(): void;
      onRightMouseDown(arg0: number, arg1: number): boolean;
      onRightMouseUp(arg0: number, arg1: number): boolean;
      onresize(): void;
      render(): void;
      repaintStencilRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
      resumeStencil(): void;
      setAlwaysOnTop(arg0: boolean): void;
      setAnchorBottom(arg0: boolean): void;
      setAnchorLeft(arg0: boolean): void;
      setAnchorRight(arg0: boolean): void;
      setAnchorTop(arg0: boolean): void;
      setCapture(arg0: boolean): void;
      setClickedValue(arg0: string): void;
      setConsumeMouseEvents(arg0: boolean): void;
      setControls(arg0: java.util.Vector<zombie.ui.UIElement>): void;
      setDefaultDraw(arg0: boolean): void;
      setEnabled(arg0: boolean): void;
      setFollowGameWorld(arg0: boolean): void;
      setForceCursorVisible(arg0: boolean): void;
      setHeight(arg0: number): void;
      setHeightOnly(arg0: number): void;
      setHeightSilent(arg0: number): void;
      setIgnoreLossControl(arg0: boolean): void;
      setMaxDrawHeight(arg0: number): void;
      setParent(arg0: zombie.ui.UIElement): void;
      setPlayerContext(arg0: number): void;
      setRenderClippedChildren(arg0: boolean): void;
      setRenderThisPlayerOnly(arg0: number): void;
      setScrollChildren(arg0: boolean): void;
      setScrollHeight(arg0: number): void;
      setScrollWithParent(arg0: boolean): void;
      setStencilRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setUIName(arg0: string): void;
      setVisible(arg0: boolean): void;
      setWantKeyEvents(arg0: boolean): void;
      setWidth(arg0: number): void;
      setWidthOnly(arg0: number): void;
      setWidthSilent(arg0: number): void;
      setX(arg0: number): void;
      setXScroll(arg0: number): void;
      setY(arg0: number): void;
      setYScroll(arg0: number): void;
      suspendStencil(): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.ui.VehicleGauge extends zombie.ui.UIElement
    export class VehicleGauge {
      private constructor();
      readonly Controls?: java.util.ArrayList<zombie.ui.UIElement>;
      IgnoreLossControl: boolean;
      Parent?: zombie.ui.UIElement;
      alwaysBack: boolean;
      anchorBottom: boolean;
      anchorLeft: boolean;
      anchorRight: boolean;
      anchorTop: boolean;
      bScrollChildren: boolean;
      bScrollWithParent: boolean;
      capture: boolean;
      clickedValue?: string;
      defaultDraw: boolean;
      followGameWorld: boolean;
      height: number;
      playerContext: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      visible: boolean;
      width: number;
      x: number;
      y: number;
  
      AddChild(arg0: zombie.ui.UIElement): void;
      BringToTop(arg0: zombie.ui.UIElement): void;
      ButtonClicked(arg0: string): void;
      ClearChildren(): void;
      DrawSubTextureRGBA(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number, arg12: number): void;
      DrawText(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextCentre(arg0: zombie.ui.UIFont, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextRight(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextUntrimmed(arg0: zombie.ui.UIFont, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number): void;
      DrawTextureAngle(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextureCol(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: zombie.core.Color): void;
      DrawTextureColor(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextureIgnoreOffset(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTextureScaled(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
      DrawTextureScaledAspect(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledAspect2(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledCol(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTextureScaledColor(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledUniform(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextureTiled(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureTiledX(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureTiledY(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTexture_FlippedX(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTexture_FlippedXIgnoreOffset(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawUVSliceTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color, arg6: number, arg7: number, arg8: number, arg9: number): void;
      RemoveChild(arg0: zombie.ui.UIElement): void;
      RemoveControl(arg0: zombie.ui.UIElement): void;
      backMost(): void;
      bringToTop(): void;
      clampToParentX(arg0: number): number;
      clampToParentY(arg0: number): number;
      clearMaxDrawHeight(): void;
      clearStencilRect(): void;
      equals(arg0: any): boolean;
      getAbsoluteX(): number;
      getAbsoluteY(): number;
      getClass(): java.lang.Class<any>;
      getClickedValue(): string;
      getControls(): java.util.ArrayList<zombie.ui.UIElement>;
      getHeight(): number;
      getMaxDrawHeight(): number;
      getParent(): zombie.ui.UIElement;
      getPlayerContext(): number;
      getRenderThisPlayerOnly(): number;
      getScrollChildren(): boolean;
      getScrollHeight(): number;
      getScrollWithParent(): boolean;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getUIName(): string;
      getWidth(): number;
      getX(): number;
      getXScroll(): number;
      getXScrolled(arg0: zombie.ui.UIElement): number;
      getY(): number;
      getYScroll(): number;
      getYScrolled(arg0: zombie.ui.UIElement): number;
      hashCode(): number;
      ignoreHeightChange(): void;
      ignoreWidthChange(): void;
      isAnchorBottom(): boolean;
      isAnchorLeft(): boolean;
      isAnchorRight(): boolean;
      isAnchorTop(): boolean;
      isCapture(): boolean;
      isConsumeMouseEvents(): boolean;
      isDefaultDraw(): boolean;
      isEnabled(): boolean;
      isFollowGameWorld(): boolean;
      isForceCursorVisible(): boolean;
      isIgnoreLossControl(): boolean;
      isKeyConsumed(arg0: number): boolean;
      isMouseOver(): boolean;
      isPointOver(arg0: number, arg1: number): boolean;
      isVisible(): boolean;
      isWantKeyEvents(): boolean;
      notify(): void;
      notifyAll(): void;
      onKeyPress(arg0: number): void;
      onKeyRelease(arg0: number): void;
      onKeyRepeat(arg0: number): void;
      onMouseDown(arg0: number, arg1: number): boolean;
      onMouseMove(arg0: number, arg1: number): boolean;
      onMouseMoveOutside(arg0: number, arg1: number): void;
      onMouseUp(arg0: number, arg1: number): boolean;
      onMouseUpOutside(arg0: number, arg1: number): void;
      onMouseWheel(arg0: number): boolean;
      onResize(): void;
      onRightMouseDown(arg0: number, arg1: number): boolean;
      onRightMouseUp(arg0: number, arg1: number): boolean;
      onresize(): void;
      render(): void;
      repaintStencilRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
      resumeStencil(): void;
      setAlwaysOnTop(arg0: boolean): void;
      setAnchorBottom(arg0: boolean): void;
      setAnchorLeft(arg0: boolean): void;
      setAnchorRight(arg0: boolean): void;
      setAnchorTop(arg0: boolean): void;
      setCapture(arg0: boolean): void;
      setClickedValue(arg0: string): void;
      setConsumeMouseEvents(arg0: boolean): void;
      setControls(arg0: java.util.Vector<zombie.ui.UIElement>): void;
      setDefaultDraw(arg0: boolean): void;
      setEnabled(arg0: boolean): void;
      setFollowGameWorld(arg0: boolean): void;
      setForceCursorVisible(arg0: boolean): void;
      setHeight(arg0: number): void;
      setHeightOnly(arg0: number): void;
      setHeightSilent(arg0: number): void;
      setIgnoreLossControl(arg0: boolean): void;
      setMaxDrawHeight(arg0: number): void;
      setNeedleWidth(arg0: number): void;
      setParent(arg0: zombie.ui.UIElement): void;
      setPlayerContext(arg0: number): void;
      setRenderClippedChildren(arg0: boolean): void;
      setRenderThisPlayerOnly(arg0: number): void;
      setScrollChildren(arg0: boolean): void;
      setScrollHeight(arg0: number): void;
      setScrollWithParent(arg0: boolean): void;
      setStencilRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTexture(arg0: zombie.core.textures.Texture): void;
      setUIName(arg0: string): void;
      setValue(arg0: number): void;
      setVisible(arg0: boolean): void;
      setWantKeyEvents(arg0: boolean): void;
      setWidth(arg0: number): void;
      setWidthOnly(arg0: number): void;
      setWidthSilent(arg0: number): void;
      setX(arg0: number): void;
      setXScroll(arg0: number): void;
      setY(arg0: number): void;
      setYScroll(arg0: number): void;
      suspendStencil(): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.util {
    // zombie.util.AddCoopPlayer extends java.lang.Object
    export class AddCoopPlayer {
      private constructor();
      accessDenied(arg0: number, arg1: string): void;
      accessGranted(arg0: number): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      isFinished(): boolean;
      isLoadingThisSquare(arg0: number, arg1: number): boolean;
      notify(): void;
      notifyAll(): void;
      receivePlayerConnect(arg0: number): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.util.AddCoopPlayer$Stage */
    export class AddCoopPlayer$Stage {
      /* ENUM VALUES */
      static readonly AddToWorld: AddCoopPlayer$Stage; 
      static readonly CheckMapLoading: AddCoopPlayer$Stage; 
      static readonly Finished: AddCoopPlayer$Stage; 
      static readonly Init: AddCoopPlayer$Stage; 
      static readonly ReceiveClientConnect: AddCoopPlayer$Stage; 
      static readonly ReceivePlayerConnect: AddCoopPlayer$Stage; 
      static readonly SendPlayerConnect: AddCoopPlayer$Stage; 
      static readonly StartMapLoading: AddCoopPlayer$Stage; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.util.AddCoopPlayer$Stage[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): AddCoopPlayer$Stage;
      valueOf(arg0: string): zombie.util.AddCoopPlayer$Stage;
      values(): zombie.util.AddCoopPlayer$Stage[];
    }
    // zombie.util.BufferedRandomAccessFile extends java.io.RandomAccessFile
    export class BufferedRandomAccessFile {
      private constructor();
      close(): void;
      equals(arg0: any): boolean;
      getChannel(): java.nio.channels.FileChannel;
      getClass(): java.lang.Class<any>;
      getFD(): java.io.FileDescriptor;
      getFilePointer(): number;
      getNextLine(): string;
      hashCode(): number;
      length(): number;
      notify(): void;
      notifyAll(): void;
      read(arg0: number[]): number;
      readBoolean(): boolean;
      readByte(): number;
      readChar(): string;
      readDouble(): number;
      readFloat(): number;
      readFully(arg0: number[]): void;
      readInt(): number;
      readLine(): string;
      readLong(): number;
      readShort(): number;
      readUTF(): string;
      readUnsignedByte(): number;
      readUnsignedShort(): number;
      seek(arg0: number): void;
      setLength(arg0: number): void;
      skipBytes(arg0: number): number;
      toString(): string;
      wait(arg0: number): void;
      write(arg0: number[]): void;
      writeBoolean(arg0: boolean): void;
      writeByte(arg0: number): void;
      writeBytes(arg0: string): void;
      writeChar(arg0: number): void;
      writeChars(arg0: string): void;
      writeDouble(arg0: number): void;
      writeFloat(arg0: number): void;
      writeInt(arg0: number): void;
      writeLong(arg0: number): void;
      writeShort(arg0: number): void;
      writeUTF(arg0: string): void;
    }
    // zombie.util.IPooledObject
    export class IPooledObject {
      private constructor();
      getPool(): zombie.util.Pool<zombie.util.IPooledObject>;
      isFree(): boolean;
      onReleased(): void;
      release(arg0: java.util.List<zombie.util.IPooledObject>): void;
      releaseAndBlank(arg0: zombie.util.IPooledObject[]): void;
      setFree(arg0: boolean): void;
      setPool(arg0: zombie.util.Pool<zombie.util.IPooledObject>): void;
      tryReleaseAndBlank(arg0: zombie.util.IPooledObject[]): void;
    }
    // zombie.util.PZCalendar extends java.lang.Object
    export class PZCalendar {
      private constructor();
      equals(arg0: any): boolean;
      get(arg0: number): number;
      getClass(): java.lang.Class<any>;
      getInstance(): zombie.util.PZCalendar;
      getTime(): java.util.Date;
      getTimeInMillis(): number;
      hashCode(): number;
      isLeapYear(arg0: number): boolean;
      notify(): void;
      notifyAll(): void;
      set(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      setTimeInMillis(arg0: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.util.Pool extends java.lang.Object
    export class Pool<PO> {
      private constructor();
      alloc(): PO;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      release(arg0: zombie.util.IPooledObject): void;
      toString(): string;
      tryRelease<E>(arg0: E): E;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.util.list {
    // zombie.util.list.PZArrayList extends java.util.AbstractList<E>
    export class PZArrayList<E> {
      private constructor();
      add(arg0: number, arg1: E): void;
      addAll(arg0: java.util.Collection<any>): boolean;
      clear(): void;
      contains(arg0: any): boolean;
      containsAll(arg0: java.util.Collection<any>): boolean;
      emptyList<E>(): java.util.AbstractList<E>;
      equals(arg0: any): boolean;
      forEach(arg0: java.util._function.Consumer<any>): void;
      get(arg0: number): E;
      getClass(): java.lang.Class<any>;
      getElements(): E[];
      hashCode(): number;
      indexOf(arg0: any): number;
      isEmpty(): boolean;
      iterator(): java.util.Iterator<E>;
      lastIndexOf(arg0: any): number;
      listIterator(): java.util.ListIterator<E>;
      notify(): void;
      notifyAll(): void;
      parallelStream(): java.util.stream.Stream<any>;
      remove(arg0: number): E;
      removeAll(arg0: java.util.Collection<any>): boolean;
      removeIf(arg0: java.util._function.Predicate<any>): boolean;
      replaceAll(arg0: java.util._function.UnaryOperator<any>): void;
      retainAll(arg0: java.util.Collection<any>): boolean;
      set(arg0: number, arg1: E): E;
      size(): number;
      sort(arg0: java.util.Comparator<any>): void;
      spliterator(): java.util.Spliterator<any>;
      stream(): java.util.stream.Stream<any>;
      subList(arg0: number, arg1: number): java.util.List<any>;
      toArray<T>(arg0: java.util._function.IntFunction<T[]>): T[];
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.vehicles {
    // zombie.vehicles.BaseVehicle extends zombie.iso.IsoMovingObject
    export class BaseVehicle {
      private constructor();
      AttachedAnimSprite?: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      static CENTER_OF_MASS_MAGIC: number;
      static readonly FADE_DISTANCE: number;
      static LowLightingQualityHack: boolean;
      static readonly MASK1_DOOR_LEFT_FRONT: number;
      static readonly MASK1_DOOR_LEFT_REAR: number;
      static readonly MASK1_DOOR_RIGHT_FRONT: number;
      static readonly MASK1_DOOR_RIGHT_REAR: number;
      static readonly MASK1_FRONT: number;
      static readonly MASK1_GUARD_LEFT_FRONT: number;
      static readonly MASK1_GUARD_LEFT_REAR: number;
      static readonly MASK1_GUARD_RIGHT_FRONT: number;
      static readonly MASK1_GUARD_RIGHT_REAR: number;
      static readonly MASK1_REAR: number;
      static readonly MASK1_WINDOW_FRONT: number;
      static readonly MASK1_WINDOW_LEFT_FRONT: number;
      static readonly MASK1_WINDOW_LEFT_REAR: number;
      static readonly MASK1_WINDOW_REAR: number;
      static readonly MASK1_WINDOW_RIGHT_FRONT: number;
      static readonly MASK1_WINDOW_RIGHT_REAR: number;
      static readonly MASK2_BOOT: number;
      static readonly MASK2_BRAKE_LEFT: number;
      static readonly MASK2_BRAKE_RIGHT: number;
      static readonly MASK2_HOOD: number;
      static readonly MASK2_LIGHTBAR_LEFT: number;
      static readonly MASK2_LIGHTBAR_RIGHT: number;
      static readonly MASK2_LIGHT_LEFT_FRONT: number;
      static readonly MASK2_LIGHT_LEFT_REAR: number;
      static readonly MASK2_LIGHT_RIGHT_FRONT: number;
      static readonly MASK2_LIGHT_RIGHT_REAR: number;
      static readonly MASK2_ROOF: number;
      static readonly MAX_WALL_SPLATS: number;
      static readonly MAX_WHEELS: number;
      static readonly MAX_ZOMBIES_EATING: number;
      NoPicking: boolean;
      static readonly OBF_Blink: number;
      static readonly OBF_HighlightRenderOnce: number;
      static readonly OBF_Highlighted: number;
      OutlineOnMouseover: boolean;
      static readonly PHYSICS_PARAM_COUNT: number;
      static readonly PHYSICS_Z_SCALE: number;
      static PLUS_RADIUS: number;
      static readonly RADIUS: number;
      static readonly RANDOMIZE_CONTAINER_CHANCE: number;
      static RENDER_TO_TEXTURE: boolean;
      static readonly TL_matrix4f_pool?: java.lang.ThreadLocal<zombie.vehicles.BaseVehicle$Matrix4fObjectPool>;
      static readonly TL_quaternionf_pool?: java.lang.ThreadLocal<zombie.vehicles.BaseVehicle$QuaternionfObjectPool>;
      static readonly TL_vector2_pool?: java.lang.ThreadLocal<zombie.vehicles.BaseVehicle$Vector2ObjectPool>;
      static readonly TL_vector2f_pool?: java.lang.ThreadLocal<zombie.vehicles.BaseVehicle$Vector2fObjectPool>;
      static readonly TL_vector3f_pool?: java.lang.ThreadLocal<zombie.vehicles.BaseVehicle$Vector3fObjectPool>;
      VehicleID: number;
      static readonly YURI_FORCE_FIELD: boolean;
      addedToWorld: boolean;
      authSimulationHash: number;
      authSimulationTime: number;
      static readonly authorizationOnServer: number;
      static readonly authorizationOwner: number;
      static readonly authorizationServerOwner: number;
      static readonly authorizationServerSimulation: number;
      static readonly authorizationSimulation: number;
      bAlphaForced: boolean;
      bNeverDoneAlpha: boolean;
      readonly bOutline?: boolean[];
      static bmod: number;
      chunk?: zombie.iso.IsoChunk;
      collideX: number;
      collideY: number;
      colorHue: number;
      colorSaturation: number;
      colorValue: number;
      readonly connectionState?: zombie.vehicles.BaseVehicle$ServerVehicleState[];
      constraintTowing: number;
      container?: zombie.inventory.ItemContainer;
      currentFrontEndDurability: number;
      currentRearEndDurability: number;
      def?: zombie.iso.sprite.IsoSpriteInstance;
      dir?: zombie.iso.IsoDirections;
      doNotSync: boolean;
      emitter?: zombie.audio.BaseSoundEmitter;
      engineLastUpdateStateTime: number;
      engineSoundIndex: number;
      engineSpeed: number;
      engineState?: zombie.vehicles.BaseVehicle$engineStateTypes;
      forcedFriction: number;
      frontEndDurability: number;
      static gmod: number;
      hasExtendOffset: boolean;
      hasExtendOffsetExiting: boolean;
      headlightsOn: boolean;
      highlightFlags: number;
      hornemitter?: zombie.audio.BaseSoundEmitter;
      interpolation?: zombie.vehicles.VehicleInterpolation;
      jniIsCollide: boolean;
      readonly jniLinearVelocity?: org.joml.Vector3f;
      jniSpeed: number;
      readonly jniTransform?: zombie.core.physics.Transform;
      justBreakConstraintTimer: number;
      keyId: number;
      keySpawned: number;
      last?: zombie.iso.IsoGridSquare;
      static lastRendered?: zombie.iso.IsoObject;
      static lastRenderedRendered?: zombie.iso.IsoObject;
      readonly lightbarLightsMode?: zombie.vehicles.LightbarLightsMode;
      readonly lightbarSirenMode?: zombie.vehicles.LightbarSirenMode;
      lx: number;
      ly: number;
      lz: number;
      readonly models?: java.util.ArrayList<zombie.vehicles.BaseVehicle$ModelInfo>;
      name?: string;
      readonly netLinearVelocity?: org.joml.Vector3f;
      netPlayerAuthorization: number;
      netPlayerId: number;
      netPlayerTimeout: number;
      readonly new_EngineSoundId?: number[];
      noDamage: boolean;
      nx: number;
      ny: number;
      offsetX: number;
      offsetY: number;
      readonly outlineColor?: zombie.core.textures.ColorInfo[];
      overlaySprite?: zombie.iso.sprite.IsoSprite;
      overlaySpriteColor?: zombie.core.textures.ColorInfo;
      partialThumpDmg: number;
      physicActiveCheck: number;
      polyDirty: boolean;
      ramSound: number;
      ramSoundTime: number;
      rearEndDurability: number;
      readonly renderTransform?: org.joml.Matrix4f;
      rerouteCollide?: zombie.iso.IsoObject;
      rerouteMask?: zombie.iso.IsoObject;
      static rmod: number;
      rust: number;
      savedPhysicsZ: number;
      readonly savedRot?: org.joml.Quaternionf;
      serverRemovedFromWorld: boolean;
      readonly shadowCoord?: zombie.vehicles.PolygonalMap2$VehiclePoly;
      sheetRope: boolean;
      sheetRopeHealth: number;
      skidSound: number;
      skidding: boolean;
      soundBackMoveOn: boolean;
      soundHornOn: boolean;
      soundSirenSignal: number;
      specificDistributionId?: string;
      sprite?: zombie.iso.sprite.IsoSprite;
      spriteName?: string;
      sqlID: number;
      square?: zombie.iso.IsoGridSquare;
      startTime: number;
      stoplightsOn: boolean;
      sx: number;
      sy: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      throttle: number;
      tintb: number;
      tintg: number;
      tintr: number;
      trace: boolean;
      readonly transmissionChangeTime?: zombie.core.utils.UpdateLimit;
      transmissionNumber?: zombie.vehicles.TransmissionNumber;
      static treeSoundMgr?: zombie.iso.IsoMovingObject$TreeSoundManager;
      static vehicleShadow?: zombie.core.textures.Texture;
      readonly vehicleTransform?: org.joml.Matrix4f;
      waitFullUpdate: boolean;
      wallBloodSplats?: java.util.ArrayList<zombie.iso.IsoWallBloodSplat>;
      wasTowedBy?: zombie.vehicles.BaseVehicle;
      readonly wheelInfo?: zombie.vehicles.BaseVehicle$WheelInfo[];
      windowLightsOn: boolean;
      x: number;
      y: number;
      z: number;
  
      ApplyImpulse(arg0: zombie.iso.IsoObject, arg1: number): void;
      ApplyImpulse4Break(arg0: zombie.iso.IsoObject, arg1: number): void;
      AttachAnim(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: boolean, arg7: number, arg8: boolean, arg9: number, arg10: zombie.core.textures.ColorInfo): void;
      AttachExistingAnim(arg0: zombie.iso.sprite.IsoSprite, arg1: number, arg2: number, arg3: boolean, arg4: number, arg5: boolean, arg6: number, arg7: zombie.core.textures.ColorInfo): void;
      AttackObject(arg0: zombie.characters.IsoGameCharacter): void;
      Collision(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject): void;
      Damage(arg0: number): void;
      Despawn(): void;
      DirtySlice(): void;
      DistTo(arg0: number, arg1: number): number;
      DistToProper(arg0: zombie.iso.IsoObject): number;
      DistToSquared(arg0: zombie.iso.IsoMovingObject): number;
      DoCollideNorS(): void;
      DoCollideWorE(): void;
      DoSpecialTooltip(arg0: zombie.ui.ObjectTooltip, arg1: zombie.iso.IsoGridSquare): void;
      DoTooltip(arg0: zombie.ui.ObjectTooltip): void;
      FindExternalWaterSource(arg0: number, arg1: number, arg2: number): zombie.iso.IsoObject;
      FindWaterSourceOnSquare(arg0: zombie.iso.IsoGridSquare): zombie.iso.IsoObject;
      GetVehicleSlowFactor(arg0: zombie.vehicles.BaseVehicle): number;
      HasTooltip(): boolean;
      Hit(arg0: zombie.iso.Vector2, arg1: zombie.iso.IsoObject, arg2: number): void;
      HitByVehicle(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      LoadAllVehicleTextures(): void;
      LoadVehicleTexture(arg0: string): zombie.core.textures.Texture;
      LoadVehicleTextures(arg0: zombie.scripting.objects.VehicleScript): void;
      Move(arg0: zombie.iso.Vector2): void;
      MoveUnmodded(arg0: zombie.iso.Vector2): void;
      RemoveAttachedAnim(arg0: number): void;
      RemoveAttachedAnims(): void;
      Serialize(): boolean;
      SetName(arg0: string): void;
      TestCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestPathfindCollide(arg0: zombie.iso.IsoMovingObject, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoGridSquare): boolean;
      TestVision(arg0: zombie.iso.IsoGridSquare, arg1: zombie.iso.IsoGridSquare): zombie.iso.IsoObject$VisionResult;
      Thump(arg0: zombie.iso.IsoMovingObject): void;
      UnCollision(arg0: zombie.iso.IsoObject): void;
      WeaponHit(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      addChild(arg0: zombie.iso.IsoObject): void;
      addDamageFrontHitAChr(arg0: number): void;
      addDamageRearHitAChr(arg0: number): void;
      addHingeConstraint(arg0: zombie.vehicles.BaseVehicle, arg1: string, arg2: string): void;
      addImpulse(arg0: org.joml.Vector3f, arg1: org.joml.Vector3f): void;
      addKeyToGloveBox(): void;
      addKeyToSquare(arg0: zombie.iso.IsoGridSquare): boolean;
      addKeyToWorld(): void;
      addPointConstraint(arg0: zombie.vehicles.BaseVehicle, arg1: string, arg2: string, arg3: number, arg4: boolean): void;
      addRandomDamageFromCrash(arg0: zombie.characters.IsoGameCharacter, arg1: number): void;
      addSecondaryContainer(arg0: zombie.inventory.ItemContainer): void;
      addSheetRope(arg0: zombie.characters.IsoPlayer, arg1: string): boolean;
      addToWorld(): void;
      allocVector2(): zombie.iso.Vector2;
      allocVector3f(): org.joml.Vector3f;
      areAllDoorsLocked(): boolean;
      areaPositionWorld(arg0: zombie.scripting.objects.VehicleScript$Area, arg1: zombie.iso.Vector2): zombie.iso.Vector2;
      areaPositionWorld4PlayerInteract(arg0: zombie.scripting.objects.VehicleScript$Area, arg1: zombie.iso.Vector2): zombie.iso.Vector2;
      attachmentExist(arg0: string): boolean;
      authorizationClientForecast(arg0: boolean): void;
      authorizationServerCollide(arg0: number, arg1: boolean): void;
      authorizationServerOnOwnerData(arg0: zombie.core.raknet.UdpConnection): boolean;
      authorizationServerOnSeat(): void;
      authorizationServerUpdate(): void;
      blocked(arg0: number, arg1: number, arg2: number): boolean;
      breakConstraint(arg0: boolean, arg1: boolean): void;
      brekingObjects(): void;
      calculateDamageWithCharacter(arg0: zombie.characters.IsoGameCharacter): number;
      canAccessContainer(arg0: number, arg1: zombie.characters.IsoGameCharacter): boolean;
      canAddSheetRope(): boolean;
      canAttachTrailer(arg0: zombie.vehicles.BaseVehicle, arg1: string, arg2: string): boolean;
      canHaveMultipleHits(): number;
      canInstallPart(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.vehicles.VehiclePart): boolean;
      canLockDoor(arg0: zombie.vehicles.VehiclePart, arg1: zombie.characters.IsoGameCharacter): boolean;
      canSwitchSeat(arg0: number, arg1: number): boolean;
      canUninstallPart(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.vehicles.VehiclePart): boolean;
      canUnlockDoor(arg0: zombie.vehicles.VehiclePart, arg1: zombie.characters.IsoGameCharacter): boolean;
      changeTransmission(arg0: zombie.vehicles.TransmissionNumber): void;
      cheatHotwire(arg0: boolean, arg1: boolean): void;
      checkCollision(arg0: zombie.characters.IsoGameCharacter): zombie.vehicles.BaseVehicle$HitVars;
      checkHaveElectricity(): void;
      checkPhysicsValidWithServer(): void;
      chooseBestAttackPosition(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.IsoGameCharacter, arg2: org.joml.Vector3f): org.joml.Vector3f;
      circleIntersects(arg0: number, arg1: number, arg2: number, arg3: number): boolean;
      cleanWallBlood(): void;
      clearAttachedAnimSprite(): void;
      clearPassenger(arg0: number): boolean;
      collideWith(arg0: zombie.iso.IsoObject): void;
      compareToY(arg0: zombie.iso.IsoMovingObject): number;
      constraintChanged(): void;
      couldCrawlerAttackPassenger(arg0: zombie.characters.IsoGameCharacter): boolean;
      countAddSheetRope(): number;
      crash(arg0: number, arg1: boolean): void;
      createContainersFromSpriteProperties(): void;
      createPhysics(): void;
      createVehicleKey(): zombie.inventory.InventoryItem;
      customHashCode(): number;
      damageObjects(arg0: number): void;
      damagePlayers(arg0: number): void;
      debugPrintout(): void;
      debugSetStatic(arg0: boolean): void;
      destroyFence(arg0: zombie.iso.IsoDirections): void;
      distToNearestCamCharacter(): number;
      doBloodOverlay(): void;
      doChrHitImpulse(arg0: zombie.iso.IsoObject): void;
      doDamageOverlay(): void;
      doFindExternalWaterSource(): void;
      doStairs(): void;
      drainBatteryUpdateHack(): void;
      drawDirectionLine(arg0: zombie.iso.Vector2, arg1: number, arg2: number, arg3: number, arg4: number): void;
      engineDoIdle(): void;
      engineDoRetryingStarting(): void;
      engineDoRunning(): void;
      engineDoShuttingDown(): void;
      engineDoStalling(): void;
      engineDoStarting(): void;
      engineDoStartingFailed(): void;
      engineDoStartingFailedNoPower(): void;
      engineDoStartingSuccess(): void;
      ensureOnTile(): void;
      enter(arg0: number, arg1: zombie.characters.IsoGameCharacter, arg2: org.joml.Vector3f): boolean;
      enterRSync(arg0: number, arg1: zombie.characters.IsoGameCharacter, arg2: zombie.vehicles.BaseVehicle): boolean;
      equals(arg0: any): boolean;
      exit(arg0: zombie.characters.IsoGameCharacter): boolean;
      exitRSync(arg0: zombie.characters.IsoGameCharacter): boolean;
      factoryClassFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): java.lang.Class<any>;
      factoryFromFileInput(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryFromFileInput_OLD(arg0: zombie.iso.IsoCell, arg1: number): zombie.iso.IsoObject;
      factoryGetClassID(arg0: string): number;
      fixLightbarModelLighting(arg0: zombie.iso.IsoLightSource, arg1: org.joml.Vector3f): void;
      flipUpright(): void;
      getAlpha(arg0: number): number;
      getAngleX(): number;
      getAngleY(): number;
      getAngleZ(): number;
      getAnimationPlayer(): zombie.core.skinnedmodel.animation.AnimationPlayer;
      getAreaCenter(arg0: string): zombie.iso.Vector2;
      getAreaDist(arg0: string, arg1: zombie.characters.IsoGameCharacter): number;
      getAttachedAnimSprite(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getAttachmentLocalPos(arg0: string, arg1: org.joml.Vector3f): org.joml.Vector3f;
      getAttachmentWorldPos(arg0: string, arg1: org.joml.Vector3f): org.joml.Vector3f;
      getBaseQuality(): number;
      getBattery(): zombie.vehicles.VehiclePart;
      getBatteryCharge(): number;
      getBestSeat(arg0: zombie.characters.IsoGameCharacter): number;
      getBloodIntensity(arg0: string): number;
      getBrakeSpeedBetweenUpdate(): number;
      getBrakingForce(): number;
      getBuilding(): zombie.iso.areas.IsoBuilding;
      getBumpedType(arg0: zombie.characters.IsoGameCharacter): string;
      getCell(): zombie.iso.IsoCell;
      getCharacter(arg0: number): zombie.characters.IsoGameCharacter;
      getChildSprites(): java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>;
      getChoosenParts(): java.util.HashMap<string, string>;
      getClass(): java.lang.Class<any>;
      getClientForce(): number;
      getClosestWindow(arg0: zombie.characters.IsoGameCharacter): zombie.vehicles.VehiclePart;
      getCollideType(): string;
      getCollidedObject(): zombie.iso.IsoObject;
      getColorHue(): number;
      getColorSaturation(): number;
      getColorValue(): number;
      getContainer(): zombie.inventory.ItemContainer;
      getContainerByEitherType(arg0: string, arg1: string): zombie.inventory.ItemContainer;
      getContainerByIndex(arg0: number): zombie.inventory.ItemContainer;
      getContainerByType(arg0: string): zombie.inventory.ItemContainer;
      getContainerCount(): number;
      getContainerIndex(arg0: zombie.inventory.ItemContainer): number;
      getController(): zombie.core.physics.CarController;
      getCurrentBuilding(): zombie.iso.areas.IsoBuilding;
      getCurrentKey(): zombie.inventory.InventoryItem;
      getCurrentSpeedForRegulator(): number;
      getCurrentSpeedKmHour(): number;
      getCurrentSquare(): zombie.iso.IsoGridSquare;
      getCurrentSteering(): number;
      getCurrentZone(): zombie.iso.IsoMetaGrid$Zone;
      getCustomColor(): zombie.core.textures.ColorInfo;
      getDamage(): number;
      getDebugZ(): number;
      getDir(): zombie.iso.IsoDirections;
      getDistanceSq(arg0: zombie.iso.IsoMovingObject): number;
      getDriver(): zombie.characters.IsoGameCharacter;
      getEatingZombies(): java.util.ArrayList<zombie.characters.IsoZombie>;
      getEmitter(): zombie.audio.BaseSoundEmitter;
      getEngineLoudness(): number;
      getEnginePower(): number;
      getEngineQuality(): number;
      getEngineSpeed(): number;
      getFMODParameters(): zombie.audio.FMODParameterList;
      getFacingPosition(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFacingPositionAlt(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getFactoryVehicle(): zombie.iso.IsoObject$IsoObjectFactory;
      getFakeSpeedModifier(): number;
      getFeelerTile(arg0: number): zombie.iso.IsoGridSquare;
      getFeelersize(): number;
      getForwardVector(arg0: org.joml.Vector3f): org.joml.Vector3f;
      getFudgedMass(): number;
      getFuturWalkedSquare(): zombie.iso.IsoGridSquare;
      getGlobalMovementMod(arg0: boolean): number;
      getHeadlightCanEmmitLight(): boolean;
      getHeadlightsOn(): boolean;
      getHeater(): zombie.vehicles.VehiclePart;
      getHighlightColor(): zombie.core.textures.ColorInfo;
      getHitDir(): zombie.iso.Vector2;
      getHitForce(): number;
      getHitFromAngle(): number;
      getID(): number;
      getIDCount(): number;
      getId(): number;
      getImpulsex(): number;
      getImpulsey(): number;
      getInitialMass(): number;
      getInsideTemperature(): number;
      getIsSurfaceNormalOffset(): boolean;
      getItemContainer(): zombie.inventory.ItemContainer;
      getJoypad(): number;
      getKeyId(): number;
      getKeySpawned(): boolean;
      getLastCollideTime(): number;
      getLastRendered(): zombie.iso.IsoObject;
      getLastRenderedRendered(): zombie.iso.IsoObject;
      getLastSquare(): zombie.iso.IsoGridSquare;
      getLastTargettedBy(): zombie.characters.IsoZombie;
      getLightByIndex(arg0: number): zombie.vehicles.VehiclePart;
      getLightCount(): number;
      getLightbarLightsMode(): number;
      getLightbarSirenMode(): number;
      getLimpulsex(): number;
      getLimpulsey(): number;
      getLinearVelocity(arg0: org.joml.Vector3f): org.joml.Vector3f;
      getLocalPos(arg0: org.joml.Vector3f, arg1: org.joml.Vector3f): org.joml.Vector3f;
      getLx(): number;
      getLy(): number;
      getLz(): number;
      getMaskClickedY(arg0: number, arg1: number, arg2: boolean): number;
      getMass(): number;
      getMasterRegion(): zombie.iso.areas.isoregion.regions.IWorldRegion;
      getMaxPassengers(): number;
      getMaxSpeed(): number;
      getMechanicalID(): number;
      getMinMaxPosition(): zombie.vehicles.BaseVehicle$MinMaxPosition;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getMovementLastFrame(): zombie.iso.Vector2;
      getMovingObjectIndex(): number;
      getName(): string;
      getNearestBodyworkPart(arg0: zombie.characters.IsoGameCharacter): zombie.vehicles.VehiclePart;
      getNew(): zombie.iso.IsoObject;
      getNoDamage(): boolean;
      getNumberOfPartsWithContainers(): number;
      getNx(): number;
      getNy(): number;
      getObjectIndex(): number;
      getObjectName(): string;
      getObjectRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getObjectRenderEffectsToApply(): zombie.iso.objects.ObjectRenderEffects;
      getOffroadEfficiency(): number;
      getOffsetX(): number;
      getOffsetY(): number;
      getOutlineHighlightCol(arg0: number): number;
      getOutlineThickness(): number;
      getOverlaySprite(): zombie.iso.sprite.IsoSprite;
      getOverlaySpriteColor(): zombie.core.textures.ColorInfo;
      getPartById(arg0: string): zombie.vehicles.VehiclePart;
      getPartByIndex(arg0: number): zombie.vehicles.VehiclePart;
      getPartCount(): number;
      getPartForSeatContainer(arg0: number): zombie.vehicles.VehiclePart;
      getPassenger(arg0: number): zombie.vehicles.BaseVehicle$Passenger;
      getPassengerAnim(arg0: number, arg1: string): zombie.scripting.objects.VehicleScript$Anim;
      getPassengerArea(arg0: number): string;
      getPassengerDoor(arg0: number): zombie.vehicles.VehiclePart;
      getPassengerDoor2(arg0: number): zombie.vehicles.VehiclePart;
      getPassengerLocalPos(arg0: number, arg1: org.joml.Vector3f): org.joml.Vector3f;
      getPassengerPosition(arg0: number, arg1: string): zombie.scripting.objects.VehicleScript$Position;
      getPassengerPositionWorldPos(arg0: zombie.scripting.objects.VehicleScript$Position, arg1: org.joml.Vector3f): org.joml.Vector3f;
      getPassengerSwitchSeat(arg0: number, arg1: number): zombie.scripting.objects.VehicleScript$Passenger$SwitchSeat;
      getPassengerSwitchSeatCount(arg0: number): number;
      getPassengerWorldPos(arg0: number, arg1: org.joml.Vector3f): org.joml.Vector3f;
      getPathFindIndex(): number;
      getPipedFuelAmount(): number;
      getPlayerTrailerLocalPos(arg0: string, arg1: boolean, arg2: org.joml.Vector3f): org.joml.Vector3f;
      getPlayerTrailerWorldPos(arg0: string, arg1: boolean, arg2: org.joml.Vector3f): org.joml.Vector3f;
      getPoly(): zombie.vehicles.PolygonalMap2$VehiclePoly;
      getPolyPlusRadius(): zombie.vehicles.PolygonalMap2$VehiclePoly;
      getPosition(arg0: zombie.iso.Vector3): zombie.iso.Vector3;
      getProperties(): zombie.core.properties.PropertyContainer;
      getRegulatorSpeed(): number;
      getRemainingFuelPercentage(): number;
      getRenderEffectMaster(): zombie.iso.IsoObject;
      getRenderYOffset(): number;
      getRerouteCollide(): zombie.iso.IsoObject;
      getRerouteMask(): zombie.iso.IsoObject;
      getRerouteMaskObject(): zombie.iso.IsoObject;
      getRust(): number;
      getScreenX(): number;
      getScreenY(): number;
      getScript(): zombie.scripting.objects.VehicleScript;
      getScriptModule(): string;
      getScriptName(): string;
      getScriptnx(): number;
      getScriptny(): number;
      getSeat(arg0: zombie.characters.IsoGameCharacter): number;
      getShadowTexture(): zombie.core.textures.Texture;
      getSirenStartTime(): number;
      getSkin(): string;
      getSkinCount(): number;
      getSkinIndex(): number;
      getSpecialObjectIndex(): number;
      getSpeed2D(): number;
      getSprite(): zombie.iso.sprite.IsoSprite;
      getSpriteGridObjects(arg0: java.util.ArrayList<zombie.iso.IsoObject>): void;
      getSpriteName(): string;
      getSqlId(): number;
      getSquare(): zombie.iso.IsoGridSquare;
      getStateEventDelayTimer(): number;
      getStaticMovingObjectIndex(): number;
      getStoplightsOn(): boolean;
      getSurfaceNormalOffset(): number;
      getSurfaceOffset(): number;
      getSurfaceOffsetNoTable(): number;
      getSurroundVehicle(): zombie.vehicles.SurroundVehicle;
      getSwitchSeatAnimName(arg0: number, arg1: number): string;
      getSwitchSeatAnimRate(arg0: number, arg1: number): number;
      getSwitchSeatSound(arg0: number, arg1: number): string;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getTargetAlpha(arg0: number): number;
      getTextureName(): string;
      getThumpCondition(): number;
      getThumpTarget(): zombie.iso.objects.interfaces.Thumpable;
      getThumpableFor(arg0: zombie.characters.IsoGameCharacter): zombie.iso.objects.interfaces.Thumpable;
      getTile(): string;
      getTimeSinceZombieAttack(): number;
      getTowAttachmentOther(): string;
      getTowAttachmentSelf(): string;
      getTowedByLocalPos(arg0: string, arg1: org.joml.Vector3f): org.joml.Vector3f;
      getTowedByWorldPos(arg0: string, arg1: org.joml.Vector3f): org.joml.Vector3f;
      getTowingLocalPos(arg0: string, arg1: org.joml.Vector3f): org.joml.Vector3f;
      getTowingWorldPos(arg0: string, arg1: org.joml.Vector3f): org.joml.Vector3f;
      getTransmissionNumber(): number;
      getTransmissionNumberLetter(): string;
      getType(): zombie.iso.SpriteDetails.IsoObjectType;
      getUpVector(arg0: org.joml.Vector3f): org.joml.Vector3f;
      getUpVectorDot(): number;
      getUseablePart(arg0: zombie.characters.IsoGameCharacter, arg1: boolean): zombie.vehicles.VehiclePart;
      getUsesExternalWaterSource(): boolean;
      getVectorFromDirection(arg0: zombie.iso.Vector2): zombie.iso.Vector2;
      getVehicleEngineRPM(): zombie.vehicles.VehicleEngineRPM;
      getVehicleTowedBy(): zombie.vehicles.BaseVehicle;
      getVehicleTowing(): zombie.vehicles.BaseVehicle;
      getVehicleType(): string;
      getWaterAmount(): number;
      getWaterMax(): number;
      getWeight(): number;
      getWheelForwardVector(arg0: number, arg1: org.joml.Vector3f): void;
      getWidth(): number;
      getWindRenderEffects(): zombie.iso.objects.ObjectRenderEffects;
      getWindowLightsOn(): boolean;
      getWorldObjectIndex(): number;
      getWorldPos(arg0: org.joml.Vector3f, arg1: org.joml.Vector3f): org.joml.Vector3f;
      getWorldTransform(arg0: zombie.core.physics.Transform): zombie.core.physics.Transform;
      getX(): number;
      getY(): number;
      getZ(): number;
      getZone(): string;
      hasBackSignal(): boolean;
      hasExternalWaterSource(): boolean;
      hasHeadlights(): boolean;
      hasHorn(): boolean;
      hasLightbar(): boolean;
      hasModData(): boolean;
      hasRoof(arg0: number): boolean;
      hasWater(): boolean;
      hashCode(): number;
      haveOneDoorUnlocked(): boolean;
      haveSheetRope(): boolean;
      haveSpecialTooltip(): boolean;
      hitCharacter(arg0: zombie.characters.IsoZombie): void;
      hitVehicle(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.inventory.types.HandWeapon): void;
      isAlarmed(): boolean;
      isAlphaAndTargetZero(arg0: number): boolean;
      isAlphaZero(arg0: number): boolean;
      isAnyDoorLocked(): boolean;
      isAnyListenerInside(): boolean;
      isAtRest(): boolean;
      isBackSignalEmitting(): boolean;
      isBlink(): boolean;
      isBraking(): boolean;
      isCharacter(): boolean;
      isCharacterAdjacentTo(arg0: zombie.characters.IsoGameCharacter): boolean;
      isCloseKilled(): boolean;
      isCollidable(): boolean;
      isCollided(): boolean;
      isCollidedE(): boolean;
      isCollidedN(): boolean;
      isCollidedS(): boolean;
      isCollidedThisFrame(): boolean;
      isCollidedW(): boolean;
      isCollidedWithDoor(): boolean;
      isCollidedWithVehicle(): boolean;
      isDestroyed(): boolean;
      isDoColor(): boolean;
      isDoingOffroad(): boolean;
      isDriveable(): boolean;
      isDriver(arg0: zombie.characters.IsoGameCharacter): boolean;
      isEatingOther(arg0: zombie.iso.IsoMovingObject): boolean;
      isEngineRunning(): boolean;
      isEngineStarted(): boolean;
      isEngineWorking(): boolean;
      isEnterBlocked(arg0: zombie.characters.IsoGameCharacter, arg1: number): boolean;
      isEnterBlocked2(arg0: zombie.characters.IsoGameCharacter, arg1: number): boolean;
      isExistInTheWorld(): boolean;
      isExitBlocked(arg0: zombie.characters.IsoGameCharacter, arg1: number): boolean;
      isExitBlocked2(arg0: number): boolean;
      isFirstUpdate(): boolean;
      isFloor(): boolean;
      isGoodCar(): boolean;
      isHighlighted(): boolean;
      isHoppable(): boolean;
      isHotwired(): boolean;
      isHotwiredBroken(): boolean;
      isInArea(arg0: string, arg1: zombie.characters.IsoGameCharacter): boolean;
      isInBounds(arg0: number, arg1: number): boolean;
      isInForest(): boolean;
      isIntersectingSquare(arg0: number, arg1: number, arg2: number): boolean;
      isIntersectingSquareWithShadow(arg0: number, arg1: number, arg2: number): boolean;
      isInvalidChunkAhead(): boolean;
      isInvalidChunkAround(): boolean;
      isInvalidChunkBehind(): boolean;
      isItemAllowedInContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isKeyIsOnDoor(): boolean;
      isKeyboardControlled(): boolean;
      isKeysInIgnition(): boolean;
      isLocalPhysicSim(): boolean;
      isMaskClicked(arg0: number, arg1: number, arg2: boolean): boolean;
      isMechanicUIOpen(): boolean;
      isMovedThumpable(): boolean;
      isNoPicking(): boolean;
      isNorthHoppable(): boolean;
      isOnFloor(): boolean;
      isOperational(): boolean;
      isOutlineHighlight(): boolean;
      isOutlineHlAttached(arg0: number): boolean;
      isOutlineHlBlink(): boolean;
      isOutlineOnMouseover(): boolean;
      isPassengerUseDoor2(arg0: zombie.characters.IsoGameCharacter, arg1: number): boolean;
      isPositionOnLeftOrRight(arg0: number, arg1: number): boolean;
      isPushableForSeparate(): boolean;
      isPushedByForSeparate(arg0: zombie.iso.IsoMovingObject): boolean;
      isRegulator(): boolean;
      isRemoveItemAllowedFromContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.inventory.InventoryItem): boolean;
      isRemovedFromWorld(): boolean;
      isSeatInstalled(arg0: number): boolean;
      isSeatOccupied(arg0: number): boolean;
      isShootable(): boolean;
      isSolid(): boolean;
      isSolidForSeparate(): boolean;
      isSpriteInvisible(): boolean;
      isStairsNorth(): boolean;
      isStairsObject(): boolean;
      isStairsWest(): boolean;
      isStarting(): boolean;
      isTableSurface(): boolean;
      isTableTopObject(): boolean;
      isTaintedWater(): boolean;
      isTargetAlphaZero(arg0: number): boolean;
      isTrunkLocked(): boolean;
      isZombie(): boolean;
      isZombiesDontAttack(): boolean;
      isbAltCollide(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      loadChange(arg0: string, arg1: java.nio.ByteBuffer): void;
      loadFromRemoteBuffer(arg0: java.nio.ByteBuffer): void;
      loadState(arg0: java.nio.ByteBuffer): void;
      lockServerUpdate(arg0: number): void;
      needPartsUpdate(): boolean;
      netPlayerFromServerUpdate(arg0: number, arg1: number): void;
      netPlayerServerSendAuthorisation(arg0: java.nio.ByteBuffer): void;
      notify(): void;
      notifyAll(): void;
      onBackMoveSignalStart(): void;
      onBackMoveSignalStop(): void;
      onHornStart(): void;
      onHornStop(): void;
      onMouseLeftClick(arg0: number, arg1: number): boolean;
      onMouseRightClick(arg0: number, arg1: number): void;
      onMouseRightReleased(): void;
      permanentlyRemove(): void;
      playActorAnim(arg0: zombie.vehicles.VehiclePart, arg1: string, arg2: zombie.characters.IsoGameCharacter): void;
      playPartAnim(arg0: zombie.vehicles.VehiclePart, arg1: string): void;
      playPartSound(arg0: zombie.vehicles.VehiclePart, arg1: zombie.characters.IsoPlayer, arg2: string): void;
      playPassengerAnim(arg0: number, arg1: string): void;
      playPassengerSound(arg0: number, arg1: string): void;
      playSound(arg0: string): void;
      playSoundImpl(arg0: string, arg1: zombie.iso.IsoObject): number;
      playSwitchSeatAnim(arg0: number, arg1: number): void;
      positionTrailer(arg0: zombie.vehicles.BaseVehicle): void;
      postupdate(): void;
      preupdate(): void;
      putKeyInIgnition(arg0: zombie.inventory.InventoryItem): void;
      putKeyOnDoor(arg0: zombie.inventory.InventoryItem): void;
      putKeyToContainer(arg0: zombie.inventory.ItemContainer, arg1: zombie.iso.IsoGridSquare, arg2: zombie.iso.IsoObject): void;
      putKeyToWorld(arg0: zombie.iso.IsoGridSquare): void;
      putKeyToZombie(arg0: zombie.characters.IsoZombie): void;
      releaseAnimationPlayers(): void;
      releaseVector2(arg0: zombie.iso.Vector2): void;
      releaseVector3f(arg0: org.joml.Vector3f): void;
      removeAllContainers(): void;
      removeFromSquare(): void;
      removeFromWorld(): void;
      removeKeyFromDoor(): void;
      removeKeyFromIgnition(): void;
      removeRenderEffect(arg0: zombie.iso.objects.ObjectRenderEffects): void;
      removeSheetRope(arg0: zombie.characters.IsoPlayer): boolean;
      render(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader): void;
      renderAttachedAndOverlaySprites(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFloorTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>, arg8: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderFxMask(arg0: number, arg1: number, arg2: number, arg3: boolean): void;
      renderObjectPicker(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo): void;
      renderShadow(): void;
      renderWallTile(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: boolean, arg5: boolean, arg6: zombie.core.opengl.Shader, arg7: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderWallTileOnly(arg0: number, arg1: number, arg2: number, arg3: zombie.core.textures.ColorInfo, arg4: zombie.core.opengl.Shader, arg5: java.util._function.Consumer<zombie.core.textures.TextureDraw>): void;
      renderlast(): void;
      repair(): void;
      replaceItem(arg0: zombie.inventory.InventoryItem): zombie.inventory.InventoryItem;
      reset(): void;
      resumeRunningAfterLoad(): void;
      reuseGridSquare(): void;
      save(arg0: java.nio.ByteBuffer): void;
      saveChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable, arg2: java.nio.ByteBuffer): void;
      saveState(arg0: java.nio.ByteBuffer): void;
      scriptReloaded(): void;
      sendObjectChange(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      separate(): void;
      serverUpdateSimulatorState(): void;
      setActiveInBullet(arg0: boolean): void;
      setAddThumpWorldSound(arg0: boolean): void;
      setAlarmed(arg0: boolean): void;
      setAlpha(arg0: number, arg1: number): void;
      setAlphaAndTarget(arg0: number): void;
      setAlphaToTarget(arg0: number): void;
      setAngles(arg0: number, arg1: number, arg2: number): void;
      setAttachedAnimSprite(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setBaseQuality(arg0: number): void;
      setBlink(arg0: boolean): void;
      setBloodIntensity(arg0: string, arg1: number): void;
      setBraking(arg0: boolean): void;
      setBrakingForce(arg0: number): void;
      setCharacterPosition(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: string): void;
      setCharacterPositionToAnim(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: string): void;
      setChildSprites(arg0: java.util.ArrayList<zombie.iso.sprite.IsoSpriteInstance>): void;
      setClientForce(arg0: number): void;
      setCloseKilled(arg0: boolean): void;
      setCollidable(arg0: boolean): void;
      setCollideType(arg0: string): void;
      setCollidedE(arg0: boolean): void;
      setCollidedN(arg0: boolean): void;
      setCollidedObject(arg0: zombie.iso.IsoObject): void;
      setCollidedS(arg0: boolean): void;
      setCollidedThisFrame(arg0: boolean): void;
      setCollidedW(arg0: boolean): void;
      setCollidedWithDoor(arg0: boolean): void;
      setColor(arg0: number, arg1: number, arg2: number): void;
      setColorHSV(arg0: number, arg1: number, arg2: number): void;
      setContainer(arg0: zombie.inventory.ItemContainer): void;
      setCurrent(arg0: zombie.iso.IsoGridSquare): void;
      setCurrentKey(arg0: zombie.inventory.InventoryItem): void;
      setCurrentSteering(arg0: number): void;
      setCustomColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setDamage(arg0: number): void;
      setDebugZ(arg0: number): void;
      setDefaultCondition(arg0: number): void;
      setDestroyed(arg0: boolean): void;
      setDir(arg0: zombie.iso.IsoDirections): void;
      setDoColor(arg0: boolean): void;
      setEatingZombies(arg0: java.util.ArrayList<zombie.characters.IsoZombie>): void;
      setEngineFeature(arg0: number, arg1: number, arg2: number): void;
      setFeelersize(arg0: number): void;
      setFirstUpdate(arg0: boolean): void;
      setGeneralPartCondition(arg0: number, arg1: number): void;
      setGoodCar(arg0: boolean): void;
      setHeadlightsOn(arg0: boolean): void;
      setHighlightColor(arg0: zombie.core.textures.ColorInfo): void;
      setHighlighted(arg0: boolean): void;
      setHitDir(arg0: zombie.iso.Vector2): void;
      setHitForce(arg0: number): void;
      setHitFromAngle(arg0: number): void;
      setHotwired(arg0: boolean): void;
      setHotwiredBroken(arg0: boolean): void;
      setID(arg0: number): void;
      setIDCount(arg0: number): void;
      setImpulsex(arg0: number): void;
      setImpulsey(arg0: number): void;
      setInitialMass(arg0: number): void;
      setKeyId(arg0: number): void;
      setKeyIsOnDoor(arg0: boolean): void;
      setKeysInIgnition(arg0: boolean): void;
      setLast(arg0: zombie.iso.IsoGridSquare): void;
      setLastCollideTime(arg0: number): void;
      setLastRendered(arg0: zombie.iso.IsoObject): void;
      setLastRenderedRendered(arg0: zombie.iso.IsoObject): void;
      setLastTargettedBy(arg0: zombie.characters.IsoZombie): void;
      setLightbarLightsMode(arg0: number): void;
      setLightbarSirenMode(arg0: number): void;
      setLimpulsex(arg0: number): void;
      setLimpulsey(arg0: number): void;
      setLx(arg0: number): void;
      setLy(arg0: number): void;
      setLz(arg0: number): void;
      setMass(arg0: number): void;
      setMaxSpeed(arg0: number): void;
      setMechanicUIOpen(arg0: boolean): void;
      setMechanicalID(arg0: number): void;
      setMovedThumpable(arg0: boolean): void;
      setMovementLastFrame(arg0: zombie.iso.Vector2): void;
      setMovingSquareNow(): void;
      setName(arg0: string): void;
      setNeedPartsUpdate(arg0: boolean): void;
      setNetPlayerAuthorization(arg0: number): void;
      setNoDamage(arg0: boolean): void;
      setNoPicking(arg0: boolean): void;
      setNx(arg0: number): void;
      setNy(arg0: number): void;
      setOffsetX(arg0: number): void;
      setOffsetY(arg0: number): void;
      setOnFloor(arg0: boolean): void;
      setOutlineHighlight(arg0: number, arg1: boolean): void;
      setOutlineHighlightCol(arg0: number, arg1: zombie.core.textures.ColorInfo): void;
      setOutlineHlAttached(arg0: number, arg1: boolean): void;
      setOutlineHlBlink(arg0: boolean): void;
      setOutlineOnMouseover(arg0: boolean): void;
      setOutlineThickness(arg0: number): void;
      setOverlaySprite(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): boolean;
      setOverlaySpriteColor(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setPassenger(arg0: number, arg1: zombie.characters.IsoGameCharacter, arg2: org.joml.Vector3f): boolean;
      setPathFindIndex(arg0: number): void;
      setPhysicsActive(arg0: boolean): void;
      setPipedFuelAmount(arg0: number): void;
      setRegulator(arg0: boolean): void;
      setRegulatorSpeed(arg0: number): void;
      setRenderEffect(arg0: zombie.iso.objects.RenderEffectType, arg1: boolean): void;
      setRenderYOffset(arg0: number): void;
      setRerouteCollide(arg0: zombie.iso.IsoObject): void;
      setRerouteMask(arg0: zombie.iso.IsoObject): void;
      setRust(arg0: number): void;
      setScript(): void;
      setScriptModule(arg0: string): void;
      setScriptName(arg0: string): void;
      setScriptnx(arg0: number): void;
      setScriptny(arg0: number): void;
      setShootable(arg0: boolean): void;
      setSirenStartTime(arg0: number): void;
      setSkinIndex(arg0: number): void;
      setSmashed(arg0: string, arg1: boolean): zombie.vehicles.BaseVehicle;
      setSolid(arg0: boolean): void;
      setSpecialTooltip(arg0: boolean): void;
      setSprite(arg0: zombie.iso.sprite.IsoSprite): void;
      setSpriteFromName(arg0: string): void;
      setSquare(arg0: zombie.iso.IsoGridSquare): void;
      setStateEventDelayTimer(arg0: number): void;
      setStoplightsOn(arg0: boolean): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setTaintedWater(arg0: boolean): void;
      setTargetAlpha(arg0: number): void;
      setThumpTarget(arg0: zombie.iso.objects.interfaces.Thumpable): void;
      setTimeSinceZombieAttack(arg0: number): void;
      setTireInflation(arg0: number, arg1: number): void;
      setTireRemoved(arg0: number, arg1: boolean): void;
      setTrunkLocked(arg0: boolean): void;
      setType(arg0: zombie.iso.SpriteDetails.IsoObjectType): void;
      setUsesExternalWaterSource(arg0: boolean): void;
      setVehicleTowedBy(arg0: zombie.vehicles.BaseVehicle, arg1: string, arg2: string, arg3: number): void;
      setVehicleTowing(arg0: zombie.vehicles.BaseVehicle, arg1: string, arg2: string, arg3: number): void;
      setVehicleType(arg0: string): void;
      setWaterAmount(arg0: number): void;
      setWeight(arg0: number): void;
      setWidth(arg0: number): void;
      setWindowLightsOn(arg0: boolean): void;
      setWorldTransform(arg0: zombie.core.physics.Transform): void;
      setX(arg0: number): void;
      setY(arg0: number): void;
      setZ(arg0: number): void;
      setZombiesDontAttack(arg0: boolean): void;
      setZone(arg0: string): void;
      setbAltCollide(arg0: boolean): void;
      shouldCollideWithCharacters(): boolean;
      shouldCollideWithObjects(): boolean;
      showPassenger(arg0: zombie.characters.IsoGameCharacter): boolean;
      shutOff(): void;
      sirenShutoffTimeExpired(): boolean;
      softReset(): void;
      spotted(arg0: zombie.iso.IsoMovingObject, arg1: boolean): void;
      startEvent(arg0: number, arg1: zombie.audio.GameSoundClip, arg2: java.util.BitSet): void;
      stopEvent(arg0: number, arg1: zombie.audio.GameSoundClip, arg2: java.util.BitSet): void;
      stopSound(arg0: number): number;
      switchSeat(arg0: zombie.characters.IsoGameCharacter, arg1: number): void;
      switchSeatRSync(arg0: zombie.characters.IsoGameCharacter, arg1: number): void;
      syncIsoObject(arg0: boolean, arg1: number, arg2: zombie.core.raknet.UdpConnection, arg3: java.nio.ByteBuffer): void;
      syncIsoObjectSend(arg0: zombie.core.network.ByteBufferWriter): void;
      syncKeyInIgnition(arg0: boolean, arg1: boolean, arg2: zombie.inventory.InventoryItem): void;
      testCollisionWithCharacter(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: zombie.iso.Vector2): zombie.iso.Vector2;
      testCollisionWithCorpse(arg0: zombie.iso.objects.IsoDeadBody, arg1: boolean): number;
      testCollisionWithObject(arg0: zombie.iso.IsoObject, arg1: number, arg2: zombie.iso.Vector2): zombie.iso.Vector2;
      testCollisionWithProneCharacter(arg0: zombie.iso.IsoMovingObject, arg1: number, arg2: number, arg3: boolean): number;
      testCollisionWithVehicle(arg0: zombie.vehicles.BaseVehicle): boolean;
      toString(): string;
      toggleLockedDoor(arg0: zombie.vehicles.VehiclePart, arg1: zombie.characters.IsoGameCharacter, arg2: boolean): void;
      transmitBlood(): void;
      transmitCharacterPosition(arg0: number, arg1: string): void;
      transmitCompleteItemToClients(): void;
      transmitCompleteItemToServer(): void;
      transmitCustomColor(): void;
      transmitEngine(): void;
      transmitModData(): void;
      transmitPartCondition(arg0: zombie.vehicles.VehiclePart): void;
      transmitPartDoor(arg0: zombie.vehicles.VehiclePart): void;
      transmitPartItem(arg0: zombie.vehicles.VehiclePart): void;
      transmitPartModData(arg0: zombie.vehicles.VehiclePart): void;
      transmitPartUsedDelta(arg0: zombie.vehicles.VehiclePart): void;
      transmitPartWindow(arg0: zombie.vehicles.VehiclePart): void;
      transmitRust(): void;
      transmitUpdatedSprite(): void;
      transmitUpdatedSpriteToClients(): void;
      transmitUpdatedSpriteToServer(): void;
      triggerAlarm(): void;
      tryHotwire(arg0: number): void;
      trySpawnKey(): void;
      tryStartEngine(arg0: boolean): void;
      unsetOutlineHighlight(): void;
      update(): void;
      updateBulletStats(): void;
      updateConstraint(arg0: zombie.vehicles.BaseVehicle): void;
      updateControls(): void;
      updateEvent(arg0: number, arg1: zombie.audio.GameSoundClip): void;
      updateHasExtendOffset(arg0: zombie.characters.IsoGameCharacter): void;
      updateHasExtendOffsetForExit(arg0: zombie.characters.IsoGameCharacter): void;
      updateHasExtendOffsetForExitEnd(arg0: zombie.characters.IsoGameCharacter): void;
      updateHitByVehicle(arg0: zombie.characters.IsoGameCharacter): boolean;
      updateLights(): void;
      updatePartStats(): void;
      updateParts(): void;
      updatePhysics(): void;
      updatePhysicsNetwork(): void;
      updateSounds(): void;
      updateTotalMass(): void;
      useItemOn(arg0: zombie.inventory.InventoryItem): void;
      useWater(arg0: number): number;
      wait(arg0: number): void;
      windowsOpen(): number;
      writeToRemoteBuffer(arg0: zombie.core.network.ByteBufferWriter): void;
    }
    // zombie.vehicles.BaseVehicle$HitVars extends java.lang.Object
    export class BaseVehicle$HitVars {
      private constructor();
      hitSpeed: number;
      isTargetHitFromBehind: boolean;
      isVehicleHitFromFront: boolean;
      readonly targetImpulse?: org.joml.Vector3f;
      vehicleDamage: number;
  
      calc(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.vehicles.BaseVehicle): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.vehicles.BaseVehicle$Matrix4fObjectPool extends zombie.popman.ObjectPool<org.joml.Matrix4f>
    export class BaseVehicle$Matrix4fObjectPool {
      private constructor();
      alloc(): org.joml.Matrix4f;
      clear(): void;
      equals(arg0: any): boolean;
      forEach(arg0: java.util._function.Consumer<org.joml.Matrix4f>): void;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      release(arg0: java.util.List<org.joml.Matrix4f>): void;
      releaseAll(arg0: java.util.List<org.joml.Matrix4f>): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.vehicles.BaseVehicle$MinMaxPosition extends java.lang.Object
    export class BaseVehicle$MinMaxPosition {
      private constructor();
      maxX: number;
      maxY: number;
      minX: number;
      minY: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.vehicles.BaseVehicle$ModelInfo extends java.lang.Object
    export class BaseVehicle$ModelInfo {
      private constructor();
      m_animPlayer?: zombie.core.skinnedmodel.animation.AnimationPlayer;
      m_track?: zombie.core.skinnedmodel.animation.AnimationTrack;
      modelInstance?: zombie.core.skinnedmodel.model.VehicleSubModelInstance;
      modelScript?: zombie.scripting.objects.ModelScript;
      part?: zombie.vehicles.VehiclePart;
      readonly renderTransform?: org.joml.Matrix4f;
      scriptModel?: zombie.scripting.objects.VehicleScript$Model;
      wheelIndex: number;
  
      equals(arg0: any): boolean;
      getAnimationPlayer(): zombie.core.skinnedmodel.animation.AnimationPlayer;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      releaseAnimationPlayer(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.vehicles.BaseVehicle$Passenger extends java.lang.Object
    export class BaseVehicle$Passenger {
      private constructor();
      character?: zombie.characters.IsoGameCharacter;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.vehicles.BaseVehicle$QuaternionfObjectPool extends zombie.popman.ObjectPool<org.joml.Quaternionf>
    export class BaseVehicle$QuaternionfObjectPool {
      private constructor();
      alloc(): org.joml.Quaternionf;
      clear(): void;
      equals(arg0: any): boolean;
      forEach(arg0: java.util._function.Consumer<org.joml.Quaternionf>): void;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      release(arg0: java.util.List<org.joml.Quaternionf>): void;
      releaseAll(arg0: java.util.List<org.joml.Quaternionf>): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.vehicles.BaseVehicle$ServerVehicleState extends java.lang.Object
    export class BaseVehicle$ServerVehicleState {
      private constructor();
      flags: number;
      netPlayerAuthorization: number;
      netPlayerId: number;
      orient?: org.joml.Quaternionf;
      x: number;
      y: number;
      z: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      setAuthorization(arg0: zombie.vehicles.BaseVehicle): void;
      shouldSend(arg0: zombie.vehicles.BaseVehicle): boolean;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.vehicles.BaseVehicle$Vector2ObjectPool extends zombie.popman.ObjectPool<zombie.iso.Vector2>
    export class BaseVehicle$Vector2ObjectPool {
      private constructor();
      alloc(): zombie.iso.Vector2;
      clear(): void;
      equals(arg0: any): boolean;
      forEach(arg0: java.util._function.Consumer<zombie.iso.Vector2>): void;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      release(arg0: java.util.List<zombie.iso.Vector2>): void;
      releaseAll(arg0: java.util.List<zombie.iso.Vector2>): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.vehicles.BaseVehicle$Vector2fObjectPool extends zombie.popman.ObjectPool<org.joml.Vector2f>
    export class BaseVehicle$Vector2fObjectPool {
      private constructor();
      alloc(): org.joml.Vector2f;
      clear(): void;
      equals(arg0: any): boolean;
      forEach(arg0: java.util._function.Consumer<org.joml.Vector2f>): void;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      release(arg0: java.util.List<org.joml.Vector2f>): void;
      releaseAll(arg0: java.util.List<org.joml.Vector2f>): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.vehicles.BaseVehicle$Vector3fObjectPool extends zombie.popman.ObjectPool<org.joml.Vector3f>
    export class BaseVehicle$Vector3fObjectPool {
      private constructor();
      alloc(): org.joml.Vector3f;
      clear(): void;
      equals(arg0: any): boolean;
      forEach(arg0: java.util._function.Consumer<org.joml.Vector3f>): void;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      release(arg0: java.util.List<org.joml.Vector3f>): void;
      releaseAll(arg0: java.util.List<org.joml.Vector3f>): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.vehicles.BaseVehicle$WheelInfo extends java.lang.Object
    export class BaseVehicle$WheelInfo {
      private constructor();
      rotation: number;
      skidInfo: number;
      steering: number;
      suspensionLength: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.vehicles.BaseVehicle$engineStateTypes */
    export class BaseVehicle$engineStateTypes {
      /* ENUM VALUES */
      static readonly Idle: BaseVehicle$engineStateTypes; 
      static readonly RetryingStarting: BaseVehicle$engineStateTypes; 
      static readonly Running: BaseVehicle$engineStateTypes; 
      static readonly ShutingDown: BaseVehicle$engineStateTypes; 
      static readonly Stalling: BaseVehicle$engineStateTypes; 
      static readonly Starting: BaseVehicle$engineStateTypes; 
      static readonly StartingFailed: BaseVehicle$engineStateTypes; 
      static readonly StartingFailedNoPower: BaseVehicle$engineStateTypes; 
      static readonly StartingSuccess: BaseVehicle$engineStateTypes; 
  
      /* FIELDS */
      static readonly Values?: zombie.vehicles.BaseVehicle$engineStateTypes[];
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.vehicles.BaseVehicle$engineStateTypes[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): BaseVehicle$engineStateTypes;
      valueOf(arg0: string): zombie.vehicles.BaseVehicle$engineStateTypes;
      values(): zombie.vehicles.BaseVehicle$engineStateTypes[];
    }
    // zombie.vehicles.CollideWithObstaclesPoly extends java.lang.Object
    export class CollideWithObstaclesPoly {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      isNotClear(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean, arg6: zombie.vehicles.BaseVehicle, arg7: boolean, arg8: boolean): boolean;
      notify(): void;
      notifyAll(): void;
      render(): void;
      resolveCollision(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: org.joml.Vector2f): org.joml.Vector2f;
      toString(): string;
      vehicleMoved(arg0: zombie.vehicles.PolygonalMap2$VehiclePoly, arg1: zombie.vehicles.PolygonalMap2$VehiclePoly): void;
      wait(arg0: number): void;
    }
    // zombie.vehicles.CollideWithObstaclesPoly$CCNode extends java.lang.Object
    export class CollideWithObstaclesPoly$CCNode {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.vehicles.CollideWithObstaclesPoly$CCObstacle extends java.lang.Object
    export class CollideWithObstaclesPoly$CCObstacle {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.vehicles.CollideWithObstaclesPoly$ChunkData extends java.lang.Object
    export class CollideWithObstaclesPoly$ChunkData {
      private constructor();
      clear(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      init(arg0: zombie.iso.IsoChunk, arg1: number, arg2: zombie.vehicles.CollideWithObstaclesPoly): zombie.vehicles.CollideWithObstaclesPoly$ChunkDataZ;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.vehicles.CollideWithObstaclesPoly$ChunkDataZ extends java.lang.Object
    export class CollideWithObstaclesPoly$ChunkDataZ {
      private constructor();
      readonly nodes?: java.util.ArrayList<zombie.vehicles.CollideWithObstaclesPoly$CCNode>;
      static readonly pool?: zombie.popman.ObjectPool<zombie.vehicles.CollideWithObstaclesPoly$ChunkDataZ>;
      readonly worldVehicleSeparate?: java.util.ArrayList<zombie.vehicles.CollideWithObstaclesPoly$CCObstacle>;
      readonly worldVehicleUnion?: java.util.ArrayList<zombie.vehicles.CollideWithObstaclesPoly$CCObstacle>;
      z: number;
  
      clear(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      init(arg0: zombie.iso.IsoChunk, arg1: number, arg2: zombie.vehicles.CollideWithObstaclesPoly): void;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.vehicles.EditVehicleState extends zombie.gameStates.GameState
    export class EditVehicleState {
      private constructor();
      static instance?: zombie.vehicles.EditVehicleState;
  
      checkInstance(): zombie.vehicles.EditVehicleState;
      enter(): void;
      equals(arg0: any): boolean;
      exit(): void;
      fromLua0(arg0: string): any;
      fromLua1(arg0: string, arg1: any): any;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      redirectState(): zombie.gameStates.GameState;
      reenter(): void;
      render(): void;
      setScript(arg0: string): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      toString(): string;
      update(): zombie.gameStates.GameStateMachine$StateAction;
      wait(arg0: number): void;
      yield(): void;
    }
    // zombie.vehicles.EditVehicleState$LuaEnvironment extends java.lang.Object
    export class EditVehicleState$LuaEnvironment {
      private constructor();
      caller?: se.krka.kahlua.integration.LuaCaller;
      env?: se.krka.kahlua.vm.KahluaTable;
      platform?: se.krka.kahlua.j2se.J2SEPlatform;
      thread?: se.krka.kahlua.vm.KahluaThread;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.vehicles.EngineRPMData extends java.lang.Object
    export class EngineRPMData {
      private constructor();
      afterGearChange: number;
      gearChange: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      reset(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.vehicles.LightbarLightsMode extends java.lang.Object
    export class LightbarLightsMode {
      private constructor();
      equals(arg0: any): boolean;
      get(): number;
      getClass(): java.lang.Class<any>;
      getLightTexIndex(): number;
      hashCode(): number;
      isEnable(): boolean;
      notify(): void;
      notifyAll(): void;
      set(arg0: number): void;
      start(): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.vehicles.LightbarSirenMode extends java.lang.Object
    export class LightbarSirenMode {
      private constructor();
      equals(arg0: any): boolean;
      get(): number;
      getClass(): java.lang.Class<any>;
      getSoundName(arg0: zombie.scripting.objects.VehicleScript$LightBar): string;
      hashCode(): number;
      isEnable(): boolean;
      notify(): void;
      notifyAll(): void;
      set(arg0: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.vehicles.PathFindBehavior2 extends java.lang.Object
    export class PathFindBehavior2 {
      private constructor();
      Listeners?: java.util.ArrayList<zombie.ai.astar.IPathfinder>;
      NPCData?: zombie.vehicles.PathFindBehavior2$NPCData;
      bStopping: boolean;
      pathNextIsSet: boolean;
      pathNextX: number;
      pathNextY: number;
      readonly walkingOnTheSpot?: zombie.ai.WalkingOnTheSpot;
  
      Failed(arg0: zombie.ai.astar.Mover): void;
      Succeeded(arg0: zombie.vehicles.PolygonalMap2$Path, arg1: zombie.ai.astar.Mover): void;
      cancel(): void;
      closestPointOnPath(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoMovingObject, arg4: zombie.vehicles.PolygonalMap2$Path, arg5: zombie.vehicles.PathFindBehavior2$PointOnPath): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getIsCancelled(): boolean;
      getPathLength(): number;
      getTargetChar(): zombie.characters.IsoGameCharacter;
      getTargetX(): number;
      getTargetY(): number;
      getTargetZ(): number;
      hashCode(): number;
      isGoalCharacter(): boolean;
      isGoalLocation(): boolean;
      isGoalNone(): boolean;
      isGoalSound(): boolean;
      isGoalVehicleAdjacent(): boolean;
      isGoalVehicleArea(): boolean;
      isGoalVehicleSeat(): boolean;
      isMovingUsingPathFind(): boolean;
      isStrafing(): boolean;
      isTargetLocation(arg0: number, arg1: number, arg2: number): boolean;
      moveToDir(arg0: zombie.iso.IsoMovingObject, arg1: number): void;
      moveToPoint(arg0: number, arg1: number, arg2: number): void;
      notify(): void;
      notifyAll(): void;
      pathToCharacter(arg0: zombie.characters.IsoGameCharacter): void;
      pathToLocation(arg0: number, arg1: number, arg2: number): void;
      pathToLocationF(arg0: number, arg1: number, arg2: number): void;
      pathToNearest(arg0: gnu.trove.list.array.TFloatArrayList): void;
      pathToNearestTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      pathToSound(arg0: number, arg1: number, arg2: number): void;
      pathToVehicleAdjacent(arg0: zombie.vehicles.BaseVehicle): void;
      pathToVehicleArea(arg0: zombie.vehicles.BaseVehicle, arg1: string): void;
      pathToVehicleSeat(arg0: zombie.vehicles.BaseVehicle, arg1: number): void;
      render(): void;
      reset(): void;
      setData(arg0: number, arg1: number, arg2: number): void;
      shouldGetUpFromCrawl(): boolean;
      toString(): string;
      update(): zombie.vehicles.PathFindBehavior2$BehaviorResult;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.vehicles.PathFindBehavior2$BehaviorResult */
    export class PathFindBehavior2$BehaviorResult {
      /* ENUM VALUES */
      static readonly Failed: PathFindBehavior2$BehaviorResult; 
      static readonly Succeeded: PathFindBehavior2$BehaviorResult; 
      static readonly Working: PathFindBehavior2$BehaviorResult; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.vehicles.PathFindBehavior2$BehaviorResult[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): PathFindBehavior2$BehaviorResult;
      valueOf(arg0: string): zombie.vehicles.PathFindBehavior2$BehaviorResult;
      values(): zombie.vehicles.PathFindBehavior2$BehaviorResult[];
    }
    // zombie.vehicles.PathFindBehavior2$NPCData extends java.lang.Object
    export class PathFindBehavior2$NPCData {
      private constructor();
      MaxSteps: number;
      doDirectMovement: boolean;
      nextTileX: number;
      nextTileY: number;
      nextTileZ: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.vehicles.PathFindBehavior2$PointOnPath extends java.lang.Object
    export class PathFindBehavior2$PointOnPath {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.vehicles.PathFindState2 extends zombie.ai.State
    export class PathFindState2 {
      private constructor();
      animEvent(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.core.skinnedmodel.advancedanimation.AnimEvent): void;
      enter(arg0: zombie.characters.IsoGameCharacter): void;
      equals(arg0: any): boolean;
      execute(arg0: zombie.characters.IsoGameCharacter): void;
      exit(arg0: zombie.characters.IsoGameCharacter): void;
      getClass(): java.lang.Class<any>;
      getDeltaModifiers(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.MoveDeltaModifiers): void;
      getName(): string;
      getStatePermissions(): zombie.ai.permission.IStatePermissions;
      hashCode(): number;
      isAttacking(arg0: zombie.characters.IsoGameCharacter): boolean;
      isDoingActionThatCanBeCancelled(): boolean;
      isIgnoreCollide(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
      isMoving(arg0: zombie.characters.IsoGameCharacter): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.vehicles.PolygonalMap2 extends java.lang.Object
    export class PolygonalMap2 {
      private constructor();
      static readonly CLOSE_TO_WALLS: boolean;
      static readonly COLLIDE_BEVEL: boolean;
      static readonly COLLIDE_CLIPPER: boolean;
      static readonly CXN_FLAG_CAN_PATH: number;
      static readonly CXN_FLAG_THUMP: number;
      static readonly LCC_ALLOW_ON_EDGE: number;
      static readonly LCC_CHECK_COST: number;
      static readonly LCC_CLOSE_TO_WALLS: number;
      static readonly LCC_IGNORE_DOORS: number;
      static readonly LCC_RENDER: number;
      static readonly LCC_ZERO: number;
      static readonly NODE_FLAG_CRAWL: number;
      static readonly NODE_FLAG_CRAWL_INTERIOR: number;
      static readonly NODE_FLAG_IN_CHUNK_DATA: number;
      static readonly NODE_FLAG_KEEP: number;
      static readonly NODE_FLAG_PERIMETER: number;
      static readonly PATHS_UNDER_VEHICLES: boolean;
      static readonly RADIUS: number;
      static readonly instance?: zombie.vehicles.PolygonalMap2;
  
      addChunkToWorld(arg0: zombie.iso.IsoChunk): void;
      addRequest(arg0: zombie.vehicles.PolygonalMap2$IPathfinder, arg1: zombie.ai.astar.Mover, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): zombie.vehicles.PolygonalMap2$PathFindRequest;
      addVehicleToWorld(arg0: zombie.vehicles.BaseVehicle): void;
      canStandAt(arg0: number, arg1: number, arg2: number, arg3: zombie.iso.IsoMovingObject, arg4: boolean, arg5: boolean): boolean;
      cancelRequest(arg0: zombie.ai.astar.Mover): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getCollidepoint(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.iso.IsoMovingObject, arg6: number): zombie.iso.Vector2;
      getPointInLine(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): java.util.ArrayList<zombie.vehicles.PolygonalMap2$Point>;
      hashCode(): number;
      init(arg0: zombie.iso.IsoMetaGrid): void;
      intersectLineWithVehicle(arg0: number, arg1: number, arg2: number, arg3: number, arg4: zombie.vehicles.BaseVehicle, arg5: zombie.iso.Vector2): boolean;
      lineClearCollide(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): boolean;
      notify(): void;
      notifyAll(): void;
      removeChunkFromWorld(arg0: zombie.iso.IsoChunk): void;
      removeVehicleFromWorld(arg0: zombie.vehicles.BaseVehicle): void;
      render(): void;
      resolveCollision(arg0: zombie.characters.IsoGameCharacter, arg1: number, arg2: number, arg3: org.joml.Vector2f): org.joml.Vector2f;
      squareChanged(arg0: zombie.iso.IsoGridSquare): void;
      stop(): void;
      toString(): string;
      updateMain(): void;
      updateThread(): void;
      updateVehicle(arg0: zombie.vehicles.BaseVehicle): void;
      wait(arg0: number): void;
    }
    // zombie.vehicles.PolygonalMap2$IPathfinder
    export class PolygonalMap2$IPathfinder {
      private constructor();
      Failed(arg0: zombie.ai.astar.Mover): void;
      Succeeded(arg0: zombie.vehicles.PolygonalMap2$Path, arg1: zombie.ai.astar.Mover): void;
    }
    // zombie.vehicles.PolygonalMap2$LiangBarsky extends java.lang.Object
    export class PolygonalMap2$LiangBarsky {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      lineRectIntersect(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number[]): boolean;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.vehicles.PolygonalMap2$Path extends java.lang.Object
    export class PolygonalMap2$Path {
      private constructor();
      crossesSquare(arg0: number, arg1: number, arg2: number): boolean;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.vehicles.PolygonalMap2$PathFindRequest extends java.lang.Object
    export class PolygonalMap2$PathFindRequest {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      release(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.vehicles.PolygonalMap2$Point extends java.lang.Object
    export class PolygonalMap2$Point {
      private constructor();
      x: number;
      y: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.vehicles.PolygonalMap2$VehiclePoly extends java.lang.Object
    export class PolygonalMap2$VehiclePoly {
      private constructor();
      readonly borders?: zombie.iso.Vector2[];
      t?: zombie.core.physics.Transform;
      x1: number;
      x2: number;
      x3: number;
      x4: number;
      y1: number;
      y2: number;
      y3: number;
      y4: number;
      z: number;
  
      containsPoint(arg0: number, arg1: number): boolean;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      lineIntersection(arg0: zombie.iso.Vector2, arg1: zombie.iso.Vector2, arg2: zombie.iso.Vector2, arg3: zombie.iso.Vector2): zombie.iso.Vector2;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.vehicles.SurroundVehicle extends java.lang.Object
    export class SurroundVehicle {
      private constructor();
      x1: number;
      x2: number;
      x3: number;
      x4: number;
      y1: number;
      y2: number;
      y3: number;
      y4: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getPositionForZombie(arg0: zombie.characters.IsoZombie, arg1: org.joml.Vector2f): org.joml.Vector2f;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      render(): void;
      reset(): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.vehicles.TransmissionNumber */
    export class TransmissionNumber {
      /* ENUM VALUES */
      static readonly N: TransmissionNumber; 
      static readonly R: TransmissionNumber; 
      static readonly Speed1: TransmissionNumber; 
      static readonly Speed2: TransmissionNumber; 
      static readonly Speed3: TransmissionNumber; 
      static readonly Speed4: TransmissionNumber; 
      static readonly Speed5: TransmissionNumber; 
      static readonly Speed6: TransmissionNumber; 
      static readonly Speed7: TransmissionNumber; 
      static readonly Speed8: TransmissionNumber; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.vehicles.TransmissionNumber[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): TransmissionNumber;
      fromIndex(arg0: number): zombie.vehicles.TransmissionNumber;
      getIndex(): number;
      getNext(arg0: number): zombie.vehicles.TransmissionNumber;
      getPrev(arg0: number): zombie.vehicles.TransmissionNumber;
      getString(): string;
      valueOf(arg0: string): zombie.vehicles.TransmissionNumber;
      values(): zombie.vehicles.TransmissionNumber[];
    }
    // zombie.vehicles.UI3DScene extends zombie.ui.UIElement
    export class UI3DScene {
      private constructor();
      readonly Controls?: java.util.ArrayList<zombie.ui.UIElement>;
      IgnoreLossControl: boolean;
      Parent?: zombie.ui.UIElement;
      alwaysBack: boolean;
      anchorBottom: boolean;
      anchorLeft: boolean;
      anchorRight: boolean;
      anchorTop: boolean;
      bScrollChildren: boolean;
      bScrollWithParent: boolean;
      capture: boolean;
      clickedValue?: string;
      defaultDraw: boolean;
      followGameWorld: boolean;
      height: number;
      playerContext: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      visible: boolean;
      width: number;
      x: number;
      y: number;
  
      AddChild(arg0: zombie.ui.UIElement): void;
      BringToTop(arg0: zombie.ui.UIElement): void;
      ButtonClicked(arg0: string): void;
      ClearChildren(): void;
      DrawSubTextureRGBA(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number, arg12: number): void;
      DrawText(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextCentre(arg0: zombie.ui.UIFont, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextRight(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextUntrimmed(arg0: zombie.ui.UIFont, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number): void;
      DrawTextureAngle(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextureCol(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: zombie.core.Color): void;
      DrawTextureColor(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextureIgnoreOffset(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTextureScaled(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
      DrawTextureScaledAspect(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledAspect2(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledCol(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTextureScaledColor(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledUniform(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextureTiled(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureTiledX(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureTiledY(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTexture_FlippedX(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTexture_FlippedXIgnoreOffset(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawUVSliceTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color, arg6: number, arg7: number, arg8: number, arg9: number): void;
      RemoveChild(arg0: zombie.ui.UIElement): void;
      RemoveControl(arg0: zombie.ui.UIElement): void;
      backMost(): void;
      bringToTop(): void;
      clampToParentX(arg0: number): number;
      clampToParentY(arg0: number): number;
      clearMaxDrawHeight(): void;
      clearStencilRect(): void;
      equals(arg0: any): boolean;
      fromLua0(arg0: string): any;
      fromLua1(arg0: string, arg1: any): any;
      fromLua2(arg0: string, arg1: any, arg2: any): any;
      fromLua3(arg0: string, arg1: any, arg2: any, arg3: any): any;
      fromLua4(arg0: string, arg1: any, arg2: any, arg3: any, arg4: any): any;
      fromLua6(arg0: string, arg1: any, arg2: any, arg3: any, arg4: any, arg5: any, arg6: any): any;
      fromLua9(arg0: string, arg1: any, arg2: any, arg3: any, arg4: any, arg5: any, arg6: any, arg7: any, arg8: any, arg9: any): any;
      getAbsoluteX(): number;
      getAbsoluteY(): number;
      getClass(): java.lang.Class<any>;
      getClickedValue(): string;
      getControls(): java.util.ArrayList<zombie.ui.UIElement>;
      getHeight(): number;
      getMaxDrawHeight(): number;
      getParent(): zombie.ui.UIElement;
      getPlayerContext(): number;
      getRenderThisPlayerOnly(): number;
      getScrollChildren(): boolean;
      getScrollHeight(): number;
      getScrollWithParent(): boolean;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getUIName(): string;
      getWidth(): number;
      getX(): number;
      getXScroll(): number;
      getXScrolled(arg0: zombie.ui.UIElement): number;
      getY(): number;
      getYScroll(): number;
      getYScrolled(arg0: zombie.ui.UIElement): number;
      hashCode(): number;
      ignoreHeightChange(): void;
      ignoreWidthChange(): void;
      isAnchorBottom(): boolean;
      isAnchorLeft(): boolean;
      isAnchorRight(): boolean;
      isAnchorTop(): boolean;
      isCapture(): boolean;
      isConsumeMouseEvents(): boolean;
      isDefaultDraw(): boolean;
      isEnabled(): boolean;
      isFollowGameWorld(): boolean;
      isForceCursorVisible(): boolean;
      isIgnoreLossControl(): boolean;
      isKeyConsumed(arg0: number): boolean;
      isMouseOver(): boolean;
      isPointOver(arg0: number, arg1: number): boolean;
      isVisible(): boolean;
      isWantKeyEvents(): boolean;
      notify(): void;
      notifyAll(): void;
      onKeyPress(arg0: number): void;
      onKeyRelease(arg0: number): void;
      onKeyRepeat(arg0: number): void;
      onMouseDown(arg0: number, arg1: number): boolean;
      onMouseMove(arg0: number, arg1: number): boolean;
      onMouseMoveOutside(arg0: number, arg1: number): void;
      onMouseUp(arg0: number, arg1: number): boolean;
      onMouseUpOutside(arg0: number, arg1: number): void;
      onMouseWheel(arg0: number): boolean;
      onResize(): void;
      onRightMouseDown(arg0: number, arg1: number): boolean;
      onRightMouseUp(arg0: number, arg1: number): boolean;
      onresize(): void;
      render(): void;
      repaintStencilRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
      resumeStencil(): void;
      sceneToUIX(arg0: number, arg1: number, arg2: number): number;
      sceneToUIY(arg0: number, arg1: number, arg2: number): number;
      setAlwaysOnTop(arg0: boolean): void;
      setAnchorBottom(arg0: boolean): void;
      setAnchorLeft(arg0: boolean): void;
      setAnchorRight(arg0: boolean): void;
      setAnchorTop(arg0: boolean): void;
      setCapture(arg0: boolean): void;
      setClickedValue(arg0: string): void;
      setConsumeMouseEvents(arg0: boolean): void;
      setControls(arg0: java.util.Vector<zombie.ui.UIElement>): void;
      setDefaultDraw(arg0: boolean): void;
      setEnabled(arg0: boolean): void;
      setFollowGameWorld(arg0: boolean): void;
      setForceCursorVisible(arg0: boolean): void;
      setHeight(arg0: number): void;
      setHeightOnly(arg0: number): void;
      setHeightSilent(arg0: number): void;
      setIgnoreLossControl(arg0: boolean): void;
      setMaxDrawHeight(arg0: number): void;
      setParent(arg0: zombie.ui.UIElement): void;
      setPlayerContext(arg0: number): void;
      setRenderClippedChildren(arg0: boolean): void;
      setRenderThisPlayerOnly(arg0: number): void;
      setScrollChildren(arg0: boolean): void;
      setScrollHeight(arg0: number): void;
      setScrollWithParent(arg0: boolean): void;
      setStencilRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setUIName(arg0: string): void;
      setVisible(arg0: boolean): void;
      setWantKeyEvents(arg0: boolean): void;
      setWidth(arg0: number): void;
      setWidthOnly(arg0: number): void;
      setWidthSilent(arg0: number): void;
      setX(arg0: number): void;
      setXScroll(arg0: number): void;
      setY(arg0: number): void;
      setYScroll(arg0: number): void;
      suspendStencil(): void;
      toString(): string;
      uiToScene(arg0: org.joml.Matrix4f, arg1: number, arg2: number, arg3: number, arg4: org.joml.Vector3f): org.joml.Vector3f;
      uiToSceneX(arg0: number, arg1: number): number;
      uiToSceneY(arg0: number, arg1: number): number;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.vehicles.UI3DScene$Plane extends java.lang.Object
    export class UI3DScene$Plane {
      private constructor();
      readonly normal?: org.joml.Vector3f;
      readonly point?: org.joml.Vector3f;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      set(arg0: org.joml.Vector3f, arg1: org.joml.Vector3f): zombie.vehicles.UI3DScene$Plane;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.vehicles.UI3DScene$PlaneObjectPool extends zombie.popman.ObjectPool<zombie.vehicles.UI3DScene$Plane>
    export class UI3DScene$PlaneObjectPool {
      private constructor();
      alloc(): zombie.vehicles.UI3DScene$Plane;
      clear(): void;
      equals(arg0: any): boolean;
      forEach(arg0: java.util._function.Consumer<zombie.vehicles.UI3DScene$Plane>): void;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      release(arg0: java.util.List<zombie.vehicles.UI3DScene$Plane>): void;
      releaseAll(arg0: java.util.List<zombie.vehicles.UI3DScene$Plane>): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.vehicles.UI3DScene$Ray extends java.lang.Object
    export class UI3DScene$Ray {
      private constructor();
      readonly direction?: org.joml.Vector3f;
      readonly origin?: org.joml.Vector3f;
      t: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.vehicles.UI3DScene$RayObjectPool extends zombie.popman.ObjectPool<zombie.vehicles.UI3DScene$Ray>
    export class UI3DScene$RayObjectPool {
      private constructor();
      alloc(): zombie.vehicles.UI3DScene$Ray;
      clear(): void;
      equals(arg0: any): boolean;
      forEach(arg0: java.util._function.Consumer<zombie.vehicles.UI3DScene$Ray>): void;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      release(arg0: java.util.List<zombie.vehicles.UI3DScene$Ray>): void;
      releaseAll(arg0: java.util.List<zombie.vehicles.UI3DScene$Ray>): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.vehicles.VehicleDoor extends java.lang.Object
    export class VehicleDoor {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      init(arg0: zombie.scripting.objects.VehicleScript$Door): void;
      isLockBroken(): boolean;
      isLocked(): boolean;
      isOpen(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      notify(): void;
      notifyAll(): void;
      save(arg0: java.nio.ByteBuffer): void;
      setLockBroken(arg0: boolean): void;
      setLocked(arg0: boolean): void;
      setOpen(arg0: boolean): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.vehicles.VehicleEngineRPM extends zombie.scripting.objects.BaseScriptObject
    export class VehicleEngineRPM {
      private constructor();
      static readonly MAX_GEARS: number;
      readonly m_rpmData?: zombie.vehicles.EngineRPMData[];
      module?: zombie.scripting.objects.ScriptModule;
  
      Load(arg0: string, arg1: string[]): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getModule(): zombie.scripting.objects.ScriptModule;
      getName(): string;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      reset(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.vehicles.VehicleInterpolation extends java.lang.Object
    export class VehicleInterpolation {
      private constructor();
      physicsBufferMs: number;
      physicsDelayMs: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      interpolationDataAdd(arg0: java.nio.ByteBuffer, arg1: number, arg2: number, arg3: number): void;
      interpolationDataGet(arg0: number[]): boolean;
      interpolationDataGetPR(arg0: number[]): boolean;
      notify(): void;
      notifyAll(): void;
      poolData(): void;
      setVehicleData(arg0: zombie.vehicles.BaseVehicle): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.vehicles.VehicleLight extends java.lang.Object
    export class VehicleLight {
      private constructor();
      active: boolean;
      dist: number;
      dot: number;
      focusing: number;
      intensity: number;
      readonly offset?: org.joml.Vector3f;
  
      canFocusingDown(): boolean;
      canFocusingUp(): boolean;
      equals(arg0: any): boolean;
      getActive(): boolean;
      getClass(): java.lang.Class<any>;
      getDistanization(): number;
      getFocusing(): number;
      getIntensity(): number;
      hashCode(): number;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      notify(): void;
      notifyAll(): void;
      save(arg0: java.nio.ByteBuffer): void;
      setActive(arg0: boolean): void;
      setFocusingDown(): void;
      setFocusingUp(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.vehicles.VehiclePart extends java.lang.Object
    export class VehiclePart {
      private constructor();
      AddDeviceText(arg0: zombie.characters.IsoPlayer, arg1: string, arg2: number, arg3: number, arg4: number, arg5: string, arg6: number): void;
      HasPlayerInRange(): boolean;
      addChild(arg0: zombie.vehicles.VehiclePart): void;
      createSignalDevice(): zombie.radio.devices.DeviceData;
      createSpotLight(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
      damage(arg0: number): void;
      doInventoryItemStats(arg0: zombie.inventory.InventoryItem, arg1: number): void;
      equals(arg0: any): boolean;
      findWindow(): zombie.vehicles.VehicleWindow;
      getAnimById(arg0: string): zombie.scripting.objects.VehicleScript$Anim;
      getArea(): string;
      getCategory(): string;
      getChild(arg0: number): zombie.vehicles.VehiclePart;
      getChildCount(): number;
      getChildWindow(): zombie.vehicles.VehiclePart;
      getClass(): java.lang.Class<any>;
      getCondition(): number;
      getContainerCapacity(arg0: zombie.characters.IsoGameCharacter): number;
      getContainerContentAmount(): number;
      getContainerContentType(): string;
      getContainerSeatNumber(): number;
      getDelta(): number;
      getDeviceData(): zombie.radio.devices.DeviceData;
      getDoor(): zombie.vehicles.VehicleDoor;
      getEngineLoudness(): number;
      getId(): string;
      getIndex(): number;
      getInventoryItem(): zombie.inventory.InventoryItem;
      getItemContainer(): zombie.inventory.ItemContainer;
      getItemType(): java.util.ArrayList<string>;
      getLastUpdated(): number;
      getLight(): zombie.vehicles.VehicleLight;
      getLightDistance(): number;
      getLightFocusing(): number;
      getLightIntensity(): number;
      getLuaFunction(arg0: string): string;
      getMechanicSkillInstaller(): number;
      getModData(): se.krka.kahlua.vm.KahluaTable;
      getNumberByCondition(arg0: number, arg1: number, arg2: number): number;
      getParent(): zombie.vehicles.VehiclePart;
      getScriptPart(): zombie.scripting.objects.VehicleScript$Part;
      getSquare(): zombie.iso.IsoGridSquare;
      getSuspensionCompression(): number;
      getSuspensionDamping(): number;
      getTable(arg0: string): se.krka.kahlua.vm.KahluaTable;
      getVehicle(): zombie.vehicles.BaseVehicle;
      getWheelFriction(): number;
      getWheelIndex(): number;
      getWindow(): zombie.vehicles.VehicleWindow;
      getX(): number;
      getY(): number;
      getZ(): number;
      hasDevicePower(): boolean;
      hasModData(): boolean;
      hashCode(): number;
      isContainer(): boolean;
      isSetAllModelsVisible(): boolean;
      isSpecificItem(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      notify(): void;
      notifyAll(): void;
      repair(): void;
      save(arg0: java.nio.ByteBuffer): void;
      setAllModelsVisible(arg0: boolean): void;
      setCategory(arg0: string): void;
      setCondition(arg0: number): void;
      setContainerCapacity(arg0: number): void;
      setContainerContentAmount(arg0: number): void;
      setDelta(arg0: number): void;
      setDeviceData(arg0: zombie.radio.devices.DeviceData): void;
      setEngineLoudness(arg0: number): void;
      setGeneralCondition(arg0: zombie.inventory.InventoryItem, arg1: number, arg2: number): void;
      setInventoryItem(arg0: zombie.inventory.InventoryItem): void;
      setItemContainer(arg0: zombie.inventory.ItemContainer): void;
      setLastUpdated(arg0: number): void;
      setLightActive(arg0: boolean): void;
      setMechanicSkillInstaller(arg0: number): void;
      setModelVisible(arg0: string, arg1: boolean): void;
      setRandomCondition(arg0: zombie.inventory.InventoryItem): void;
      setScriptPart(arg0: zombie.scripting.objects.VehicleScript$Part): void;
      setSpecificItem(arg0: boolean): void;
      setSuspensionCompression(arg0: number): void;
      setSuspensionDamping(arg0: number): void;
      setWheelFriction(arg0: number): void;
      toString(): string;
      updateSignalDevice(): void;
      wait(arg0: number): void;
    }
    // zombie.vehicles.VehicleType extends java.lang.Object
    export class VehicleType {
      private constructor();
      baseVehicleQuality: number;
      chanceOfOverCar: number;
      chanceToPartDamage: number;
      chanceToSpawnBurnt: number;
      chanceToSpawnNormal: number;
      chanceToSpawnSpecial: number;
      isBurntCar: boolean;
      isSpecialCar: boolean;
      name?: string;
      randomAngle: boolean;
      spawnRate: number;
      static readonly specialVehicles?: java.util.ArrayList<zombie.vehicles.VehicleType>;
      static readonly vehicles?: java.util.HashMap<string, zombie.vehicles.VehicleType>;
      readonly vehiclesDefinition?: java.util.ArrayList<zombie.vehicles.VehicleType$VehicleTypeDefinition>;
  
      Reset(): void;
      equals(arg0: any): boolean;
      getBaseVehicleQuality(): number;
      getChanceToSpawnKey(): number;
      getClass(): java.lang.Class<any>;
      getRandomBaseVehicleQuality(): number;
      getRandomVehicleType(arg0: string): zombie.vehicles.VehicleType;
      getTypeFromName(arg0: string): zombie.vehicles.VehicleType;
      hasTypeForZone(arg0: string): boolean;
      hashCode(): number;
      init(): void;
      notify(): void;
      notifyAll(): void;
      setChanceToSpawnKey(arg0: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.vehicles.VehicleType$VehicleTypeDefinition extends java.lang.Object
    export class VehicleType$VehicleTypeDefinition {
      private constructor();
      index: number;
      spawnChance: number;
      vehicleType?: string;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.vehicles.VehicleWindow extends java.lang.Object
    export class VehicleWindow {
      private constructor();
      damage(arg0: number): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getHealth(): number;
      getOpenDelta(): number;
      hashCode(): number;
      hit(arg0: zombie.characters.IsoGameCharacter): void;
      init(arg0: zombie.scripting.objects.VehicleScript$Window): void;
      isDestroyed(): boolean;
      isHittable(): boolean;
      isOpen(): boolean;
      isOpenable(): boolean;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      notify(): void;
      notifyAll(): void;
      save(arg0: java.nio.ByteBuffer): void;
      setHealth(arg0: number): void;
      setOpen(arg0: boolean): void;
      setOpenDelta(arg0: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.world.moddata {
    // zombie.world.moddata.ModData extends java.lang.Object
    export class ModData {
      private constructor();
      add(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
      create(): string;
      equals(arg0: any): boolean;
      exists(arg0: string): boolean;
      get(arg0: string): se.krka.kahlua.vm.KahluaTable;
      getClass(): java.lang.Class<any>;
      getOrCreate(arg0: string): se.krka.kahlua.vm.KahluaTable;
      getTableNames(): java.util.ArrayList<string>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      remove(arg0: string): se.krka.kahlua.vm.KahluaTable;
      request(arg0: string): void;
      toString(): string;
      transmit(arg0: string): void;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.worldMap {
    // zombie.worldMap.ImagePyramid extends java.lang.Object
    export class ImagePyramid {
      private constructor();
      destroy(): void;
      equals(arg0: any): boolean;
      generateFiles(arg0: string, arg1: string): void;
      generateZip(arg0: string, arg1: string): void;
      getClass(): java.lang.Class<any>;
      getImage(arg0: number, arg1: number, arg2: number): zombie.core.textures.Texture;
      getTexture(arg0: number, arg1: number, arg2: number): zombie.core.textures.TextureID;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      openZipFile(): java.nio.file.FileSystem;
      setDirectory(arg0: string): void;
      setZipFile(arg0: string): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.worldMap.ImagePyramid$PyramidTexture extends java.lang.Object
    export class ImagePyramid$PyramidTexture {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.worldMap.UIWorldMap extends zombie.ui.UIElement
    export class UIWorldMap {
      private constructor();
      readonly Controls?: java.util.ArrayList<zombie.ui.UIElement>;
      IgnoreLossControl: boolean;
      Parent?: zombie.ui.UIElement;
      alwaysBack: boolean;
      anchorBottom: boolean;
      anchorLeft: boolean;
      anchorRight: boolean;
      anchorTop: boolean;
      bScrollChildren: boolean;
      bScrollWithParent: boolean;
      capture: boolean;
      clickedValue?: string;
      defaultDraw: boolean;
      followGameWorld: boolean;
      height: number;
      playerContext: number;
      table?: se.krka.kahlua.vm.KahluaTable;
      visible: boolean;
      width: number;
      x: number;
      y: number;
  
      AddChild(arg0: zombie.ui.UIElement): void;
      BringToTop(arg0: zombie.ui.UIElement): void;
      ButtonClicked(arg0: string): void;
      ClearChildren(): void;
      DrawSubTextureRGBA(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number, arg12: number): void;
      DrawText(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextCentre(arg0: zombie.ui.UIFont, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextRight(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextUntrimmed(arg0: zombie.ui.UIFont, arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number): void;
      DrawTextureAngle(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextureCol(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: zombie.core.Color): void;
      DrawTextureColor(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
      DrawTextureIgnoreOffset(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTextureScaled(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
      DrawTextureScaledAspect(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledAspect2(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledCol(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTextureScaledColor(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureScaledUniform(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      DrawTextureTiled(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureTiledX(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTextureTiledY(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
      DrawTexture_FlippedX(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawTexture_FlippedXIgnoreOffset(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color): void;
      DrawUVSliceTexture(arg0: zombie.core.textures.Texture, arg1: number, arg2: number, arg3: number, arg4: number, arg5: zombie.core.Color, arg6: number, arg7: number, arg8: number, arg9: number): void;
      RemoveChild(arg0: zombie.ui.UIElement): void;
      RemoveControl(arg0: zombie.ui.UIElement): void;
      backMost(): void;
      bringToTop(): void;
      clampToParentX(arg0: number): number;
      clampToParentY(arg0: number): number;
      clearMaxDrawHeight(): void;
      clearStencilRect(): void;
      equals(arg0: any): boolean;
      getAPI(): zombie.worldMap.UIWorldMapV1;
      getAPIv1(): zombie.worldMap.UIWorldMapV1;
      getAbsoluteX(): number;
      getAbsoluteY(): number;
      getClass(): java.lang.Class<any>;
      getClickedValue(): string;
      getControls(): java.util.ArrayList<zombie.ui.UIElement>;
      getHeight(): number;
      getMaxDrawHeight(): number;
      getParent(): zombie.ui.UIElement;
      getPlayerContext(): number;
      getRenderThisPlayerOnly(): number;
      getScrollChildren(): boolean;
      getScrollHeight(): number;
      getScrollWithParent(): boolean;
      getTable(): se.krka.kahlua.vm.KahluaTable;
      getUIName(): string;
      getWidth(): number;
      getX(): number;
      getXScroll(): number;
      getXScrolled(arg0: zombie.ui.UIElement): number;
      getY(): number;
      getYScroll(): number;
      getYScrolled(arg0: zombie.ui.UIElement): number;
      hashCode(): number;
      ignoreHeightChange(): void;
      ignoreWidthChange(): void;
      isAnchorBottom(): boolean;
      isAnchorLeft(): boolean;
      isAnchorRight(): boolean;
      isAnchorTop(): boolean;
      isCapture(): boolean;
      isConsumeMouseEvents(): boolean;
      isDefaultDraw(): boolean;
      isEnabled(): boolean;
      isFollowGameWorld(): boolean;
      isForceCursorVisible(): boolean;
      isIgnoreLossControl(): boolean;
      isKeyConsumed(arg0: number): boolean;
      isMouseOver(): boolean;
      isPointOver(arg0: number, arg1: number): boolean;
      isVisible(): boolean;
      isWantKeyEvents(): boolean;
      notify(): void;
      notifyAll(): void;
      onKeyPress(arg0: number): void;
      onKeyRelease(arg0: number): void;
      onKeyRepeat(arg0: number): void;
      onMouseDown(arg0: number, arg1: number): boolean;
      onMouseMove(arg0: number, arg1: number): boolean;
      onMouseMoveOutside(arg0: number, arg1: number): void;
      onMouseUp(arg0: number, arg1: number): boolean;
      onMouseUpOutside(arg0: number, arg1: number): void;
      onMouseWheel(arg0: number): boolean;
      onResize(): void;
      onRightMouseDown(arg0: number, arg1: number): boolean;
      onRightMouseUp(arg0: number, arg1: number): boolean;
      onresize(): void;
      render(): void;
      repaintStencilRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
      resumeStencil(): void;
      setAlwaysOnTop(arg0: boolean): void;
      setAnchorBottom(arg0: boolean): void;
      setAnchorLeft(arg0: boolean): void;
      setAnchorRight(arg0: boolean): void;
      setAnchorTop(arg0: boolean): void;
      setCapture(arg0: boolean): void;
      setClickedValue(arg0: string): void;
      setConsumeMouseEvents(arg0: boolean): void;
      setControls(arg0: java.util.Vector<zombie.ui.UIElement>): void;
      setDefaultDraw(arg0: boolean): void;
      setEnabled(arg0: boolean): void;
      setExposed(arg0: zombie.Lua.LuaManager$Exposer): void;
      setFollowGameWorld(arg0: boolean): void;
      setForceCursorVisible(arg0: boolean): void;
      setHeight(arg0: number): void;
      setHeightOnly(arg0: number): void;
      setHeightSilent(arg0: number): void;
      setIgnoreLossControl(arg0: boolean): void;
      setMaxDrawHeight(arg0: number): void;
      setParent(arg0: zombie.ui.UIElement): void;
      setPlayerContext(arg0: number): void;
      setRenderClippedChildren(arg0: boolean): void;
      setRenderThisPlayerOnly(arg0: number): void;
      setScrollChildren(arg0: boolean): void;
      setScrollHeight(arg0: number): void;
      setScrollWithParent(arg0: boolean): void;
      setStencilRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setTable(arg0: se.krka.kahlua.vm.KahluaTable): void;
      setUIName(arg0: string): void;
      setVisible(arg0: boolean): void;
      setWantKeyEvents(arg0: boolean): void;
      setWidth(arg0: number): void;
      setWidthOnly(arg0: number): void;
      setWidthSilent(arg0: number): void;
      setX(arg0: number): void;
      setXScroll(arg0: number): void;
      setY(arg0: number): void;
      setYScroll(arg0: number): void;
      suspendStencil(): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
    // zombie.worldMap.UIWorldMapV1 extends java.lang.Object
    export class UIWorldMapV1 {
      private constructor();
      addData(arg0: string): void;
      addImages(arg0: string): void;
      centerOn(arg0: number, arg1: number): void;
      clearData(): void;
      endDirectoryData(): void;
      equals(arg0: any): boolean;
      getBaseZoom(): number;
      getBoolean(arg0: string): boolean;
      getCenterWorldX(): number;
      getCenterWorldY(): number;
      getClass(): java.lang.Class<any>;
      getDataCount(): number;
      getDataFileByIndex(arg0: number): string;
      getDouble(arg0: string, arg1: number): number;
      getHeightInCells(): number;
      getHeightInSquares(): number;
      getImagesCount(): number;
      getMarkers(): zombie.worldMap.markers.WorldMapMarkers;
      getMarkersAPI(): zombie.worldMap.markers.WorldMapMarkersV1;
      getMaxXInCells(): number;
      getMaxXInSquares(): number;
      getMaxYInCells(): number;
      getMaxYInSquares(): number;
      getMinXInCells(): number;
      getMinXInSquares(): number;
      getMinYInCells(): number;
      getMinYInSquares(): number;
      getOptionByIndex(arg0: number): zombie.config.ConfigOption;
      getOptionCount(): number;
      getRenderer(): zombie.worldMap.WorldMapRenderer;
      getStyle(): zombie.worldMap.styles.WorldMapStyle;
      getStyleAPI(): zombie.worldMap.styles.WorldMapStyleV1;
      getSymbolsAPI(): zombie.worldMap.symbols.WorldMapSymbolsV1;
      getWidthInCells(): number;
      getWidthInSquares(): number;
      getWorldScale(): number;
      getZoomF(): number;
      hashCode(): number;
      mouseToWorldX(): number;
      mouseToWorldY(): number;
      moveView(arg0: number, arg1: number): void;
      notify(): void;
      notifyAll(): void;
      resetView(): void;
      setBackgroundRGBA(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setBoolean(arg0: string, arg1: boolean): void;
      setBoundsFromData(): void;
      setBoundsFromWorld(): void;
      setBoundsInCells(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setBoundsInSquares(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setDouble(arg0: string, arg1: number): void;
      setDropShadowWidth(arg0: number): void;
      setMapItem(arg0: zombie.inventory.types.MapItem): void;
      setUnvisitedGridRGBA(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setUnvisitedRGBA(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setZoom(arg0: number): void;
      toString(): string;
      uiToWorldX(arg0: number, arg1: number): number;
      uiToWorldY(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): number;
      wait(arg0: number): void;
      worldOriginX(): number;
      worldOriginY(): number;
      worldToUIX(arg0: number, arg1: number): number;
      worldToUIY(arg0: number, arg1: number): number;
      zoomAt(arg0: number, arg1: number, arg2: number): void;
    }
    // zombie.worldMap.WorldMap extends java.lang.Object
    export class WorldMap {
      private constructor();
      readonly m_data?: java.util.ArrayList<zombie.worldMap.WorldMapData>;
      readonly m_images?: java.util.ArrayList<zombie.worldMap.WorldMapImages>;
      readonly m_lastDataInDirectory?: java.util.ArrayList<zombie.worldMap.WorldMapData>;
      m_maxDataX: number;
      m_maxDataY: number;
      m_maxX: number;
      m_maxY: number;
      m_minDataX: number;
      m_minDataY: number;
      m_minX: number;
      m_minY: number;
  
      Reset(): void;
      addData(arg0: string): void;
      addImages(arg0: string): void;
      clearData(): void;
      endDirectoryData(): void;
      equals(arg0: any): boolean;
      getCell(arg0: number, arg1: number): zombie.worldMap.WorldMapCell;
      getClass(): java.lang.Class<any>;
      getDataByIndex(arg0: number): zombie.worldMap.WorldMapData;
      getDataCount(): number;
      getDataHeightInCells(): number;
      getDataHeightInSquares(): number;
      getDataWidthInCells(): number;
      getDataWidthInSquares(): number;
      getHeightInCells(): number;
      getHeightInSquares(): number;
      getImagesByIndex(arg0: number): zombie.worldMap.WorldMapImages;
      getImagesCount(): number;
      getMaxXInCells(): number;
      getMaxXInSquares(): number;
      getMaxYInCells(): number;
      getMaxYInSquares(): number;
      getMinXInCells(): number;
      getMinXInSquares(): number;
      getMinYInCells(): number;
      getMinYInSquares(): number;
      getWidthInCells(): number;
      getWidthInSquares(): number;
      hasData(): boolean;
      hasImages(): boolean;
      hashCode(): number;
      isLastDataInDirectory(arg0: zombie.worldMap.WorldMapData): boolean;
      notify(): void;
      notifyAll(): void;
      onStateChanged(arg0: zombie.asset.Asset$State, arg1: zombie.asset.Asset$State, arg2: zombie.asset.Asset): void;
      setBoundsFromData(): void;
      setBoundsFromWorld(): void;
      setBoundsInCells(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setBoundsInSquares(arg0: number, arg1: number, arg2: number, arg3: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.worldMap.WorldMapCell extends java.lang.Object
    export class WorldMapCell {
      private constructor();
      readonly m_features?: java.util.ArrayList<zombie.worldMap.WorldMapFeature>;
      m_x: number;
      m_y: number;
  
      dispose(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      hitTest(arg0: number, arg1: number, arg2: java.util.ArrayList<zombie.worldMap.WorldMapFeature>): void;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.worldMap.WorldMapData extends zombie.asset.Asset
    export class WorldMapData {
      private constructor();
      static readonly ASSET_TYPE?: zombie.asset.AssetType;
      readonly m_cellLookup?: java.util.HashMap<number, zombie.worldMap.WorldMapCell>;
      readonly m_cells?: java.util.ArrayList<zombie.worldMap.WorldMapCell>;
      m_maxX: number;
      m_maxY: number;
      m_minX: number;
      m_minY: number;
      m_relativeFileName?: string;
      static readonly s_fileNameToData?: java.util.HashMap<string, zombie.worldMap.WorldMapData>;
  
      Reset(): void;
      addDependency(arg0: zombie.asset.Asset): void;
      clear(): void;
      equals(arg0: any): boolean;
      getAssetManager(): zombie.asset.AssetManager;
      getCell(arg0: number, arg1: number): zombie.worldMap.WorldMapCell;
      getClass(): java.lang.Class<any>;
      getHeightInCells(): number;
      getHeightInSquares(): number;
      getObserverCb(): zombie.asset.Asset$ObserverCallback;
      getOrCreateData(arg0: string): zombie.worldMap.WorldMapData;
      getPath(): zombie.asset.AssetPath;
      getRefCount(): number;
      getState(): zombie.asset.Asset$State;
      getType(): zombie.asset.AssetType;
      getWidthInCells(): number;
      getWidthInSquares(): number;
      hashCode(): number;
      hitTest(arg0: number, arg1: number, arg2: java.util.ArrayList<zombie.worldMap.WorldMapFeature>): void;
      isEmpty(): boolean;
      isFailure(): boolean;
      isReady(): boolean;
      notify(): void;
      notifyAll(): void;
      onCreated(arg0: zombie.asset.Asset$State): void;
      onLoaded(): void;
      removeDependency(arg0: zombie.asset.Asset): void;
      setAssetParams(arg0: zombie.asset.AssetManager$AssetParams): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.worldMap.WorldMapFeature extends java.lang.Object
    export class WorldMapFeature {
      private constructor();
      readonly m_cell?: zombie.worldMap.WorldMapCell;
      readonly m_geometries?: java.util.ArrayList<zombie.worldMap.WorldMapGeometry>;
      m_properties?: zombie.worldMap.WorldMapProperties;
  
      containsPoint(arg0: number, arg1: number): boolean;
      dispose(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hasLineString(): boolean;
      hasPoint(): boolean;
      hasPolygon(): boolean;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.worldMap.WorldMapGeometry extends java.lang.Object
    export class WorldMapGeometry {
      private constructor();
      m_maxX: number;
      m_maxY: number;
      m_minX: number;
      m_minY: number;
      readonly m_points?: java.util.ArrayList<zombie.worldMap.WorldMapPoints>;
      m_triangles?: number[];
      m_trianglesPerZoom?: java.util.ArrayList<zombie.worldMap.WorldMapGeometry$TrianglesPerZoom>;
      m_type?: zombie.worldMap.WorldMapGeometry$Type;
      m_vboIndex1: number;
      m_vboIndex2: number;
      m_vboIndex3: number;
      m_vboIndex4: number;
  
      calculateBounds(): void;
      containsPoint(arg0: number, arg1: number): boolean;
      dispose(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      triangulate(arg0: number[]): void;
      wait(arg0: number): void;
    }
    // zombie.worldMap.WorldMapGeometry$TrianglesPerZoom extends java.lang.Object
    export class WorldMapGeometry$TrianglesPerZoom {
      private constructor();
      m_triangles?: number[];
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.worldMap.WorldMapGeometry$Type */
    export class WorldMapGeometry$Type {
      /* ENUM VALUES */
      static readonly LineString: WorldMapGeometry$Type; 
      static readonly Point: WorldMapGeometry$Type; 
      static readonly Polygon: WorldMapGeometry$Type; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.worldMap.WorldMapGeometry$Type[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): WorldMapGeometry$Type;
      valueOf(arg0: string): zombie.worldMap.WorldMapGeometry$Type;
      values(): zombie.worldMap.WorldMapGeometry$Type[];
    }
    // zombie.worldMap.WorldMapImages extends java.lang.Object
    export class WorldMapImages {
      private constructor();
      Reset(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getMaxX(): number;
      getMaxY(): number;
      getMinX(): number;
      getMinY(): number;
      getOrCreate(arg0: string): zombie.worldMap.WorldMapImages;
      getPyramid(): zombie.worldMap.ImagePyramid;
      getResolution(): number;
      getZoom(arg0: number): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.worldMap.WorldMapPoints extends gnu.trove.list.array.TIntArrayList
    export class WorldMapPoints {
      private constructor();
      static readonly serialVersionUID: number;
  
      add(arg0: number[]): void;
      addAll(arg0: number[]): boolean;
      binarySearch(arg0: number): number;
      calculateBounds(): void;
      clear(arg0: number): void;
      contains(arg0: number): boolean;
      containsAll(arg0: java.util.Collection<any>): boolean;
      ensureCapacity(arg0: number): void;
      equals(arg0: any): boolean;
      fill(arg0: number): void;
      forEach(arg0: gnu.trove.procedure.TIntProcedure): boolean;
      forEachDescending(arg0: gnu.trove.procedure.TIntProcedure): boolean;
      get(arg0: number): number;
      getClass(): java.lang.Class<any>;
      getNoEntryValue(): number;
      getQuick(arg0: number): number;
      getX(arg0: number): number;
      getY(arg0: number): number;
      grep(arg0: gnu.trove.procedure.TIntProcedure): gnu.trove.list.TIntList;
      hashCode(): number;
      indexOf(arg0: number): number;
      insert(arg0: number, arg1: number): void;
      inverseGrep(arg0: gnu.trove.procedure.TIntProcedure): gnu.trove.list.TIntList;
      isClockwise(): boolean;
      isEmpty(): boolean;
      iterator(): gnu.trove.iterator.TIntIterator;
      lastIndexOf(arg0: number, arg1: number): number;
      max(): number;
      min(): number;
      notify(): void;
      notifyAll(): void;
      numPoints(): number;
      readExternal(arg0: java.io.ObjectInput): void;
      remove(arg0: number): boolean;
      removeAll(arg0: java.util.Collection<any>): boolean;
      removeAt(arg0: number): number;
      replace(arg0: number, arg1: number): number;
      reset(): void;
      resetQuick(): void;
      retainAll(arg0: java.util.Collection<any>): boolean;
      reverse(): void;
      set(arg0: number, arg1: number): number;
      setQuick(arg0: number, arg1: number): void;
      shuffle(arg0: java.util.Random): void;
      size(): number;
      sort(): void;
      subList(arg0: number, arg1: number): gnu.trove.list.TIntList;
      sum(): number;
      toArray(arg0: number[], arg1: number, arg2: number): number[];
      toString(): string;
      transformValues(arg0: gnu.trove._function.TIntFunction): void;
      trimToSize(): void;
      wait(arg0: number): void;
      wrap(arg0: number[]): gnu.trove.list.array.TIntArrayList;
      writeExternal(arg0: java.io.ObjectOutput): void;
    }
    // zombie.worldMap.WorldMapProperties extends java.util.HashMap<java.lang.String, java.lang.String>
    export class WorldMapProperties {
      private constructor();
      clear(): void;
      clone(): any;
      compute(arg0: string, arg1: java.util._function.BiFunction<string, string, string>): string;
      computeIfAbsent(arg0: string, arg1: java.util._function.Function<string, string>): string;
      computeIfPresent(arg0: string, arg1: java.util._function.BiFunction<string, string, string>): string;
      containsKey(arg0: any): boolean;
      containsValue(arg0: any): boolean;
      entrySet(): java.util.Set<java.util.Map$Entry<string, string>>;
      equals(arg0: any): boolean;
      forEach(arg0: java.util._function.BiConsumer<string, string>): void;
      get(arg0: any): string;
      getClass(): java.lang.Class<any>;
      getOrDefault(arg0: any, arg1: string): string;
      hashCode(): number;
      isEmpty(): boolean;
      keySet(): java.util.Set<string>;
      merge(arg0: string, arg1: string, arg2: java.util._function.BiFunction<string, string, string>): string;
      notify(): void;
      notifyAll(): void;
      put(arg0: string, arg1: string): string;
      putAll(arg0: java.util.Map<string, string>): void;
      putIfAbsent(arg0: string, arg1: string): string;
      remove(arg0: any): string;
      replace(arg0: string, arg1: string, arg2: string): boolean;
      replaceAll(arg0: java.util._function.BiFunction<string, string, string>): void;
      size(): number;
      toString(): string;
      values(): java.util.Collection<string>;
      wait(arg0: number): void;
    }
    // zombie.worldMap.WorldMapRenderer extends java.lang.Object
    export class WorldMapRenderer {
      private constructor();
      m_style?: zombie.worldMap.styles.WorldMapStyle;
  
      centerOn(arg0: number, arg1: number): void;
      equals(arg0: any): boolean;
      getAbsoluteX(): number;
      getAbsoluteY(): number;
      getBaseZoom(): number;
      getBoolean(arg0: string): boolean;
      getCenterWorldX(): number;
      getCenterWorldY(): number;
      getClass(): java.lang.Class<any>;
      getDisplayZoomF(): number;
      getDouble(arg0: string, arg1: number): number;
      getHeight(): number;
      getModelViewMatrix(): org.joml.Matrix4f;
      getOptionByIndex(arg0: number): zombie.config.ConfigOption;
      getOptionByName(arg0: string): zombie.config.ConfigOption;
      getOptionCount(): number;
      getProjectionMatrix(): org.joml.Matrix4f;
      getWidth(): number;
      getWorldMap(): zombie.worldMap.WorldMap;
      getWorldScale(arg0: number): number;
      getZoom(): number;
      getZoomF(): number;
      hashCode(): number;
      log2(arg0: number): number;
      moveView(arg0: number, arg1: number): void;
      notify(): void;
      notifyAll(): void;
      render(arg0: zombie.worldMap.UIWorldMap): void;
      resetView(): void;
      sceneToUI(arg0: number, arg1: number, arg2: number, arg3: org.joml.Matrix4f, arg4: org.joml.Matrix4f, arg5: org.joml.Vector3f): org.joml.Vector3f;
      setBoolean(arg0: string, arg1: boolean): void;
      setDouble(arg0: string, arg1: number): void;
      setDropShadowWidth(arg0: number): void;
      setMap(arg0: zombie.worldMap.WorldMap, arg1: number, arg2: number, arg3: number, arg4: number): void;
      setVisited(arg0: zombie.worldMap.WorldMapVisited): void;
      setZoom(arg0: number): void;
      toString(): string;
      uiToScene(arg0: number, arg1: number, arg2: org.joml.Matrix4f, arg3: org.joml.Matrix4f, arg4: org.joml.Vector3f): org.joml.Vector3f;
      uiToWorldX(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: org.joml.Matrix4f, arg6: org.joml.Matrix4f): number;
      uiToWorldY(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: org.joml.Matrix4f, arg6: org.joml.Matrix4f): number;
      updateView(): void;
      wait(arg0: number): void;
      worldOriginUIX(arg0: number, arg1: number): number;
      worldOriginUIY(arg0: number, arg1: number): number;
      worldToUIX(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: org.joml.Matrix4f, arg6: org.joml.Matrix4f): number;
      worldToUIY(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: org.joml.Matrix4f, arg6: org.joml.Matrix4f): number;
      zoomAt(arg0: number, arg1: number, arg2: number): void;
      zoomMult(arg0: number): number;
    }
    // zombie.worldMap.WorldMapRenderer$Drawer extends zombie.core.textures.TextureDraw$GenericDrawer
    export class WorldMapRenderer$Drawer {
      private constructor();
      m_zoomF: number;
  
      drawLineString(arg0: zombie.worldMap.styles.WorldMapStyleLayer$RenderArgs, arg1: zombie.worldMap.WorldMapFeature, arg2: zombie.worldMap.styles.WorldMapStyleLayer$RGBAf, arg3: number): void;
      drawLineStringTexture(arg0: zombie.worldMap.styles.WorldMapStyleLayer$RenderArgs, arg1: zombie.worldMap.WorldMapFeature, arg2: zombie.worldMap.styles.WorldMapStyleLayer$RGBAf, arg3: number, arg4: zombie.core.textures.Texture): void;
      drawLineStringXXX(arg0: zombie.worldMap.styles.WorldMapStyleLayer$RenderArgs, arg1: zombie.worldMap.WorldMapFeature, arg2: zombie.worldMap.styles.WorldMapStyleLayer$RGBAf, arg3: number): void;
      drawLineStringYYY(arg0: zombie.worldMap.styles.WorldMapStyleLayer$RenderArgs, arg1: zombie.worldMap.WorldMapFeature, arg2: zombie.worldMap.styles.WorldMapStyleLayer$RGBAf, arg3: number): void;
      drawTexture(arg0: zombie.core.textures.Texture, arg1: zombie.worldMap.styles.WorldMapStyleLayer$RGBAf, arg2: number, arg3: number, arg4: number, arg5: number): void;
      drawTextureTiled(arg0: zombie.core.textures.Texture, arg1: zombie.worldMap.styles.WorldMapStyleLayer$RGBAf, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      equals(arg0: any): boolean;
      fillPolygon(arg0: zombie.worldMap.styles.WorldMapStyleLayer$RenderArgs, arg1: zombie.worldMap.WorldMapFeature, arg2: zombie.worldMap.styles.WorldMapStyleLayer$RGBAf, arg3: zombie.core.textures.Texture, arg4: number): void;
      getAbsoluteX(): number;
      getAbsoluteY(): number;
      getClass(): java.lang.Class<any>;
      getHeight(): number;
      getWidth(): number;
      getWorldScale(): number;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      postRender(): void;
      render(): void;
      toString(): string;
      uiToWorldX(arg0: number, arg1: number): number;
      uiToWorldY(arg0: number, arg1: number): number;
      wait(arg0: number): void;
      worldOriginUIX(arg0: number): number;
      worldOriginUIY(arg0: number): number;
    }
    // zombie.worldMap.WorldMapRenderer$WorldMapBooleanOption extends zombie.config.BooleanConfigOption
    export class WorldMapRenderer$WorldMapBooleanOption {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDefaultValue(): boolean;
      getName(): string;
      getTooltip(): string;
      getType(): string;
      getValue(): boolean;
      getValueAsLuaString(): string;
      getValueAsObject(): any;
      getValueAsString(): string;
      hashCode(): number;
      isValidString(arg0: string): boolean;
      notify(): void;
      notifyAll(): void;
      parse(arg0: string): void;
      resetToDefault(): void;
      setDefaultToCurrentValue(): void;
      setValue(arg0: boolean): void;
      setValueFromObject(arg0: any): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.worldMap.WorldMapRenderer$WorldMapDoubleOption extends zombie.config.DoubleConfigOption
    export class WorldMapRenderer$WorldMapDoubleOption {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDefaultValue(): number;
      getMax(): number;
      getMin(): number;
      getName(): string;
      getTooltip(): string;
      getType(): string;
      getValue(): number;
      getValueAsLuaString(): string;
      getValueAsObject(): any;
      getValueAsString(): string;
      hashCode(): number;
      isValidString(arg0: string): boolean;
      notify(): void;
      notifyAll(): void;
      parse(arg0: string): void;
      resetToDefault(): void;
      setDefaultToCurrentValue(): void;
      setValue(arg0: number): void;
      setValueFromObject(arg0: any): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.worldMap.WorldMapVisited extends java.lang.Object
    export class WorldMapVisited {
      private constructor();
      Reset(): void;
      SaveAll(): void;
      clearKnownInCells(arg0: number, arg1: number, arg2: number, arg3: number): void;
      clearKnownInSquares(arg0: number, arg1: number, arg2: number, arg3: number): void;
      clearVisitedInCells(arg0: number, arg1: number, arg2: number, arg3: number): void;
      clearVisitedInSquares(arg0: number, arg1: number, arg2: number, arg3: number): void;
      equals(arg0: any): boolean;
      forget(): void;
      getClass(): java.lang.Class<any>;
      getInstance(): zombie.worldMap.WorldMapVisited;
      getMinX(): number;
      getMinY(): number;
      hashCode(): number;
      load(): void;
      notify(): void;
      notifyAll(): void;
      render(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: boolean): void;
      renderGrid(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
      renderMain(): void;
      save(): void;
      setBounds(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setKnownInCells(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setKnownInSquares(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setVisitedInCells(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setVisitedInSquares(arg0: number, arg1: number, arg2: number, arg3: number): void;
      toString(): string;
      update(): void;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.worldMap.markers {
    // zombie.worldMap.markers.WorldMapGridSquareMarker extends zombie.worldMap.markers.WorldMapMarker
    export class WorldMapGridSquareMarker {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getPool(): zombie.util.Pool<zombie.util.IPooledObject>;
      hashCode(): number;
      isFree(): boolean;
      notify(): void;
      notifyAll(): void;
      onReleased(): void;
      release(): void;
      setBlink(arg0: boolean): void;
      setFree(arg0: boolean): void;
      setMinScreenRadius(arg0: number): void;
      setPool(arg0: zombie.util.Pool<zombie.util.IPooledObject>): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.worldMap.markers.WorldMapMarker extends zombie.util.PooledObject
    export class WorldMapMarker {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getPool(): zombie.util.Pool<zombie.util.IPooledObject>;
      hashCode(): number;
      isFree(): boolean;
      notify(): void;
      notifyAll(): void;
      onReleased(): void;
      release(): void;
      setFree(arg0: boolean): void;
      setPool(arg0: zombie.util.Pool<zombie.util.IPooledObject>): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.worldMap.markers.WorldMapMarkers extends java.lang.Object
    export class WorldMapMarkers {
      private constructor();
      addGridSquareMarker(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): zombie.worldMap.markers.WorldMapGridSquareMarker;
      clear(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      removeMarker(arg0: zombie.worldMap.markers.WorldMapMarker): void;
      render(arg0: zombie.worldMap.UIWorldMap): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.worldMap.markers.WorldMapMarkersV1 extends java.lang.Object
    export class WorldMapMarkersV1 {
      private constructor();
      addGridSquareMarker(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): zombie.worldMap.markers.WorldMapMarkersV1$WorldMapGridSquareMarkerV1;
      clear(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      removeMarker(arg0: zombie.worldMap.markers.WorldMapMarkersV1$WorldMapMarkerV1): void;
      setExposed(arg0: zombie.Lua.LuaManager$Exposer): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.worldMap.markers.WorldMapMarkersV1$WorldMapGridSquareMarkerV1 extends zombie.worldMap.markers.WorldMapMarkersV1$WorldMapMarkerV1
    export class WorldMapMarkersV1$WorldMapGridSquareMarkerV1 {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      setBlink(arg0: boolean): void;
      setMinScreenRadius(arg0: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.worldMap.markers.WorldMapMarkersV1$WorldMapMarkerV1 extends java.lang.Object
    export class WorldMapMarkersV1$WorldMapMarkerV1 {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.worldMap.styles {
    // zombie.worldMap.styles.WorldMapStyle extends java.lang.Object
    export class WorldMapStyle {
      private constructor();
      readonly m_layers?: java.util.ArrayList<zombie.worldMap.styles.WorldMapStyleLayer>;
  
      copyFrom(arg0: zombie.worldMap.styles.WorldMapStyle): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.worldMap.styles.WorldMapStyleLayer extends java.lang.Object
    export class WorldMapStyleLayer {
      private constructor();
      m_filter?: zombie.worldMap.styles.WorldMapStyleLayer$IWorldMapStyleFilter;
      m_filterKey?: string;
      m_filterValue?: string;
      m_id?: string;
      m_minZoom: number;
  
      equals(arg0: any): boolean;
      filter(arg0: zombie.worldMap.WorldMapFeature, arg1: zombie.worldMap.styles.WorldMapStyleLayer$FilterArgs): boolean;
      getClass(): java.lang.Class<any>;
      getTypeString(): string;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      render(arg0: zombie.worldMap.WorldMapFeature, arg1: zombie.worldMap.styles.WorldMapStyleLayer$RenderArgs): void;
      renderCell(arg0: zombie.worldMap.styles.WorldMapStyleLayer$RenderArgs): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.worldMap.styles.WorldMapStyleLayer$ColorStop extends zombie.worldMap.styles.WorldMapStyleLayer$Stop
    export class WorldMapStyleLayer$ColorStop {
      private constructor();
      a: number;
      b: number;
      g: number;
      m_zoom: number;
      r: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.worldMap.styles.WorldMapStyleLayer$FilterArgs extends java.lang.Object
    export class WorldMapStyleLayer$FilterArgs {
      private constructor();
      renderer?: zombie.worldMap.WorldMapRenderer;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.worldMap.styles.WorldMapStyleLayer$FloatStop extends zombie.worldMap.styles.WorldMapStyleLayer$Stop
    export class WorldMapStyleLayer$FloatStop {
      private constructor();
      f: number;
      m_zoom: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.worldMap.styles.WorldMapStyleLayer$IWorldMapStyleFilter
    export class WorldMapStyleLayer$IWorldMapStyleFilter {
      private constructor();
      filter(arg0: zombie.worldMap.WorldMapFeature, arg1: zombie.worldMap.styles.WorldMapStyleLayer$FilterArgs): boolean;
    }
    // zombie.worldMap.styles.WorldMapStyleLayer$RGBAf extends java.lang.Object
    export class WorldMapStyleLayer$RGBAf {
      private constructor();
      a: number;
      b: number;
      g: number;
      r: number;
      static readonly s_pool?: zombie.popman.ObjectPool<zombie.worldMap.styles.WorldMapStyleLayer$RGBAf>;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      init(arg0: number, arg1: number, arg2: number, arg3: number): zombie.worldMap.styles.WorldMapStyleLayer$RGBAf;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.worldMap.styles.WorldMapStyleLayer$RenderArgs extends java.lang.Object
    export class WorldMapStyleLayer$RenderArgs {
      private constructor();
      cellX: number;
      cellY: number;
      drawer?: zombie.worldMap.WorldMapRenderer$Drawer;
      renderer?: zombie.worldMap.WorldMapRenderer;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.worldMap.styles.WorldMapStyleLayer$Stop extends java.lang.Object
    export class WorldMapStyleLayer$Stop {
      private constructor();
      m_zoom: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.worldMap.styles.WorldMapStyleLayer$TextureStop extends zombie.worldMap.styles.WorldMapStyleLayer$Stop
    export class WorldMapStyleLayer$TextureStop {
      private constructor();
      m_zoom: number;
      texture?: zombie.core.textures.Texture;
      texturePath?: string;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.worldMap.styles.WorldMapStyleV1 extends java.lang.Object
    export class WorldMapStyleV1 {
      private constructor();
      m_api?: zombie.worldMap.UIWorldMapV1;
      readonly m_layers?: java.util.ArrayList<zombie.worldMap.styles.WorldMapStyleV1$WorldMapStyleLayerV1>;
      m_style?: zombie.worldMap.styles.WorldMapStyle;
      m_ui?: zombie.worldMap.UIWorldMap;
  
      clear(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getLayerByIndex(arg0: number): zombie.worldMap.styles.WorldMapStyleV1$WorldMapStyleLayerV1;
      getLayerByName(arg0: string): zombie.worldMap.styles.WorldMapStyleV1$WorldMapStyleLayerV1;
      getLayerCount(): number;
      hashCode(): number;
      indexOfLayer(arg0: string): number;
      moveLayer(arg0: number, arg1: number): void;
      newLineLayer(arg0: string): zombie.worldMap.styles.WorldMapStyleV1$WorldMapStyleLayerV1;
      newPolygonLayer(arg0: string): zombie.worldMap.styles.WorldMapStyleV1$WorldMapStyleLayerV1;
      newTextureLayer(arg0: string): zombie.worldMap.styles.WorldMapStyleV1$WorldMapStyleLayerV1;
      notify(): void;
      notifyAll(): void;
      removeLayerById(arg0: string): void;
      removeLayerByIndex(arg0: number): void;
      setExposed(arg0: zombie.Lua.LuaManager$Exposer): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.worldMap.styles.WorldMapStyleV1$WorldMapLineStyleLayerV1 extends zombie.worldMap.styles.WorldMapStyleV1$WorldMapStyleLayerV1
    export class WorldMapStyleV1$WorldMapLineStyleLayerV1 {
      private constructor();
      addFill(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addLineWidth(arg0: number, arg1: number): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getId(): string;
      getMinZoom(): number;
      getTypeString(): string;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      setFilter(arg0: string, arg1: string): void;
      setId(arg0: string): void;
      setMinZoom(arg0: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.worldMap.styles.WorldMapStyleV1$WorldMapPolygonStyleLayerV1 extends zombie.worldMap.styles.WorldMapStyleV1$WorldMapStyleLayerV1
    export class WorldMapStyleV1$WorldMapPolygonStyleLayerV1 {
      private constructor();
      addFill(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addScale(arg0: number, arg1: number): void;
      addTexture(arg0: number, arg1: string): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getFillAlpha(arg0: number): number;
      getFillBlue(arg0: number): number;
      getFillGreen(arg0: number): number;
      getFillRed(arg0: number): number;
      getFillStops(): number;
      getFillZoom(arg0: number): number;
      getFilterKey(): string;
      getFilterValue(): string;
      getId(): string;
      getMinZoom(): number;
      getTexture(arg0: number): zombie.core.textures.Texture;
      getTexturePath(arg0: number): string;
      getTextureStops(): number;
      getTextureZoom(arg0: number): number;
      getTypeString(): string;
      hashCode(): number;
      moveFill(arg0: number, arg1: number): void;
      moveTexture(arg0: number, arg1: number): void;
      notify(): void;
      notifyAll(): void;
      removeFill(arg0: number): void;
      removeTexture(arg0: number): void;
      setFillRGBA(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      setFillZoom(arg0: number, arg1: number): void;
      setFilter(arg0: string, arg1: string): void;
      setId(arg0: string): void;
      setMinZoom(arg0: number): void;
      setTexturePath(arg0: number, arg1: string): void;
      setTextureZoom(arg0: number, arg1: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.worldMap.styles.WorldMapStyleV1$WorldMapStyleLayerV1 extends java.lang.Object
    export class WorldMapStyleV1$WorldMapStyleLayerV1 {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getId(): string;
      getMinZoom(): number;
      getTypeString(): string;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      setId(arg0: string): void;
      setMinZoom(arg0: number): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.worldMap.styles.WorldMapStyleV1$WorldMapTextureStyleLayerV1 extends zombie.worldMap.styles.WorldMapStyleV1$WorldMapStyleLayerV1
    export class WorldMapStyleV1$WorldMapTextureStyleLayerV1 {
      private constructor();
      addFill(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      addTexture(arg0: number, arg1: string): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getFillAlpha(arg0: number): number;
      getFillBlue(arg0: number): number;
      getFillGreen(arg0: number): number;
      getFillRed(arg0: number): number;
      getFillStops(): number;
      getFillZoom(arg0: number): number;
      getHeightInSquares(): number;
      getId(): string;
      getMaxXInSquares(): number;
      getMaxYInSquares(): number;
      getMinXInSquares(): number;
      getMinYInSquares(): number;
      getMinZoom(): number;
      getTexture(arg0: number): zombie.core.textures.Texture;
      getTexturePath(arg0: number): string;
      getTextureStops(): number;
      getTextureZoom(arg0: number): number;
      getTypeString(): string;
      getWidthInSquares(): number;
      hashCode(): number;
      isTile(): boolean;
      isUseWorldBounds(): boolean;
      moveFill(arg0: number, arg1: number): void;
      moveTexture(arg0: number, arg1: number): void;
      notify(): void;
      notifyAll(): void;
      removeAllFill(): void;
      removeAllTexture(): void;
      removeFill(arg0: number): void;
      removeTexture(arg0: number): void;
      setBoundsInSquares(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setFillRGBA(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
      setFillZoom(arg0: number, arg1: number): void;
      setId(arg0: string): void;
      setMinZoom(arg0: number): void;
      setTexturePath(arg0: number, arg1: string): void;
      setTextureZoom(arg0: number, arg1: number): void;
      setTile(arg0: boolean): void;
      setUseWorldBounds(arg0: boolean): void;
      toString(): string;
      wait(arg0: number): void;
    }
  }
  export namespace zombie.worldMap.symbols {
    // zombie.worldMap.symbols.WorldMapBaseSymbol extends java.lang.Object
    export class WorldMapBaseSymbol {
      private constructor();
      static DEFAULT_SCALE: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDisplayScale(arg0: zombie.worldMap.UIWorldMap): number;
      getType(): zombie.worldMap.symbols.WorldMapSymbols$WorldMapSymbolType;
      hashCode(): number;
      heightScaled(arg0: zombie.worldMap.UIWorldMap): number;
      isVisible(): boolean;
      layout(arg0: zombie.worldMap.UIWorldMap, arg1: zombie.worldMap.symbols.WorldMapSymbolCollisions, arg2: number, arg3: number): void;
      load(arg0: java.nio.ByteBuffer, arg1: number, arg2: number): void;
      notify(): void;
      notifyAll(): void;
      release(): void;
      render(arg0: zombie.worldMap.UIWorldMap, arg1: number, arg2: number): void;
      save(arg0: java.nio.ByteBuffer): void;
      setAnchor(arg0: number, arg1: number): void;
      setCollide(arg0: boolean): void;
      setPosition(arg0: number, arg1: number): void;
      setRGBA(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setScale(arg0: number): void;
      setVisible(arg0: boolean): void;
      toString(): string;
      wait(arg0: number): void;
      widthScaled(arg0: zombie.worldMap.UIWorldMap): number;
    }
    // zombie.worldMap.symbols.WorldMapSymbolCollisions extends java.lang.Object
    export class WorldMapSymbolCollisions {
      private constructor();
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      hashCode(): number;
      notify(): void;
      notifyAll(): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.worldMap.symbols.WorldMapSymbols extends java.lang.Object
    export class WorldMapSymbols {
      private constructor();
      static readonly COLLAPSED_RADIUS: number;
      readonly MIN_VISIBLE_ZOOM: number;
      static readonly SAVEFILE_VERSION: number;
  
      addText(arg0: string, arg1: boolean, arg2: zombie.ui.UIFont, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number): zombie.worldMap.symbols.WorldMapTextSymbol;
      addTexture(arg0: string, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): zombie.worldMap.symbols.WorldMapTextureSymbol;
      addTranslatedText(arg0: string, arg1: zombie.ui.UIFont, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): zombie.worldMap.symbols.WorldMapTextSymbol;
      addUntranslatedText(arg0: string, arg1: zombie.ui.UIFont, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): zombie.worldMap.symbols.WorldMapTextSymbol;
      clear(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getLayoutWorldScale(): number;
      getMiniMapSymbols(): boolean;
      getSymbolByIndex(arg0: number): zombie.worldMap.symbols.WorldMapBaseSymbol;
      getSymbolCount(): number;
      hashCode(): number;
      invalidateLayout(): void;
      load(arg0: java.nio.ByteBuffer, arg1: number): void;
      notify(): void;
      notifyAll(): void;
      removeSymbolByIndex(arg0: number): void;
      render(arg0: zombie.worldMap.UIWorldMap): void;
      save(arg0: java.nio.ByteBuffer): void;
      toString(): string;
      wait(arg0: number): void;
    }
    /** [ENUM] zombie.worldMap.symbols.WorldMapSymbols$WorldMapSymbolType */
    export class WorldMapSymbols$WorldMapSymbolType {
      /* ENUM VALUES */
      static readonly NONE: WorldMapSymbols$WorldMapSymbolType; 
      static readonly Text: WorldMapSymbols$WorldMapSymbolType; 
      static readonly Texture: WorldMapSymbols$WorldMapSymbolType; 
  
      /* FIELDS */
  
      private constructor();
  
      /* METHODS */
      static values(): zombie.worldMap.symbols.WorldMapSymbols$WorldMapSymbolType[];
      name(): string;
      ordinal(): number;
      valueOf(name: string): WorldMapSymbols$WorldMapSymbolType;
      valueOf(arg0: string): zombie.worldMap.symbols.WorldMapSymbols$WorldMapSymbolType;
      values(): zombie.worldMap.symbols.WorldMapSymbols$WorldMapSymbolType[];
    }
    // zombie.worldMap.symbols.WorldMapSymbolsV1 extends java.lang.Object
    export class WorldMapSymbolsV1 {
      private constructor();
      addTexture(arg0: string, arg1: number, arg2: number): zombie.worldMap.symbols.WorldMapSymbolsV1$WorldMapTextureSymbolV1;
      addTranslatedText(arg0: string, arg1: zombie.ui.UIFont, arg2: number, arg3: number): zombie.worldMap.symbols.WorldMapSymbolsV1$WorldMapTextSymbolV1;
      addUntranslatedText(arg0: string, arg1: zombie.ui.UIFont, arg2: number, arg3: number): zombie.worldMap.symbols.WorldMapSymbolsV1$WorldMapTextSymbolV1;
      clear(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getSymbolByIndex(arg0: number): zombie.worldMap.symbols.WorldMapSymbolsV1$WorldMapBaseSymbolV1;
      getSymbolCount(): number;
      hashCode(): number;
      hitTest(arg0: number, arg1: number): number;
      notify(): void;
      notifyAll(): void;
      removeSymbolByIndex(arg0: number): void;
      setExposed(arg0: zombie.Lua.LuaManager$Exposer): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.worldMap.symbols.WorldMapSymbolsV1$WorldMapBaseSymbolV1 extends zombie.util.PooledObject
    export class WorldMapSymbolsV1$WorldMapBaseSymbolV1 {
      private constructor();
      equals(arg0: any): boolean;
      getAlpha(): number;
      getBlue(): number;
      getClass(): java.lang.Class<any>;
      getDisplayHeight(): number;
      getDisplayWidth(): number;
      getDisplayX(): number;
      getDisplayY(): number;
      getGreen(): number;
      getPool(): zombie.util.Pool<zombie.util.IPooledObject>;
      getRed(): number;
      getWorldX(): number;
      getWorldY(): number;
      hashCode(): number;
      isFree(): boolean;
      isText(): boolean;
      isTexture(): boolean;
      isVisible(): boolean;
      notify(): void;
      notifyAll(): void;
      onReleased(): void;
      release(): void;
      setAnchor(arg0: number, arg1: number): void;
      setCollide(arg0: boolean): void;
      setFree(arg0: boolean): void;
      setPool(arg0: zombie.util.Pool<zombie.util.IPooledObject>): void;
      setPosition(arg0: number, arg1: number): void;
      setRGBA(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setScale(arg0: number): void;
      setVisible(arg0: boolean): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.worldMap.symbols.WorldMapSymbolsV1$WorldMapTextSymbolV1 extends zombie.worldMap.symbols.WorldMapSymbolsV1$WorldMapBaseSymbolV1
    export class WorldMapSymbolsV1$WorldMapTextSymbolV1 {
      private constructor();
      equals(arg0: any): boolean;
      getAlpha(): number;
      getBlue(): number;
      getClass(): java.lang.Class<any>;
      getDisplayHeight(): number;
      getDisplayWidth(): number;
      getDisplayX(): number;
      getDisplayY(): number;
      getGreen(): number;
      getPool(): zombie.util.Pool<zombie.util.IPooledObject>;
      getRed(): number;
      getTranslatedText(): string;
      getUntranslatedText(): string;
      getWorldX(): number;
      getWorldY(): number;
      hashCode(): number;
      isFree(): boolean;
      isText(): boolean;
      isTexture(): boolean;
      isVisible(): boolean;
      notify(): void;
      notifyAll(): void;
      onReleased(): void;
      release(): void;
      setAnchor(arg0: number, arg1: number): void;
      setCollide(arg0: boolean): void;
      setFree(arg0: boolean): void;
      setPool(arg0: zombie.util.Pool<zombie.util.IPooledObject>): void;
      setPosition(arg0: number, arg1: number): void;
      setRGBA(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setScale(arg0: number): void;
      setTranslatedText(arg0: string): void;
      setUntranslatedText(arg0: string): void;
      setVisible(arg0: boolean): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.worldMap.symbols.WorldMapSymbolsV1$WorldMapTextureSymbolV1 extends zombie.worldMap.symbols.WorldMapSymbolsV1$WorldMapBaseSymbolV1
    export class WorldMapSymbolsV1$WorldMapTextureSymbolV1 {
      private constructor();
      equals(arg0: any): boolean;
      getAlpha(): number;
      getBlue(): number;
      getClass(): java.lang.Class<any>;
      getDisplayHeight(): number;
      getDisplayWidth(): number;
      getDisplayX(): number;
      getDisplayY(): number;
      getGreen(): number;
      getPool(): zombie.util.Pool<zombie.util.IPooledObject>;
      getRed(): number;
      getSymbolID(): string;
      getWorldX(): number;
      getWorldY(): number;
      hashCode(): number;
      isFree(): boolean;
      isText(): boolean;
      isTexture(): boolean;
      isVisible(): boolean;
      notify(): void;
      notifyAll(): void;
      onReleased(): void;
      release(): void;
      setAnchor(arg0: number, arg1: number): void;
      setCollide(arg0: boolean): void;
      setFree(arg0: boolean): void;
      setPool(arg0: zombie.util.Pool<zombie.util.IPooledObject>): void;
      setPosition(arg0: number, arg1: number): void;
      setRGBA(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setScale(arg0: number): void;
      setVisible(arg0: boolean): void;
      toString(): string;
      wait(arg0: number): void;
    }
    // zombie.worldMap.symbols.WorldMapTextSymbol extends zombie.worldMap.symbols.WorldMapBaseSymbol
    export class WorldMapTextSymbol {
      private constructor();
      static DEFAULT_SCALE: number;
  
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDisplayScale(arg0: zombie.worldMap.UIWorldMap): number;
      getTranslatedText(): string;
      getType(): zombie.worldMap.symbols.WorldMapSymbols$WorldMapSymbolType;
      getUntranslatedText(): string;
      hashCode(): number;
      heightScaled(arg0: zombie.worldMap.UIWorldMap): number;
      isVisible(): boolean;
      layout(arg0: zombie.worldMap.UIWorldMap, arg1: zombie.worldMap.symbols.WorldMapSymbolCollisions, arg2: number, arg3: number): void;
      load(arg0: java.nio.ByteBuffer, arg1: number, arg2: number): void;
      notify(): void;
      notifyAll(): void;
      release(): void;
      render(arg0: zombie.worldMap.UIWorldMap, arg1: number, arg2: number): void;
      save(arg0: java.nio.ByteBuffer): void;
      setAnchor(arg0: number, arg1: number): void;
      setCollide(arg0: boolean): void;
      setPosition(arg0: number, arg1: number): void;
      setRGBA(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setScale(arg0: number): void;
      setTranslatedText(arg0: string): void;
      setUntranslatedText(arg0: string): void;
      setVisible(arg0: boolean): void;
      toString(): string;
      wait(arg0: number): void;
      widthScaled(arg0: zombie.worldMap.UIWorldMap): number;
    }
    // zombie.worldMap.symbols.WorldMapTextureSymbol extends zombie.worldMap.symbols.WorldMapBaseSymbol
    export class WorldMapTextureSymbol {
      private constructor();
      static DEFAULT_SCALE: number;
  
      checkTexture(): void;
      equals(arg0: any): boolean;
      getClass(): java.lang.Class<any>;
      getDisplayScale(arg0: zombie.worldMap.UIWorldMap): number;
      getSymbolID(): string;
      getType(): zombie.worldMap.symbols.WorldMapSymbols$WorldMapSymbolType;
      hashCode(): number;
      heightScaled(arg0: zombie.worldMap.UIWorldMap): number;
      isVisible(): boolean;
      layout(arg0: zombie.worldMap.UIWorldMap, arg1: zombie.worldMap.symbols.WorldMapSymbolCollisions, arg2: number, arg3: number): void;
      load(arg0: java.nio.ByteBuffer, arg1: number, arg2: number): void;
      notify(): void;
      notifyAll(): void;
      release(): void;
      render(arg0: zombie.worldMap.UIWorldMap, arg1: number, arg2: number): void;
      save(arg0: java.nio.ByteBuffer): void;
      setAnchor(arg0: number, arg1: number): void;
      setCollide(arg0: boolean): void;
      setPosition(arg0: number, arg1: number): void;
      setRGBA(arg0: number, arg1: number, arg2: number, arg3: number): void;
      setScale(arg0: number): void;
      setSymbolID(arg0: string): void;
      setVisible(arg0: boolean): void;
      toString(): string;
      wait(arg0: number): void;
      widthScaled(arg0: zombie.worldMap.UIWorldMap): number;
    }
  }

  // File: globalobject.d.ts
  ///////////////////////////////////////////////////////////////////

  export function AddNoiseToken(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
  export function AddWorldSound(arg0: zombie.characters.IsoPlayer, arg1: number, arg2: number): void;
  export function InvMngGetItem(arg0: number, arg1: string, arg2: zombie.characters.IsoPlayer): void;
  export function InvMngRemoveItem(arg0: number, arg1: zombie.characters.IsoPlayer): void;
  export function ProceedFactionMessage(arg0: string): void;
  export function ProcessAdminChatMessage(arg0: string): void;
  export function ProcessSafehouseMessage(arg0: string): void;
  export function Render3DItem(arg0: zombie.inventory.InventoryItem, arg1: zombie.iso.IsoGridSquare, arg2: number, arg3: number, arg4: number, arg5: number): void;
  export function SendCommandToServer(arg0: string): void;
  export function SyncXp(arg0: zombie.characters.IsoPlayer): void;
  export function ZombRand(arg0: number): number;
  export function ZombRandBetween(arg0: number, arg1: number): number;
  export function ZombRandFloat(arg0: number, arg1: number): number;
  export function acceptFactionInvite(arg0: zombie.characters.Faction, arg1: string): void;
  export function acceptSafehouseInvite(arg0: zombie.iso.areas.SafeHouse, arg1: string): void;
  export function acceptTrading(arg0: zombie.characters.IsoPlayer, arg1: zombie.characters.IsoPlayer, arg2: boolean): void;
  export function activateJoypadOnSteamDeck(): void;
  export function activateSteamOverlayToWebPage(arg0: string): void;
  export function activateSteamOverlayToWorkshop(): void;
  export function activateSteamOverlayToWorkshopItem(arg0: string): void;
  export function activateSteamOverlayToWorkshopUser(): void;
  export function addAllBurntVehicles(): void;
  export function addAllSmashedVehicles(): void;
  export function addAllVehicles(arg0: java.util._function.Predicate<zombie.scripting.objects.VehicleScript>): void;
  export function addBloodSplat(arg0: zombie.iso.IsoGridSquare, arg1: number): void;
  export function addCarCrash(): void;
  export function addPhysicsObject(): zombie.vehicles.BaseVehicle;
  export function addSound(arg0: zombie.iso.IsoObject, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
  export function addTicket(arg0: string, arg1: string, arg2: number): void;
  export function addUserlog(arg0: string, arg1: string, arg2: string): void;
  export function addVehicle(arg0: string): zombie.vehicles.BaseVehicle;
  export function addVehicleDebug(arg0: string, arg1: zombie.iso.IsoDirections, arg2: number, arg3: zombie.iso.IsoGridSquare): zombie.vehicles.BaseVehicle;
  export function addVirtualZombie(arg0: number, arg1: number): void;
  export function addWarningPoint(arg0: string, arg1: string, arg2: number): void;
  export function addZombieSitting(arg0: number, arg1: number, arg2: number): void;
  export function addZombiesEating(arg0: number, arg1: number, arg2: number, arg3: number, arg4: boolean): void;
  export function addZombiesInBuilding(arg0: zombie.iso.BuildingDef, arg1: number, arg2: string, arg3: zombie.iso.RoomDef, arg4: number): java.util.ArrayList<zombie.characters.IsoZombie>;
  export function addZombiesInOutfit(arg0: number, arg1: number, arg2: number, arg3: number, arg4: string, arg5: number, arg6: boolean, arg7: boolean, arg8: boolean, arg9: boolean, arg10: number): java.util.ArrayList<zombie.characters.IsoZombie>;
  export function addZombiesInOutfitArea(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: string, arg7: number): java.util.ArrayList<zombie.characters.IsoZombie>;
  export function assaultPlayer(): void;
  export function attachTrailerToPlayerVehicle(arg0: number): void;
  export function backToSinglePlayer(): void;
  export function breakpoint(): void;
  export function canConnect(): boolean;
  export function canInviteFriends(): boolean;
  export function canModifyPlayerScoreboard(): boolean;
  export function canModifyPlayerStats(): boolean;
  export function canSeePlayerStats(): boolean;
  export function checkPlayerCanUseChat(arg0: string): boolean;
  export function checkSaveFileExists(arg0: string): boolean;
  export function checkSaveFolderExists(arg0: string): boolean;
  export function checkSavePlayerExists(): boolean;
  export function checkServerName(arg0: string): string;
  export function cloneItemType(arg0: string, arg1: string): zombie.scripting.objects.Item;
  export function configureLighting(arg0: number): void;
  export function connectToServerStateCallback(arg0: string): void;
  export function copyTable(arg0: se.krka.kahlua.vm.KahluaTable, arg1: se.krka.kahlua.vm.KahluaTable): se.krka.kahlua.vm.KahluaTable;
  export function createHordeFromTo(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
  export function createHordeInAreaTo(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
  export function createItemTransaction(arg0: zombie.inventory.InventoryItem, arg1: zombie.inventory.ItemContainer, arg2: zombie.inventory.ItemContainer): void;
  export function createNewScriptItem(arg0: string, arg1: string, arg2: string, arg3: string, arg4: string): zombie.scripting.objects.Item;
  export function createRandomDeadBody(arg0: zombie.iso.IsoGridSquare, arg1: number): zombie.iso.objects.IsoDeadBody;
  export function createRegionFile(): se.krka.kahlua.vm.KahluaTable;
  export function createStory(arg0: string): void;
  export function createTile(arg0: string, arg1: zombie.iso.IsoGridSquare): void;
  export function createWorld(arg0: string): void;
  export function createZombie(arg0: number, arg1: number, arg2: number, arg3: zombie.characters.SurvivorDesc, arg4: number, arg5: zombie.iso.IsoDirections): zombie.characters.IsoZombie;
  export function debugFullyStreamedIn(arg0: number, arg1: number): void;
  export function debugLuaTable(arg0: any, arg1: number): void;
  export function deleteAllGameModeSaves(arg0: string): void;
  export function deletePlayerSave(arg0: string): void;
  export function deleteSandboxPreset(arg0: string): void;
  export function deleteSave(arg0: string): void;
  export function disconnect(): void;
  export function doChallenge(arg0: se.krka.kahlua.vm.KahluaTable): void;
  export function doKeyPress(arg0: boolean): void;
  export function doTutorial(arg0: se.krka.kahlua.vm.KahluaTable): void;
  export function drawOverheadMap(arg0: zombie.ui.UIElement, arg1: number, arg2: number, arg3: number): void;
  export function endFileInput(): void;
  export function endFileOutput(): void;
  export function endHelicopter(): void;
  export function endTextFileInput(): void;
  export function equals(arg0: any): boolean;
  export function executeQuery(arg0: string, arg1: se.krka.kahlua.vm.KahluaTable): void;
  export function fileExists(arg0: string): boolean;
  export function focusOnTab(arg0: number): void;
  export function forceChangeState(arg0: zombie.gameStates.GameState): void;
  export function forceDisconnect(): void;
  export function forceSnowCheck(): void;
  export function getAbsoluteSaveFolderName(arg0: string): string;
  export function getAccessLevel(): string;
  export function getActivatedMods(): java.util.ArrayList<string>;
  export function getAllBeardStyles(): java.util.ArrayList<string>;
  export function getAllDecalNamesForItem(arg0: zombie.inventory.InventoryItem): java.util.ArrayList<string>;
  export function getAllHairStyles(arg0: boolean): java.util.ArrayList<string>;
  export function getAllItems(): java.util.ArrayList<zombie.scripting.objects.Item>;
  export function getAllItemsForBodyLocation(arg0: string): se.krka.kahlua.vm.KahluaTable;
  export function getAllOutfits(arg0: boolean): java.util.ArrayList<string>;
  export function getAllRecipes(): java.util.ArrayList<zombie.scripting.objects.Recipe>;
  export function getAllSavedPlayers(): java.util.List<java.io.BufferedReader>;
  export function getAllVehicles(): java.util.ArrayList<string>;
  export function getAmbientStreamManager(): zombie.BaseAmbientStreamManager;
  export function getAnimationViewerState(): zombie.gameStates.AnimationViewerState;
  export function getAttachmentEditorState(): zombie.gameStates.AttachmentEditorState;
  export function getAverageFSP(): number;
  export function getBeardStylesInstance(): zombie.core.skinnedmodel.population.BeardStyles;
  export function getBehaviourDebugPlayer(): zombie.characters.IsoGameCharacter;
  export function getButtonCount(arg0: number): number;
  export function getCallframeTop(arg0: se.krka.kahlua.vm.Coroutine): number;
  export function getCameraOffX(): number;
  export function getCameraOffY(): number;
  export function getCell(): zombie.iso.IsoCell;
  export function getClass(): java.lang.Class<any>;
  export function getClassField(arg0: any, arg1: number): java.lang.reflect.Field;
  export function getClassFieldVal(arg0: any, arg1: java.lang.reflect.Field): any;
  export function getClassFunction(arg0: any, arg1: number): java.lang.reflect.Method;
  export function getClientUsername(): string;
  export function getClimateManager(): zombie.iso.weather.ClimateManager;
  export function getClimateMoon(): zombie.iso.weather.ClimateMoon;
  export function getConnectedPlayers(): java.util.ArrayList<zombie.characters.IsoPlayer>;
  export function getContainerOverlays(): zombie.iso.ContainerOverlays;
  export function getControllerAxisCount(arg0: number): number;
  export function getControllerAxisValue(arg0: number, arg1: number): number;
  export function getControllerButtonCount(arg0: number): number;
  export function getControllerCount(): number;
  export function getControllerDeadZone(arg0: number, arg1: number): number;
  export function getControllerGUID(arg0: number): string;
  export function getControllerName(arg0: number): string;
  export function getControllerPovX(arg0: number): number;
  export function getControllerPovY(arg0: number): number;
  export function getCore(): zombie.core.Core;
  export function getCoroutineCallframeStack(arg0: se.krka.kahlua.vm.Coroutine, arg1: number): se.krka.kahlua.vm.LuaCallFrame;
  export function getCoroutineObjStack(arg0: se.krka.kahlua.vm.Coroutine, arg1: number): any;
  export function getCoroutineObjStackWithBase(arg0: se.krka.kahlua.vm.Coroutine, arg1: number): any;
  export function getCoroutineTop(arg0: se.krka.kahlua.vm.Coroutine): number;
  export function getCurrentCoroutine(): se.krka.kahlua.vm.Coroutine;
  export function getCurrentUserProfileName(): string;
  export function getCurrentUserSteamID(): string;
  export function getDBSchema(): void;
  export function getDebug(): boolean;
  export function getDebugOptions(): zombie.debug.DebugOptions;
  export function getDirectionTo(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.iso.IsoObject): zombie.iso.IsoDirections;
  export function getEditVehicleState(): zombie.vehicles.EditVehicleState;
  export function getErosion(): zombie.erosion.ErosionMain;
  export function getEvolvedRecipes(): java.util.Stack<zombie.scripting.objects.EvolvedRecipe>;
  export function getFMODSoundBank(): zombie.audio.BaseSoundBank;
  export function getFileInput(arg0: string): java.io.DataInputStream;
  export function getFileOutput(arg0: string): java.io.DataOutputStream;
  export function getFileReader(arg0: string, arg1: boolean): java.io.BufferedReader;
  export function getFileSeparator(): string;
  export function getFileWriter(arg0: string, arg1: boolean, arg2: boolean): zombie.Lua.LuaManager$GlobalObject$LuaFileWriter;
  export function getFilenameOfCallframe(arg0: se.krka.kahlua.vm.LuaCallFrame): string;
  export function getFilenameOfClosure(arg0: se.krka.kahlua.vm.LuaClosure): string;
  export function getFirstLineOfClosure(arg0: se.krka.kahlua.vm.LuaClosure): number;
  export function getFriendsList(): se.krka.kahlua.vm.KahluaTable;
  export function getFullSaveDirectoryTable(): se.krka.kahlua.vm.KahluaTable;
  export function getGameClient(): zombie.network.GameClient;
  export function getGameFilesInput(arg0: string): java.io.DataInputStream;
  export function getGameFilesTextInput(arg0: string): java.io.BufferedReader;
  export function getGameSpeed(): number;
  export function getGameTime(): zombie.GameTime;
  export function getGametimeTimestamp(): number;
  export function getHairStylesInstance(): zombie.core.skinnedmodel.population.HairStyles;
  export function getHourMinute(): string;
  export function getIsoMarkers(): zombie.iso.IsoMarkers;
  export function getItemNameFromFullType(arg0: string): string;
  export function getItemText(arg0: string): string;
  export function getJoypadAButton(arg0: number): number;
  export function getJoypadAimingAxisX(arg0: number): number;
  export function getJoypadAimingAxisY(arg0: number): number;
  export function getJoypadBButton(arg0: number): number;
  export function getJoypadBackButton(arg0: number): number;
  export function getJoypadLBumper(arg0: number): number;
  export function getJoypadLeftStickButton(arg0: number): number;
  export function getJoypadMovementAxisX(arg0: number): number;
  export function getJoypadMovementAxisY(arg0: number): number;
  export function getJoypadRBumper(arg0: number): number;
  export function getJoypadRightStickButton(arg0: number): number;
  export function getJoypadStartButton(arg0: number): number;
  export function getJoypadXButton(arg0: number): number;
  export function getJoypadYButton(arg0: number): number;
  export function getKeyCode(arg0: string): number;
  export function getKeyName(arg0: number): string;
  export function getLastPlayedDate(arg0: string): string;
  export function getLastStandPlayerFileNames(): java.util.List<string>;
  export function getLastStandPlayersDirectory(): string;
  export function getLatestSave(): se.krka.kahlua.vm.KahluaTable;
  export function getLineNumber(arg0: se.krka.kahlua.vm.LuaCallFrame): number;
  export function getLoadedLua(arg0: number): string;
  export function getLoadedLuaCount(): number;
  export function getLocalVarCount(arg0: se.krka.kahlua.vm.Coroutine): number;
  export function getLocalVarName(arg0: se.krka.kahlua.vm.Coroutine, arg1: number): string;
  export function getLocalVarStack(arg0: se.krka.kahlua.vm.Coroutine, arg1: number): number;
  export function getLotDirectories(): java.util.ArrayList<string>;
  export function getLuaDebuggerErrorCount(): number;
  export function getLuaDebuggerErrors(): java.util.ArrayList<string>;
  export function getMapDirectoryTable(): se.krka.kahlua.vm.KahluaTable;
  export function getMapFoldersForMod(arg0: string): java.util.ArrayList<string>;
  export function getMapInfo(arg0: string): se.krka.kahlua.vm.KahluaTable;
  export function getMaxActivePlayers(): number;
  export function getMaxPlayers(): number;
  export function getMethodParameter(arg0: java.lang.reflect.Method, arg1: number): string;
  export function getMethodParameterCount(arg0: java.lang.reflect.Method): number;
  export function getModDirectoryTable(): se.krka.kahlua.vm.KahluaTable;
  export function getModFileReader(arg0: string, arg1: string, arg2: boolean): java.io.BufferedReader;
  export function getModFileWriter(arg0: string, arg1: string, arg2: boolean, arg3: boolean): zombie.Lua.LuaManager$GlobalObject$LuaFileWriter;
  export function getModInfo(arg0: string): zombie.gameStates.ChooseGameInfo$Mod;
  export function getModInfoByID(arg0: string): zombie.gameStates.ChooseGameInfo$Mod;
  export function getMods(): java.util.List<string>;
  export function getMouseX(): number;
  export function getMouseXScaled(): number;
  export function getMouseY(): number;
  export function getMouseYScaled(): number;
  export function getMyDocumentFolder(): string;
  export function getNumActivePlayers(): number;
  export function getNumClassFields(arg0: any): number;
  export function getNumClassFunctions(arg0: any): number;
  export function getOnlinePlayers(): java.util.ArrayList<zombie.characters.IsoPlayer>;
  export function getOnlineUsername(): string;
  export function getPacketCounts(arg0: number): se.krka.kahlua.vm.KahluaTable;
  export function getPerformance(): zombie.core.PerformanceSettings;
  export function getPlayer(): zombie.characters.IsoPlayer;
  export function getPlayerByOnlineID(arg0: number): zombie.characters.IsoPlayer;
  export function getPlayerFromUsername(arg0: string): zombie.characters.IsoPlayer;
  export function getPlayerInfo(arg0: zombie.characters.IsoPlayer): se.krka.kahlua.vm.KahluaTable;
  export function getPlayerScreenHeight(arg0: number): number;
  export function getPlayerScreenLeft(arg0: number): number;
  export function getPlayerScreenTop(arg0: number): number;
  export function getPlayerScreenWidth(arg0: number): number;
  export function getPublicServersList(): se.krka.kahlua.vm.KahluaTable;
  export function getPuddlesManager(): zombie.iso.IsoPuddles;
  export function getRadioAPI(): zombie.radio.RadioAPI;
  export function getRadioText(arg0: string): string;
  export function getRadioTranslators(arg0: zombie.core.Language): java.util.ArrayList<string>;
  export function getRandomUUID(): string;
  export function getRecipeDisplayName(arg0: string): string;
  export function getReconnectCountdownTimer(): string;
  export function getRenderer(): zombie.core.SpriteRenderer;
  export function getSLSoundManager(): zombie.radio.StorySounds.SLSoundManager;
  export function getSandboxFileWriter(arg0: string, arg1: boolean, arg2: boolean): zombie.Lua.LuaManager$GlobalObject$LuaFileWriter;
  export function getSandboxOptions(): zombie.SandboxOptions;
  export function getSandboxPresets(): java.util.List<string>;
  export function getSaveDirectory(arg0: string): java.util.ArrayList<java.io.File>;
  export function getSaveDirectoryTable(): se.krka.kahlua.vm.KahluaTable;
  export function getSaveInfo(arg0: string): se.krka.kahlua.vm.KahluaTable;
  export function getSaveName(arg0: java.io.File): string;
  export function getScriptManager(): zombie.scripting.ScriptManager;
  export function getSearchMode(): zombie.iso.SearchMode;
  export function getServerAddressFromArgs(): string;
  export function getServerList(): se.krka.kahlua.vm.KahluaTable;
  export function getServerListFile(): string;
  export function getServerModData(): void;
  export function getServerName(): string;
  export function getServerOptions(): zombie.network.ServerOptions;
  export function getServerPasswordFromArgs(): string;
  export function getServerSavedWorldVersion(arg0: string): number;
  export function getServerSettingsManager(): zombie.network.ServerSettingsManager;
  export function getServerSpawnRegions(): se.krka.kahlua.vm.KahluaTable;
  export function getServerStatistic(): se.krka.kahlua.vm.KahluaTable;
  export function getServerStatisticEnable(): boolean;
  export function getShortenedFilename(arg0: string): string;
  export function getSleepingEvent(): zombie.ai.sadisticAIDirector.SleepingEvent;
  export function getSoundManager(): zombie.BaseSoundManager;
  export function getSpecificPlayer(arg0: number): zombie.characters.IsoPlayer;
  export function getSprite(arg0: string): zombie.iso.sprite.IsoSprite;
  export function getSpriteManager(arg0: string): zombie.iso.sprite.IsoSpriteManager;
  export function getSquare(arg0: number, arg1: number, arg2: number): zombie.iso.IsoGridSquare;
  export function getStatistics(): se.krka.kahlua.vm.KahluaTable;
  export function getSteamAvatarFromSteamID(arg0: string): zombie.core.textures.Texture;
  export function getSteamAvatarFromUsername(arg0: string): zombie.core.textures.Texture;
  export function getSteamIDFromUsername(arg0: string): string;
  export function getSteamModeActive(): boolean;
  export function getSteamProfileNameFromSteamID(arg0: string): string;
  export function getSteamProfileNameFromUsername(arg0: string): string;
  export function getSteamScoreboard(): boolean;
  export function getSteamWorkshopItemIDs(): java.util.ArrayList<string>;
  export function getSteamWorkshopItemMods(arg0: string): java.util.ArrayList<zombie.gameStates.ChooseGameInfo$Mod>;
  export function getSteamWorkshopStagedItems(): java.util.ArrayList<zombie.core.znet.SteamWorkshopItem>;
  export function getTableResult(arg0: string, arg1: number): void;
  export function getText(arg0: string, arg1: any, arg2: any, arg3: any): string;
  export function getTextManager(): zombie.ui.TextManager;
  export function getTextMediaEN(arg0: string): string;
  export function getTextOrNull(arg0: string, arg1: any): string;
  export function getTexture(arg0: string): zombie.core.textures.Texture;
  export function getTextureFromSaveDir(arg0: string, arg1: string): zombie.core.textures.Texture;
  export function getTickets(arg0: string): void;
  export function getTileOverlays(): zombie.iso.TileOverlays;
  export function getTime(): se.krka.kahlua.vm.KahluaTable;
  export function getTimeInMillis(): number;
  export function getTimestamp(): number;
  export function getTimestampMs(): number;
  export function getTranslatorCredits(arg0: zombie.core.Language): java.util.ArrayList<string>;
  export function getUrlInputStream(arg0: string): java.io.DataInputStream;
  export function getVehicleById(arg0: number): zombie.vehicles.BaseVehicle;
  export function getVehicleInfo(arg0: zombie.vehicles.BaseVehicle): se.krka.kahlua.vm.KahluaTable;
  export function getVehicleZoneAt(arg0: number, arg1: number, arg2: number): zombie.iso.IsoMetaGrid$VehicleZone;
  export function getWorld(): zombie.iso.IsoWorld;
  export function getWorldMarkers(): zombie.iso.WorldMarkers;
  export function getWorldSoundManager(): zombie.WorldSoundManager;
  export function getZombieInfo(arg0: zombie.characters.IsoZombie): se.krka.kahlua.vm.KahluaTable;
  export function getZomboidRadio(): zombie.radio.ZomboidRadio;
  export function getZone(arg0: number, arg1: number, arg2: number): zombie.iso.IsoMetaGrid$Zone;
  export function getZones(arg0: number, arg1: number, arg2: number): java.util.ArrayList<zombie.iso.IsoMetaGrid$Zone>;
  export function hasBreakpoint(arg0: string, arg1: number): boolean;
  export function hasDataBreakpoint(arg0: se.krka.kahlua.vm.KahluaTable, arg1: any): boolean;
  export function hasDataReadBreakpoint(arg0: se.krka.kahlua.vm.KahluaTable, arg1: any): boolean;
  export function hashCode(): number;
  export function initUISystem(): void;
  export function instanceItem(arg0: string): zombie.inventory.InventoryItem;
  export function instof(arg0: any, arg1: string): boolean;
  export function inviteFriend(arg0: string): void;
  export function is64bit(): boolean;
  export function isAccessLevel(arg0: string): boolean;
  export function isAdmin(): boolean;
  export function isAltKeyDown(): boolean;
  export function isClient(): boolean;
  export function isControllerConnected(arg0: number): boolean;
  export function isCoopHost(): boolean;
  export function isCtrlKeyDown(): boolean;
  export function isCurrentExecutionPoint(arg0: string, arg1: number): boolean;
  export function isDebugEnabled(): boolean;
  export function isDemo(): boolean;
  export function isDesktopOpenSupported(): boolean;
  export function isFloatingGamepadTextInputVisible(): boolean;
  export function isGamePaused(): boolean;
  export function isIngameState(): boolean;
  export function isItemTransactionConsistent(arg0: zombie.inventory.InventoryItem, arg1: zombie.inventory.ItemContainer, arg2: zombie.inventory.ItemContainer): boolean;
  export function isJoypadConnected(arg0: number): boolean;
  export function isJoypadDown(arg0: number): boolean;
  export function isJoypadLBPressed(arg0: number): boolean;
  export function isJoypadLTPressed(arg0: number): boolean;
  export function isJoypadLeft(arg0: number): boolean;
  export function isJoypadLeftStickButtonPressed(arg0: number): boolean;
  export function isJoypadPressed(arg0: number, arg1: number): boolean;
  export function isJoypadRBPressed(arg0: number): boolean;
  export function isJoypadRTPressed(arg0: number): boolean;
  export function isJoypadRight(arg0: number): boolean;
  export function isJoypadRightStickButtonPressed(arg0: number): boolean;
  export function isJoypadUp(arg0: number): boolean;
  export function isKeyDown(arg0: number): boolean;
  export function isKeyPressed(arg0: number): boolean;
  export function isModActive(arg0: zombie.gameStates.ChooseGameInfo$Mod): boolean;
  export function isMouseButtonDown(arg0: number): boolean;
  export function isPublicServerListAllowed(): boolean;
  export function isServer(): boolean;
  export function isServerSoftReset(): boolean;
  export function isShiftKeyDown(): boolean;
  export function isSoundPlaying(arg0: any): boolean;
  export function isSteamOverlayEnabled(): boolean;
  export function isSteamRunningOnSteamDeck(): boolean;
  export function isSystemLinux(): boolean;
  export function isSystemMacOS(): boolean;
  export function isSystemWindows(): boolean;
  export function isType(arg0: any, arg1: string): boolean;
  export function isValidSteamID(arg0: string): boolean;
  export function isValidUserName(arg0: string): boolean;
  export function isXBOXController(): boolean;
  export function isoRegionsRenderer(): zombie.iso.areas.isoregion.IsoRegionsRenderer;
  export function isoToScreenX(arg0: number, arg1: number, arg2: number, arg3: number): number;
  export function isoToScreenY(arg0: number, arg1: number, arg2: number, arg3: number): number;
  export function loadSkinnedZomboidModel(arg0: string, arg1: string, arg2: string): zombie.core.skinnedmodel.model.Model;
  export function loadStaticZomboidModel(arg0: string, arg1: string, arg2: string): zombie.core.skinnedmodel.model.Model;
  export function loadVehicleModel(arg0: string, arg1: string, arg2: string): zombie.core.skinnedmodel.model.Model;
  export function loadZomboidModel(arg0: string, arg1: string, arg2: string, arg3: string, arg4: boolean): zombie.core.skinnedmodel.model.Model;
  export function localVarName(arg0: se.krka.kahlua.vm.Coroutine, arg1: number): string;
  export function luaDebug(): void;
  export function manipulateSavefile(arg0: string, arg1: string): void;
  export function moduleDotType(arg0: string, arg1: string): string;
  export function notify(): void;
  export function notifyAll(): void;
  export function openURl(arg0: string): void;
  export function pauseSoundAndMusic(): void;
  export function ping(arg0: string, arg1: string, arg2: string, arg3: string): void;
  export function playServerSound(arg0: string, arg1: zombie.iso.IsoGridSquare): void;
  export function proceedPM(arg0: string): string;
  export function processGeneralMessage(arg0: string): void;
  export function processSayMessage(arg0: string): void;
  export function processShoutMessage(arg0: string): void;
  export function querySteamWorkshopItemDetails(arg0: java.util.ArrayList<string>, arg1: se.krka.kahlua.vm.LuaClosure, arg2: any): void;
  export function queueCharEvent(arg0: string): void;
  export function queueKeyEvent(arg0: number): void;
  export function rainConfig(arg0: string, arg1: number): void;
  export function reactivateJoypadAfterResetLua(): boolean;
  export function refreshAnimSets(arg0: boolean): void;
  export function reloadActionGroups(): void;
  export function reloadControllerConfigFiles(): void;
  export function reloadEngineRPM(): void;
  export function reloadLuaFile(arg0: string): void;
  export function reloadModelsMatching(arg0: string): void;
  export function reloadServerLuaFile(arg0: string): void;
  export function reloadSoundFiles(): void;
  export function reloadVehicleTextures(arg0: string): void;
  export function reloadVehicles(): void;
  export function removeItemTransaction(arg0: zombie.inventory.InventoryItem, arg1: zombie.inventory.ItemContainer, arg2: zombie.inventory.ItemContainer): void;
  export function removeTicket(arg0: number): void;
  export function removeUserlog(arg0: string, arg1: string, arg2: string): void;
  export function renderIsoCircle(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
  export function replaceWith(arg0: string, arg1: string, arg2: string): string;
  export function requestPacketCounts(): void;
  export function requestTrading(arg0: zombie.characters.IsoPlayer, arg1: zombie.characters.IsoPlayer): void;
  export function requestUserlog(arg0: string): void;
  export function require(arg0: string): any;
  export function resetRegionFile(): void;
  export function resumeSoundAndMusic(): void;
  export function revertToKeyboardAndMouse(): void;
  export function sanitizeWorldName(arg0: string): string;
  export function save(arg0: boolean): void;
  export function saveControllerSettings(arg0: number): void;
  export function saveGame(): void;
  export function saveModsFile(): void;
  export function scoreboardUpdate(): void;
  export function screenToIsoX(arg0: number, arg1: number, arg2: number, arg3: number): number;
  export function screenToIsoY(arg0: number, arg1: number, arg2: number, arg3: number): number;
  export function screenZoomIn(): void;
  export function screenZoomOut(): void;
  export function sendAddXp(arg0: zombie.characters.IsoPlayer, arg1: zombie.characters.skills.PerkFactory$Perk, arg2: number): void;
  export function sendBandage(arg0: number, arg1: number, arg2: boolean, arg3: number, arg4: boolean, arg5: string): void;
  export function sendCataplasm(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
  export function sendCleanBurn(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.IsoGameCharacter, arg2: zombie.characters.BodyDamage.BodyPart, arg3: zombie.inventory.InventoryItem): void;
  export function sendClientCommand(arg0: zombie.characters.IsoPlayer, arg1: string, arg2: string, arg3: se.krka.kahlua.vm.KahluaTable): void;
  export function sendClothing(arg0: zombie.characters.IsoPlayer): void;
  export function sendDisinfect(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.IsoGameCharacter, arg2: zombie.characters.BodyDamage.BodyPart, arg3: zombie.inventory.InventoryItem): void;
  export function sendFactionInvite(arg0: zombie.characters.Faction, arg1: zombie.characters.IsoPlayer, arg2: string): void;
  export function sendItemListNet(arg0: zombie.characters.IsoPlayer, arg1: java.util.ArrayList<zombie.inventory.InventoryItem>, arg2: zombie.characters.IsoPlayer, arg3: string, arg4: string): boolean;
  export function sendItemsInContainer(arg0: zombie.iso.IsoObject, arg1: zombie.inventory.ItemContainer): void;
  export function sendPersonalColor(arg0: zombie.characters.IsoPlayer): void;
  export function sendPing(): void;
  export function sendPlayerExtraInfo(arg0: zombie.characters.IsoPlayer): void;
  export function sendPlayerStatsChange(arg0: zombie.characters.IsoPlayer): void;
  export function sendRemoveBullet(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.IsoGameCharacter, arg2: zombie.characters.BodyDamage.BodyPart): void;
  export function sendRemoveGlass(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.IsoGameCharacter, arg2: zombie.characters.BodyDamage.BodyPart, arg3: boolean): void;
  export function sendRequestInventory(arg0: zombie.characters.IsoPlayer): void;
  export function sendSafehouseInvite(arg0: zombie.iso.areas.SafeHouse, arg1: zombie.characters.IsoPlayer, arg2: string): void;
  export function sendServerCommand(arg0: zombie.characters.IsoPlayer, arg1: string, arg2: string, arg3: se.krka.kahlua.vm.KahluaTable): void;
  export function sendSplint(arg0: number, arg1: number, arg2: boolean, arg3: number, arg4: string): void;
  export function sendStitch(arg0: zombie.characters.IsoGameCharacter, arg1: zombie.characters.IsoGameCharacter, arg2: zombie.characters.BodyDamage.BodyPart, arg3: zombie.inventory.InventoryItem, arg4: boolean): void;
  export function sendVisual(arg0: zombie.characters.IsoPlayer): void;
  export function serverConnect(arg0: string, arg1: string, arg2: string, arg3: string, arg4: string, arg5: string): void;
  export function serverConnectCoop(arg0: string): void;
  export function serverFileExists(arg0: string): boolean;
  export function setActivePlayer(arg0: number): void;
  export function setAdmin(): void;
  export function setAggroTarget(arg0: number, arg1: number, arg2: number): void;
  export function setBehaviorStep(arg0: boolean): void;
  export function setControllerDeadZone(arg0: number, arg1: number, arg2: number): void;
  export function setDebugToggleControllerPluggedIn(arg0: number): void;
  export function setGameSpeed(arg0: number): void;
  export function setModelMetaData(arg0: string, arg1: string, arg2: string, arg3: string, arg4: boolean): void;
  export function setMouseXY(arg0: number, arg1: number): void;
  export function setPlayerJoypad(arg0: number, arg1: number, arg2: zombie.characters.IsoPlayer, arg3: string): void;
  export function setPlayerMouse(arg0: zombie.characters.IsoPlayer): void;
  export function setPlayerMovementActive(arg0: number, arg1: boolean): void;
  export function setProgressBarValue(arg0: zombie.characters.IsoPlayer, arg1: number): void;
  export function setPuddles(arg0: number): void;
  export function setSavefilePlayer1(arg0: string, arg1: string, arg2: number): void;
  export function setServerStatisticEnable(arg0: boolean): void;
  export function setShowPausedMessage(arg0: boolean): void;
  export function showAnimationViewer(): void;
  export function showAttachmentEditor(): void;
  export function showChunkDebugger(): void;
  export function showFolderInDesktop(arg0: string): void;
  export function showGlobalObjectDebugger(): void;
  export function showSteamFloatingGamepadTextInput(arg0: boolean, arg1: number, arg2: number, arg3: number, arg4: number): boolean;
  export function showSteamGamepadTextInput(arg0: boolean, arg1: boolean, arg2: string, arg3: number, arg4: string): boolean;
  export function showVehicleEditor(arg0: string): void;
  export function showWorldMapEditor(arg0: string): void;
  export function showWrongChatTabMessage(arg0: number, arg1: number, arg2: string): void;
  export function sledgeDestroy(arg0: zombie.iso.IsoObject): void;
  export function spawnHorde(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
  export function spawnpointsExistsForMod(arg0: string, arg1: string): boolean;
  export function steamGetInternetServerDetails(arg0: number): zombie.network.Server;
  export function steamReleaseInternetServersRequest(): void;
  export function steamRequestInternetServersCount(): number;
  export function steamRequestInternetServersList(): void;
  export function steamRequestServerDetails(arg0: string, arg1: number): boolean;
  export function steamRequestServerRules(arg0: string, arg1: number): boolean;
  export function stopPing(): void;
  export function stopSound(arg0: number): void;
  export function tabToX(arg0: string, arg1: number): string;
  export function takeScreenshot(arg0: string): void;
  export function testHelicopter(): void;
  export function testSound(): void;
  export function timSort(arg0: se.krka.kahlua.vm.KahluaTable, arg1: any): void;
  export function toInt(arg0: number): number;
  export function toString(): string;
  export function toggleBreakOnChange(arg0: se.krka.kahlua.vm.KahluaTable, arg1: any): void;
  export function toggleBreakOnRead(arg0: se.krka.kahlua.vm.KahluaTable, arg1: any): void;
  export function toggleBreakpoint(arg0: string, arg1: number): void;
  export function toggleModActive(arg0: zombie.gameStates.ChooseGameInfo$Mod, arg1: boolean): void;
  export function toggleSafetyServer(arg0: zombie.characters.IsoPlayer): void;
  export function toggleVehicleRenderToTexture(): void;
  export function tradingUISendAddItem(arg0: zombie.characters.IsoPlayer, arg1: zombie.characters.IsoPlayer, arg2: zombie.inventory.InventoryItem): void;
  export function tradingUISendRemoveItem(arg0: zombie.characters.IsoPlayer, arg1: zombie.characters.IsoPlayer, arg2: number): void;
  export function tradingUISendUpdateState(arg0: zombie.characters.IsoPlayer, arg1: zombie.characters.IsoPlayer, arg2: number): void;
  export function transformIntoKahluaTable(arg0: java.util.HashMap<any, any>): se.krka.kahlua.vm.KahluaTable;
  export function translatePointXInOverheadMapToWindow(arg0: number, arg1: zombie.ui.UIElement, arg2: number, arg3: number): number;
  export function translatePointXInOverheadMapToWorld(arg0: number, arg1: zombie.ui.UIElement, arg2: number, arg3: number): number;
  export function translatePointYInOverheadMapToWindow(arg0: number, arg1: zombie.ui.UIElement, arg2: number, arg3: number): number;
  export function translatePointYInOverheadMapToWorld(arg0: number, arg1: zombie.ui.UIElement, arg2: number, arg3: number): number;
  export function triggerEvent(arg0: string, arg1: any): void;
  export function updateChatSettings(arg0: string, arg1: boolean, arg2: boolean): void;
  export function updateFire(): void;
  export function useStaticErosionRand(arg0: boolean): void;
  export function useTextureFiltering(arg0: boolean): void;
  export function wait(arg0: number): void;
  export function wasKeyDown(arg0: number): boolean;
  export function wasMouseActiveMoreRecentlyThanJoypad(): boolean;
  export function writeLog(arg0: string, arg1: string): void;
  export function zpopClearZombies(arg0: number, arg1: number): void;
  export function zpopNewRenderer(): zombie.popman.ZombiePopulationRenderer;
  export function zpopSpawnNow(arg0: number, arg1: number): void;
  export function zpopSpawnTimeToZero(arg0: number, arg1: number): void;

  // File: class_vars.d.ts
  ///////////////////////////////////////////////////////////////////

  export const KahluaConverterManager: se.krka.kahlua.converter.KahluaConverterManager;
  export const KahluaThread: se.krka.kahlua.vm.KahluaThread;
  export const Prototype: se.krka.kahlua.vm.Prototype;
  export const KahluaTable: se.krka.kahlua.vm.KahluaTable;
  export const Platform: se.krka.kahlua.vm.Platform;
  export const LuaClosure: se.krka.kahlua.vm.LuaClosure;
  export const LuaCallFrame: se.krka.kahlua.vm.LuaCallFrame;
  export const Coroutine: se.krka.kahlua.vm.Coroutine;
  export const KahluaUtil: se.krka.kahlua.vm.KahluaUtil;
  export const ClassDebugInformation: se.krka.kahlua.integration.expose.ClassDebugInformation;
  export const LuaCaller: se.krka.kahlua.integration.LuaCaller;
  export const J2SEPlatform: se.krka.kahlua.j2se.J2SEPlatform;
  export const KahluaTableImpl: se.krka.kahlua.j2se.KahluaTableImpl;
  export const CRC32: java.util.zip.CRC32;
  export const Function: java.util._function.Function<any, any>;
  export const ToLongFunction: java.util._function.ToLongFunction<any>;
  export const Consumer: java.util._function.Consumer<any>;
  export const BiFunction: java.util._function.BiFunction<any, any, any>;
  export const IntFunction: java.util._function.IntFunction<any>;
  export const Supplier: java.util._function.Supplier<any>;
  export const ToIntFunction: java.util._function.ToIntFunction<any>;
  export const UnaryOperator: java.util._function.UnaryOperator<any>;
  export const BooleanSupplier: java.util._function.BooleanSupplier;
  export const BiConsumer: java.util._function.BiConsumer<any, any>;
  export const Predicate: java.util._function.Predicate<any>;
  export const ToDoubleFunction: java.util._function.ToDoubleFunction<any>;
  export const Stream: java.util.stream.Stream<any>;
  export const ReentrantLock: java.util.concurrent.locks.ReentrantLock;
  export const ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue<any>;
  export const Locale: java.util.Locale;
  export const Set: java.util.Set<any>;
  export const HashMap: java.util.HashMap<any, any>;
  export const ArrayList: java.util.ArrayList<any>;
  export const Comparator: java.util.Comparator<any>;
  export const LinkedHashMap: java.util.LinkedHashMap<any, any>;
  export const Random: java.util.Random;
  export const Iterator: java.util.Iterator<any>;
  export const List: java.util.List<any>;
  export const EnumMap: java.util.EnumMap<any, any>;
  export const Vector: java.util.Vector<any>;
  export const Spliterator: java.util.Spliterator<any>;
  export const HashSet: java.util.HashSet<any>;
  export const AbstractList: java.util.AbstractList<any>;
  export const Enumeration: java.util.Enumeration<any>;
  export const Entry: java.util.Map$Entry<any, any>;
  export const Calendar: java.util.Calendar;
  export const GregorianCalendar: java.util.GregorianCalendar;
  export const BitSet: java.util.BitSet;
  export const ListIterator: java.util.ListIterator<any>;
  export const TreeMap: java.util.TreeMap<any, any>;
  export const Deque: java.util.Deque<any>;
  export const LinkedList: java.util.LinkedList<any>;
  export const Date: java.util.Date;
  export const ArrayDeque: java.util.ArrayDeque<any>;
  export const Stack: java.util.Stack<any>;
  export const TimeZone: java.util.TimeZone;
  export const Collection: java.util.Collection<any>;
  export const Map: java.util.Map<any, any>;
  export const Path: java.nio.file.Path;
  export const FileSystem: java.nio.file.FileSystem;
  export const FileChannel: java.nio.channels.FileChannel;
  export const IntBuffer: java.nio.IntBuffer;
  export const CharBuffer: java.nio.CharBuffer;
  export const FloatBuffer: java.nio.FloatBuffer;
  export const ByteBuffer: java.nio.ByteBuffer;
  export const ShortBuffer: java.nio.ShortBuffer;
  export const PrintStream: java.io.PrintStream;
  export const ObjectOutput: java.io.ObjectOutput;
  export const DataOutputStream: java.io.DataOutputStream;
  export const InputStream: java.io.InputStream;
  export const OutputStream: java.io.OutputStream;
  export const Reader: java.io.Reader;
  export const DataInputStream: java.io.DataInputStream;
  export const ObjectOutputStream: java.io.ObjectOutputStream;
  export const FileDescriptor: java.io.FileDescriptor;
  export const BufferedWriter: java.io.BufferedWriter;
  export const RandomAccessFile: java.io.RandomAccessFile;
  export const BufferedInputStream: java.io.BufferedInputStream;
  export const BufferedReader: java.io.BufferedReader;
  export const ObjectInput: java.io.ObjectInput;
  export const File: java.io.File;
  export const Writer: java.io.Writer;
  export const LocalDateTime: java.time.LocalDateTime;
  export const DateFormat: java.text.DateFormat;
  export const DateFormatSymbols: java.text.DateFormatSymbols;
  export const SimpleDateFormat: java.text.SimpleDateFormat;
  export const AttributedCharacterIterator: java.text.AttributedCharacterIterator;
  export const NumberFormat: java.text.NumberFormat;
  export const InetSocketAddress: java.net.InetSocketAddress;
  export const URI: java.net.URI;
  export const Field: java.lang.reflect.Field;
  export const Type: java.lang.reflect.Type;
  export const Constructor: java.lang.reflect.Constructor<any>;
  export const Method: java.lang.reflect.Method;
  export const Enum: java.lang.Enum<any>;
  export const Iterable: java.lang.Iterable<any>;
  export const ThreadLocal: java.lang.ThreadLocal<any>;
  export const Runnable: java.lang.Runnable;
  export const CharSequence: java.lang.CharSequence;
  export const Throwable: java.lang.Throwable;
  export const StackTraceElement: java.lang.StackTraceElement;
  export const Class: java.lang.Class<any>;
  export const Math: java.lang.Math;
  export const Thread: java.lang.Thread;
  export const BufferedImage: java.awt.image.BufferedImage;
  export const Rectangle: java.awt.Rectangle;
  export const Dimension: java.awt.Dimension;
  export const Point: java.awt.Point;
  export const WorldMapLineStyleLayerV1: zombie.worldMap.styles.WorldMapStyleV1$WorldMapLineStyleLayerV1;
  export const WorldMapTextureStyleLayerV1: zombie.worldMap.styles.WorldMapStyleV1$WorldMapTextureStyleLayerV1;
  export const FilterArgs: zombie.worldMap.styles.WorldMapStyleLayer$FilterArgs;
  export const Stop: zombie.worldMap.styles.WorldMapStyleLayer$Stop;
  export const FloatStop: zombie.worldMap.styles.WorldMapStyleLayer$FloatStop;
  export const ColorStop: zombie.worldMap.styles.WorldMapStyleLayer$ColorStop;
  export const RenderArgs: zombie.worldMap.styles.WorldMapStyleLayer$RenderArgs;
  export const WorldMapStyleLayerV1: zombie.worldMap.styles.WorldMapStyleV1$WorldMapStyleLayerV1;
  export const WorldMapStyleLayer: zombie.worldMap.styles.WorldMapStyleLayer;
  export const RGBAf: zombie.worldMap.styles.WorldMapStyleLayer$RGBAf;
  export const WorldMapPolygonStyleLayerV1: zombie.worldMap.styles.WorldMapStyleV1$WorldMapPolygonStyleLayerV1;
  export const IWorldMapStyleFilter: zombie.worldMap.styles.WorldMapStyleLayer$IWorldMapStyleFilter;
  export const WorldMapStyleV1: zombie.worldMap.styles.WorldMapStyleV1;
  export const WorldMapStyle: zombie.worldMap.styles.WorldMapStyle;
  export const TextureStop: zombie.worldMap.styles.WorldMapStyleLayer$TextureStop;
  export const WorldMapMarkerV1: zombie.worldMap.markers.WorldMapMarkersV1$WorldMapMarkerV1;
  export const WorldMapGridSquareMarker: zombie.worldMap.markers.WorldMapGridSquareMarker;
  export const WorldMapMarkersV1: zombie.worldMap.markers.WorldMapMarkersV1;
  export const WorldMapMarkers: zombie.worldMap.markers.WorldMapMarkers;
  export const WorldMapGridSquareMarkerV1: zombie.worldMap.markers.WorldMapMarkersV1$WorldMapGridSquareMarkerV1;
  export const WorldMapMarker: zombie.worldMap.markers.WorldMapMarker;
  export const WorldMapTextureSymbol: zombie.worldMap.symbols.WorldMapTextureSymbol;
  export const WorldMapBaseSymbol: zombie.worldMap.symbols.WorldMapBaseSymbol;
  export const WorldMapSymbols: zombie.worldMap.symbols.WorldMapSymbols;
  export const WorldMapSymbolsV1: zombie.worldMap.symbols.WorldMapSymbolsV1;
  export const WorldMapSymbolType: zombie.worldMap.symbols.WorldMapSymbols$WorldMapSymbolType;
  export const WorldMapTextureSymbolV1: zombie.worldMap.symbols.WorldMapSymbolsV1$WorldMapTextureSymbolV1;
  export const WorldMapBaseSymbolV1: zombie.worldMap.symbols.WorldMapSymbolsV1$WorldMapBaseSymbolV1;
  export const WorldMapTextSymbol: zombie.worldMap.symbols.WorldMapTextSymbol;
  export const WorldMapSymbolCollisions: zombie.worldMap.symbols.WorldMapSymbolCollisions;
  export const WorldMapTextSymbolV1: zombie.worldMap.symbols.WorldMapSymbolsV1$WorldMapTextSymbolV1;
  export const WorldMapDoubleOption: zombie.worldMap.WorldMapRenderer$WorldMapDoubleOption;
  export const WorldMapRenderer: zombie.worldMap.WorldMapRenderer;
  export const WorldMapPoints: zombie.worldMap.WorldMapPoints;
  export const PyramidTexture: zombie.worldMap.ImagePyramid$PyramidTexture;
  export const WorldMap: zombie.worldMap.WorldMap;
  export const WorldMapGeometry: zombie.worldMap.WorldMapGeometry;
  export const ImagePyramid: zombie.worldMap.ImagePyramid;
  export const Drawer: zombie.worldMap.WorldMapRenderer$Drawer;
  export const WorldMapCell: zombie.worldMap.WorldMapCell;
  export const WorldMapVisited: zombie.worldMap.WorldMapVisited;
  export const TrianglesPerZoom: zombie.worldMap.WorldMapGeometry$TrianglesPerZoom;
  export const UIWorldMapV1: zombie.worldMap.UIWorldMapV1;
  export const WorldMapFeature: zombie.worldMap.WorldMapFeature;
  export const WorldMapBooleanOption: zombie.worldMap.WorldMapRenderer$WorldMapBooleanOption;
  export const WorldMapProperties: zombie.worldMap.WorldMapProperties;
  export const WorldMapImages: zombie.worldMap.WorldMapImages;
  export const WorldMapData: zombie.worldMap.WorldMapData;
  export const UIWorldMap: zombie.worldMap.UIWorldMap;
  export const Thumpable: zombie.iso.objects.interfaces.Thumpable;
  export const BarricadeAble: zombie.iso.objects.interfaces.BarricadeAble;
  export const IsoClothingDryer: zombie.iso.objects.IsoClothingDryer;
  export const IsoDeadBody: zombie.iso.objects.IsoDeadBody;
  export const IsoCombinationWasherDryer: zombie.iso.objects.IsoCombinationWasherDryer;
  export const TreeShader: zombie.iso.objects.IsoTree$TreeShader;
  export const IsoTree: zombie.iso.objects.IsoTree;
  export const RenderEffectType: zombie.iso.objects.RenderEffectType;
  export const IsoCompost: zombie.iso.objects.IsoCompost;
  export const IsoTelevision: zombie.iso.objects.IsoTelevision;
  export const GibletType: zombie.iso.objects.IsoZombieGiblets$GibletType;
  export const IsoWheelieBin: zombie.iso.objects.IsoWheelieBin;
  export const IsoDoor: zombie.iso.objects.IsoDoor;
  export const IsoClothingWasher: zombie.iso.objects.IsoClothingWasher;
  export const DoorType: zombie.iso.objects.IsoDoor$DoorType;
  export const IsoFire: zombie.iso.objects.IsoFire;
  export const IsoTrap: zombie.iso.objects.IsoTrap;
  export const IsoWindow: zombie.iso.objects.IsoWindow;
  export const IsoWorldInventoryObject: zombie.iso.objects.IsoWorldInventoryObject;
  export const MannequinZone: zombie.iso.objects.IsoMannequin$MannequinZone;
  export const IsoCurtain: zombie.iso.objects.IsoCurtain;
  export const IsoMolotovCocktail: zombie.iso.objects.IsoMolotovCocktail;
  export const IsoLightSwitch: zombie.iso.objects.IsoLightSwitch;
  export const ExplosionMode: zombie.iso.objects.IsoTrap$ExplosionMode;
  export const IsoZombieGiblets: zombie.iso.objects.IsoZombieGiblets;
  export const IsoBarbecue: zombie.iso.objects.IsoBarbecue;
  export const IsoThumpable: zombie.iso.objects.IsoThumpable;
  export const IsoFireplace: zombie.iso.objects.IsoFireplace;
  export const IsoGenerator: zombie.iso.objects.IsoGenerator;
  export const IsoFireManager: zombie.iso.objects.IsoFireManager;
  export const IsoRadio: zombie.iso.objects.IsoRadio;
  export const IsoStove: zombie.iso.objects.IsoStove;
  export const IsoRainSplash: zombie.iso.objects.IsoRainSplash;
  export const IsoRaindrop: zombie.iso.objects.IsoRaindrop;
  export const RainManager: zombie.iso.objects.RainManager;
  export const IsoWindowFrame: zombie.iso.objects.IsoWindowFrame;
  export const WindowType: zombie.iso.objects.IsoWindow$WindowType;
  export const IsoWaveSignal: zombie.iso.objects.IsoWaveSignal;
  export const ObjectRenderEffects: zombie.iso.objects.ObjectRenderEffects;
  export const IsoBrokenGlass: zombie.iso.objects.IsoBrokenGlass;
  export const IsoJukebox: zombie.iso.objects.IsoJukebox;
  export const IsoCarBatteryCharger: zombie.iso.objects.IsoCarBatteryCharger;
  export const BSFurnace: zombie.iso.objects.BSFurnace;
  export const IsoBarricade: zombie.iso.objects.IsoBarricade;
  export const IsoMannequin: zombie.iso.objects.IsoMannequin;
  export const IsoStackedWasherDryer: zombie.iso.objects.IsoStackedWasherDryer;
  export const WallShaperWhole: zombie.iso.sprite.shapers.WallShaperWhole;
  export const SkyBox: zombie.iso.sprite.SkyBox;
  export const IsoDirectionFrame: zombie.iso.sprite.IsoDirectionFrame;
  export const IsoSpriteInstance: zombie.iso.sprite.IsoSpriteInstance;
  export const IsoAnim: zombie.iso.sprite.IsoAnim;
  export const IsoSprite: zombie.iso.sprite.IsoSprite;
  export const IsoSpriteGrid: zombie.iso.sprite.IsoSpriteGrid;
  export const IsoSpriteManager: zombie.iso.sprite.IsoSpriteManager;
  export const IsoWeatherFX: zombie.iso.weather.fx.IsoWeatherFX;
  export const ImprovedFog: zombie.iso.weather.fog.ImprovedFog;
  export const ClimateValues: zombie.iso.weather.ClimateValues;
  export const Temperature: zombie.iso.weather.Temperature;
  export const ClimateNetAuth: zombie.iso.weather.ClimateManager$ClimateNetAuth;
  export const ThunderStorm: zombie.iso.weather.ThunderStorm;
  export const ClimateColorInfo: zombie.iso.weather.ClimateColorInfo;
  export const DayForecast: zombie.iso.weather.ClimateForecaster$DayForecast;
  export const Flare: zombie.iso.weather.WorldFlares$Flare;
  export const ClimateForecaster: zombie.iso.weather.ClimateForecaster;
  export const WeatherPeriod: zombie.iso.weather.WeatherPeriod;
  export const ClimateMoon: zombie.iso.weather.ClimateMoon;
  export const ClimateFloat: zombie.iso.weather.ClimateManager$ClimateFloat;
  export const ForecastValue: zombie.iso.weather.ClimateForecaster$ForecastValue;
  export const ClimateColor: zombie.iso.weather.ClimateManager$ClimateColor;
  export const ClimateBool: zombie.iso.weather.ClimateManager$ClimateBool;
  export const DayInfo: zombie.iso.weather.ClimateManager$DayInfo;
  export const AirFront: zombie.iso.weather.ClimateManager$AirFront;
  export const WeatherStage: zombie.iso.weather.WeatherPeriod$WeatherStage;
  export const ClimateHistory: zombie.iso.weather.ClimateHistory;
  export const StrLerpVal: zombie.iso.weather.WeatherPeriod$StrLerpVal;
  export const ThunderCloud: zombie.iso.weather.ThunderStorm$ThunderCloud;
  export const WorldFlares: zombie.iso.weather.WorldFlares;
  export const IsoObjectType: zombie.iso.SpriteDetails.IsoObjectType;
  export const IsoFlagType: zombie.iso.SpriteDetails.IsoFlagType;
  export const IWorldRegion: zombie.iso.areas.isoregion.regions.IWorldRegion;
  export const IChunkRegion: zombie.iso.areas.isoregion.regions.IChunkRegion;
  export const IsoRegionManager: zombie.iso.areas.isoregion.regions.IsoRegionManager;
  export const IsoWorldRegion: zombie.iso.areas.isoregion.regions.IsoWorldRegion;
  export const IsoChunkRegion: zombie.iso.areas.isoregion.regions.IsoChunkRegion;
  export const DataRoot: zombie.iso.areas.isoregion.data.DataRoot;
  export const DataCell: zombie.iso.areas.isoregion.data.DataCell;
  export const DataChunk: zombie.iso.areas.isoregion.data.DataChunk;
  export const SelectInfo: zombie.iso.areas.isoregion.data.DataRoot$SelectInfo;
  export const IsoRegionsLogger: zombie.iso.areas.isoregion.IsoRegionsLogger;
  export const IsoRegionLog: zombie.iso.areas.isoregion.IsoRegionsLogger$IsoRegionLog;
  export const IsoRegionsRenderer: zombie.iso.areas.isoregion.IsoRegionsRenderer;
  export const IsoRegionLogType: zombie.iso.areas.isoregion.IsoRegionLogType;
  export const IsoRegions: zombie.iso.areas.isoregion.IsoRegions;
  export const BooleanDebugOption: zombie.iso.areas.isoregion.IsoRegionsRenderer$BooleanDebugOption;
  export const SafeHouse: zombie.iso.areas.SafeHouse;
  export const ExitType: zombie.iso.areas.IsoRoomExit$ExitType;
  export const BuildingScore: zombie.iso.areas.BuildingScore;
  export const IsoRoom: zombie.iso.areas.IsoRoom;
  export const NonPvpZone: zombie.iso.areas.NonPvpZone;
  export const IsoBuilding: zombie.iso.areas.IsoBuilding;
  export const IsoRoomExit: zombie.iso.areas.IsoRoomExit;
  export const ContainerOverlays: zombie.iso.ContainerOverlays;
  export const Frame: zombie.iso.IsoWorld$Frame;
  export const Lighting: zombie.iso.IsoGridSquare$Lighting;
  export const VisionResult: zombie.iso.IsoObject$VisionResult;
  export const ResultLight: zombie.iso.IsoGridSquare$ResultLight;
  export const MetaObject: zombie.iso.MetaObject;
  export const ChunkData: zombie.iso.NearestWalls$ChunkData;
  export const IsoChunkMap: zombie.iso.IsoChunkMap;
  export const MultiStageBuilding: zombie.iso.MultiStageBuilding;
  export const IsoPuddles: zombie.iso.IsoPuddles;
  export const TileOverlays: zombie.iso.TileOverlays;
  export const BentFences: zombie.iso.BentFences;
  export const LosUtil: zombie.iso.LosUtil;
  export const VehicleZone: zombie.iso.IsoMetaGrid$VehicleZone;
  export const GetSquare: zombie.iso.IsoGridSquare$GetSquare;
  export const OutlineShader: zombie.iso.IsoObject$OutlineShader;
  export const MetaCell: zombie.iso.IsoWorld$MetaCell;
  export const IsoObjectPicker: zombie.iso.IsoObjectPicker;
  export const OcclusionFilter: zombie.iso.IsoGridOcclusionData$OcclusionFilter;
  export const IsoPuddlesGeometry: zombie.iso.IsoPuddlesGeometry;
  export const CellGetSquare: zombie.iso.IsoGridSquare$CellGetSquare;
  export const NearestWalls: zombie.iso.NearestWalls;
  export const IsoDirections: zombie.iso.IsoDirections;
  export const GridSquareMarker: zombie.iso.WorldMarkers$GridSquareMarker;
  export const SearchModeFloat: zombie.iso.SearchMode$SearchModeFloat;
  export const Helicopter: zombie.iso.Helicopter;
  export const IsoGridStack: zombie.iso.IsoGridStack;
  export const BrokenFences: zombie.iso.BrokenFences;
  export const IsoWorld: zombie.iso.IsoWorld;
  export const IsoMetaGrid: zombie.iso.IsoMetaGrid;
  export const IsoMarker: zombie.iso.IsoMarkers$IsoMarker;
  export const ClickObject: zombie.iso.IsoObjectPicker$ClickObject;
  export const IsoLot: zombie.iso.IsoLot;
  export const TestResults: zombie.iso.LosUtil$TestResults;
  export const IsoCamera: zombie.iso.IsoCamera;
  export const CircleIsoMarker: zombie.iso.IsoMarkers$CircleIsoMarker;
  export const IsoUtils: zombie.iso.IsoUtils;
  export const Zone: zombie.iso.IsoMetaGrid$Zone;
  export const IsoLuaMover: zombie.iso.IsoLuaMover;
  export const IsoMarkers: zombie.iso.IsoMarkers;
  export const Stage: zombie.iso.MultiStageBuilding$Stage;
  export const PuddlesDirection: zombie.iso.IsoGridSquare$PuddlesDirection;
  export const IsoCell: zombie.iso.IsoCell;
  export const IsoWallBloodSplat: zombie.iso.IsoWallBloodSplat;
  export const FrameState: zombie.iso.IsoCamera$FrameState;
  export const PerPlayerRender: zombie.iso.IsoCell$PerPlayerRender;
  export const IsoGridSquare: zombie.iso.IsoGridSquare;
  export const PuddlesFloat: zombie.iso.IsoPuddles$PuddlesFloat;
  export const IsoMetaCell: zombie.iso.IsoMetaCell;
  export const ILighting: zombie.iso.IsoGridSquare$ILighting;
  export const NoCircleStencilShader: zombie.iso.IsoGridSquare$NoCircleStencilShader;
  export const IsoPushableObject: zombie.iso.IsoPushableObject;
  export const IsoFloorBloodSplat: zombie.iso.IsoFloorBloodSplat;
  export const IsoLightSource: zombie.iso.IsoLightSource;
  export const ZoneGeometryType: zombie.iso.IsoMetaGrid$ZoneGeometryType;
  export const BuildingSearchCriteria: zombie.iso.IsoCell$BuildingSearchCriteria;
  export const BuildingDef: zombie.iso.BuildingDef;
  export const IsoObject: zombie.iso.IsoObject;
  export const IsoMetaChunk: zombie.iso.IsoMetaChunk;
  export const PlayerCamera: zombie.iso.PlayerCamera;
  export const SliceY: zombie.iso.SliceY;
  export const IsoWaterGeometry: zombie.iso.IsoWaterGeometry;
  export const IsoChunk: zombie.iso.IsoChunk;
  export const IsoHeatSource: zombie.iso.IsoHeatSource;
  export const WorldMarkers: zombie.iso.WorldMarkers;
  export const IsoRoomLight: zombie.iso.IsoRoomLight;
  export const Vector3: zombie.iso.Vector3;
  export const TreeSoundManager: zombie.iso.IsoMovingObject$TreeSoundManager;
  export const IsoGridOcclusionData: zombie.iso.IsoGridOcclusionData;
  export const Trigger: zombie.iso.IsoMetaGrid$Trigger;
  export const PlayerSearchMode: zombie.iso.SearchMode$PlayerSearchMode;
  export const OccluderType: zombie.iso.IsoGridOcclusionData$OccluderType;
  export const Vector2: zombie.iso.Vector2;
  export const DirectionArrow: zombie.iso.WorldMarkers$DirectionArrow;
  export const RoomRect: zombie.iso.RoomDef$RoomRect;
  export const Line: zombie.iso.WorldMarkers$Line;
  export const IsoMovingObject: zombie.iso.IsoMovingObject;
  export const RoomDef: zombie.iso.RoomDef;
  export const IsoObjectFactory: zombie.iso.IsoObject$IsoObjectFactory;
  export const JobType: zombie.iso.IsoChunk$JobType;
  export const SearchMode: zombie.iso.SearchMode;
  export const LotHeader: zombie.iso.LotHeader;
  export const IsoDirectionSet: zombie.iso.IsoDirectionSet;
  export const PlayerHomingPoint: zombie.iso.WorldMarkers$PlayerHomingPoint;
  export const Allocator: zombie.popman.ObjectPool$Allocator<any>;
  export const ZombiePopulationManager: zombie.popman.ZombiePopulationManager;
  export const ZombiePopulationRenderer: zombie.popman.ZombiePopulationRenderer;
  export const ObjectPool: zombie.popman.ObjectPool<any>;
  export const RandomizedDeadSurvivorBase: zombie.randomizedWorld.randomizedDeadSurvivor.RandomizedDeadSurvivorBase;
  export const RDSHouseParty: zombie.randomizedWorld.randomizedDeadSurvivor.RDSHouseParty;
  export const RDSPokerNight: zombie.randomizedWorld.randomizedDeadSurvivor.RDSPokerNight;
  export const RDSZombiesEating: zombie.randomizedWorld.randomizedDeadSurvivor.RDSZombiesEating;
  export const RDSHenDo: zombie.randomizedWorld.randomizedDeadSurvivor.RDSHenDo;
  export const RDSPoliceAtHouse: zombie.randomizedWorld.randomizedDeadSurvivor.RDSPoliceAtHouse;
  export const RDSSuicidePact: zombie.randomizedWorld.randomizedDeadSurvivor.RDSSuicidePact;
  export const RDSPrisonEscape: zombie.randomizedWorld.randomizedDeadSurvivor.RDSPrisonEscape;
  export const RDSGunmanInBathroom: zombie.randomizedWorld.randomizedDeadSurvivor.RDSGunmanInBathroom;
  export const RDSHockeyPsycho: zombie.randomizedWorld.randomizedDeadSurvivor.RDSHockeyPsycho;
  export const RDSZombieLockedBathroom: zombie.randomizedWorld.randomizedDeadSurvivor.RDSZombieLockedBathroom;
  export const RDSPrisonEscapeWithPolice: zombie.randomizedWorld.randomizedDeadSurvivor.RDSPrisonEscapeWithPolice;
  export const RDSStagDo: zombie.randomizedWorld.randomizedDeadSurvivor.RDSStagDo;
  export const RDSTinFoilHat: zombie.randomizedWorld.randomizedDeadSurvivor.RDSTinFoilHat;
  export const RDSSkeletonPsycho: zombie.randomizedWorld.randomizedDeadSurvivor.RDSSkeletonPsycho;
  export const RDSFootballNight: zombie.randomizedWorld.randomizedDeadSurvivor.RDSFootballNight;
  export const RDSSpecificProfession: zombie.randomizedWorld.randomizedDeadSurvivor.RDSSpecificProfession;
  export const RDSBleach: zombie.randomizedWorld.randomizedDeadSurvivor.RDSBleach;
  export const RDSBandPractice: zombie.randomizedWorld.randomizedDeadSurvivor.RDSBandPractice;
  export const RDSBedroomZed: zombie.randomizedWorld.randomizedDeadSurvivor.RDSBedroomZed;
  export const RDSDeadDrunk: zombie.randomizedWorld.randomizedDeadSurvivor.RDSDeadDrunk;
  export const RDSGunslinger: zombie.randomizedWorld.randomizedDeadSurvivor.RDSGunslinger;
  export const RDSCorpsePsycho: zombie.randomizedWorld.randomizedDeadSurvivor.RDSCorpsePsycho;
  export const RDSStudentNight: zombie.randomizedWorld.randomizedDeadSurvivor.RDSStudentNight;
  export const RDSBathroomZed: zombie.randomizedWorld.randomizedDeadSurvivor.RDSBathroomZed;
  export const RVSBanditRoad: zombie.randomizedWorld.randomizedVehicleStory.RVSBanditRoad;
  export const RVSPoliceBlockadeShooting: zombie.randomizedWorld.randomizedVehicleStory.RVSPoliceBlockadeShooting;
  export const Element: zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawner$Element;
  export const RVSCrashHorde: zombie.randomizedWorld.randomizedVehicleStory.RVSCrashHorde;
  export const RVSPoliceBlockade: zombie.randomizedWorld.randomizedVehicleStory.RVSPoliceBlockade;
  export const RVSTrailerCrash: zombie.randomizedWorld.randomizedVehicleStory.RVSTrailerCrash;
  export const RVSBurntCar: zombie.randomizedWorld.randomizedVehicleStory.RVSBurntCar;
  export const RandomizedVehicleStoryBase: zombie.randomizedWorld.randomizedVehicleStory.RandomizedVehicleStoryBase;
  export const RVSCarCrashCorpse: zombie.randomizedWorld.randomizedVehicleStory.RVSCarCrashCorpse;
  export const RVSConstructionSite: zombie.randomizedWorld.randomizedVehicleStory.RVSConstructionSite;
  export const RVSFlippedCrash: zombie.randomizedWorld.randomizedVehicleStory.RVSFlippedCrash;
  export const RVSChangingTire: zombie.randomizedWorld.randomizedVehicleStory.RVSChangingTire;
  export const RVSCarCrash: zombie.randomizedWorld.randomizedVehicleStory.RVSCarCrash;
  export const VehicleStorySpawner: zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawner;
  export const IElementSpawner: zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawner$IElementSpawner;
  export const RVSAmbulanceCrash: zombie.randomizedWorld.randomizedVehicleStory.RVSAmbulanceCrash;
  export const RVSUtilityVehicle: zombie.randomizedWorld.randomizedVehicleStory.RVSUtilityVehicle;
  export const VehicleStorySpawnData: zombie.randomizedWorld.randomizedVehicleStory.VehicleStorySpawnData;
  export const RZSMusicFestStage: zombie.randomizedWorld.randomizedZoneStory.RZSMusicFestStage;
  export const RZSBeachParty: zombie.randomizedWorld.randomizedZoneStory.RZSBeachParty;
  export const RZSForestCamp: zombie.randomizedWorld.randomizedZoneStory.RZSForestCamp;
  export const RZSForestCampEaten: zombie.randomizedWorld.randomizedZoneStory.RZSForestCampEaten;
  export const RZSBuryingCamp: zombie.randomizedWorld.randomizedZoneStory.RZSBuryingCamp;
  export const RZSFishingTrip: zombie.randomizedWorld.randomizedZoneStory.RZSFishingTrip;
  export const RZSMusicFest: zombie.randomizedWorld.randomizedZoneStory.RZSMusicFest;
  export const RandomizedZoneStoryBase: zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase;
  export const ZoneType: zombie.randomizedWorld.randomizedZoneStory.RandomizedZoneStoryBase$ZoneType;
  export const RZSHunterCamp: zombie.randomizedWorld.randomizedZoneStory.RZSHunterCamp;
  export const RZSBBQParty: zombie.randomizedWorld.randomizedZoneStory.RZSBBQParty;
  export const RZSSexyTime: zombie.randomizedWorld.randomizedZoneStory.RZSSexyTime;
  export const RZSTrapperCamp: zombie.randomizedWorld.randomizedZoneStory.RZSTrapperCamp;
  export const RZSBaseball: zombie.randomizedWorld.randomizedZoneStory.RZSBaseball;
  export const RBBar: zombie.randomizedWorld.randomizedBuilding.RBBar;
  export const RBBurnt: zombie.randomizedWorld.randomizedBuilding.RBBurnt;
  export const RBCafe: zombie.randomizedWorld.randomizedBuilding.RBCafe;
  export const HumanCorpse: zombie.randomizedWorld.randomizedBuilding.RandomizedBuildingBase$HumanCorpse;
  export const RBSchool: zombie.randomizedWorld.randomizedBuilding.RBSchool;
  export const RandomizedBuildingBase: zombie.randomizedWorld.randomizedBuilding.RandomizedBuildingBase;
  export const RBSpiffo: zombie.randomizedWorld.randomizedBuilding.RBSpiffo;
  export const RBStripclub: zombie.randomizedWorld.randomizedBuilding.RBStripclub;
  export const RBClinic: zombie.randomizedWorld.randomizedBuilding.RBClinic;
  export const RBKateAndBaldspot: zombie.randomizedWorld.randomizedBuilding.RBKateAndBaldspot;
  export const RBLooted: zombie.randomizedWorld.randomizedBuilding.RBLooted;
  export const RBBurntCorpse: zombie.randomizedWorld.randomizedBuilding.RBBurntCorpse;
  export const RBOther: zombie.randomizedWorld.randomizedBuilding.RBOther;
  export const RBBurntFireman: zombie.randomizedWorld.randomizedBuilding.RBBurntFireman;
  export const RBBasic: zombie.randomizedWorld.randomizedBuilding.RBBasic;
  export const RBPileOCrepe: zombie.randomizedWorld.randomizedBuilding.RBPileOCrepe;
  export const RBSafehouse: zombie.randomizedWorld.randomizedBuilding.RBSafehouse;
  export const RBOffice: zombie.randomizedWorld.randomizedBuilding.RBOffice;
  export const RBShopLooted: zombie.randomizedWorld.randomizedBuilding.RBShopLooted;
  export const RBHairSalon: zombie.randomizedWorld.randomizedBuilding.RBHairSalon;
  export const RBPizzaWhirled: zombie.randomizedWorld.randomizedBuilding.RBPizzaWhirled;
  export const RandomizedWorldBase: zombie.randomizedWorld.RandomizedWorldBase;
  export const NPCData: zombie.vehicles.PathFindBehavior2$NPCData;
  export const BaseVehicle: zombie.vehicles.BaseVehicle;
  export const QuaternionfObjectPool: zombie.vehicles.BaseVehicle$QuaternionfObjectPool;
  export const MinMaxPosition: zombie.vehicles.BaseVehicle$MinMaxPosition;
  export const PlaneObjectPool: zombie.vehicles.UI3DScene$PlaneObjectPool;
  export const EditVehicleState: zombie.vehicles.EditVehicleState;
  export const VehicleInterpolation: zombie.vehicles.VehicleInterpolation;
  export const UI3DScene: zombie.vehicles.UI3DScene;
  export const LightbarLightsMode: zombie.vehicles.LightbarLightsMode;
  export const LightbarSirenMode: zombie.vehicles.LightbarSirenMode;
  export const Vector3fObjectPool: zombie.vehicles.BaseVehicle$Vector3fObjectPool;
  export const PathFindState2: zombie.vehicles.PathFindState2;
  export const WheelInfo: zombie.vehicles.BaseVehicle$WheelInfo;
  export const TransmissionNumber: zombie.vehicles.TransmissionNumber;
  export const PathFindBehavior2: zombie.vehicles.PathFindBehavior2;
  export const VehicleDoor: zombie.vehicles.VehicleDoor;
  export const LiangBarsky: zombie.vehicles.PolygonalMap2$LiangBarsky;
  export const VehicleTypeDefinition: zombie.vehicles.VehicleType$VehicleTypeDefinition;
  export const CCObstacle: zombie.vehicles.CollideWithObstaclesPoly$CCObstacle;
  export const engineStateTypes: zombie.vehicles.BaseVehicle$engineStateTypes;
  export const Matrix4fObjectPool: zombie.vehicles.BaseVehicle$Matrix4fObjectPool;
  export const RayObjectPool: zombie.vehicles.UI3DScene$RayObjectPool;
  export const ModelInfo: zombie.vehicles.BaseVehicle$ModelInfo;
  export const ServerVehicleState: zombie.vehicles.BaseVehicle$ServerVehicleState;
  export const PathFindRequest: zombie.vehicles.PolygonalMap2$PathFindRequest;
  export const VehicleWindow: zombie.vehicles.VehicleWindow;
  export const SurroundVehicle: zombie.vehicles.SurroundVehicle;
  export const Ray: zombie.vehicles.UI3DScene$Ray;
  export const Vector2ObjectPool: zombie.vehicles.BaseVehicle$Vector2ObjectPool;
  export const Passenger: zombie.vehicles.BaseVehicle$Passenger;
  export const EngineRPMData: zombie.vehicles.EngineRPMData;
  export const Plane: zombie.vehicles.UI3DScene$Plane;
  export const LuaEnvironment: zombie.vehicles.EditVehicleState$LuaEnvironment;
  export const VehicleLight: zombie.vehicles.VehicleLight;
  export const CollideWithObstaclesPoly: zombie.vehicles.CollideWithObstaclesPoly;
  export const IPathfinder: zombie.vehicles.PolygonalMap2$IPathfinder;
  export const PointOnPath: zombie.vehicles.PathFindBehavior2$PointOnPath;
  export const VehiclePart: zombie.vehicles.VehiclePart;
  export const Vector2fObjectPool: zombie.vehicles.BaseVehicle$Vector2fObjectPool;
  export const ChunkDataZ: zombie.vehicles.CollideWithObstaclesPoly$ChunkDataZ;
  export const PolygonalMap2: zombie.vehicles.PolygonalMap2;
  export const CCNode: zombie.vehicles.CollideWithObstaclesPoly$CCNode;
  export const BehaviorResult: zombie.vehicles.PathFindBehavior2$BehaviorResult;
  export const VehicleType: zombie.vehicles.VehicleType;
  export const VehiclePoly: zombie.vehicles.PolygonalMap2$VehiclePoly;
  export const VehicleEngineRPM: zombie.vehicles.VehicleEngineRPM;
  export const HitVars: zombie.vehicles.BaseVehicle$HitVars;
  export const Literature: zombie.inventory.types.Literature;
  export const Clothing: zombie.inventory.types.Clothing;
  export const Drainable: zombie.inventory.types.Drainable;
  export const Radio: zombie.inventory.types.Radio;
  export const ComboItem: zombie.inventory.types.ComboItem;
  export const Moveable: zombie.inventory.types.Moveable;
  export const WeaponPart: zombie.inventory.types.WeaponPart;
  export const DrainableComboItem: zombie.inventory.types.DrainableComboItem;
  export const InventoryContainer: zombie.inventory.types.InventoryContainer;
  export const HandWeapon: zombie.inventory.types.HandWeapon;
  export const KeyRing: zombie.inventory.types.KeyRing;
  export const AlarmClockClothing: zombie.inventory.types.AlarmClockClothing;
  export const WeaponType: zombie.inventory.types.WeaponType;
  export const ClothingPatch: zombie.inventory.types.Clothing$ClothingPatch;
  export const MapItem: zombie.inventory.types.MapItem;
  export const AlarmClock: zombie.inventory.types.AlarmClock;
  export const Key: zombie.inventory.types.Key;
  export const ClothingPatchFabricType: zombie.inventory.types.Clothing$ClothingPatchFabricType;
  export const Food: zombie.inventory.types.Food;
  export const ItemContainer: zombie.inventory.ItemContainer;
  export const InventoryItem: zombie.inventory.InventoryItem;
  export const ItemPickerRoom: zombie.inventory.ItemPickerJava$ItemPickerRoom;
  export const FixingManager: zombie.inventory.FixingManager;
  export const ItemPickerUpgradeWeapons: zombie.inventory.ItemPickerJava$ItemPickerUpgradeWeapons;
  export const ItemType: zombie.inventory.ItemType;
  export const ItemPickerJava: zombie.inventory.ItemPickerJava;
  export const InventoryItemFactory: zombie.inventory.InventoryItemFactory;
  export const ItemPickerItem: zombie.inventory.ItemPickerJava$ItemPickerItem;
  export const ItemPickerContainer: zombie.inventory.ItemPickerJava$ItemPickerContainer;
  export const RecipeManager: zombie.inventory.RecipeManager;
  export const VehicleDistribution: zombie.inventory.ItemPickerJava$VehicleDistribution;
  export const ProceduralItem: zombie.inventory.ItemPickerJava$ProceduralItem;
  export const RadioLine: zombie.radio.scripting.RadioLine;
  export const ExitOption: zombie.radio.scripting.RadioScript$ExitOption;
  export const DynamicRadioChannel: zombie.radio.scripting.DynamicRadioChannel;
  export const RadioBroadCast: zombie.radio.scripting.RadioBroadCast;
  export const RadioScript: zombie.radio.scripting.RadioScript;
  export const RadioScriptManager: zombie.radio.scripting.RadioScriptManager;
  export const RadioChannel: zombie.radio.scripting.RadioChannel;
  export const DevicePresets: zombie.radio.devices.DevicePresets;
  export const WaveSignalDevice: zombie.radio.devices.WaveSignalDevice;
  export const PresetEntry: zombie.radio.devices.PresetEntry;
  export const DeviceData: zombie.radio.devices.DeviceData;
  export const MediaNameSorter: zombie.radio.media.RecordedMedia$MediaNameSorter;
  export const MediaData: zombie.radio.media.MediaData;
  export const RecordedMedia: zombie.radio.media.RecordedMedia;
  export const MediaLineData: zombie.radio.media.MediaData$MediaLineData;
  export const StorySound: zombie.radio.StorySounds.StorySound;
  export const StorySoundEvent: zombie.radio.StorySounds.StorySoundEvent;
  export const DataPoint: zombie.radio.StorySounds.DataPoint;
  export const EventSound: zombie.radio.StorySounds.EventSound;
  export const SLSoundManager: zombie.radio.StorySounds.SLSoundManager;
  export const StoryEmitter: zombie.radio.StorySounds.StoryEmitter;
  export const Sound: zombie.radio.StorySounds.StoryEmitter$Sound;
  export const ZomboidRadio: zombie.radio.ZomboidRadio;
  export const GameMode: zombie.radio.GameMode;
  export const RadioAPI: zombie.radio.RadioAPI;
  export const RadioData: zombie.radio.RadioData;
  export const ChannelCategory: zombie.radio.ChannelCategory;
  export const ChatType: zombie.network.chat.ChatType;
  export const Vehicle: zombie.network.packets.hit.Vehicle;
  export const MovingObject: zombie.network.packets.hit.MovingObject;
  export const HitInfo: zombie.network.packets.hit.HitInfo;
  export const NetObject: zombie.network.packets.hit.NetObject;
  export const HitCharacterPacket: zombie.network.packets.hit.HitCharacterPacket;
  export const VehicleHitPacket: zombie.network.packets.hit.VehicleHitPacket;
  export const AttackVars: zombie.network.packets.hit.AttackVars;
  export const HitType: zombie.network.packets.hit.HitCharacterPacket$HitType;
  export const ZombiePacket: zombie.network.packets.ZombiePacket;
  export const l_send: zombie.network.packets.PlayerPacket$l_send;
  export const PlayerVariables: zombie.network.packets.PlayerVariables;
  export const EventType: zombie.network.packets.EventPacket$EventType;
  export const PlayerPacket: zombie.network.packets.PlayerPacket;
  export const l_receive: zombie.network.packets.PlayerPacket$l_receive;
  export const EventPacket: zombie.network.packets.EventPacket;
  export const DeadCharacterPacket: zombie.network.packets.DeadCharacterPacket;
  export const ClientChunkRequest: zombie.network.ClientChunkRequest;
  export const IntegerServerOption: zombie.network.ServerOptions$IntegerServerOption;
  export const Server: zombie.network.Server;
  export const WalkType: zombie.network.NetworkVariables$WalkType;
  export const Userlog: zombie.network.Userlog;
  export const BodyDamageSync: zombie.network.BodyDamageSync;
  export const StringServerOption: zombie.network.ServerOptions$StringServerOption;
  export const ReplayManager: zombie.network.ReplayManager;
  export const DBTicket: zombie.network.DBTicket;
  export const State: zombie.network.ReplayManager$State;
  export const ServerSettings: zombie.network.ServerSettings;
  export const BooleanServerOption: zombie.network.ServerOptions$BooleanServerOption;
  export const Chunk: zombie.network.ClientChunkRequest$Chunk;
  export const PlayerDownloadServer: zombie.network.PlayerDownloadServer;
  export const ClientServerMap: zombie.network.ClientServerMap;
  export const DBResult: zombie.network.DBResult;
  export const DoubleServerOption: zombie.network.ServerOptions$DoubleServerOption;
  export const Updater: zombie.network.BodyDamageSync$Updater;
  export const ServerOption: zombie.network.ServerOptions$ServerOption;
  export const TextServerOption: zombie.network.ServerOptions$TextServerOption;
  export const PredictionTypes: zombie.network.NetworkVariables$PredictionTypes;
  export const ServerSettingsManager: zombie.network.ServerSettingsManager;
  export const NetworkAIParams: zombie.network.NetworkAIParams;
  export const UserlogType: zombie.network.Userlog$UserlogType;
  export const ZombieState: zombie.network.NetworkVariables$ZombieState;
  export const Perk: zombie.characters.skills.PerkFactory$Perk;
  export const PerkFactory: zombie.characters.skills.PerkFactory;
  export const Perks: zombie.characters.skills.PerkFactory$Perks;
  export const AttachedItems: zombie.characters.AttachedItems.AttachedItems;
  export const AttachedLocationGroup: zombie.characters.AttachedItems.AttachedLocationGroup;
  export const AttachedItem: zombie.characters.AttachedItems.AttachedItem;
  export const AttachedLocation: zombie.characters.AttachedItems.AttachedLocation;
  export const AttachedLocations: zombie.characters.AttachedItems.AttachedLocations;
  export const TraitCollection: zombie.characters.traits.TraitCollection;
  export const ObservationFactory: zombie.characters.traits.ObservationFactory;
  export const TraitSlot: zombie.characters.traits.TraitCollection$TraitSlot;
  export const Observation: zombie.characters.traits.ObservationFactory$Observation;
  export const Trait: zombie.characters.traits.TraitFactory$Trait;
  export const TraitFactory: zombie.characters.traits.TraitFactory;
  export const Moodle: zombie.characters.Moodles.Moodle;
  export const Moodles: zombie.characters.Moodles.Moodles;
  export const MoodleType: zombie.characters.Moodles.MoodleType;
  export const BodyLocationGroup: zombie.characters.WornItems.BodyLocationGroup;
  export const WornItem: zombie.characters.WornItems.WornItem;
  export const WornItems: zombie.characters.WornItems.WornItems;
  export const BodyLocations: zombie.characters.WornItems.BodyLocations;
  export const BodyLocation: zombie.characters.WornItems.BodyLocation;
  export const BodyPart: zombie.characters.BodyDamage.BodyPart;
  export const ThermalNode: zombie.characters.BodyDamage.Thermoregulator$ThermalNode;
  export const BodyPartType: zombie.characters.BodyDamage.BodyPartType;
  export const BodyPartLast: zombie.characters.BodyDamage.BodyPartLast;
  export const Nutrition: zombie.characters.BodyDamage.Nutrition;
  export const FitnessExercise: zombie.characters.BodyDamage.Fitness$FitnessExercise;
  export const BodyDamage: zombie.characters.BodyDamage.BodyDamage;
  export const Thermoregulator: zombie.characters.BodyDamage.Thermoregulator;
  export const Metabolics: zombie.characters.BodyDamage.Metabolics;
  export const Fitness: zombie.characters.BodyDamage.Fitness;
  export const Profession: zombie.characters.professions.ProfessionFactory$Profession;
  export const ProfessionFactory: zombie.characters.professions.ProfessionFactory;
  export const ActionTransition: zombie.characters.action.ActionTransition;
  export const ActionGroup: zombie.characters.action.ActionGroup;
  export const ActionStateSnapshot: zombie.characters.action.ActionStateSnapshot;
  export const IActionStateChanged: zombie.characters.action.IActionStateChanged;
  export const ActionContext: zombie.characters.action.ActionContext;
  export const ActionState: zombie.characters.action.ActionState;
  export const LuaTimedAction: zombie.characters.CharacterTimedActions.LuaTimedAction;
  export const BaseAction: zombie.characters.CharacterTimedActions.BaseAction;
  export const LuaTimedActionNew: zombie.characters.CharacterTimedActions.LuaTimedActionNew;
  export const HitReactionNetworkAI: zombie.characters.HitReactionNetworkAI;
  export const IsoPlayer: zombie.characters.IsoPlayer;
  export const XPMultiplier: zombie.characters.IsoGameCharacter$XPMultiplier;
  export const IsoZombie: zombie.characters.IsoZombie;
  export const MoveDeltaModifiers: zombie.characters.MoveDeltaModifiers;
  export const HaloTextHelper: zombie.characters.HaloTextHelper;
  export const Transform: zombie.characters.NetworkCharacter$Transform;
  export const SurvivorType: zombie.characters.SurvivorFactory$SurvivorType;
  export const NetworkCharacter: zombie.characters.NetworkCharacter;
  export const LightInfo: zombie.characters.IsoGameCharacter$LightInfo;
  export const NetworkTeleport: zombie.characters.NetworkTeleport;
  export const NetworkPlayerAI: zombie.characters.NetworkPlayerAI;
  export const NetworkCharacterAI: zombie.characters.NetworkCharacterAI;
  export const Operation: zombie.characters.NetworkCharacter$Operation;
  export const PerkInfo: zombie.characters.IsoGameCharacter$PerkInfo;
  export const IsoLivingCharacter: zombie.characters.IsoLivingCharacter;
  export const CharacterSoundEmitter: zombie.characters.CharacterSoundEmitter;
  export const BaseCharacterSoundEmitter: zombie.characters.BaseCharacterSoundEmitter;
  export const DummyCharacterSoundEmitter: zombie.characters.DummyCharacterSoundEmitter;
  export const Faction: zombie.characters.Faction;
  export const ZombieGroup: zombie.characters.ZombieGroup;
  export const Stance: zombie.characters.Stance;
  export const NetworkZombieAI: zombie.characters.NetworkZombieAI;
  export const TorchInfo: zombie.characters.IsoGameCharacter$TorchInfo;
  export const XP: zombie.characters.IsoGameCharacter$XP;
  export const SurvivorFactory: zombie.characters.SurvivorFactory;
  export const SurvivorDesc: zombie.characters.SurvivorDesc;
  export const ItemList: zombie.characters.ClothingWetness$ItemList;
  export const IsoSurvivor: zombie.characters.IsoSurvivor;
  export const NetworkZombieMind: zombie.characters.NetworkZombieMind;
  export const NetworkTeleportDebug: zombie.characters.NetworkTeleport$NetworkTeleportDebug;
  export const CharacterActionAnims: zombie.characters.CharacterActionAnims;
  export const ColorRGB: zombie.characters.HaloTextHelper$ColorRGB;
  export const IsoGameCharacter: zombie.characters.IsoGameCharacter;
  export const ZombieSound: zombie.characters.IsoZombie$ZombieSound;
  export const IsoDummyCameraCharacter: zombie.characters.IsoDummyCameraCharacter;
  export const ClothingWetness: zombie.characters.ClothingWetness;
  export const Stats: zombie.characters.Stats;
  export const CharacterTraits: zombie.characters.IsoGameCharacter$CharacterTraits;
  export const Location: zombie.characters.IsoGameCharacter$Location;
  export const SurvivorGroup: zombie.characters.SurvivorGroup;
  export const EvolvedRecipe: zombie.scripting.objects.EvolvedRecipe;
  export const RequiredSkill: zombie.scripting.objects.Recipe$RequiredSkill;
  export const Wheel: zombie.scripting.objects.VehicleScript$Wheel;
  export const Recipe: zombie.scripting.objects.Recipe;
  export const SwitchSeat: zombie.scripting.objects.VehicleScript$Passenger$SwitchSeat;
  export const Sounds: zombie.scripting.objects.VehicleScript$Sounds;
  export const Door: zombie.scripting.objects.VehicleScript$Door;
  export const Result: zombie.scripting.objects.Recipe$Result;
  export const Source: zombie.scripting.objects.Recipe$Source;
  export const GameSoundScript: zombie.scripting.objects.GameSoundScript;
  export const VehicleScript: zombie.scripting.objects.VehicleScript;
  export const ModelWeaponPart: zombie.scripting.objects.ModelWeaponPart;
  export const Item: zombie.scripting.objects.Item;
  export const Position: zombie.scripting.objects.VehicleScript$Position;
  export const FixerSkill: zombie.scripting.objects.Fixing$FixerSkill;
  export const ItemRecipe: zombie.scripting.objects.ItemRecipe;
  export const LightBar: zombie.scripting.objects.VehicleScript$LightBar;
  export const Model: zombie.scripting.objects.VehicleScript$Model;
  export const Container: zombie.scripting.objects.VehicleScript$Container;
  export const UniqueRecipe: zombie.scripting.objects.UniqueRecipe;
  export const ScriptModule: zombie.scripting.objects.ScriptModule;
  export const ItemReplacement: zombie.scripting.objects.ItemReplacement;
  export const MovableRecipe: zombie.scripting.objects.MovableRecipe;
  export const VehicleTemplate: zombie.scripting.objects.VehicleTemplate;
  export const Area: zombie.scripting.objects.VehicleScript$Area;
  export const ModelScript: zombie.scripting.objects.ModelScript;
  export const Anim: zombie.scripting.objects.VehicleScript$Anim;
  export const SoundTimelineScript: zombie.scripting.objects.SoundTimelineScript;
  export const Window: zombie.scripting.objects.VehicleScript$Window;
  export const Skin: zombie.scripting.objects.VehicleScript$Skin;
  export const PhysicsShape: zombie.scripting.objects.VehicleScript$PhysicsShape;
  export const Fixer: zombie.scripting.objects.Fixing$Fixer;
  export const Part: zombie.scripting.objects.VehicleScript$Part;
  export const Fixing: zombie.scripting.objects.Fixing;
  export const ModelAttachment: zombie.scripting.objects.ModelAttachment;
  export const ScriptManager: zombie.scripting.ScriptManager;
  export const ModData: zombie.world.moddata.ModData;
  export const TextManager: zombie.ui.TextManager;
  export const UIElement: zombie.ui.UIElement;
  export const TextDrawObject: zombie.ui.TextDrawObject;
  export const UIManager: zombie.ui.UIManager;
  export const UITransition: zombie.ui.UITransition;
  export const Layout: zombie.ui.ObjectTooltip$Layout;
  export const RadialMenu: zombie.ui.RadialMenu;
  export const Clock: zombie.ui.Clock;
  export const SpeedControls: zombie.ui.SpeedControls;
  export const HUDButton: zombie.ui.HUDButton;
  export const NewHealthPanel: zombie.ui.NewHealthPanel;
  export const UIServerToolbox: zombie.ui.UIServerToolbox;
  export const UINineGrid: zombie.ui.UINineGrid;
  export const ActionProgressBar: zombie.ui.ActionProgressBar;
  export const TextDrawHorizontal: zombie.ui.TextDrawHorizontal;
  export const UI3DModel: zombie.ui.UI3DModel;
  export const LayoutItem: zombie.ui.ObjectTooltip$LayoutItem;
  export const MoodlesUI: zombie.ui.MoodlesUI;
  export const DeferedTextDraw: zombie.ui.TextManager$DeferedTextDraw;
  export const RadialProgressBar: zombie.ui.RadialProgressBar;
  export const UITextBox2: zombie.ui.UITextBox2;
  export const UIDebugConsole: zombie.ui.UIDebugConsole;
  export const UIFont: zombie.ui.UIFont;
  export const VehicleGauge: zombie.ui.VehicleGauge;
  export const ModalDialog: zombie.ui.ModalDialog;
  export const SCButton: zombie.ui.SpeedControls$SCButton;
  export const UI_BodyPart: zombie.ui.UI_BodyPart;
  export const ObjectTooltip: zombie.ui.ObjectTooltip;
  export const RadarPanel: zombie.ui.RadarPanel;
  export const CGlobalObjectSystem: zombie.globalObjects.CGlobalObjectSystem;
  export const GlobalObject: zombie.globalObjects.GlobalObject;
  export const CGlobalObjects: zombie.globalObjects.CGlobalObjects;
  export const CGlobalObject: zombie.globalObjects.CGlobalObject;
  export const SGlobalObject: zombie.globalObjects.SGlobalObject;
  export const GlobalObjectSystem: zombie.globalObjects.GlobalObjectSystem;
  export const SGlobalObjectSystem: zombie.globalObjects.SGlobalObjectSystem;
  export const SGlobalObjects: zombie.globalObjects.SGlobalObjects;
  export const Exposer: zombie.Lua.LuaManager$Exposer;
  export const LuaManager: zombie.Lua.LuaManager;
  export const LuaEventManager: zombie.Lua.LuaEventManager;
  export const LuaFileWriter: zombie.Lua.LuaManager$GlobalObject$LuaFileWriter;
  export const Event: zombie.Lua.Event;
  export const Remove: zombie.Lua.Event$Remove;
  export const Add: zombie.Lua.Event$Add;
  export const MapObjects: zombie.Lua.MapObjects;
  export const ParameterCharacterMovementSpeed: zombie.audio.parameters.ParameterCharacterMovementSpeed;
  export const ParameterZombieState: zombie.audio.parameters.ParameterZombieState;
  export const MovementType: zombie.audio.parameters.ParameterCharacterMovementSpeed$MovementType;
  export const FMODParameterList: zombie.audio.FMODParameterList;
  export const BaseSoundBank: zombie.audio.BaseSoundBank;
  export const DummySoundBank: zombie.audio.DummySoundBank;
  export const FMODParameter: zombie.audio.FMODParameter;
  export const MasterVolume: zombie.audio.GameSound$MasterVolume;
  export const DummySoundEmitter: zombie.audio.DummySoundEmitter;
  export const BaseSoundEmitter: zombie.audio.BaseSoundEmitter;
  export const GameSound: zombie.audio.GameSound;
  export const GameSoundClip: zombie.audio.GameSoundClip;
  export const BloodBodyPartType: zombie.characterTextures.BloodBodyPartType;
  export const BloodClothingType: zombie.characterTextures.BloodClothingType;
  export const TexturePackTextures: zombie.fileSystem.FileSystem$TexturePackTextures;
  export const SubTexture: zombie.fileSystem.FileSystem$SubTexture;
  export const FileTask: zombie.fileSystem.FileTask;
  export const IFile: zombie.fileSystem.IFile;
  export const FileSeekMode: zombie.fileSystem.FileSeekMode;
  export const DeviceList: zombie.fileSystem.DeviceList;
  export const IFileDevice: zombie.fileSystem.IFileDevice;
  export const IFileTask2Callback: zombie.fileSystem.IFileTask2Callback;
  export const ActiveMods: zombie.modding.ActiveMods;
  export const ITexture: zombie.interfaces.ITexture;
  export const DebugOG: zombie.debug.options.Character$DebugOG;
  export const OffscreenBuffer: zombie.debug.options.OffscreenBuffer;
  export const Character: zombie.debug.options.Character;
  export const RenderOG: zombie.debug.options.Character$DebugOG$RenderOG;
  export const AnimLayerOG: zombie.debug.options.Animation$AnimLayerOG;
  export const Walls: zombie.debug.options.Terrain$RenderTiles$IsoGridSquare$Walls;
  export const Weather: zombie.debug.options.Weather;
  export const IDebugOption: zombie.debug.options.IDebugOption;
  export const Terrain: zombie.debug.options.Terrain;
  export const Floor: zombie.debug.options.Terrain$RenderTiles$IsoGridSquare$Floor;
  export const Network: zombie.debug.options.Network;
  export const AnimateOG: zombie.debug.options.Character$DebugOG$AnimateOG;
  export const Animation: zombie.debug.options.Animation;
  export const RenderTiles: zombie.debug.options.Terrain$RenderTiles;
  export const Client: zombie.debug.options.Network$Client;
  export const SharedSkelesOG: zombie.debug.options.Animation$SharedSkelesOG;
  export const IDebugOptionGroup: zombie.debug.options.IDebugOptionGroup;
  export const PublicServerUtil: zombie.debug.options.Network$PublicServerUtil;
  export const DebugLog: zombie.debug.DebugLog;
  export const Checks: zombie.debug.DebugOptions$Checks;
  export const DebugType: zombie.debug.DebugType;
  export const LogSeverity: zombie.debug.LogSeverity;
  export const DebugOptions: zombie.debug.DebugOptions;
  export const DebugLogStream: zombie.debug.DebugLogStream;
  export const SleepingEventData: zombie.ai.sadisticAIDirector.SleepingEventData;
  export const SleepingEvent: zombie.ai.sadisticAIDirector.SleepingEvent;
  export const IStatePermissions: zombie.ai.permission.IStatePermissions;
  export const AStarPathFinderResult: zombie.ai.astar.AStarPathFinderResult;
  export const Mover: zombie.ai.astar.Mover;
  export const Step: zombie.ai.astar.Path$Step;
  export const PathFindProgress: zombie.ai.astar.AStarPathFinder$PathFindProgress;
  export const IdleState: zombie.ai.states.IdleState;
  export const PlayerFallDownState: zombie.ai.states.PlayerFallDownState;
  export const PlayerEmoteState: zombie.ai.states.PlayerEmoteState;
  export const SmashWindowState: zombie.ai.states.SmashWindowState;
  export const BurntToDeath: zombie.ai.states.BurntToDeath;
  export const CrawlingZombieTurnState: zombie.ai.states.CrawlingZombieTurnState;
  export const ThumpState: zombie.ai.states.ThumpState;
  export const OpenWindowState: zombie.ai.states.OpenWindowState;
  export const ZombieFallDownState: zombie.ai.states.ZombieFallDownState;
  export const LungeState: zombie.ai.states.LungeState;
  export const PlayerExtState: zombie.ai.states.PlayerExtState;
  export const PlayerFallingState: zombie.ai.states.PlayerFallingState;
  export const ClimbSheetRopeState: zombie.ai.states.ClimbSheetRopeState;
  export const PlayerHitReactionState: zombie.ai.states.PlayerHitReactionState;
  export const ClimbOverWallState: zombie.ai.states.ClimbOverWallState;
  export const CustomComparator: zombie.ai.states.SwipeStatePlayer$CustomComparator;
  export const AttackState: zombie.ai.states.AttackState;
  export const PlayerKnockedDown: zombie.ai.states.PlayerKnockedDown;
  export const SwipeStatePlayer: zombie.ai.states.SwipeStatePlayer;
  export const FakeDeadAttackState: zombie.ai.states.FakeDeadAttackState;
  export const ZombieReanimateState: zombie.ai.states.ZombieReanimateState;
  export const StaggerBackState: zombie.ai.states.StaggerBackState;
  export const ZombieOnGroundState: zombie.ai.states.ZombieOnGroundState;
  export const ClimbOverFenceState: zombie.ai.states.ClimbOverFenceState;
  export const PlayerOnGroundState: zombie.ai.states.PlayerOnGroundState;
  export const WalkTowardState: zombie.ai.states.WalkTowardState;
  export const PlayerGetUpState: zombie.ai.states.PlayerGetUpState;
  export const ZombieIdleState: zombie.ai.states.ZombieIdleState;
  export const ClimbThroughWindowState: zombie.ai.states.ClimbThroughWindowState;
  export const ClimbDownSheetRopeState: zombie.ai.states.ClimbDownSheetRopeState;
  export const ZombieGetDownState: zombie.ai.states.ZombieGetDownState;
  export const FakeDeadZombieState: zombie.ai.states.FakeDeadZombieState;
  export const PlayerHitReactionPVPState: zombie.ai.states.PlayerHitReactionPVPState;
  export const PlayerSitOnGroundState: zombie.ai.states.PlayerSitOnGroundState;
  export const CloseWindowState: zombie.ai.states.CloseWindowState;
  export const PathFindState: zombie.ai.states.PathFindState;
  export const FishingState: zombie.ai.states.FishingState;
  export const PlayerStrafeState: zombie.ai.states.PlayerStrafeState;
  export const PlayerActionsState: zombie.ai.states.PlayerActionsState;
  export const ZombieSittingState: zombie.ai.states.ZombieSittingState;
  export const FitnessState: zombie.ai.states.FitnessState;
  export const PlayerAimState: zombie.ai.states.PlayerAimState;
  export const ZombieGetUpState: zombie.ai.states.ZombieGetUpState;
  export const GameCharacterAIBrain: zombie.ai.GameCharacterAIBrain;
  export const StateMachine: zombie.ai.StateMachine;
  export const MapKnowledge: zombie.ai.MapKnowledge;
  export const WalkingOnTheSpot: zombie.ai.WalkingOnTheSpot;
  export const KnownBlockedEdges: zombie.ai.KnownBlockedEdges;
  export const AIBrainPlayerControlVars: zombie.ai.AIBrainPlayerControlVars;
  export const SubstateSlot: zombie.ai.StateMachine$SubstateSlot;
  export const Mouse: zombie.input.Mouse;
  export const Joypad: zombie.input.JoypadManager$Joypad;
  export const GameKeyboard: zombie.input.GameKeyboard;
  export const JoypadManager: zombie.input.JoypadManager;
  export const IGLBufferObject: zombie.core.VBO.IGLBufferObject;
  export const Shader: zombie.core.skinnedmodel.shader.Shader;
  export const RuntimeAnimationScript: zombie.core.skinnedmodel.runtime.RuntimeAnimationScript;
  export const HumanVisual: zombie.core.skinnedmodel.visual.HumanVisual;
  export const BaseVisual: zombie.core.skinnedmodel.visual.BaseVisual;
  export const ItemVisual: zombie.core.skinnedmodel.visual.ItemVisual;
  export const ItemVisuals: zombie.core.skinnedmodel.visual.ItemVisuals;
  export const ModelMesh: zombie.core.skinnedmodel.model.ModelMesh;
  export const VertexArray: zombie.core.skinnedmodel.model.VertexBufferObject$VertexArray;
  export const VertexElement: zombie.core.skinnedmodel.model.VertexBufferObject$VertexElement;
  export const VehicleSubModelInstance: zombie.core.skinnedmodel.model.VehicleSubModelInstance;
  export const VertexFormat: zombie.core.skinnedmodel.model.VertexBufferObject$VertexFormat;
  export const UInt4: zombie.core.skinnedmodel.model.UInt4;
  export const SkinningBone: zombie.core.skinnedmodel.model.SkinningBone;
  export const FrameLightBlendStatus: zombie.core.skinnedmodel.model.ModelInstance$FrameLightBlendStatus;
  export const ModelInstanceRenderData: zombie.core.skinnedmodel.model.ModelInstanceRenderData;
  export const VertexPositionNormalTangentTextureSkin: zombie.core.skinnedmodel.model.VertexPositionNormalTangentTextureSkin;
  export const VertexType: zombie.core.skinnedmodel.model.VertexBufferObject$VertexType;
  export const SoftwareModelMeshInstance: zombie.core.skinnedmodel.model.SoftwareModelMeshInstance;
  export const ModelSlotRenderData: zombie.core.skinnedmodel.model.ModelSlotRenderData;
  export const PlayerData: zombie.core.skinnedmodel.model.ModelInstance$PlayerData;
  export const ModelInstanceTextureCreator: zombie.core.skinnedmodel.model.ModelInstanceTextureCreator;
  export const MeshAssetParams: zombie.core.skinnedmodel.model.ModelMesh$MeshAssetParams;
  export const ModelInstanceRenderDataList: zombie.core.skinnedmodel.model.ModelInstanceRenderDataList;
  export const AnimationAssetParams: zombie.core.skinnedmodel.model.AnimationAsset$AnimationAssetParams;
  export const EffectLight: zombie.core.skinnedmodel.model.ModelInstance$EffectLight;
  export const ModelInstanceTextureInitializer: zombie.core.skinnedmodel.model.ModelInstanceTextureInitializer;
  export const VertexBufferObject: zombie.core.skinnedmodel.model.VertexBufferObject;
  export const FrameLightInfo: zombie.core.skinnedmodel.model.ModelInstance$FrameLightInfo;
  export const Vbo: zombie.core.skinnedmodel.model.VertexBufferObject$Vbo;
  export const ModelInstance: zombie.core.skinnedmodel.model.ModelInstance;
  export const ModelAssetParams: zombie.core.skinnedmodel.model.Model$ModelAssetParams;
  export const SoftwareModelMesh: zombie.core.skinnedmodel.model.SoftwareModelMesh;
  export const AnimationAsset: zombie.core.skinnedmodel.model.AnimationAsset;
  export const SkinningBoneHierarchy: zombie.core.skinnedmodel.model.SkinningBoneHierarchy;
  export const BeginMode: zombie.core.skinnedmodel.model.VertexBufferObject$BeginMode;
  export const SkinningData: zombie.core.skinnedmodel.model.SkinningData;
  export const CharacterMask: zombie.core.skinnedmodel.model.CharacterMask;
  export const AnimatorDebugMonitor: zombie.core.skinnedmodel.advancedanimation.debug.AnimatorDebugMonitor;
  export const AnimTransition: zombie.core.skinnedmodel.advancedanimation.AnimTransition;
  export const AdvancedAnimator: zombie.core.skinnedmodel.advancedanimation.AdvancedAnimator;
  export const AnimationVariableType: zombie.core.skinnedmodel.advancedanimation.AnimationVariableType;
  export const IAnimationVariableSlot: zombie.core.skinnedmodel.advancedanimation.IAnimationVariableSlot;
  export const AnimLayer: zombie.core.skinnedmodel.advancedanimation.AnimLayer;
  export const IAnimEventCallback: zombie.core.skinnedmodel.advancedanimation.IAnimEventCallback;
  export const LiveAnimNode: zombie.core.skinnedmodel.advancedanimation.LiveAnimNode;
  export const AnimationVariableSource: zombie.core.skinnedmodel.advancedanimation.AnimationVariableSource;
  export const CallbackGetStrongTyped: zombie.core.skinnedmodel.advancedanimation.AnimationVariableSlotCallbackFloat$CallbackGetStrongTyped;
  export const SubLayerSlot: zombie.core.skinnedmodel.advancedanimation.AdvancedAnimator$SubLayerSlot;
  export const AnimationSet: zombie.core.skinnedmodel.advancedanimation.AnimationSet;
  export const Anim2DBlendPicker: zombie.core.skinnedmodel.advancedanimation.Anim2DBlendPicker;
  export const AnimationVariableHandle: zombie.core.skinnedmodel.advancedanimation.AnimationVariableHandle;
  export const Anim2DBlend: zombie.core.skinnedmodel.advancedanimation.Anim2DBlend;
  export const Anim2DBlendTriangle: zombie.core.skinnedmodel.advancedanimation.Anim2DBlendTriangle;
  export const PickResults: zombie.core.skinnedmodel.advancedanimation.Anim2DBlendPicker$PickResults;
  export const AnimCondition: zombie.core.skinnedmodel.advancedanimation.AnimCondition;
  export const AnimBoneWeight: zombie.core.skinnedmodel.advancedanimation.AnimBoneWeight;
  export const AnimEventTime: zombie.core.skinnedmodel.advancedanimation.AnimEvent$AnimEventTime;
  export const IAnimationVariableSource: zombie.core.skinnedmodel.advancedanimation.IAnimationVariableSource;
  export const AnimationVariableSlotCallbackFloat: zombie.core.skinnedmodel.advancedanimation.AnimationVariableSlotCallbackFloat;
  export const AnimState: zombie.core.skinnedmodel.advancedanimation.AnimState;
  export const AnimNode: zombie.core.skinnedmodel.advancedanimation.AnimNode;
  export const AnimEvent: zombie.core.skinnedmodel.advancedanimation.AnimEvent;
  export const IAnimatable: zombie.core.skinnedmodel.advancedanimation.IAnimatable;
  export const CallbackSetStrongTyped: zombie.core.skinnedmodel.advancedanimation.AnimationVariableSlotCallbackFloat$CallbackSetStrongTyped;
  export const AnimationPlayerRecorder: zombie.core.skinnedmodel.animation.debug.AnimationPlayerRecorder;
  export const SharedSkeleAnimationRepository: zombie.core.skinnedmodel.animation.sharedskele.SharedSkeleAnimationRepository;
  export const SharedSkeleAnimationTrack: zombie.core.skinnedmodel.animation.sharedskele.SharedSkeleAnimationTrack;
  export const AnimationMultiTrack: zombie.core.skinnedmodel.animation.AnimationMultiTrack;
  export const BoneAxis: zombie.core.skinnedmodel.animation.BoneAxis;
  export const AnimationPlayer: zombie.core.skinnedmodel.animation.AnimationPlayer;
  export const AnimTrackSampler: zombie.core.skinnedmodel.animation.AnimTrackSampler;
  export const SoftwareSkinnedModelAnim: zombie.core.skinnedmodel.animation.SoftwareSkinnedModelAnim;
  export const Keyframe: zombie.core.skinnedmodel.animation.Keyframe;
  export const IAnimListener: zombie.core.skinnedmodel.animation.IAnimListener;
  export const AnimationBoneBinding: zombie.core.skinnedmodel.animation.AnimationBoneBinding;
  export const AnimationClip: zombie.core.skinnedmodel.animation.AnimationClip;
  export const AnimationTrack: zombie.core.skinnedmodel.animation.AnimationTrack;
  export const StaticAnimation: zombie.core.skinnedmodel.animation.StaticAnimation;
  export const RandomData: zombie.core.skinnedmodel.population.ClothingItemReference$RandomData;
  export const HairStyles: zombie.core.skinnedmodel.population.HairStyles;
  export const BeardStyles: zombie.core.skinnedmodel.population.BeardStyles;
  export const BeardStyle: zombie.core.skinnedmodel.population.BeardStyle;
  export const Outfit: zombie.core.skinnedmodel.population.Outfit;
  export const ClothingItem: zombie.core.skinnedmodel.population.ClothingItem;
  export const ClothingItemReference: zombie.core.skinnedmodel.population.ClothingItemReference;
  export const Alternate: zombie.core.skinnedmodel.population.HairStyle$Alternate;
  export const HairStyle: zombie.core.skinnedmodel.population.HairStyle;
  export const ModAnimations: zombie.core.skinnedmodel.ModelManager$ModAnimations;
  export const Vector4: zombie.core.skinnedmodel.Vector4;
  export const ModelManager: zombie.core.skinnedmodel.ModelManager;
  export const ModelSlot: zombie.core.skinnedmodel.ModelManager$ModelSlot;
  export const GenericDrawer: zombie.core.textures.TextureDraw$GenericDrawer;
  export const MultiTextureFBO2: zombie.core.textures.MultiTextureFBO2;
  export const Mask: zombie.core.textures.Mask;
  export const TextureIDAssetParams: zombie.core.textures.TextureID$TextureIDAssetParams;
  export const IGLFramebufferObject: zombie.core.textures.IGLFramebufferObject;
  export const Texture: zombie.core.textures.Texture;
  export const TextureDraw: zombie.core.textures.TextureDraw;
  export const TextureFBO: zombie.core.textures.TextureFBO;
  export const ColorInfo: zombie.core.textures.ColorInfo;
  export const MipMapLevel: zombie.core.textures.MipMapLevel;
  export const TexturePackPage: zombie.core.textures.TexturePackPage;
  export const ImageData: zombie.core.textures.ImageData;
  export const TextureID: zombie.core.textures.TextureID;
  export const PZFileformat: zombie.core.textures.Texture$PZFileformat;
  export const SubTextureInfo: zombie.core.textures.TexturePackPage$SubTextureInfo;
  export const TextureAssetParams: zombie.core.textures.Texture$TextureAssetParams;
  export const ZLogger: zombie.core.logger.ZLogger;
  export const PlayerRenderSettings: zombie.core.opengl.RenderSettings$PlayerRenderSettings;
  export const ShaderProgram: zombie.core.opengl.ShaderProgram;
  export const SharedVertexBufferObjects: zombie.core.opengl.SharedVertexBufferObjects;
  export const IShaderProgramListener: zombie.core.opengl.IShaderProgramListener;
  export const RenderSettings: zombie.core.opengl.RenderSettings;
  export const Uniform: zombie.core.opengl.ShaderProgram$Uniform;
  export const ShaderUnit: zombie.core.opengl.ShaderUnit;
  export const ByteBufferWriter: zombie.core.network.ByteBufferWriter;
  export const UdpConnection: zombie.core.raknet.UdpConnection;
  export const ChecksumState: zombie.core.raknet.UdpConnection$ChecksumState;
  export const MPClientStatistic: zombie.core.raknet.UdpConnection$MPClientStatistic;
  export const RakNetPeerInterface: zombie.core.raknet.RakNetPeerInterface;
  export const Input: zombie.core.input.Input;
  export const AngelCodeFont: zombie.core.fonts.AngelCodeFont;
  export const CharDefTexture: zombie.core.fonts.AngelCodeFont$CharDefTexture;
  export const CharDef: zombie.core.fonts.AngelCodeFont$CharDef;
  export const IntGrid: zombie.core.utils.IntGrid;
  export const WrappedBuffer: zombie.core.utils.WrappedBuffer;
  export const UpdateTimer: zombie.core.utils.UpdateTimer;
  export const UpdateLimit: zombie.core.utils.UpdateLimit;
  export const BooleanGrid: zombie.core.utils.BooleanGrid;
  export const BoundedQueue: zombie.core.utils.BoundedQueue<any>;
  export const OnceEvery: zombie.core.utils.OnceEvery;
  export const CarController: zombie.core.physics.CarController;
  export const GearInfo: zombie.core.physics.CarController$GearInfo;
  export const ClientControls: zombie.core.physics.CarController$ClientControls;
  export const BulletVariables: zombie.core.physics.CarController$BulletVariables;
  export const SpriteRenderState: zombie.core.sprite.SpriteRenderState;
  export const SpriteRendererStates: zombie.core.sprite.SpriteRendererStates;
  export const SpriteRenderStateUI: zombie.core.sprite.SpriteRenderStateUI;
  export const GenericSpriteRenderState: zombie.core.sprite.GenericSpriteRenderState;
  export const SteamUGCDetails: zombie.core.znet.SteamUGCDetails;
  export const ZNetFileChunk: zombie.core.znet.ZNetFileChunk;
  export const ZNetSessionState: zombie.core.znet.ZNetSessionState;
  export const SteamWorkshopItem: zombie.core.znet.SteamWorkshopItem;
  export const ZNetFileAnnounce: zombie.core.znet.ZNetFileAnnounce;
  export const ItemState: zombie.core.znet.SteamWorkshopItem$ItemState;
  export const ZNetStatistics: zombie.core.znet.ZNetStatistics;
  export const SteamFriend: zombie.core.znet.SteamFriend;
  export const SideOfLine: zombie.core.math.PZMath$SideOfLine;
  export const vector2: zombie.core.math.PZMath$UnitTests$vector2;
  export const PZMath: zombie.core.math.PZMath;
  export const NonBlockingHashMap: zombie.core.Collections.NonBlockingHashMap<any, any>;
  export const PropertyContainer: zombie.core.properties.PropertyContainer;
  export const MostTested: zombie.core.properties.PropertyContainer$MostTested;
  export const AlphaOp: zombie.core.Styles.AlphaOp;
  export const AbstractStyle: zombie.core.Styles.AbstractStyle;
  export const ShortList: zombie.core.Styles.ShortList;
  export const Style: zombie.core.Styles.Style;
  export const GeometryData: zombie.core.Styles.GeometryData;
  export const FloatList: zombie.core.Styles.FloatList;
  export const StashContainer: zombie.core.stash.StashContainer;
  export const Stash: zombie.core.stash.Stash;
  export const StashBuilding: zombie.core.stash.StashBuilding;
  export const StashAnnotation: zombie.core.stash.StashAnnotation;
  export const StashSystem: zombie.core.stash.StashSystem;
  export const Colors: zombie.core.Colors;
  export const Language: zombie.core.Language;
  export const Translator: zombie.core.Translator;
  export const Color: zombie.core.Color;
  export const ImmutableColor: zombie.core.ImmutableColor;
  export const Clipboard: zombie.core.Clipboard;
  export const PerformanceSettings: zombie.core.PerformanceSettings;
  export const RingBuffer: zombie.core.SpriteRenderer$RingBuffer;
  export const SpriteRenderer: zombie.core.SpriteRenderer;
  export const WallShaderTexRender: zombie.core.SpriteRenderer$WallShaderTexRender;
  export const Core: zombie.core.Core;
  export const GameVersion: zombie.core.GameVersion;
  export const PZArrayList: zombie.util.list.PZArrayList<any>;
  export const PZCalendar: zombie.util.PZCalendar;
  export const BufferedRandomAccessFile: zombie.util.BufferedRandomAccessFile;
  export const Pool: zombie.util.Pool<any>;
  export const AddCoopPlayer: zombie.util.AddCoopPlayer;
  export const IPooledObject: zombie.util.IPooledObject;
  export const ChatSettings: zombie.chat.ChatSettings;
  export const ChatMessage: zombie.chat.ChatMessage;
  export const ChatBase: zombie.chat.ChatBase;
  export const ChatElement: zombie.chat.ChatElement;
  export const NineGridTexture: zombie.chat.NineGridTexture;
  export const ChatTab: zombie.chat.ChatTab;
  export const ServerChatMessage: zombie.chat.ServerChatMessage;
  export const FontSize: zombie.chat.ChatSettings$FontSize;
  export const ChatMode: zombie.chat.ChatMode;
  export const GameStateMachine: zombie.gameStates.GameStateMachine;
  export const ChooseGameInfo: zombie.gameStates.ChooseGameInfo;
  export const LoadingQueueState: zombie.gameStates.LoadingQueueState;
  export const Mod: zombie.gameStates.ChooseGameInfo$Mod;
  export const AttachmentEditorState: zombie.gameStates.AttachmentEditorState;
  export const GameLoadingState: zombie.gameStates.GameLoadingState;
  export const MainScreenState: zombie.gameStates.MainScreenState;
  export const GameState: zombie.gameStates.GameState;
  export const PackFile: zombie.gameStates.ChooseGameInfo$PackFile;
  export const AnimationViewerState: zombie.gameStates.AnimationViewerState;
  export const ConnectToServerState: zombie.gameStates.ConnectToServerState;
  export const DebugGlobalObjectState: zombie.gameStates.DebugGlobalObjectState;
  export const DebugChunkState: zombie.gameStates.DebugChunkState;
  export const Credit: zombie.gameStates.MainScreenState$Credit;
  export const SpawnOrigin: zombie.gameStates.ChooseGameInfo$SpawnOrigin;
  export const TileDef: zombie.gameStates.ChooseGameInfo$TileDef;
  export const StateAction: zombie.gameStates.GameStateMachine$StateAction;
  export const ScreenElement: zombie.gameStates.MainScreenState$ScreenElement;
  export const ErosionObj: zombie.erosion.obj.ErosionObj;
  export const ErosionSeason: zombie.erosion.season.ErosionSeason;
  export const Data: zombie.erosion.categories.ErosionCategory$Data;
  export const ErosionCategory: zombie.erosion.categories.ErosionCategory;
  export const ErosionConfig: zombie.erosion.ErosionConfig;
  export const Debug: zombie.erosion.ErosionConfig$Debug;
  export const Time: zombie.erosion.ErosionConfig$Time;
  export const ErosionData: zombie.erosion.ErosionData;
  export const ErosionMain: zombie.erosion.ErosionMain;
  export const Seeds: zombie.erosion.ErosionConfig$Seeds;
  export const Season: zombie.erosion.ErosionConfig$Season;
  export const Square: zombie.erosion.ErosionData$Square;
  export const ErosionRegions: zombie.erosion.ErosionRegions;
  export const Region: zombie.erosion.ErosionRegions$Region;
  export const AssetPath: zombie.asset.AssetPath;
  export const AssetType: zombie.asset.AssetType;
  export const AssetManager: zombie.asset.AssetManager;
  export const AssetParams: zombie.asset.AssetManager$AssetParams;
  export const ObserverCallback: zombie.asset.Asset$ObserverCallback;
  export const Asset: zombie.asset.Asset;
  export const AssetManagerTable: zombie.asset.AssetManagers$AssetManagerTable;
  export const AssetTable: zombie.asset.AssetManager$AssetTable;
  export const AssetManagers: zombie.asset.AssetManagers;
  export const AssetStateObserver: zombie.asset.AssetStateObserver;
  export const ConfigOption: zombie.config.ConfigOption;
  export const BooleanConfigOption: zombie.config.BooleanConfigOption;
  export const DoubleConfigOption: zombie.config.DoubleConfigOption;
  export const IntegerConfigOption: zombie.config.IntegerConfigOption;
  export const StringConfigOption: zombie.config.StringConfigOption;
  export const EnumConfigOption: zombie.config.EnumConfigOption;
  export const OSValidator: zombie.GameWindow$OSValidator;
  export const GameSounds: zombie.GameSounds;
  export const DummySoundManager: zombie.DummySoundManager;
  export const DoubleSandboxOption: zombie.SandboxOptions$DoubleSandboxOption;
  export const TexturePack: zombie.GameWindow$TexturePack;
  export const WorldSound: zombie.WorldSoundManager$WorldSound;
  export const ZombieLore: zombie.SandboxOptions$ZombieLore;
  export const Ambient: zombie.AmbientStreamManager$Ambient;
  export const BooleanSandboxOption: zombie.SandboxOptions$BooleanSandboxOption;
  export const SoundManager: zombie.SoundManager;
  export const GameWindow: zombie.GameWindow;
  export const WorldSoundManager: zombie.WorldSoundManager;
  export const BaseAmbientStreamManager: zombie.BaseAmbientStreamManager;
  export const GameTime: zombie.GameTime;
  export const SandboxOption: zombie.SandboxOptions$SandboxOption;
  export const SystemDisabler: zombie.SystemDisabler;
  export const ZombieConfig: zombie.SandboxOptions$ZombieConfig;
  export const AmbientStreamManager: zombie.AmbientStreamManager;
  export const IntegerSandboxOption: zombie.SandboxOptions$IntegerSandboxOption;
  export const Descriptor: zombie.SharedDescriptors$Descriptor;
  export const ResultBiggestSound: zombie.WorldSoundManager$ResultBiggestSound;
  export const AmbientSoundEffect: zombie.SoundManager$AmbientSoundEffect;
  export const BaseSoundManager: zombie.BaseSoundManager;
  export const WorldSoundEmitter: zombie.AmbientStreamManager$WorldSoundEmitter;
  export const SharedDescriptors: zombie.SharedDescriptors;
  export const VirtualZombieManager: zombie.VirtualZombieManager;
  export const MapGroups: zombie.MapGroups;
  export const EnumSandboxOption: zombie.SandboxOptions$EnumSandboxOption;
  export const FliesSound: zombie.FliesSound;
  export const ZomboidBitFlag: zombie.ZomboidBitFlag;
  export const AnimTimer: zombie.GameTime$AnimTimer;
  export const AmbientLoop: zombie.AmbientStreamManager$AmbientLoop;
  export const StringSandboxOption: zombie.SandboxOptions$StringSandboxOption;
  export const Quaternionfc: org.joml.Quaternionfc;
  export const Matrix4x3fc: org.joml.Matrix4x3fc;
  export const Quaternionf: org.joml.Quaternionf;
  export const Matrix3fc: org.joml.Matrix3fc;
  export const Matrix2fc: org.joml.Matrix2fc;
  export const Matrix4fc: org.joml.Matrix4fc;
  export const Vector3fc: org.joml.Vector3fc;
  export const Matrix4f: org.joml.Matrix4f;
  export const Vector2fc: org.joml.Vector2fc;
  export const Vector4f: org.joml.Vector4f;
  export const Vector3d: org.joml.Vector3d;
  export const Matrix3f: org.joml.Matrix3f;
  export const Vector2f: org.joml.Vector2f;
  export const Matrix3x2fc: org.joml.Matrix3x2fc;
  export const Vector3f: org.joml.Vector3f;
  export const Quaternion: org.lwjgl.util.vector.Quaternion;
  export const ReadableColor: org.lwjgl.util.ReadableColor;
  export const Buffer: org.lwjgl.glfw.GLFWImage$Buffer;
  export const Keyboard: org.lwjglx.input.Keyboard;
  export const Cursor: org.lwjglx.input.Cursor;
  export const KeyEventQueue: org.lwjglx.input.KeyEventQueue;
  export const Controller: org.lwjglx.input.Controller;
  export const FMODVoice: fmod.fmod.FMODVoice;
  export const FMOD_STUDIO_EVENT_DESCRIPTION: fmod.fmod.FMOD_STUDIO_EVENT_DESCRIPTION;
  export const FMOD_STUDIO_PARAMETER_DESCRIPTION: fmod.fmod.FMOD_STUDIO_PARAMETER_DESCRIPTION;
  export const EmitterType: fmod.fmod.EmitterType;
  export const FMODSoundBank: fmod.fmod.FMODSoundBank;
  export const FMODSoundEmitter: fmod.fmod.FMODSoundEmitter;
  export const BaseSoundListener: fmod.fmod.BaseSoundListener;
  export const FMOD_STUDIO_PARAMETER_ID: fmod.fmod.FMOD_STUDIO_PARAMETER_ID;
  export const FMODFootstep: fmod.fmod.FMODFootstep;
  export const FMODAudio: fmod.fmod.FMODAudio;
  export const IFMODParameterUpdater: fmod.fmod.IFMODParameterUpdater;
  export const Audio: fmod.fmod.Audio;
  export const TIntIterator: gnu.trove.iterator.TIntIterator;
  export const TLongObjectIterator: gnu.trove.iterator.TLongObjectIterator<any>;
  export const TIntFunction: gnu.trove._function.TIntFunction;
  export const TObjectFunction: gnu.trove._function.TObjectFunction<any, any>;
  export const TShortHashSet: gnu.trove.set.hash.TShortHashSet;
  export const TLongSet: gnu.trove.set.TLongSet;
  export const TLongObjectProcedure: gnu.trove.procedure.TLongObjectProcedure<any>;
  export const TObjectProcedure: gnu.trove.procedure.TObjectProcedure<any>;
  export const TIntProcedure: gnu.trove.procedure.TIntProcedure;
  export const TObjectObjectProcedure: gnu.trove.procedure.TObjectObjectProcedure<any, any>;
  export const TLongProcedure: gnu.trove.procedure.TLongProcedure;
  export const TShortArrayList: gnu.trove.list.array.TShortArrayList;
  export const TIntArrayList: gnu.trove.list.array.TIntArrayList;
  export const TFloatArrayList: gnu.trove.list.array.TFloatArrayList;
  export const TIntList: gnu.trove.list.TIntList;
  export const THashMap: gnu.trove.map.hash.THashMap<any, any>;
  export const TIntObjectHashMap: gnu.trove.map.hash.TIntObjectHashMap<any>;
  export const TLongObjectMap: gnu.trove.map.TLongObjectMap<any>;

  // File: helper.d.ts
  ///////////////////////////////////////////////////////////////////

  
  /** @noSelf **/ export function addEventListener(id: string, listener: any): void;
  /** @noSelf **/ export function removeEventListener(id: string, listener: any): void;
  
  /**
   * Summary:
   *   Converts a string (of the given base) to a number
   *
   * Prototype:
   *   n = tonumber (n, base)
   *
   * Description:
   *   Converts n to a number using the optional base (default 10). Base can be from 2 to 36. For bases > 10 the letters a-z (not case sensitive) represent the digits. (eg. F is 15).
   *   For decimal numbers you can supply fractions and exponents. Others should be unsigned.
   *   Returns nil if the number cannot be converted.
   *
   *   print (tonumber ("100100", 2)) --> 36
   *   print (tonumber ("1e5")) --> 100000
   *   print (tonumber ("1EF", 16)) --> 495
   *
   *   You can use tonumber as a quick check if a variable contains something convertable to a number.
   *
   *   print (tonumber ("abc")) --> nil
   *   print (tonumber ("-43")) --> -43
   *   print (tonumber (-43))   --> -43
   *
   *   To see if the variable actually is already a number type, use the "type" function:
   *
   *   print (type ("-43")) --> string
   *   print (type (-43))   --> number
   *
   * @param n The number as a string.
   * @param base The base of the number.
   */
  export function tonumber(this: void, n: string, base: number): number;
  
  /**
   * Summary:
   *
   *   Converts its argument to a string
   *
   * Prototype:
   *
   *   s = tostring (a)
   *
   * Description:
   *
   *   Converts its argument to a string in a reasonable format. If a __tostring metatable field is found, that is used for the conversion.
   *
   *
   *   print (tostring (print)) --> function: 0205A980
   *   print (tostring (_G)) --> table: 02072780
   *   print (tostring (1.23e10)) --> 12300000000
   *
   *   -- use __tostring to print a table
   *
   *   t = { age = 42, height = 102 }
   *
   *   setmetatable (t,
   *     {
   *     __tostring = function (t)
   *       return "person of age " .. t.age
   *       end -- __tostring
   *     }
   *    )
   *
   *   print (t) --> person of age 42
   */
  export function tostring(this: void, arg: any): string;
  
  /**
   * TypeScript alias for:
   * ```lua
   * local foo = _G[id]
   * ```
   */
  export function global(this: void, id: any): any;
  
  /**
   * Parses the string and returns the compiled chunk as a function. Does not execute it.
   * If the string cannot be parsed returns nil plus an error message.
   * The optional debugname is used in debug error messages.
   *
   * f = assert (loadstring ("print 'hello, world'"))
   * f ()   --> hello, world
   *
   * You can avoid the intermediate variable "f" in this example by simply putting the brackets on the same line:
   *
   * assert (loadstring ("print 'hello, world'")) () --> hello, world
   *
   * If the string was produced by string.dump, loadstring converts it back into the original function.
   *
   * function f () print "hello, world" end
   * s = string.dump (f)
   * assert (loadstring (s)) () --> hello, world
   *
   * @param lua The string containing Lua code to load.
   *
   * @returns The result Lua function.
   */
  export function loadstring(this: void, lua: string): any;
  
  /**
   * Executes loadstring(lua).
   *
   * @param lua The string containing Lua code to load.
   *
   * @returns The result Lua function's execution.
   */
  export function execute(this: void, lua: string): any;

  ///////////////////////////////////////////////////////////////////
}
